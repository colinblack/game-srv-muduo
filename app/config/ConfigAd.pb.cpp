// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigAd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigAd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigAd {

namespace {

const ::google::protobuf::Descriptor* AdCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigAd_2eproto() {
  protobuf_AddDesc_ConfigAd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigAd.proto");
  GOOGLE_CHECK(file != NULL);
  AdCPP_descriptor_ = file->message_type(0);
  static const int AdCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdCPP, adcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdCPP, adtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdCPP, cooladcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdCPP, delordercost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdCPP, adcdts_),
  };
  AdCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdCPP_descriptor_,
      AdCPP::default_instance_,
      AdCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdCPP));
  AdInfo_descriptor_ = file->message_type(1);
  static const int AdInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, adinfo_),
  };
  AdInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdInfo_descriptor_,
      AdInfo::default_instance_,
      AdInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigAd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdCPP_descriptor_, &AdCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdInfo_descriptor_, &AdInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigAd_2eproto() {
  delete AdCPP::default_instance_;
  delete AdCPP_reflection_;
  delete AdInfo::default_instance_;
  delete AdInfo_reflection_;
}

void protobuf_AddDesc_ConfigAd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ConfigAd.proto\022\010ConfigAd\"`\n\005AdCPP\022\r\n\005a"
    "dCnt\030\001 \002(\r\022\016\n\006adTime\030\002 \002(\r\022\022\n\ncoolAdCost"
    "\030\003 \002(\r\022\024\n\014delOrderCost\030\004 \002(\r\022\016\n\006adCdTs\030\005"
    " \002(\r\")\n\006AdInfo\022\037\n\006adInfo\030\001 \002(\0132\017.ConfigA"
    "d.AdCPP", 167);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigAd.proto", &protobuf_RegisterTypes);
  AdCPP::default_instance_ = new AdCPP();
  AdInfo::default_instance_ = new AdInfo();
  AdCPP::default_instance_->InitAsDefaultInstance();
  AdInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigAd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigAd_2eproto {
  StaticDescriptorInitializer_ConfigAd_2eproto() {
    protobuf_AddDesc_ConfigAd_2eproto();
  }
} static_descriptor_initializer_ConfigAd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AdCPP::kAdCntFieldNumber;
const int AdCPP::kAdTimeFieldNumber;
const int AdCPP::kCoolAdCostFieldNumber;
const int AdCPP::kDelOrderCostFieldNumber;
const int AdCPP::kAdCdTsFieldNumber;
#endif  // !_MSC_VER

AdCPP::AdCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAd.AdCPP)
}

void AdCPP::InitAsDefaultInstance() {
}

AdCPP::AdCPP(const AdCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAd.AdCPP)
}

void AdCPP::SharedCtor() {
  _cached_size_ = 0;
  adcnt_ = 0u;
  adtime_ = 0u;
  cooladcost_ = 0u;
  delordercost_ = 0u;
  adcdts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdCPP::~AdCPP() {
  // @@protoc_insertion_point(destructor:ConfigAd.AdCPP)
  SharedDtor();
}

void AdCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdCPP_descriptor_;
}

const AdCPP& AdCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAd_2eproto();
  return *default_instance_;
}

AdCPP* AdCPP::default_instance_ = NULL;

AdCPP* AdCPP::New() const {
  return new AdCPP;
}

void AdCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AdCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(adcnt_, adcdts_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAd.AdCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 adCnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adcnt_)));
          set_has_adcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_adTime;
        break;
      }

      // required uint32 adTime = 2;
      case 2: {
        if (tag == 16) {
         parse_adTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adtime_)));
          set_has_adtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coolAdCost;
        break;
      }

      // required uint32 coolAdCost = 3;
      case 3: {
        if (tag == 24) {
         parse_coolAdCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cooladcost_)));
          set_has_cooladcost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_delOrderCost;
        break;
      }

      // required uint32 delOrderCost = 4;
      case 4: {
        if (tag == 32) {
         parse_delOrderCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delordercost_)));
          set_has_delordercost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adCdTs;
        break;
      }

      // required uint32 adCdTs = 5;
      case 5: {
        if (tag == 40) {
         parse_adCdTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adcdts_)));
          set_has_adcdts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAd.AdCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAd.AdCPP)
  return false;
#undef DO_
}

void AdCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAd.AdCPP)
  // required uint32 adCnt = 1;
  if (has_adcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adcnt(), output);
  }

  // required uint32 adTime = 2;
  if (has_adtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->adtime(), output);
  }

  // required uint32 coolAdCost = 3;
  if (has_cooladcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cooladcost(), output);
  }

  // required uint32 delOrderCost = 4;
  if (has_delordercost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delordercost(), output);
  }

  // required uint32 adCdTs = 5;
  if (has_adcdts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->adcdts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAd.AdCPP)
}

::google::protobuf::uint8* AdCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAd.AdCPP)
  // required uint32 adCnt = 1;
  if (has_adcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adcnt(), target);
  }

  // required uint32 adTime = 2;
  if (has_adtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->adtime(), target);
  }

  // required uint32 coolAdCost = 3;
  if (has_cooladcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cooladcost(), target);
  }

  // required uint32 delOrderCost = 4;
  if (has_delordercost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delordercost(), target);
  }

  // required uint32 adCdTs = 5;
  if (has_adcdts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->adcdts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAd.AdCPP)
  return target;
}

int AdCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 adCnt = 1;
    if (has_adcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adcnt());
    }

    // required uint32 adTime = 2;
    if (has_adtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adtime());
    }

    // required uint32 coolAdCost = 3;
    if (has_cooladcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cooladcost());
    }

    // required uint32 delOrderCost = 4;
    if (has_delordercost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delordercost());
    }

    // required uint32 adCdTs = 5;
    if (has_adcdts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adcdts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdCPP::MergeFrom(const AdCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adcnt()) {
      set_adcnt(from.adcnt());
    }
    if (from.has_adtime()) {
      set_adtime(from.adtime());
    }
    if (from.has_cooladcost()) {
      set_cooladcost(from.cooladcost());
    }
    if (from.has_delordercost()) {
      set_delordercost(from.delordercost());
    }
    if (from.has_adcdts()) {
      set_adcdts(from.adcdts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdCPP::CopyFrom(const AdCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AdCPP::Swap(AdCPP* other) {
  if (other != this) {
    std::swap(adcnt_, other->adcnt_);
    std::swap(adtime_, other->adtime_);
    std::swap(cooladcost_, other->cooladcost_);
    std::swap(delordercost_, other->delordercost_);
    std::swap(adcdts_, other->adcdts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdCPP_descriptor_;
  metadata.reflection = AdCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdInfo::kAdInfoFieldNumber;
#endif  // !_MSC_VER

AdInfo::AdInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAd.AdInfo)
}

void AdInfo::InitAsDefaultInstance() {
  adinfo_ = const_cast< ::ConfigAd::AdCPP*>(&::ConfigAd::AdCPP::default_instance());
}

AdInfo::AdInfo(const AdInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAd.AdInfo)
}

void AdInfo::SharedCtor() {
  _cached_size_ = 0;
  adinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdInfo::~AdInfo() {
  // @@protoc_insertion_point(destructor:ConfigAd.AdInfo)
  SharedDtor();
}

void AdInfo::SharedDtor() {
  if (this != default_instance_) {
    delete adinfo_;
  }
}

void AdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdInfo_descriptor_;
}

const AdInfo& AdInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAd_2eproto();
  return *default_instance_;
}

AdInfo* AdInfo::default_instance_ = NULL;

AdInfo* AdInfo::New() const {
  return new AdInfo;
}

void AdInfo::Clear() {
  if (has_adinfo()) {
    if (adinfo_ != NULL) adinfo_->::ConfigAd::AdCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAd.AdInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConfigAd.AdCPP adInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAd.AdInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAd.AdInfo)
  return false;
#undef DO_
}

void AdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAd.AdInfo)
  // required .ConfigAd.AdCPP adInfo = 1;
  if (has_adinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->adinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAd.AdInfo)
}

::google::protobuf::uint8* AdInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAd.AdInfo)
  // required .ConfigAd.AdCPP adInfo = 1;
  if (has_adinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->adinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAd.AdInfo)
  return target;
}

int AdInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConfigAd.AdCPP adInfo = 1;
    if (has_adinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdInfo::MergeFrom(const AdInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adinfo()) {
      mutable_adinfo()->::ConfigAd::AdCPP::MergeFrom(from.adinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdInfo::CopyFrom(const AdInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_adinfo()) {
    if (!this->adinfo().IsInitialized()) return false;
  }
  return true;
}

void AdInfo::Swap(AdInfo* other) {
  if (other != this) {
    std::swap(adinfo_, other->adinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdInfo_descriptor_;
  metadata.reflection = AdInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigAd

// @@protoc_insertion_point(global_scope)
