// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigFriendWorker.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigFriendWorker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigFriendWorker {

namespace {

const ::google::protobuf::Descriptor* FriendWorkerCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendWorkerCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendWorkerSpeedUpCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendWorkerSpeedUpCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendWorkerCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendWorkerCfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigFriendWorker_2eproto() {
  protobuf_AddDesc_ConfigFriendWorker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigFriendWorker.proto");
  GOOGLE_CHECK(file != NULL);
  FriendWorkerCPP_descriptor_ = file->message_type(0);
  static const int FriendWorkerCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, speedup_solt_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, worker_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, effective_login_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, reward_friendly_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, invite_friend_reward_item_cnt_),
  };
  FriendWorkerCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendWorkerCPP_descriptor_,
      FriendWorkerCPP::default_instance_,
      FriendWorkerCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendWorkerCPP));
  FriendWorkerSpeedUpCPP_descriptor_ = file->message_type(1);
  static const int FriendWorkerSpeedUpCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerSpeedUpCPP, crops_speed_up_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerSpeedUpCPP, order_reward_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerSpeedUpCPP, animal_speed_up_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerSpeedUpCPP, product_speed_up_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerSpeedUpCPP, ship_speed_up_percent_),
  };
  FriendWorkerSpeedUpCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendWorkerSpeedUpCPP_descriptor_,
      FriendWorkerSpeedUpCPP::default_instance_,
      FriendWorkerSpeedUpCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerSpeedUpCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerSpeedUpCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendWorkerSpeedUpCPP));
  FriendWorkerCfg_descriptor_ = file->message_type(2);
  static const int FriendWorkerCfg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCfg, worker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCfg, worker_speed_up_),
  };
  FriendWorkerCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendWorkerCfg_descriptor_,
      FriendWorkerCfg::default_instance_,
      FriendWorkerCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendWorkerCfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigFriendWorker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendWorkerCPP_descriptor_, &FriendWorkerCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendWorkerSpeedUpCPP_descriptor_, &FriendWorkerSpeedUpCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendWorkerCfg_descriptor_, &FriendWorkerCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigFriendWorker_2eproto() {
  delete FriendWorkerCPP::default_instance_;
  delete FriendWorkerCPP_reflection_;
  delete FriendWorkerSpeedUpCPP::default_instance_;
  delete FriendWorkerSpeedUpCPP_reflection_;
  delete FriendWorkerCfg::default_instance_;
  delete FriendWorkerCfg_reflection_;
}

void protobuf_AddDesc_ConfigFriendWorker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030ConfigFriendWorker.proto\022\022ConfigFriend"
    "Worker\"\244\001\n\017FriendWorkerCPP\022\030\n\020speedup_so"
    "lt_max\030\001 \002(\r\022\023\n\013worker_time\030\002 \002(\r\022\034\n\024eff"
    "ective_login_days\030\003 \002(\r\022\035\n\025reward_friend"
    "ly_value\030\004 \002(\r\022%\n\035invite_friend_reward_i"
    "tem_cnt\030\005 \002(\r\"\270\001\n\026FriendWorkerSpeedUpCPP"
    "\022\036\n\026crops_speed_up_percent\030\001 \002(\r\022\034\n\024orde"
    "r_reward_percent\030\002 \002(\r\022\037\n\027animal_speed_u"
    "p_percent\030\003 \002(\r\022 \n\030product_speed_up_perc"
    "ent\030\004 \002(\r\022\035\n\025ship_speed_up_percent\030\005 \002(\r"
    "\"\213\001\n\017FriendWorkerCfg\0223\n\006worker\030\001 \002(\0132#.C"
    "onfigFriendWorker.FriendWorkerCPP\022C\n\017wor"
    "ker_speed_up\030\002 \002(\0132*.ConfigFriendWorker."
    "FriendWorkerSpeedUpCPP", 542);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigFriendWorker.proto", &protobuf_RegisterTypes);
  FriendWorkerCPP::default_instance_ = new FriendWorkerCPP();
  FriendWorkerSpeedUpCPP::default_instance_ = new FriendWorkerSpeedUpCPP();
  FriendWorkerCfg::default_instance_ = new FriendWorkerCfg();
  FriendWorkerCPP::default_instance_->InitAsDefaultInstance();
  FriendWorkerSpeedUpCPP::default_instance_->InitAsDefaultInstance();
  FriendWorkerCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigFriendWorker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigFriendWorker_2eproto {
  StaticDescriptorInitializer_ConfigFriendWorker_2eproto() {
    protobuf_AddDesc_ConfigFriendWorker_2eproto();
  }
} static_descriptor_initializer_ConfigFriendWorker_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FriendWorkerCPP::kSpeedupSoltMaxFieldNumber;
const int FriendWorkerCPP::kWorkerTimeFieldNumber;
const int FriendWorkerCPP::kEffectiveLoginDaysFieldNumber;
const int FriendWorkerCPP::kRewardFriendlyValueFieldNumber;
const int FriendWorkerCPP::kInviteFriendRewardItemCntFieldNumber;
#endif  // !_MSC_VER

FriendWorkerCPP::FriendWorkerCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigFriendWorker.FriendWorkerCPP)
}

void FriendWorkerCPP::InitAsDefaultInstance() {
}

FriendWorkerCPP::FriendWorkerCPP(const FriendWorkerCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigFriendWorker.FriendWorkerCPP)
}

void FriendWorkerCPP::SharedCtor() {
  _cached_size_ = 0;
  speedup_solt_max_ = 0u;
  worker_time_ = 0u;
  effective_login_days_ = 0u;
  reward_friendly_value_ = 0u;
  invite_friend_reward_item_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendWorkerCPP::~FriendWorkerCPP() {
  // @@protoc_insertion_point(destructor:ConfigFriendWorker.FriendWorkerCPP)
  SharedDtor();
}

void FriendWorkerCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendWorkerCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendWorkerCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendWorkerCPP_descriptor_;
}

const FriendWorkerCPP& FriendWorkerCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigFriendWorker_2eproto();
  return *default_instance_;
}

FriendWorkerCPP* FriendWorkerCPP::default_instance_ = NULL;

FriendWorkerCPP* FriendWorkerCPP::New() const {
  return new FriendWorkerCPP;
}

void FriendWorkerCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendWorkerCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(speedup_solt_max_, invite_friend_reward_item_cnt_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendWorkerCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigFriendWorker.FriendWorkerCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 speedup_solt_max = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speedup_solt_max_)));
          set_has_speedup_solt_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_worker_time;
        break;
      }

      // required uint32 worker_time = 2;
      case 2: {
        if (tag == 16) {
         parse_worker_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worker_time_)));
          set_has_worker_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effective_login_days;
        break;
      }

      // required uint32 effective_login_days = 3;
      case 3: {
        if (tag == 24) {
         parse_effective_login_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effective_login_days_)));
          set_has_effective_login_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_friendly_value;
        break;
      }

      // required uint32 reward_friendly_value = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_friendly_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_friendly_value_)));
          set_has_reward_friendly_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_invite_friend_reward_item_cnt;
        break;
      }

      // required uint32 invite_friend_reward_item_cnt = 5;
      case 5: {
        if (tag == 40) {
         parse_invite_friend_reward_item_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invite_friend_reward_item_cnt_)));
          set_has_invite_friend_reward_item_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigFriendWorker.FriendWorkerCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigFriendWorker.FriendWorkerCPP)
  return false;
#undef DO_
}

void FriendWorkerCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigFriendWorker.FriendWorkerCPP)
  // required uint32 speedup_solt_max = 1;
  if (has_speedup_solt_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->speedup_solt_max(), output);
  }

  // required uint32 worker_time = 2;
  if (has_worker_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->worker_time(), output);
  }

  // required uint32 effective_login_days = 3;
  if (has_effective_login_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->effective_login_days(), output);
  }

  // required uint32 reward_friendly_value = 4;
  if (has_reward_friendly_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reward_friendly_value(), output);
  }

  // required uint32 invite_friend_reward_item_cnt = 5;
  if (has_invite_friend_reward_item_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->invite_friend_reward_item_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigFriendWorker.FriendWorkerCPP)
}

::google::protobuf::uint8* FriendWorkerCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigFriendWorker.FriendWorkerCPP)
  // required uint32 speedup_solt_max = 1;
  if (has_speedup_solt_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->speedup_solt_max(), target);
  }

  // required uint32 worker_time = 2;
  if (has_worker_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->worker_time(), target);
  }

  // required uint32 effective_login_days = 3;
  if (has_effective_login_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->effective_login_days(), target);
  }

  // required uint32 reward_friendly_value = 4;
  if (has_reward_friendly_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reward_friendly_value(), target);
  }

  // required uint32 invite_friend_reward_item_cnt = 5;
  if (has_invite_friend_reward_item_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->invite_friend_reward_item_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigFriendWorker.FriendWorkerCPP)
  return target;
}

int FriendWorkerCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 speedup_solt_max = 1;
    if (has_speedup_solt_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speedup_solt_max());
    }

    // required uint32 worker_time = 2;
    if (has_worker_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worker_time());
    }

    // required uint32 effective_login_days = 3;
    if (has_effective_login_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effective_login_days());
    }

    // required uint32 reward_friendly_value = 4;
    if (has_reward_friendly_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_friendly_value());
    }

    // required uint32 invite_friend_reward_item_cnt = 5;
    if (has_invite_friend_reward_item_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invite_friend_reward_item_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendWorkerCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendWorkerCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendWorkerCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendWorkerCPP::MergeFrom(const FriendWorkerCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speedup_solt_max()) {
      set_speedup_solt_max(from.speedup_solt_max());
    }
    if (from.has_worker_time()) {
      set_worker_time(from.worker_time());
    }
    if (from.has_effective_login_days()) {
      set_effective_login_days(from.effective_login_days());
    }
    if (from.has_reward_friendly_value()) {
      set_reward_friendly_value(from.reward_friendly_value());
    }
    if (from.has_invite_friend_reward_item_cnt()) {
      set_invite_friend_reward_item_cnt(from.invite_friend_reward_item_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendWorkerCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendWorkerCPP::CopyFrom(const FriendWorkerCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendWorkerCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FriendWorkerCPP::Swap(FriendWorkerCPP* other) {
  if (other != this) {
    std::swap(speedup_solt_max_, other->speedup_solt_max_);
    std::swap(worker_time_, other->worker_time_);
    std::swap(effective_login_days_, other->effective_login_days_);
    std::swap(reward_friendly_value_, other->reward_friendly_value_);
    std::swap(invite_friend_reward_item_cnt_, other->invite_friend_reward_item_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendWorkerCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendWorkerCPP_descriptor_;
  metadata.reflection = FriendWorkerCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendWorkerSpeedUpCPP::kCropsSpeedUpPercentFieldNumber;
const int FriendWorkerSpeedUpCPP::kOrderRewardPercentFieldNumber;
const int FriendWorkerSpeedUpCPP::kAnimalSpeedUpPercentFieldNumber;
const int FriendWorkerSpeedUpCPP::kProductSpeedUpPercentFieldNumber;
const int FriendWorkerSpeedUpCPP::kShipSpeedUpPercentFieldNumber;
#endif  // !_MSC_VER

FriendWorkerSpeedUpCPP::FriendWorkerSpeedUpCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigFriendWorker.FriendWorkerSpeedUpCPP)
}

void FriendWorkerSpeedUpCPP::InitAsDefaultInstance() {
}

FriendWorkerSpeedUpCPP::FriendWorkerSpeedUpCPP(const FriendWorkerSpeedUpCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigFriendWorker.FriendWorkerSpeedUpCPP)
}

void FriendWorkerSpeedUpCPP::SharedCtor() {
  _cached_size_ = 0;
  crops_speed_up_percent_ = 0u;
  order_reward_percent_ = 0u;
  animal_speed_up_percent_ = 0u;
  product_speed_up_percent_ = 0u;
  ship_speed_up_percent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendWorkerSpeedUpCPP::~FriendWorkerSpeedUpCPP() {
  // @@protoc_insertion_point(destructor:ConfigFriendWorker.FriendWorkerSpeedUpCPP)
  SharedDtor();
}

void FriendWorkerSpeedUpCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendWorkerSpeedUpCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendWorkerSpeedUpCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendWorkerSpeedUpCPP_descriptor_;
}

const FriendWorkerSpeedUpCPP& FriendWorkerSpeedUpCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigFriendWorker_2eproto();
  return *default_instance_;
}

FriendWorkerSpeedUpCPP* FriendWorkerSpeedUpCPP::default_instance_ = NULL;

FriendWorkerSpeedUpCPP* FriendWorkerSpeedUpCPP::New() const {
  return new FriendWorkerSpeedUpCPP;
}

void FriendWorkerSpeedUpCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendWorkerSpeedUpCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(crops_speed_up_percent_, ship_speed_up_percent_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendWorkerSpeedUpCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigFriendWorker.FriendWorkerSpeedUpCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 crops_speed_up_percent = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crops_speed_up_percent_)));
          set_has_crops_speed_up_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order_reward_percent;
        break;
      }

      // required uint32 order_reward_percent = 2;
      case 2: {
        if (tag == 16) {
         parse_order_reward_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_reward_percent_)));
          set_has_order_reward_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_animal_speed_up_percent;
        break;
      }

      // required uint32 animal_speed_up_percent = 3;
      case 3: {
        if (tag == 24) {
         parse_animal_speed_up_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &animal_speed_up_percent_)));
          set_has_animal_speed_up_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_product_speed_up_percent;
        break;
      }

      // required uint32 product_speed_up_percent = 4;
      case 4: {
        if (tag == 32) {
         parse_product_speed_up_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &product_speed_up_percent_)));
          set_has_product_speed_up_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ship_speed_up_percent;
        break;
      }

      // required uint32 ship_speed_up_percent = 5;
      case 5: {
        if (tag == 40) {
         parse_ship_speed_up_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ship_speed_up_percent_)));
          set_has_ship_speed_up_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigFriendWorker.FriendWorkerSpeedUpCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigFriendWorker.FriendWorkerSpeedUpCPP)
  return false;
#undef DO_
}

void FriendWorkerSpeedUpCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigFriendWorker.FriendWorkerSpeedUpCPP)
  // required uint32 crops_speed_up_percent = 1;
  if (has_crops_speed_up_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->crops_speed_up_percent(), output);
  }

  // required uint32 order_reward_percent = 2;
  if (has_order_reward_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order_reward_percent(), output);
  }

  // required uint32 animal_speed_up_percent = 3;
  if (has_animal_speed_up_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->animal_speed_up_percent(), output);
  }

  // required uint32 product_speed_up_percent = 4;
  if (has_product_speed_up_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->product_speed_up_percent(), output);
  }

  // required uint32 ship_speed_up_percent = 5;
  if (has_ship_speed_up_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ship_speed_up_percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigFriendWorker.FriendWorkerSpeedUpCPP)
}

::google::protobuf::uint8* FriendWorkerSpeedUpCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigFriendWorker.FriendWorkerSpeedUpCPP)
  // required uint32 crops_speed_up_percent = 1;
  if (has_crops_speed_up_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->crops_speed_up_percent(), target);
  }

  // required uint32 order_reward_percent = 2;
  if (has_order_reward_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->order_reward_percent(), target);
  }

  // required uint32 animal_speed_up_percent = 3;
  if (has_animal_speed_up_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->animal_speed_up_percent(), target);
  }

  // required uint32 product_speed_up_percent = 4;
  if (has_product_speed_up_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->product_speed_up_percent(), target);
  }

  // required uint32 ship_speed_up_percent = 5;
  if (has_ship_speed_up_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ship_speed_up_percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigFriendWorker.FriendWorkerSpeedUpCPP)
  return target;
}

int FriendWorkerSpeedUpCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 crops_speed_up_percent = 1;
    if (has_crops_speed_up_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crops_speed_up_percent());
    }

    // required uint32 order_reward_percent = 2;
    if (has_order_reward_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_reward_percent());
    }

    // required uint32 animal_speed_up_percent = 3;
    if (has_animal_speed_up_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->animal_speed_up_percent());
    }

    // required uint32 product_speed_up_percent = 4;
    if (has_product_speed_up_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->product_speed_up_percent());
    }

    // required uint32 ship_speed_up_percent = 5;
    if (has_ship_speed_up_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ship_speed_up_percent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendWorkerSpeedUpCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendWorkerSpeedUpCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendWorkerSpeedUpCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendWorkerSpeedUpCPP::MergeFrom(const FriendWorkerSpeedUpCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crops_speed_up_percent()) {
      set_crops_speed_up_percent(from.crops_speed_up_percent());
    }
    if (from.has_order_reward_percent()) {
      set_order_reward_percent(from.order_reward_percent());
    }
    if (from.has_animal_speed_up_percent()) {
      set_animal_speed_up_percent(from.animal_speed_up_percent());
    }
    if (from.has_product_speed_up_percent()) {
      set_product_speed_up_percent(from.product_speed_up_percent());
    }
    if (from.has_ship_speed_up_percent()) {
      set_ship_speed_up_percent(from.ship_speed_up_percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendWorkerSpeedUpCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendWorkerSpeedUpCPP::CopyFrom(const FriendWorkerSpeedUpCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendWorkerSpeedUpCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FriendWorkerSpeedUpCPP::Swap(FriendWorkerSpeedUpCPP* other) {
  if (other != this) {
    std::swap(crops_speed_up_percent_, other->crops_speed_up_percent_);
    std::swap(order_reward_percent_, other->order_reward_percent_);
    std::swap(animal_speed_up_percent_, other->animal_speed_up_percent_);
    std::swap(product_speed_up_percent_, other->product_speed_up_percent_);
    std::swap(ship_speed_up_percent_, other->ship_speed_up_percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendWorkerSpeedUpCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendWorkerSpeedUpCPP_descriptor_;
  metadata.reflection = FriendWorkerSpeedUpCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendWorkerCfg::kWorkerFieldNumber;
const int FriendWorkerCfg::kWorkerSpeedUpFieldNumber;
#endif  // !_MSC_VER

FriendWorkerCfg::FriendWorkerCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigFriendWorker.FriendWorkerCfg)
}

void FriendWorkerCfg::InitAsDefaultInstance() {
  worker_ = const_cast< ::ConfigFriendWorker::FriendWorkerCPP*>(&::ConfigFriendWorker::FriendWorkerCPP::default_instance());
  worker_speed_up_ = const_cast< ::ConfigFriendWorker::FriendWorkerSpeedUpCPP*>(&::ConfigFriendWorker::FriendWorkerSpeedUpCPP::default_instance());
}

FriendWorkerCfg::FriendWorkerCfg(const FriendWorkerCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigFriendWorker.FriendWorkerCfg)
}

void FriendWorkerCfg::SharedCtor() {
  _cached_size_ = 0;
  worker_ = NULL;
  worker_speed_up_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendWorkerCfg::~FriendWorkerCfg() {
  // @@protoc_insertion_point(destructor:ConfigFriendWorker.FriendWorkerCfg)
  SharedDtor();
}

void FriendWorkerCfg::SharedDtor() {
  if (this != default_instance_) {
    delete worker_;
    delete worker_speed_up_;
  }
}

void FriendWorkerCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendWorkerCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendWorkerCfg_descriptor_;
}

const FriendWorkerCfg& FriendWorkerCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigFriendWorker_2eproto();
  return *default_instance_;
}

FriendWorkerCfg* FriendWorkerCfg::default_instance_ = NULL;

FriendWorkerCfg* FriendWorkerCfg::New() const {
  return new FriendWorkerCfg;
}

void FriendWorkerCfg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_worker()) {
      if (worker_ != NULL) worker_->::ConfigFriendWorker::FriendWorkerCPP::Clear();
    }
    if (has_worker_speed_up()) {
      if (worker_speed_up_ != NULL) worker_speed_up_->::ConfigFriendWorker::FriendWorkerSpeedUpCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendWorkerCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigFriendWorker.FriendWorkerCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConfigFriendWorker.FriendWorkerCPP worker = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_worker_speed_up;
        break;
      }

      // required .ConfigFriendWorker.FriendWorkerSpeedUpCPP worker_speed_up = 2;
      case 2: {
        if (tag == 18) {
         parse_worker_speed_up:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worker_speed_up()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigFriendWorker.FriendWorkerCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigFriendWorker.FriendWorkerCfg)
  return false;
#undef DO_
}

void FriendWorkerCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigFriendWorker.FriendWorkerCfg)
  // required .ConfigFriendWorker.FriendWorkerCPP worker = 1;
  if (has_worker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->worker(), output);
  }

  // required .ConfigFriendWorker.FriendWorkerSpeedUpCPP worker_speed_up = 2;
  if (has_worker_speed_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->worker_speed_up(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigFriendWorker.FriendWorkerCfg)
}

::google::protobuf::uint8* FriendWorkerCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigFriendWorker.FriendWorkerCfg)
  // required .ConfigFriendWorker.FriendWorkerCPP worker = 1;
  if (has_worker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->worker(), target);
  }

  // required .ConfigFriendWorker.FriendWorkerSpeedUpCPP worker_speed_up = 2;
  if (has_worker_speed_up()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->worker_speed_up(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigFriendWorker.FriendWorkerCfg)
  return target;
}

int FriendWorkerCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConfigFriendWorker.FriendWorkerCPP worker = 1;
    if (has_worker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worker());
    }

    // required .ConfigFriendWorker.FriendWorkerSpeedUpCPP worker_speed_up = 2;
    if (has_worker_speed_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worker_speed_up());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendWorkerCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendWorkerCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendWorkerCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendWorkerCfg::MergeFrom(const FriendWorkerCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worker()) {
      mutable_worker()->::ConfigFriendWorker::FriendWorkerCPP::MergeFrom(from.worker());
    }
    if (from.has_worker_speed_up()) {
      mutable_worker_speed_up()->::ConfigFriendWorker::FriendWorkerSpeedUpCPP::MergeFrom(from.worker_speed_up());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendWorkerCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendWorkerCfg::CopyFrom(const FriendWorkerCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendWorkerCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_worker()) {
    if (!this->worker().IsInitialized()) return false;
  }
  if (has_worker_speed_up()) {
    if (!this->worker_speed_up().IsInitialized()) return false;
  }
  return true;
}

void FriendWorkerCfg::Swap(FriendWorkerCfg* other) {
  if (other != this) {
    std::swap(worker_, other->worker_);
    std::swap(worker_speed_up_, other->worker_speed_up_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendWorkerCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendWorkerCfg_descriptor_;
  metadata.reflection = FriendWorkerCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigFriendWorker

// @@protoc_insertion_point(global_scope)
