// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigAccessAd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigAccessAd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigAccessAd {

namespace {

const ::google::protobuf::Descriptor* AdReardItemLibCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdReardItemLibCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdRewardCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdRewardCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewAdCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewAdCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScarecrowCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScarecrowCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccessAdCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessAdCfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigAccessAd_2eproto() {
  protobuf_AddDesc_ConfigAccessAd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigAccessAd.proto");
  GOOGLE_CHECK(file != NULL);
  AdReardItemLibCPP_descriptor_ = file->message_type(0);
  static const int AdReardItemLibCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdReardItemLibCPP, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdReardItemLibCPP, weight_),
  };
  AdReardItemLibCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdReardItemLibCPP_descriptor_,
      AdReardItemLibCPP::default_instance_,
      AdReardItemLibCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdReardItemLibCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdReardItemLibCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdReardItemLibCPP));
  AdRewardCPP_descriptor_ = file->message_type(1);
  static const int AdRewardCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdRewardCPP, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdRewardCPP, itemlib_),
  };
  AdRewardCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdRewardCPP_descriptor_,
      AdRewardCPP::default_instance_,
      AdRewardCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdRewardCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdRewardCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdRewardCPP));
  ViewAdCPP_descriptor_ = file->message_type(2);
  static const int ViewAdCPP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewAdCPP, unlock_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewAdCPP, balloon_unlock_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewAdCPP, balloon_cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewAdCPP, daily_ballon_view_ad_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewAdCPP, reward_wait_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewAdCPP, reward_item_lib_),
  };
  ViewAdCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViewAdCPP_descriptor_,
      ViewAdCPP::default_instance_,
      ViewAdCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewAdCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewAdCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViewAdCPP));
  ScarecrowCPP_descriptor_ = file->message_type(3);
  static const int ScarecrowCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowCPP, bonus_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowCPP, bonus_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowCPP, cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowCPP, unlock_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowCPP, daily_bonus_cnt_),
  };
  ScarecrowCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScarecrowCPP_descriptor_,
      ScarecrowCPP::default_instance_,
      ScarecrowCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScarecrowCPP));
  AccessAdCfg_descriptor_ = file->message_type(4);
  static const int AccessAdCfg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessAdCfg, access_ad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessAdCfg, scarecrow_ad_),
  };
  AccessAdCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccessAdCfg_descriptor_,
      AccessAdCfg::default_instance_,
      AccessAdCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessAdCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessAdCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccessAdCfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigAccessAd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdReardItemLibCPP_descriptor_, &AdReardItemLibCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdRewardCPP_descriptor_, &AdRewardCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViewAdCPP_descriptor_, &ViewAdCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScarecrowCPP_descriptor_, &ScarecrowCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccessAdCfg_descriptor_, &AccessAdCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigAccessAd_2eproto() {
  delete AdReardItemLibCPP::default_instance_;
  delete AdReardItemLibCPP_reflection_;
  delete AdRewardCPP::default_instance_;
  delete AdRewardCPP_reflection_;
  delete ViewAdCPP::default_instance_;
  delete ViewAdCPP_reflection_;
  delete ScarecrowCPP::default_instance_;
  delete ScarecrowCPP_reflection_;
  delete AccessAdCfg::default_instance_;
  delete AccessAdCfg_reflection_;
}

void protobuf_AddDesc_ConfigAccessAd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ConfigAccessAd.proto\022\016ConfigAccessAd\"3"
    "\n\021AdReardItemLibCPP\022\016\n\006itemid\030\001 \002(\r\022\016\n\006w"
    "eight\030\002 \002(\r\"P\n\013AdRewardCPP\022\r\n\005level\030\001 \003("
    "\r\0222\n\007itemlib\030\002 \003(\0132!.ConfigAccessAd.AdRe"
    "ardItemLibCPP\"\312\001\n\tViewAdCPP\022\024\n\014unlock_le"
    "vel\030\001 \002(\r\022\034\n\024balloon_unlock_level\030\002 \002(\r\022"
    "\027\n\017balloon_cd_time\030\003 \002(\r\022 \n\030daily_ballon"
    "_view_ad_cnt\030\004 \002(\r\022\030\n\020reward_wait_time\030\005"
    " \002(\r\0224\n\017reward_item_lib\030\006 \003(\0132\033.ConfigAc"
    "cessAd.AdRewardCPP\"y\n\014ScarecrowCPP\022\022\n\nbo"
    "nus_time\030\001 \002(\r\022\025\n\rbonus_percent\030\002 \002(\r\022\017\n"
    "\007cd_time\030\003 \002(\r\022\024\n\014unlock_level\030\004 \002(\r\022\027\n\017"
    "daily_bonus_cnt\030\005 \002(\r\"o\n\013AccessAdCfg\022,\n\t"
    "access_ad\030\001 \002(\0132\031.ConfigAccessAd.ViewAdC"
    "PP\0222\n\014scarecrow_ad\030\002 \002(\0132\034.ConfigAccessA"
    "d.ScarecrowCPP", 614);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigAccessAd.proto", &protobuf_RegisterTypes);
  AdReardItemLibCPP::default_instance_ = new AdReardItemLibCPP();
  AdRewardCPP::default_instance_ = new AdRewardCPP();
  ViewAdCPP::default_instance_ = new ViewAdCPP();
  ScarecrowCPP::default_instance_ = new ScarecrowCPP();
  AccessAdCfg::default_instance_ = new AccessAdCfg();
  AdReardItemLibCPP::default_instance_->InitAsDefaultInstance();
  AdRewardCPP::default_instance_->InitAsDefaultInstance();
  ViewAdCPP::default_instance_->InitAsDefaultInstance();
  ScarecrowCPP::default_instance_->InitAsDefaultInstance();
  AccessAdCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigAccessAd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigAccessAd_2eproto {
  StaticDescriptorInitializer_ConfigAccessAd_2eproto() {
    protobuf_AddDesc_ConfigAccessAd_2eproto();
  }
} static_descriptor_initializer_ConfigAccessAd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AdReardItemLibCPP::kItemidFieldNumber;
const int AdReardItemLibCPP::kWeightFieldNumber;
#endif  // !_MSC_VER

AdReardItemLibCPP::AdReardItemLibCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAccessAd.AdReardItemLibCPP)
}

void AdReardItemLibCPP::InitAsDefaultInstance() {
}

AdReardItemLibCPP::AdReardItemLibCPP(const AdReardItemLibCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAccessAd.AdReardItemLibCPP)
}

void AdReardItemLibCPP::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  weight_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdReardItemLibCPP::~AdReardItemLibCPP() {
  // @@protoc_insertion_point(destructor:ConfigAccessAd.AdReardItemLibCPP)
  SharedDtor();
}

void AdReardItemLibCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdReardItemLibCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdReardItemLibCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdReardItemLibCPP_descriptor_;
}

const AdReardItemLibCPP& AdReardItemLibCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAccessAd_2eproto();
  return *default_instance_;
}

AdReardItemLibCPP* AdReardItemLibCPP::default_instance_ = NULL;

AdReardItemLibCPP* AdReardItemLibCPP::New() const {
  return new AdReardItemLibCPP;
}

void AdReardItemLibCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AdReardItemLibCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, weight_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdReardItemLibCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAccessAd.AdReardItemLibCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // required uint32 weight = 2;
      case 2: {
        if (tag == 16) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAccessAd.AdReardItemLibCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAccessAd.AdReardItemLibCPP)
  return false;
#undef DO_
}

void AdReardItemLibCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAccessAd.AdReardItemLibCPP)
  // required uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAccessAd.AdReardItemLibCPP)
}

::google::protobuf::uint8* AdReardItemLibCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAccessAd.AdReardItemLibCPP)
  // required uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAccessAd.AdReardItemLibCPP)
  return target;
}

int AdReardItemLibCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdReardItemLibCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdReardItemLibCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdReardItemLibCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdReardItemLibCPP::MergeFrom(const AdReardItemLibCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdReardItemLibCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdReardItemLibCPP::CopyFrom(const AdReardItemLibCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdReardItemLibCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AdReardItemLibCPP::Swap(AdReardItemLibCPP* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdReardItemLibCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdReardItemLibCPP_descriptor_;
  metadata.reflection = AdReardItemLibCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdRewardCPP::kLevelFieldNumber;
const int AdRewardCPP::kItemlibFieldNumber;
#endif  // !_MSC_VER

AdRewardCPP::AdRewardCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAccessAd.AdRewardCPP)
}

void AdRewardCPP::InitAsDefaultInstance() {
}

AdRewardCPP::AdRewardCPP(const AdRewardCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAccessAd.AdRewardCPP)
}

void AdRewardCPP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdRewardCPP::~AdRewardCPP() {
  // @@protoc_insertion_point(destructor:ConfigAccessAd.AdRewardCPP)
  SharedDtor();
}

void AdRewardCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdRewardCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdRewardCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdRewardCPP_descriptor_;
}

const AdRewardCPP& AdRewardCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAccessAd_2eproto();
  return *default_instance_;
}

AdRewardCPP* AdRewardCPP::default_instance_ = NULL;

AdRewardCPP* AdRewardCPP::New() const {
  return new AdRewardCPP;
}

void AdRewardCPP::Clear() {
  level_.Clear();
  itemlib_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdRewardCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAccessAd.AdRewardCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 level = 1;
      case 1: {
        if (tag == 8) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_level())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_level())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_level;
        if (input->ExpectTag(18)) goto parse_itemlib;
        break;
      }

      // repeated .ConfigAccessAd.AdReardItemLibCPP itemlib = 2;
      case 2: {
        if (tag == 18) {
         parse_itemlib:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlib()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemlib;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAccessAd.AdRewardCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAccessAd.AdRewardCPP)
  return false;
#undef DO_
}

void AdRewardCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAccessAd.AdRewardCPP)
  // repeated uint32 level = 1;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->level(i), output);
  }

  // repeated .ConfigAccessAd.AdReardItemLibCPP itemlib = 2;
  for (int i = 0; i < this->itemlib_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemlib(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAccessAd.AdRewardCPP)
}

::google::protobuf::uint8* AdRewardCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAccessAd.AdRewardCPP)
  // repeated uint32 level = 1;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->level(i), target);
  }

  // repeated .ConfigAccessAd.AdReardItemLibCPP itemlib = 2;
  for (int i = 0; i < this->itemlib_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemlib(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAccessAd.AdRewardCPP)
  return target;
}

int AdRewardCPP::ByteSize() const {
  int total_size = 0;

  // repeated uint32 level = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->level(i));
    }
    total_size += 1 * this->level_size() + data_size;
  }

  // repeated .ConfigAccessAd.AdReardItemLibCPP itemlib = 2;
  total_size += 1 * this->itemlib_size();
  for (int i = 0; i < this->itemlib_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlib(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdRewardCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdRewardCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdRewardCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdRewardCPP::MergeFrom(const AdRewardCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_.MergeFrom(from.level_);
  itemlib_.MergeFrom(from.itemlib_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdRewardCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdRewardCPP::CopyFrom(const AdRewardCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdRewardCPP::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->itemlib())) return false;
  return true;
}

void AdRewardCPP::Swap(AdRewardCPP* other) {
  if (other != this) {
    level_.Swap(&other->level_);
    itemlib_.Swap(&other->itemlib_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdRewardCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdRewardCPP_descriptor_;
  metadata.reflection = AdRewardCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ViewAdCPP::kUnlockLevelFieldNumber;
const int ViewAdCPP::kBalloonUnlockLevelFieldNumber;
const int ViewAdCPP::kBalloonCdTimeFieldNumber;
const int ViewAdCPP::kDailyBallonViewAdCntFieldNumber;
const int ViewAdCPP::kRewardWaitTimeFieldNumber;
const int ViewAdCPP::kRewardItemLibFieldNumber;
#endif  // !_MSC_VER

ViewAdCPP::ViewAdCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAccessAd.ViewAdCPP)
}

void ViewAdCPP::InitAsDefaultInstance() {
}

ViewAdCPP::ViewAdCPP(const ViewAdCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAccessAd.ViewAdCPP)
}

void ViewAdCPP::SharedCtor() {
  _cached_size_ = 0;
  unlock_level_ = 0u;
  balloon_unlock_level_ = 0u;
  balloon_cd_time_ = 0u;
  daily_ballon_view_ad_cnt_ = 0u;
  reward_wait_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewAdCPP::~ViewAdCPP() {
  // @@protoc_insertion_point(destructor:ConfigAccessAd.ViewAdCPP)
  SharedDtor();
}

void ViewAdCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ViewAdCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewAdCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewAdCPP_descriptor_;
}

const ViewAdCPP& ViewAdCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAccessAd_2eproto();
  return *default_instance_;
}

ViewAdCPP* ViewAdCPP::default_instance_ = NULL;

ViewAdCPP* ViewAdCPP::New() const {
  return new ViewAdCPP;
}

void ViewAdCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ViewAdCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(unlock_level_, daily_ballon_view_ad_cnt_);
    reward_wait_time_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_item_lib_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ViewAdCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAccessAd.ViewAdCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unlock_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_level_)));
          set_has_unlock_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_balloon_unlock_level;
        break;
      }

      // required uint32 balloon_unlock_level = 2;
      case 2: {
        if (tag == 16) {
         parse_balloon_unlock_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balloon_unlock_level_)));
          set_has_balloon_unlock_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_balloon_cd_time;
        break;
      }

      // required uint32 balloon_cd_time = 3;
      case 3: {
        if (tag == 24) {
         parse_balloon_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balloon_cd_time_)));
          set_has_balloon_cd_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_daily_ballon_view_ad_cnt;
        break;
      }

      // required uint32 daily_ballon_view_ad_cnt = 4;
      case 4: {
        if (tag == 32) {
         parse_daily_ballon_view_ad_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_ballon_view_ad_cnt_)));
          set_has_daily_ballon_view_ad_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_wait_time;
        break;
      }

      // required uint32 reward_wait_time = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_wait_time_)));
          set_has_reward_wait_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_reward_item_lib;
        break;
      }

      // repeated .ConfigAccessAd.AdRewardCPP reward_item_lib = 6;
      case 6: {
        if (tag == 50) {
         parse_reward_item_lib:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_item_lib()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_reward_item_lib;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAccessAd.ViewAdCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAccessAd.ViewAdCPP)
  return false;
#undef DO_
}

void ViewAdCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAccessAd.ViewAdCPP)
  // required uint32 unlock_level = 1;
  if (has_unlock_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unlock_level(), output);
  }

  // required uint32 balloon_unlock_level = 2;
  if (has_balloon_unlock_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->balloon_unlock_level(), output);
  }

  // required uint32 balloon_cd_time = 3;
  if (has_balloon_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->balloon_cd_time(), output);
  }

  // required uint32 daily_ballon_view_ad_cnt = 4;
  if (has_daily_ballon_view_ad_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->daily_ballon_view_ad_cnt(), output);
  }

  // required uint32 reward_wait_time = 5;
  if (has_reward_wait_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reward_wait_time(), output);
  }

  // repeated .ConfigAccessAd.AdRewardCPP reward_item_lib = 6;
  for (int i = 0; i < this->reward_item_lib_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->reward_item_lib(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAccessAd.ViewAdCPP)
}

::google::protobuf::uint8* ViewAdCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAccessAd.ViewAdCPP)
  // required uint32 unlock_level = 1;
  if (has_unlock_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unlock_level(), target);
  }

  // required uint32 balloon_unlock_level = 2;
  if (has_balloon_unlock_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->balloon_unlock_level(), target);
  }

  // required uint32 balloon_cd_time = 3;
  if (has_balloon_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->balloon_cd_time(), target);
  }

  // required uint32 daily_ballon_view_ad_cnt = 4;
  if (has_daily_ballon_view_ad_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->daily_ballon_view_ad_cnt(), target);
  }

  // required uint32 reward_wait_time = 5;
  if (has_reward_wait_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reward_wait_time(), target);
  }

  // repeated .ConfigAccessAd.AdRewardCPP reward_item_lib = 6;
  for (int i = 0; i < this->reward_item_lib_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->reward_item_lib(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAccessAd.ViewAdCPP)
  return target;
}

int ViewAdCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unlock_level = 1;
    if (has_unlock_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlock_level());
    }

    // required uint32 balloon_unlock_level = 2;
    if (has_balloon_unlock_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->balloon_unlock_level());
    }

    // required uint32 balloon_cd_time = 3;
    if (has_balloon_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->balloon_cd_time());
    }

    // required uint32 daily_ballon_view_ad_cnt = 4;
    if (has_daily_ballon_view_ad_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_ballon_view_ad_cnt());
    }

    // required uint32 reward_wait_time = 5;
    if (has_reward_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_wait_time());
    }

  }
  // repeated .ConfigAccessAd.AdRewardCPP reward_item_lib = 6;
  total_size += 1 * this->reward_item_lib_size();
  for (int i = 0; i < this->reward_item_lib_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_item_lib(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewAdCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ViewAdCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ViewAdCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ViewAdCPP::MergeFrom(const ViewAdCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_item_lib_.MergeFrom(from.reward_item_lib_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unlock_level()) {
      set_unlock_level(from.unlock_level());
    }
    if (from.has_balloon_unlock_level()) {
      set_balloon_unlock_level(from.balloon_unlock_level());
    }
    if (from.has_balloon_cd_time()) {
      set_balloon_cd_time(from.balloon_cd_time());
    }
    if (from.has_daily_ballon_view_ad_cnt()) {
      set_daily_ballon_view_ad_cnt(from.daily_ballon_view_ad_cnt());
    }
    if (from.has_reward_wait_time()) {
      set_reward_wait_time(from.reward_wait_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ViewAdCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewAdCPP::CopyFrom(const ViewAdCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewAdCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward_item_lib())) return false;
  return true;
}

void ViewAdCPP::Swap(ViewAdCPP* other) {
  if (other != this) {
    std::swap(unlock_level_, other->unlock_level_);
    std::swap(balloon_unlock_level_, other->balloon_unlock_level_);
    std::swap(balloon_cd_time_, other->balloon_cd_time_);
    std::swap(daily_ballon_view_ad_cnt_, other->daily_ballon_view_ad_cnt_);
    std::swap(reward_wait_time_, other->reward_wait_time_);
    reward_item_lib_.Swap(&other->reward_item_lib_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ViewAdCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewAdCPP_descriptor_;
  metadata.reflection = ViewAdCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScarecrowCPP::kBonusTimeFieldNumber;
const int ScarecrowCPP::kBonusPercentFieldNumber;
const int ScarecrowCPP::kCdTimeFieldNumber;
const int ScarecrowCPP::kUnlockLevelFieldNumber;
const int ScarecrowCPP::kDailyBonusCntFieldNumber;
#endif  // !_MSC_VER

ScarecrowCPP::ScarecrowCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAccessAd.ScarecrowCPP)
}

void ScarecrowCPP::InitAsDefaultInstance() {
}

ScarecrowCPP::ScarecrowCPP(const ScarecrowCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAccessAd.ScarecrowCPP)
}

void ScarecrowCPP::SharedCtor() {
  _cached_size_ = 0;
  bonus_time_ = 0u;
  bonus_percent_ = 0u;
  cd_time_ = 0u;
  unlock_level_ = 0u;
  daily_bonus_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScarecrowCPP::~ScarecrowCPP() {
  // @@protoc_insertion_point(destructor:ConfigAccessAd.ScarecrowCPP)
  SharedDtor();
}

void ScarecrowCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScarecrowCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScarecrowCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScarecrowCPP_descriptor_;
}

const ScarecrowCPP& ScarecrowCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAccessAd_2eproto();
  return *default_instance_;
}

ScarecrowCPP* ScarecrowCPP::default_instance_ = NULL;

ScarecrowCPP* ScarecrowCPP::New() const {
  return new ScarecrowCPP;
}

void ScarecrowCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScarecrowCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(bonus_time_, daily_bonus_cnt_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScarecrowCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAccessAd.ScarecrowCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bonus_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_time_)));
          set_has_bonus_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bonus_percent;
        break;
      }

      // required uint32 bonus_percent = 2;
      case 2: {
        if (tag == 16) {
         parse_bonus_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_percent_)));
          set_has_bonus_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cd_time;
        break;
      }

      // required uint32 cd_time = 3;
      case 3: {
        if (tag == 24) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unlock_level;
        break;
      }

      // required uint32 unlock_level = 4;
      case 4: {
        if (tag == 32) {
         parse_unlock_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_level_)));
          set_has_unlock_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_daily_bonus_cnt;
        break;
      }

      // required uint32 daily_bonus_cnt = 5;
      case 5: {
        if (tag == 40) {
         parse_daily_bonus_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_bonus_cnt_)));
          set_has_daily_bonus_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAccessAd.ScarecrowCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAccessAd.ScarecrowCPP)
  return false;
#undef DO_
}

void ScarecrowCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAccessAd.ScarecrowCPP)
  // required uint32 bonus_time = 1;
  if (has_bonus_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bonus_time(), output);
  }

  // required uint32 bonus_percent = 2;
  if (has_bonus_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bonus_percent(), output);
  }

  // required uint32 cd_time = 3;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cd_time(), output);
  }

  // required uint32 unlock_level = 4;
  if (has_unlock_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unlock_level(), output);
  }

  // required uint32 daily_bonus_cnt = 5;
  if (has_daily_bonus_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->daily_bonus_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAccessAd.ScarecrowCPP)
}

::google::protobuf::uint8* ScarecrowCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAccessAd.ScarecrowCPP)
  // required uint32 bonus_time = 1;
  if (has_bonus_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bonus_time(), target);
  }

  // required uint32 bonus_percent = 2;
  if (has_bonus_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bonus_percent(), target);
  }

  // required uint32 cd_time = 3;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cd_time(), target);
  }

  // required uint32 unlock_level = 4;
  if (has_unlock_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unlock_level(), target);
  }

  // required uint32 daily_bonus_cnt = 5;
  if (has_daily_bonus_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->daily_bonus_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAccessAd.ScarecrowCPP)
  return target;
}

int ScarecrowCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bonus_time = 1;
    if (has_bonus_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_time());
    }

    // required uint32 bonus_percent = 2;
    if (has_bonus_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_percent());
    }

    // required uint32 cd_time = 3;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd_time());
    }

    // required uint32 unlock_level = 4;
    if (has_unlock_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlock_level());
    }

    // required uint32 daily_bonus_cnt = 5;
    if (has_daily_bonus_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_bonus_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScarecrowCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScarecrowCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScarecrowCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScarecrowCPP::MergeFrom(const ScarecrowCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bonus_time()) {
      set_bonus_time(from.bonus_time());
    }
    if (from.has_bonus_percent()) {
      set_bonus_percent(from.bonus_percent());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
    if (from.has_unlock_level()) {
      set_unlock_level(from.unlock_level());
    }
    if (from.has_daily_bonus_cnt()) {
      set_daily_bonus_cnt(from.daily_bonus_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScarecrowCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScarecrowCPP::CopyFrom(const ScarecrowCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScarecrowCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ScarecrowCPP::Swap(ScarecrowCPP* other) {
  if (other != this) {
    std::swap(bonus_time_, other->bonus_time_);
    std::swap(bonus_percent_, other->bonus_percent_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(unlock_level_, other->unlock_level_);
    std::swap(daily_bonus_cnt_, other->daily_bonus_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScarecrowCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScarecrowCPP_descriptor_;
  metadata.reflection = ScarecrowCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccessAdCfg::kAccessAdFieldNumber;
const int AccessAdCfg::kScarecrowAdFieldNumber;
#endif  // !_MSC_VER

AccessAdCfg::AccessAdCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAccessAd.AccessAdCfg)
}

void AccessAdCfg::InitAsDefaultInstance() {
  access_ad_ = const_cast< ::ConfigAccessAd::ViewAdCPP*>(&::ConfigAccessAd::ViewAdCPP::default_instance());
  scarecrow_ad_ = const_cast< ::ConfigAccessAd::ScarecrowCPP*>(&::ConfigAccessAd::ScarecrowCPP::default_instance());
}

AccessAdCfg::AccessAdCfg(const AccessAdCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAccessAd.AccessAdCfg)
}

void AccessAdCfg::SharedCtor() {
  _cached_size_ = 0;
  access_ad_ = NULL;
  scarecrow_ad_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccessAdCfg::~AccessAdCfg() {
  // @@protoc_insertion_point(destructor:ConfigAccessAd.AccessAdCfg)
  SharedDtor();
}

void AccessAdCfg::SharedDtor() {
  if (this != default_instance_) {
    delete access_ad_;
    delete scarecrow_ad_;
  }
}

void AccessAdCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessAdCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessAdCfg_descriptor_;
}

const AccessAdCfg& AccessAdCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAccessAd_2eproto();
  return *default_instance_;
}

AccessAdCfg* AccessAdCfg::default_instance_ = NULL;

AccessAdCfg* AccessAdCfg::New() const {
  return new AccessAdCfg;
}

void AccessAdCfg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_ad()) {
      if (access_ad_ != NULL) access_ad_->::ConfigAccessAd::ViewAdCPP::Clear();
    }
    if (has_scarecrow_ad()) {
      if (scarecrow_ad_ != NULL) scarecrow_ad_->::ConfigAccessAd::ScarecrowCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccessAdCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAccessAd.AccessAdCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConfigAccessAd.ViewAdCPP access_ad = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_access_ad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scarecrow_ad;
        break;
      }

      // required .ConfigAccessAd.ScarecrowCPP scarecrow_ad = 2;
      case 2: {
        if (tag == 18) {
         parse_scarecrow_ad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scarecrow_ad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAccessAd.AccessAdCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAccessAd.AccessAdCfg)
  return false;
#undef DO_
}

void AccessAdCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAccessAd.AccessAdCfg)
  // required .ConfigAccessAd.ViewAdCPP access_ad = 1;
  if (has_access_ad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->access_ad(), output);
  }

  // required .ConfigAccessAd.ScarecrowCPP scarecrow_ad = 2;
  if (has_scarecrow_ad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scarecrow_ad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAccessAd.AccessAdCfg)
}

::google::protobuf::uint8* AccessAdCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAccessAd.AccessAdCfg)
  // required .ConfigAccessAd.ViewAdCPP access_ad = 1;
  if (has_access_ad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->access_ad(), target);
  }

  // required .ConfigAccessAd.ScarecrowCPP scarecrow_ad = 2;
  if (has_scarecrow_ad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scarecrow_ad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAccessAd.AccessAdCfg)
  return target;
}

int AccessAdCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConfigAccessAd.ViewAdCPP access_ad = 1;
    if (has_access_ad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->access_ad());
    }

    // required .ConfigAccessAd.ScarecrowCPP scarecrow_ad = 2;
    if (has_scarecrow_ad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scarecrow_ad());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessAdCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccessAdCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccessAdCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccessAdCfg::MergeFrom(const AccessAdCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_ad()) {
      mutable_access_ad()->::ConfigAccessAd::ViewAdCPP::MergeFrom(from.access_ad());
    }
    if (from.has_scarecrow_ad()) {
      mutable_scarecrow_ad()->::ConfigAccessAd::ScarecrowCPP::MergeFrom(from.scarecrow_ad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccessAdCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessAdCfg::CopyFrom(const AccessAdCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessAdCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_access_ad()) {
    if (!this->access_ad().IsInitialized()) return false;
  }
  if (has_scarecrow_ad()) {
    if (!this->scarecrow_ad().IsInitialized()) return false;
  }
  return true;
}

void AccessAdCfg::Swap(AccessAdCfg* other) {
  if (other != this) {
    std::swap(access_ad_, other->access_ad_);
    std::swap(scarecrow_ad_, other->scarecrow_ad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccessAdCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccessAdCfg_descriptor_;
  metadata.reflection = AccessAdCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigAccessAd

// @@protoc_insertion_point(global_scope)
