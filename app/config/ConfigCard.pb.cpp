// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigCard.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigCard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigCard {

namespace {

const ::google::protobuf::Descriptor* MonthCardCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonthCardCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* LifeCardCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LifeCardCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardCfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigCard_2eproto() {
  protobuf_AddDesc_ConfigCard_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigCard.proto");
  GOOGLE_CHECK(file != NULL);
  MonthCardCPP_descriptor_ = file->message_type(0);
  static const int MonthCardCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardCPP, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardCPP, effective_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardCPP, first_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardCPP, reward_),
  };
  MonthCardCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonthCardCPP_descriptor_,
      MonthCardCPP::default_instance_,
      MonthCardCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonthCardCPP));
  LifeCardCPP_descriptor_ = file->message_type(1);
  static const int LifeCardCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LifeCardCPP, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LifeCardCPP, first_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LifeCardCPP, reward_),
  };
  LifeCardCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LifeCardCPP_descriptor_,
      LifeCardCPP::default_instance_,
      LifeCardCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LifeCardCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LifeCardCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LifeCardCPP));
  CardCfg_descriptor_ = file->message_type(2);
  static const int CardCfg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardCfg, monthcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardCfg, lifecard_),
  };
  CardCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardCfg_descriptor_,
      CardCfg::default_instance_,
      CardCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardCfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigCard_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonthCardCPP_descriptor_, &MonthCardCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LifeCardCPP_descriptor_, &LifeCardCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardCfg_descriptor_, &CardCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigCard_2eproto() {
  delete MonthCardCPP::default_instance_;
  delete MonthCardCPP_reflection_;
  delete LifeCardCPP::default_instance_;
  delete LifeCardCPP_reflection_;
  delete CardCfg::default_instance_;
  delete CardCfg_reflection_;
}

void protobuf_AddDesc_ConfigCard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ConfigCard.proto\022\nConfigCard\032\026CommonGi"
    "ftConfig.proto\"\241\001\n\014MonthCardCPP\022\014\n\004cost\030"
    "\001 \002(\r\022\025\n\reffective_day\030\002 \002(\r\0228\n\014first_re"
    "ward\030\003 \002(\0132\".CommonGiftConfig.CommonModi"
    "fyItem\0222\n\006reward\030\004 \002(\0132\".CommonGiftConfi"
    "g.CommonModifyItem\"\211\001\n\013LifeCardCPP\022\014\n\004co"
    "st\030\001 \002(\r\0228\n\014first_reward\030\002 \002(\0132\".CommonG"
    "iftConfig.CommonModifyItem\0222\n\006reward\030\003 \002"
    "(\0132\".CommonGiftConfig.CommonModifyItem\"a"
    "\n\007CardCfg\022+\n\tmonthcard\030\001 \002(\0132\030.ConfigCar"
    "d.MonthCardCPP\022)\n\010lifecard\030\002 \002(\0132\027.Confi"
    "gCard.LifeCardCPP", 457);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigCard.proto", &protobuf_RegisterTypes);
  MonthCardCPP::default_instance_ = new MonthCardCPP();
  LifeCardCPP::default_instance_ = new LifeCardCPP();
  CardCfg::default_instance_ = new CardCfg();
  MonthCardCPP::default_instance_->InitAsDefaultInstance();
  LifeCardCPP::default_instance_->InitAsDefaultInstance();
  CardCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigCard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigCard_2eproto {
  StaticDescriptorInitializer_ConfigCard_2eproto() {
    protobuf_AddDesc_ConfigCard_2eproto();
  }
} static_descriptor_initializer_ConfigCard_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MonthCardCPP::kCostFieldNumber;
const int MonthCardCPP::kEffectiveDayFieldNumber;
const int MonthCardCPP::kFirstRewardFieldNumber;
const int MonthCardCPP::kRewardFieldNumber;
#endif  // !_MSC_VER

MonthCardCPP::MonthCardCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigCard.MonthCardCPP)
}

void MonthCardCPP::InitAsDefaultInstance() {
  first_reward_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
  reward_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

MonthCardCPP::MonthCardCPP(const MonthCardCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigCard.MonthCardCPP)
}

void MonthCardCPP::SharedCtor() {
  _cached_size_ = 0;
  cost_ = 0u;
  effective_day_ = 0u;
  first_reward_ = NULL;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthCardCPP::~MonthCardCPP() {
  // @@protoc_insertion_point(destructor:ConfigCard.MonthCardCPP)
  SharedDtor();
}

void MonthCardCPP::SharedDtor() {
  if (this != default_instance_) {
    delete first_reward_;
    delete reward_;
  }
}

void MonthCardCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonthCardCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonthCardCPP_descriptor_;
}

const MonthCardCPP& MonthCardCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigCard_2eproto();
  return *default_instance_;
}

MonthCardCPP* MonthCardCPP::default_instance_ = NULL;

MonthCardCPP* MonthCardCPP::New() const {
  return new MonthCardCPP;
}

void MonthCardCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MonthCardCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(cost_, effective_day_);
    if (has_first_reward()) {
      if (first_reward_ != NULL) first_reward_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonthCardCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigCard.MonthCardCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cost = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_effective_day;
        break;
      }

      // required uint32 effective_day = 2;
      case 2: {
        if (tag == 16) {
         parse_effective_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effective_day_)));
          set_has_effective_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_first_reward;
        break;
      }

      // required .CommonGiftConfig.CommonModifyItem first_reward = 3;
      case 3: {
        if (tag == 26) {
         parse_first_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // required .CommonGiftConfig.CommonModifyItem reward = 4;
      case 4: {
        if (tag == 34) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigCard.MonthCardCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigCard.MonthCardCPP)
  return false;
#undef DO_
}

void MonthCardCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigCard.MonthCardCPP)
  // required uint32 cost = 1;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cost(), output);
  }

  // required uint32 effective_day = 2;
  if (has_effective_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->effective_day(), output);
  }

  // required .CommonGiftConfig.CommonModifyItem first_reward = 3;
  if (has_first_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->first_reward(), output);
  }

  // required .CommonGiftConfig.CommonModifyItem reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigCard.MonthCardCPP)
}

::google::protobuf::uint8* MonthCardCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigCard.MonthCardCPP)
  // required uint32 cost = 1;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cost(), target);
  }

  // required uint32 effective_day = 2;
  if (has_effective_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->effective_day(), target);
  }

  // required .CommonGiftConfig.CommonModifyItem first_reward = 3;
  if (has_first_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->first_reward(), target);
  }

  // required .CommonGiftConfig.CommonModifyItem reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigCard.MonthCardCPP)
  return target;
}

int MonthCardCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cost = 1;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

    // required uint32 effective_day = 2;
    if (has_effective_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effective_day());
    }

    // required .CommonGiftConfig.CommonModifyItem first_reward = 3;
    if (has_first_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first_reward());
    }

    // required .CommonGiftConfig.CommonModifyItem reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthCardCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonthCardCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonthCardCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonthCardCPP::MergeFrom(const MonthCardCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_effective_day()) {
      set_effective_day(from.effective_day());
    }
    if (from.has_first_reward()) {
      mutable_first_reward()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.first_reward());
    }
    if (from.has_reward()) {
      mutable_reward()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonthCardCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonthCardCPP::CopyFrom(const MonthCardCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthCardCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_first_reward()) {
    if (!this->first_reward().IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void MonthCardCPP::Swap(MonthCardCPP* other) {
  if (other != this) {
    std::swap(cost_, other->cost_);
    std::swap(effective_day_, other->effective_day_);
    std::swap(first_reward_, other->first_reward_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonthCardCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonthCardCPP_descriptor_;
  metadata.reflection = MonthCardCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LifeCardCPP::kCostFieldNumber;
const int LifeCardCPP::kFirstRewardFieldNumber;
const int LifeCardCPP::kRewardFieldNumber;
#endif  // !_MSC_VER

LifeCardCPP::LifeCardCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigCard.LifeCardCPP)
}

void LifeCardCPP::InitAsDefaultInstance() {
  first_reward_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
  reward_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

LifeCardCPP::LifeCardCPP(const LifeCardCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigCard.LifeCardCPP)
}

void LifeCardCPP::SharedCtor() {
  _cached_size_ = 0;
  cost_ = 0u;
  first_reward_ = NULL;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LifeCardCPP::~LifeCardCPP() {
  // @@protoc_insertion_point(destructor:ConfigCard.LifeCardCPP)
  SharedDtor();
}

void LifeCardCPP::SharedDtor() {
  if (this != default_instance_) {
    delete first_reward_;
    delete reward_;
  }
}

void LifeCardCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LifeCardCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LifeCardCPP_descriptor_;
}

const LifeCardCPP& LifeCardCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigCard_2eproto();
  return *default_instance_;
}

LifeCardCPP* LifeCardCPP::default_instance_ = NULL;

LifeCardCPP* LifeCardCPP::New() const {
  return new LifeCardCPP;
}

void LifeCardCPP::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cost_ = 0u;
    if (has_first_reward()) {
      if (first_reward_ != NULL) first_reward_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LifeCardCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigCard.LifeCardCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cost = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_first_reward;
        break;
      }

      // required .CommonGiftConfig.CommonModifyItem first_reward = 2;
      case 2: {
        if (tag == 18) {
         parse_first_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // required .CommonGiftConfig.CommonModifyItem reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigCard.LifeCardCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigCard.LifeCardCPP)
  return false;
#undef DO_
}

void LifeCardCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigCard.LifeCardCPP)
  // required uint32 cost = 1;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cost(), output);
  }

  // required .CommonGiftConfig.CommonModifyItem first_reward = 2;
  if (has_first_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->first_reward(), output);
  }

  // required .CommonGiftConfig.CommonModifyItem reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigCard.LifeCardCPP)
}

::google::protobuf::uint8* LifeCardCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigCard.LifeCardCPP)
  // required uint32 cost = 1;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cost(), target);
  }

  // required .CommonGiftConfig.CommonModifyItem first_reward = 2;
  if (has_first_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->first_reward(), target);
  }

  // required .CommonGiftConfig.CommonModifyItem reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigCard.LifeCardCPP)
  return target;
}

int LifeCardCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cost = 1;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

    // required .CommonGiftConfig.CommonModifyItem first_reward = 2;
    if (has_first_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first_reward());
    }

    // required .CommonGiftConfig.CommonModifyItem reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LifeCardCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LifeCardCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LifeCardCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LifeCardCPP::MergeFrom(const LifeCardCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_first_reward()) {
      mutable_first_reward()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.first_reward());
    }
    if (from.has_reward()) {
      mutable_reward()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LifeCardCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LifeCardCPP::CopyFrom(const LifeCardCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LifeCardCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_first_reward()) {
    if (!this->first_reward().IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void LifeCardCPP::Swap(LifeCardCPP* other) {
  if (other != this) {
    std::swap(cost_, other->cost_);
    std::swap(first_reward_, other->first_reward_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LifeCardCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LifeCardCPP_descriptor_;
  metadata.reflection = LifeCardCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardCfg::kMonthcardFieldNumber;
const int CardCfg::kLifecardFieldNumber;
#endif  // !_MSC_VER

CardCfg::CardCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigCard.CardCfg)
}

void CardCfg::InitAsDefaultInstance() {
  monthcard_ = const_cast< ::ConfigCard::MonthCardCPP*>(&::ConfigCard::MonthCardCPP::default_instance());
  lifecard_ = const_cast< ::ConfigCard::LifeCardCPP*>(&::ConfigCard::LifeCardCPP::default_instance());
}

CardCfg::CardCfg(const CardCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigCard.CardCfg)
}

void CardCfg::SharedCtor() {
  _cached_size_ = 0;
  monthcard_ = NULL;
  lifecard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardCfg::~CardCfg() {
  // @@protoc_insertion_point(destructor:ConfigCard.CardCfg)
  SharedDtor();
}

void CardCfg::SharedDtor() {
  if (this != default_instance_) {
    delete monthcard_;
    delete lifecard_;
  }
}

void CardCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardCfg_descriptor_;
}

const CardCfg& CardCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigCard_2eproto();
  return *default_instance_;
}

CardCfg* CardCfg::default_instance_ = NULL;

CardCfg* CardCfg::New() const {
  return new CardCfg;
}

void CardCfg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_monthcard()) {
      if (monthcard_ != NULL) monthcard_->::ConfigCard::MonthCardCPP::Clear();
    }
    if (has_lifecard()) {
      if (lifecard_ != NULL) lifecard_->::ConfigCard::LifeCardCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigCard.CardCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConfigCard.MonthCardCPP monthcard = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monthcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lifecard;
        break;
      }

      // required .ConfigCard.LifeCardCPP lifecard = 2;
      case 2: {
        if (tag == 18) {
         parse_lifecard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lifecard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigCard.CardCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigCard.CardCfg)
  return false;
#undef DO_
}

void CardCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigCard.CardCfg)
  // required .ConfigCard.MonthCardCPP monthcard = 1;
  if (has_monthcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monthcard(), output);
  }

  // required .ConfigCard.LifeCardCPP lifecard = 2;
  if (has_lifecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lifecard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigCard.CardCfg)
}

::google::protobuf::uint8* CardCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigCard.CardCfg)
  // required .ConfigCard.MonthCardCPP monthcard = 1;
  if (has_monthcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monthcard(), target);
  }

  // required .ConfigCard.LifeCardCPP lifecard = 2;
  if (has_lifecard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lifecard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigCard.CardCfg)
  return target;
}

int CardCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConfigCard.MonthCardCPP monthcard = 1;
    if (has_monthcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monthcard());
    }

    // required .ConfigCard.LifeCardCPP lifecard = 2;
    if (has_lifecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lifecard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardCfg::MergeFrom(const CardCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monthcard()) {
      mutable_monthcard()->::ConfigCard::MonthCardCPP::MergeFrom(from.monthcard());
    }
    if (from.has_lifecard()) {
      mutable_lifecard()->::ConfigCard::LifeCardCPP::MergeFrom(from.lifecard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardCfg::CopyFrom(const CardCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_monthcard()) {
    if (!this->monthcard().IsInitialized()) return false;
  }
  if (has_lifecard()) {
    if (!this->lifecard().IsInitialized()) return false;
  }
  return true;
}

void CardCfg::Swap(CardCfg* other) {
  if (other != this) {
    std::swap(monthcard_, other->monthcard_);
    std::swap(lifecard_, other->lifecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardCfg_descriptor_;
  metadata.reflection = CardCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigCard

// @@protoc_insertion_point(global_scope)
