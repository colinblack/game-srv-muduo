// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigTheme.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigTheme.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigTheme {

namespace {

const ::google::protobuf::Descriptor* ThemeInfoItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeInfoItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Conf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Conf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigTheme_2eproto() {
  protobuf_AddDesc_ConfigTheme_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigTheme.proto");
  GOOGLE_CHECK(file != NULL);
  ThemeInfoItem_descriptor_ = file->message_type(0);
  static const int ThemeInfoItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeInfoItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeInfoItem, cost_),
  };
  ThemeInfoItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeInfoItem_descriptor_,
      ThemeInfoItem::default_instance_,
      ThemeInfoItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeInfoItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeInfoItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeInfoItem));
  ThemeInfo_descriptor_ = file->message_type(1);
  static const int ThemeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeInfo, themeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeInfo, item_),
  };
  ThemeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeInfo_descriptor_,
      ThemeInfo::default_instance_,
      ThemeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeInfo));
  Conf_descriptor_ = file->message_type(2);
  static const int Conf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conf, theme_),
  };
  Conf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Conf_descriptor_,
      Conf::default_instance_,
      Conf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Conf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigTheme_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeInfoItem_descriptor_, &ThemeInfoItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeInfo_descriptor_, &ThemeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Conf_descriptor_, &Conf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigTheme_2eproto() {
  delete ThemeInfoItem::default_instance_;
  delete ThemeInfoItem_reflection_;
  delete ThemeInfo::default_instance_;
  delete ThemeInfo_reflection_;
  delete Conf::default_instance_;
  delete Conf_reflection_;
}

void protobuf_AddDesc_ConfigTheme_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ConfigTheme.proto\022\013ConfigTheme\032\026Common"
    "GiftConfig.proto\"O\n\rThemeInfoItem\022\014\n\004typ"
    "e\030\001 \002(\r\0220\n\004cost\030\002 \002(\0132\".CommonGiftConfig"
    ".CommonModifyItem\"F\n\tThemeInfo\022\017\n\007themei"
    "d\030\001 \002(\r\022(\n\004item\030\002 \003(\0132\032.ConfigTheme.Them"
    "eInfoItem\"-\n\004Conf\022%\n\005theme\030\001 \003(\0132\026.Confi"
    "gTheme.ThemeInfo", 256);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigTheme.proto", &protobuf_RegisterTypes);
  ThemeInfoItem::default_instance_ = new ThemeInfoItem();
  ThemeInfo::default_instance_ = new ThemeInfo();
  Conf::default_instance_ = new Conf();
  ThemeInfoItem::default_instance_->InitAsDefaultInstance();
  ThemeInfo::default_instance_->InitAsDefaultInstance();
  Conf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigTheme_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigTheme_2eproto {
  StaticDescriptorInitializer_ConfigTheme_2eproto() {
    protobuf_AddDesc_ConfigTheme_2eproto();
  }
} static_descriptor_initializer_ConfigTheme_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ThemeInfoItem::kTypeFieldNumber;
const int ThemeInfoItem::kCostFieldNumber;
#endif  // !_MSC_VER

ThemeInfoItem::ThemeInfoItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigTheme.ThemeInfoItem)
}

void ThemeInfoItem::InitAsDefaultInstance() {
  cost_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

ThemeInfoItem::ThemeInfoItem(const ThemeInfoItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigTheme.ThemeInfoItem)
}

void ThemeInfoItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  cost_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeInfoItem::~ThemeInfoItem() {
  // @@protoc_insertion_point(destructor:ConfigTheme.ThemeInfoItem)
  SharedDtor();
}

void ThemeInfoItem::SharedDtor() {
  if (this != default_instance_) {
    delete cost_;
  }
}

void ThemeInfoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeInfoItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeInfoItem_descriptor_;
}

const ThemeInfoItem& ThemeInfoItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigTheme_2eproto();
  return *default_instance_;
}

ThemeInfoItem* ThemeInfoItem::default_instance_ = NULL;

ThemeInfoItem* ThemeInfoItem::New() const {
  return new ThemeInfoItem;
}

void ThemeInfoItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0u;
    if (has_cost()) {
      if (cost_ != NULL) cost_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeInfoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigTheme.ThemeInfoItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cost;
        break;
      }

      // required .CommonGiftConfig.CommonModifyItem cost = 2;
      case 2: {
        if (tag == 18) {
         parse_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigTheme.ThemeInfoItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigTheme.ThemeInfoItem)
  return false;
#undef DO_
}

void ThemeInfoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigTheme.ThemeInfoItem)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required .CommonGiftConfig.CommonModifyItem cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigTheme.ThemeInfoItem)
}

::google::protobuf::uint8* ThemeInfoItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigTheme.ThemeInfoItem)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required .CommonGiftConfig.CommonModifyItem cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigTheme.ThemeInfoItem)
  return target;
}

int ThemeInfoItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .CommonGiftConfig.CommonModifyItem cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeInfoItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeInfoItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeInfoItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeInfoItem::MergeFrom(const ThemeInfoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cost()) {
      mutable_cost()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeInfoItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeInfoItem::CopyFrom(const ThemeInfoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeInfoItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cost()) {
    if (!this->cost().IsInitialized()) return false;
  }
  return true;
}

void ThemeInfoItem::Swap(ThemeInfoItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeInfoItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeInfoItem_descriptor_;
  metadata.reflection = ThemeInfoItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeInfo::kThemeidFieldNumber;
const int ThemeInfo::kItemFieldNumber;
#endif  // !_MSC_VER

ThemeInfo::ThemeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigTheme.ThemeInfo)
}

void ThemeInfo::InitAsDefaultInstance() {
}

ThemeInfo::ThemeInfo(const ThemeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigTheme.ThemeInfo)
}

void ThemeInfo::SharedCtor() {
  _cached_size_ = 0;
  themeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeInfo::~ThemeInfo() {
  // @@protoc_insertion_point(destructor:ConfigTheme.ThemeInfo)
  SharedDtor();
}

void ThemeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThemeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeInfo_descriptor_;
}

const ThemeInfo& ThemeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigTheme_2eproto();
  return *default_instance_;
}

ThemeInfo* ThemeInfo::default_instance_ = NULL;

ThemeInfo* ThemeInfo::New() const {
  return new ThemeInfo;
}

void ThemeInfo::Clear() {
  themeid_ = 0u;
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigTheme.ThemeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 themeid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &themeid_)));
          set_has_themeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .ConfigTheme.ThemeInfoItem item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigTheme.ThemeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigTheme.ThemeInfo)
  return false;
#undef DO_
}

void ThemeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigTheme.ThemeInfo)
  // required uint32 themeid = 1;
  if (has_themeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->themeid(), output);
  }

  // repeated .ConfigTheme.ThemeInfoItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigTheme.ThemeInfo)
}

::google::protobuf::uint8* ThemeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigTheme.ThemeInfo)
  // required uint32 themeid = 1;
  if (has_themeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->themeid(), target);
  }

  // repeated .ConfigTheme.ThemeInfoItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigTheme.ThemeInfo)
  return target;
}

int ThemeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 themeid = 1;
    if (has_themeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->themeid());
    }

  }
  // repeated .ConfigTheme.ThemeInfoItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeInfo::MergeFrom(const ThemeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_themeid()) {
      set_themeid(from.themeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeInfo::CopyFrom(const ThemeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void ThemeInfo::Swap(ThemeInfo* other) {
  if (other != this) {
    std::swap(themeid_, other->themeid_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeInfo_descriptor_;
  metadata.reflection = ThemeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Conf::kThemeFieldNumber;
#endif  // !_MSC_VER

Conf::Conf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigTheme.Conf)
}

void Conf::InitAsDefaultInstance() {
}

Conf::Conf(const Conf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigTheme.Conf)
}

void Conf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Conf::~Conf() {
  // @@protoc_insertion_point(destructor:ConfigTheme.Conf)
  SharedDtor();
}

void Conf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Conf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Conf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Conf_descriptor_;
}

const Conf& Conf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigTheme_2eproto();
  return *default_instance_;
}

Conf* Conf::default_instance_ = NULL;

Conf* Conf::New() const {
  return new Conf;
}

void Conf::Clear() {
  theme_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Conf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigTheme.Conf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigTheme.ThemeInfo theme = 1;
      case 1: {
        if (tag == 10) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_theme()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_theme;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigTheme.Conf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigTheme.Conf)
  return false;
#undef DO_
}

void Conf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigTheme.Conf)
  // repeated .ConfigTheme.ThemeInfo theme = 1;
  for (int i = 0; i < this->theme_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->theme(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigTheme.Conf)
}

::google::protobuf::uint8* Conf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigTheme.Conf)
  // repeated .ConfigTheme.ThemeInfo theme = 1;
  for (int i = 0; i < this->theme_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->theme(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigTheme.Conf)
  return target;
}

int Conf::ByteSize() const {
  int total_size = 0;

  // repeated .ConfigTheme.ThemeInfo theme = 1;
  total_size += 1 * this->theme_size();
  for (int i = 0; i < this->theme_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->theme(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Conf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Conf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Conf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Conf::MergeFrom(const Conf& from) {
  GOOGLE_CHECK_NE(&from, this);
  theme_.MergeFrom(from.theme_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Conf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conf::CopyFrom(const Conf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conf::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->theme())) return false;
  return true;
}

void Conf::Swap(Conf* other) {
  if (other != this) {
    theme_.Swap(&other->theme_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Conf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Conf_descriptor_;
  metadata.reflection = Conf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigTheme

// @@protoc_insertion_point(global_scope)
