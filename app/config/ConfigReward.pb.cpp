// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigReward.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigReward.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigReward {

namespace {

const ::google::protobuf::Descriptor* FirstRechargeRewardCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FirstRechargeRewardCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FollowPublicRewardCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FollowPublicRewardCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchProductWatchAdsItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchProductWatchAdsItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchProductWatchAds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchProductWatchAds_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigReward_2eproto() {
  protobuf_AddDesc_ConfigReward_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigReward.proto");
  GOOGLE_CHECK(file != NULL);
  FirstRechargeRewardCPP_descriptor_ = file->message_type(0);
  static const int FirstRechargeRewardCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeRewardCPP, common_),
  };
  FirstRechargeRewardCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FirstRechargeRewardCPP_descriptor_,
      FirstRechargeRewardCPP::default_instance_,
      FirstRechargeRewardCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeRewardCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeRewardCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FirstRechargeRewardCPP));
  FollowPublicRewardCPP_descriptor_ = file->message_type(1);
  static const int FollowPublicRewardCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowPublicRewardCPP, common_),
  };
  FollowPublicRewardCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FollowPublicRewardCPP_descriptor_,
      FollowPublicRewardCPP::default_instance_,
      FollowPublicRewardCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowPublicRewardCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowPublicRewardCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FollowPublicRewardCPP));
  FetchProductWatchAdsItem_descriptor_ = file->message_type(2);
  static const int FetchProductWatchAdsItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAdsItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAdsItem, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAdsItem, count_),
  };
  FetchProductWatchAdsItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchProductWatchAdsItem_descriptor_,
      FetchProductWatchAdsItem::default_instance_,
      FetchProductWatchAdsItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAdsItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAdsItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchProductWatchAdsItem));
  FetchProductWatchAds_descriptor_ = file->message_type(3);
  static const int FetchProductWatchAds_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAds, mintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAds, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAds, reward_),
  };
  FetchProductWatchAds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchProductWatchAds_descriptor_,
      FetchProductWatchAds::default_instance_,
      FetchProductWatchAds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchProductWatchAds));
  RewardList_descriptor_ = file->message_type(4);
  static const int RewardList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardList, firstrecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardList, followpublic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardList, fetchproductwatchads_),
  };
  RewardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardList_descriptor_,
      RewardList::default_instance_,
      RewardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigReward_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FirstRechargeRewardCPP_descriptor_, &FirstRechargeRewardCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FollowPublicRewardCPP_descriptor_, &FollowPublicRewardCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchProductWatchAdsItem_descriptor_, &FetchProductWatchAdsItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchProductWatchAds_descriptor_, &FetchProductWatchAds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardList_descriptor_, &RewardList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigReward_2eproto() {
  delete FirstRechargeRewardCPP::default_instance_;
  delete FirstRechargeRewardCPP_reflection_;
  delete FollowPublicRewardCPP::default_instance_;
  delete FollowPublicRewardCPP_reflection_;
  delete FetchProductWatchAdsItem::default_instance_;
  delete FetchProductWatchAdsItem_reflection_;
  delete FetchProductWatchAds::default_instance_;
  delete FetchProductWatchAds_reflection_;
  delete RewardList::default_instance_;
  delete RewardList_reflection_;
}

void protobuf_AddDesc_ConfigReward_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ConfigReward.proto\022\014ConfigReward\032\026Comm"
    "onGiftConfig.proto\"L\n\026FirstRechargeRewar"
    "dCPP\0222\n\006common\030\001 \002(\0132\".CommonGiftConfig."
    "CommonModifyItem\"K\n\025FollowPublicRewardCP"
    "P\0222\n\006common\030\001 \002(\0132\".CommonGiftConfig.Com"
    "monModifyItem\"C\n\030FetchProductWatchAdsIte"
    "m\022\n\n\002id\030\001 \002(\r\022\014\n\004rate\030\002 \002(\r\022\r\n\005count\030\003 \002"
    "(\r\"k\n\024FetchProductWatchAds\022\017\n\007minTime\030\001 "
    "\002(\r\022\n\n\002cd\030\002 \002(\r\0226\n\006reward\030\003 \003(\0132&.Config"
    "Reward.FetchProductWatchAdsItem\"\306\001\n\nRewa"
    "rdList\022;\n\rfirstRecharge\030\001 \002(\0132$.ConfigRe"
    "ward.FirstRechargeRewardCPP\0229\n\014followPub"
    "lic\030\002 \002(\0132#.ConfigReward.FollowPublicRew"
    "ardCPP\022@\n\024fetchProductWatchAds\030\003 \002(\0132\".C"
    "onfigReward.FetchProductWatchAds", 592);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigReward.proto", &protobuf_RegisterTypes);
  FirstRechargeRewardCPP::default_instance_ = new FirstRechargeRewardCPP();
  FollowPublicRewardCPP::default_instance_ = new FollowPublicRewardCPP();
  FetchProductWatchAdsItem::default_instance_ = new FetchProductWatchAdsItem();
  FetchProductWatchAds::default_instance_ = new FetchProductWatchAds();
  RewardList::default_instance_ = new RewardList();
  FirstRechargeRewardCPP::default_instance_->InitAsDefaultInstance();
  FollowPublicRewardCPP::default_instance_->InitAsDefaultInstance();
  FetchProductWatchAdsItem::default_instance_->InitAsDefaultInstance();
  FetchProductWatchAds::default_instance_->InitAsDefaultInstance();
  RewardList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigReward_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigReward_2eproto {
  StaticDescriptorInitializer_ConfigReward_2eproto() {
    protobuf_AddDesc_ConfigReward_2eproto();
  }
} static_descriptor_initializer_ConfigReward_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FirstRechargeRewardCPP::kCommonFieldNumber;
#endif  // !_MSC_VER

FirstRechargeRewardCPP::FirstRechargeRewardCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigReward.FirstRechargeRewardCPP)
}

void FirstRechargeRewardCPP::InitAsDefaultInstance() {
  common_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

FirstRechargeRewardCPP::FirstRechargeRewardCPP(const FirstRechargeRewardCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigReward.FirstRechargeRewardCPP)
}

void FirstRechargeRewardCPP::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FirstRechargeRewardCPP::~FirstRechargeRewardCPP() {
  // @@protoc_insertion_point(destructor:ConfigReward.FirstRechargeRewardCPP)
  SharedDtor();
}

void FirstRechargeRewardCPP::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void FirstRechargeRewardCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FirstRechargeRewardCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FirstRechargeRewardCPP_descriptor_;
}

const FirstRechargeRewardCPP& FirstRechargeRewardCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigReward_2eproto();
  return *default_instance_;
}

FirstRechargeRewardCPP* FirstRechargeRewardCPP::default_instance_ = NULL;

FirstRechargeRewardCPP* FirstRechargeRewardCPP::New() const {
  return new FirstRechargeRewardCPP;
}

void FirstRechargeRewardCPP::Clear() {
  if (has_common()) {
    if (common_ != NULL) common_->::CommonGiftConfig::CommonModifyItem::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FirstRechargeRewardCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigReward.FirstRechargeRewardCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CommonGiftConfig.CommonModifyItem common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigReward.FirstRechargeRewardCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigReward.FirstRechargeRewardCPP)
  return false;
#undef DO_
}

void FirstRechargeRewardCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigReward.FirstRechargeRewardCPP)
  // required .CommonGiftConfig.CommonModifyItem common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigReward.FirstRechargeRewardCPP)
}

::google::protobuf::uint8* FirstRechargeRewardCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigReward.FirstRechargeRewardCPP)
  // required .CommonGiftConfig.CommonModifyItem common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigReward.FirstRechargeRewardCPP)
  return target;
}

int FirstRechargeRewardCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CommonGiftConfig.CommonModifyItem common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FirstRechargeRewardCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FirstRechargeRewardCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FirstRechargeRewardCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FirstRechargeRewardCPP::MergeFrom(const FirstRechargeRewardCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FirstRechargeRewardCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstRechargeRewardCPP::CopyFrom(const FirstRechargeRewardCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstRechargeRewardCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void FirstRechargeRewardCPP::Swap(FirstRechargeRewardCPP* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FirstRechargeRewardCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FirstRechargeRewardCPP_descriptor_;
  metadata.reflection = FirstRechargeRewardCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FollowPublicRewardCPP::kCommonFieldNumber;
#endif  // !_MSC_VER

FollowPublicRewardCPP::FollowPublicRewardCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigReward.FollowPublicRewardCPP)
}

void FollowPublicRewardCPP::InitAsDefaultInstance() {
  common_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

FollowPublicRewardCPP::FollowPublicRewardCPP(const FollowPublicRewardCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigReward.FollowPublicRewardCPP)
}

void FollowPublicRewardCPP::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FollowPublicRewardCPP::~FollowPublicRewardCPP() {
  // @@protoc_insertion_point(destructor:ConfigReward.FollowPublicRewardCPP)
  SharedDtor();
}

void FollowPublicRewardCPP::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void FollowPublicRewardCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FollowPublicRewardCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowPublicRewardCPP_descriptor_;
}

const FollowPublicRewardCPP& FollowPublicRewardCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigReward_2eproto();
  return *default_instance_;
}

FollowPublicRewardCPP* FollowPublicRewardCPP::default_instance_ = NULL;

FollowPublicRewardCPP* FollowPublicRewardCPP::New() const {
  return new FollowPublicRewardCPP;
}

void FollowPublicRewardCPP::Clear() {
  if (has_common()) {
    if (common_ != NULL) common_->::CommonGiftConfig::CommonModifyItem::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FollowPublicRewardCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigReward.FollowPublicRewardCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CommonGiftConfig.CommonModifyItem common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigReward.FollowPublicRewardCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigReward.FollowPublicRewardCPP)
  return false;
#undef DO_
}

void FollowPublicRewardCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigReward.FollowPublicRewardCPP)
  // required .CommonGiftConfig.CommonModifyItem common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigReward.FollowPublicRewardCPP)
}

::google::protobuf::uint8* FollowPublicRewardCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigReward.FollowPublicRewardCPP)
  // required .CommonGiftConfig.CommonModifyItem common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigReward.FollowPublicRewardCPP)
  return target;
}

int FollowPublicRewardCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CommonGiftConfig.CommonModifyItem common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FollowPublicRewardCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FollowPublicRewardCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FollowPublicRewardCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FollowPublicRewardCPP::MergeFrom(const FollowPublicRewardCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FollowPublicRewardCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowPublicRewardCPP::CopyFrom(const FollowPublicRewardCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowPublicRewardCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void FollowPublicRewardCPP::Swap(FollowPublicRewardCPP* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FollowPublicRewardCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FollowPublicRewardCPP_descriptor_;
  metadata.reflection = FollowPublicRewardCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchProductWatchAdsItem::kIdFieldNumber;
const int FetchProductWatchAdsItem::kRateFieldNumber;
const int FetchProductWatchAdsItem::kCountFieldNumber;
#endif  // !_MSC_VER

FetchProductWatchAdsItem::FetchProductWatchAdsItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigReward.FetchProductWatchAdsItem)
}

void FetchProductWatchAdsItem::InitAsDefaultInstance() {
}

FetchProductWatchAdsItem::FetchProductWatchAdsItem(const FetchProductWatchAdsItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigReward.FetchProductWatchAdsItem)
}

void FetchProductWatchAdsItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  rate_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchProductWatchAdsItem::~FetchProductWatchAdsItem() {
  // @@protoc_insertion_point(destructor:ConfigReward.FetchProductWatchAdsItem)
  SharedDtor();
}

void FetchProductWatchAdsItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FetchProductWatchAdsItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchProductWatchAdsItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchProductWatchAdsItem_descriptor_;
}

const FetchProductWatchAdsItem& FetchProductWatchAdsItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigReward_2eproto();
  return *default_instance_;
}

FetchProductWatchAdsItem* FetchProductWatchAdsItem::default_instance_ = NULL;

FetchProductWatchAdsItem* FetchProductWatchAdsItem::New() const {
  return new FetchProductWatchAdsItem;
}

void FetchProductWatchAdsItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FetchProductWatchAdsItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchProductWatchAdsItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigReward.FetchProductWatchAdsItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // required uint32 rate = 2;
      case 2: {
        if (tag == 16) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigReward.FetchProductWatchAdsItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigReward.FetchProductWatchAdsItem)
  return false;
#undef DO_
}

void FetchProductWatchAdsItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigReward.FetchProductWatchAdsItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rate(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigReward.FetchProductWatchAdsItem)
}

::google::protobuf::uint8* FetchProductWatchAdsItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigReward.FetchProductWatchAdsItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rate(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigReward.FetchProductWatchAdsItem)
  return target;
}

int FetchProductWatchAdsItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchProductWatchAdsItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchProductWatchAdsItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchProductWatchAdsItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchProductWatchAdsItem::MergeFrom(const FetchProductWatchAdsItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchProductWatchAdsItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchProductWatchAdsItem::CopyFrom(const FetchProductWatchAdsItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchProductWatchAdsItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FetchProductWatchAdsItem::Swap(FetchProductWatchAdsItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rate_, other->rate_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchProductWatchAdsItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchProductWatchAdsItem_descriptor_;
  metadata.reflection = FetchProductWatchAdsItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchProductWatchAds::kMinTimeFieldNumber;
const int FetchProductWatchAds::kCdFieldNumber;
const int FetchProductWatchAds::kRewardFieldNumber;
#endif  // !_MSC_VER

FetchProductWatchAds::FetchProductWatchAds()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigReward.FetchProductWatchAds)
}

void FetchProductWatchAds::InitAsDefaultInstance() {
}

FetchProductWatchAds::FetchProductWatchAds(const FetchProductWatchAds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigReward.FetchProductWatchAds)
}

void FetchProductWatchAds::SharedCtor() {
  _cached_size_ = 0;
  mintime_ = 0u;
  cd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchProductWatchAds::~FetchProductWatchAds() {
  // @@protoc_insertion_point(destructor:ConfigReward.FetchProductWatchAds)
  SharedDtor();
}

void FetchProductWatchAds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FetchProductWatchAds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchProductWatchAds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchProductWatchAds_descriptor_;
}

const FetchProductWatchAds& FetchProductWatchAds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigReward_2eproto();
  return *default_instance_;
}

FetchProductWatchAds* FetchProductWatchAds::default_instance_ = NULL;

FetchProductWatchAds* FetchProductWatchAds::New() const {
  return new FetchProductWatchAds;
}

void FetchProductWatchAds::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FetchProductWatchAds*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mintime_, cd_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchProductWatchAds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigReward.FetchProductWatchAds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 minTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mintime_)));
          set_has_mintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // required uint32 cd = 2;
      case 2: {
        if (tag == 16) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .ConfigReward.FetchProductWatchAdsItem reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigReward.FetchProductWatchAds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigReward.FetchProductWatchAds)
  return false;
#undef DO_
}

void FetchProductWatchAds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigReward.FetchProductWatchAds)
  // required uint32 minTime = 1;
  if (has_mintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mintime(), output);
  }

  // required uint32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cd(), output);
  }

  // repeated .ConfigReward.FetchProductWatchAdsItem reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigReward.FetchProductWatchAds)
}

::google::protobuf::uint8* FetchProductWatchAds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigReward.FetchProductWatchAds)
  // required uint32 minTime = 1;
  if (has_mintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mintime(), target);
  }

  // required uint32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cd(), target);
  }

  // repeated .ConfigReward.FetchProductWatchAdsItem reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigReward.FetchProductWatchAds)
  return target;
}

int FetchProductWatchAds::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 minTime = 1;
    if (has_mintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mintime());
    }

    // required uint32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

  }
  // repeated .ConfigReward.FetchProductWatchAdsItem reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchProductWatchAds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchProductWatchAds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchProductWatchAds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchProductWatchAds::MergeFrom(const FetchProductWatchAds& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mintime()) {
      set_mintime(from.mintime());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchProductWatchAds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchProductWatchAds::CopyFrom(const FetchProductWatchAds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchProductWatchAds::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void FetchProductWatchAds::Swap(FetchProductWatchAds* other) {
  if (other != this) {
    std::swap(mintime_, other->mintime_);
    std::swap(cd_, other->cd_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchProductWatchAds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchProductWatchAds_descriptor_;
  metadata.reflection = FetchProductWatchAds_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardList::kFirstRechargeFieldNumber;
const int RewardList::kFollowPublicFieldNumber;
const int RewardList::kFetchProductWatchAdsFieldNumber;
#endif  // !_MSC_VER

RewardList::RewardList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigReward.RewardList)
}

void RewardList::InitAsDefaultInstance() {
  firstrecharge_ = const_cast< ::ConfigReward::FirstRechargeRewardCPP*>(&::ConfigReward::FirstRechargeRewardCPP::default_instance());
  followpublic_ = const_cast< ::ConfigReward::FollowPublicRewardCPP*>(&::ConfigReward::FollowPublicRewardCPP::default_instance());
  fetchproductwatchads_ = const_cast< ::ConfigReward::FetchProductWatchAds*>(&::ConfigReward::FetchProductWatchAds::default_instance());
}

RewardList::RewardList(const RewardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigReward.RewardList)
}

void RewardList::SharedCtor() {
  _cached_size_ = 0;
  firstrecharge_ = NULL;
  followpublic_ = NULL;
  fetchproductwatchads_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardList::~RewardList() {
  // @@protoc_insertion_point(destructor:ConfigReward.RewardList)
  SharedDtor();
}

void RewardList::SharedDtor() {
  if (this != default_instance_) {
    delete firstrecharge_;
    delete followpublic_;
    delete fetchproductwatchads_;
  }
}

void RewardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardList_descriptor_;
}

const RewardList& RewardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigReward_2eproto();
  return *default_instance_;
}

RewardList* RewardList::default_instance_ = NULL;

RewardList* RewardList::New() const {
  return new RewardList;
}

void RewardList::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_firstrecharge()) {
      if (firstrecharge_ != NULL) firstrecharge_->::ConfigReward::FirstRechargeRewardCPP::Clear();
    }
    if (has_followpublic()) {
      if (followpublic_ != NULL) followpublic_->::ConfigReward::FollowPublicRewardCPP::Clear();
    }
    if (has_fetchproductwatchads()) {
      if (fetchproductwatchads_ != NULL) fetchproductwatchads_->::ConfigReward::FetchProductWatchAds::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigReward.RewardList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConfigReward.FirstRechargeRewardCPP firstRecharge = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firstrecharge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_followPublic;
        break;
      }

      // required .ConfigReward.FollowPublicRewardCPP followPublic = 2;
      case 2: {
        if (tag == 18) {
         parse_followPublic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_followpublic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fetchProductWatchAds;
        break;
      }

      // required .ConfigReward.FetchProductWatchAds fetchProductWatchAds = 3;
      case 3: {
        if (tag == 26) {
         parse_fetchProductWatchAds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetchproductwatchads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigReward.RewardList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigReward.RewardList)
  return false;
#undef DO_
}

void RewardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigReward.RewardList)
  // required .ConfigReward.FirstRechargeRewardCPP firstRecharge = 1;
  if (has_firstrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->firstrecharge(), output);
  }

  // required .ConfigReward.FollowPublicRewardCPP followPublic = 2;
  if (has_followpublic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->followpublic(), output);
  }

  // required .ConfigReward.FetchProductWatchAds fetchProductWatchAds = 3;
  if (has_fetchproductwatchads()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fetchproductwatchads(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigReward.RewardList)
}

::google::protobuf::uint8* RewardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigReward.RewardList)
  // required .ConfigReward.FirstRechargeRewardCPP firstRecharge = 1;
  if (has_firstrecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->firstrecharge(), target);
  }

  // required .ConfigReward.FollowPublicRewardCPP followPublic = 2;
  if (has_followpublic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->followpublic(), target);
  }

  // required .ConfigReward.FetchProductWatchAds fetchProductWatchAds = 3;
  if (has_fetchproductwatchads()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fetchproductwatchads(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigReward.RewardList)
  return target;
}

int RewardList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConfigReward.FirstRechargeRewardCPP firstRecharge = 1;
    if (has_firstrecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->firstrecharge());
    }

    // required .ConfigReward.FollowPublicRewardCPP followPublic = 2;
    if (has_followpublic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->followpublic());
    }

    // required .ConfigReward.FetchProductWatchAds fetchProductWatchAds = 3;
    if (has_fetchproductwatchads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchproductwatchads());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardList::MergeFrom(const RewardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstrecharge()) {
      mutable_firstrecharge()->::ConfigReward::FirstRechargeRewardCPP::MergeFrom(from.firstrecharge());
    }
    if (from.has_followpublic()) {
      mutable_followpublic()->::ConfigReward::FollowPublicRewardCPP::MergeFrom(from.followpublic());
    }
    if (from.has_fetchproductwatchads()) {
      mutable_fetchproductwatchads()->::ConfigReward::FetchProductWatchAds::MergeFrom(from.fetchproductwatchads());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardList::CopyFrom(const RewardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_firstrecharge()) {
    if (!this->firstrecharge().IsInitialized()) return false;
  }
  if (has_followpublic()) {
    if (!this->followpublic().IsInitialized()) return false;
  }
  if (has_fetchproductwatchads()) {
    if (!this->fetchproductwatchads().IsInitialized()) return false;
  }
  return true;
}

void RewardList::Swap(RewardList* other) {
  if (other != this) {
    std::swap(firstrecharge_, other->firstrecharge_);
    std::swap(followpublic_, other->followpublic_);
    std::swap(fetchproductwatchads_, other->fetchproductwatchads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardList_descriptor_;
  metadata.reflection = RewardList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigReward

// @@protoc_insertion_point(global_scope)
