// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigRotaryTable.proto

#ifndef PROTOBUF_ConfigRotaryTable_2eproto__INCLUDED
#define PROTOBUF_ConfigRotaryTable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ConfigRotaryTable {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ConfigRotaryTable_2eproto();
void protobuf_AssignDesc_ConfigRotaryTable_2eproto();
void protobuf_ShutdownFile_ConfigRotaryTable_2eproto();

class RotaryTableCPP;
class RotaryTableGridCommonCPP;
class RandomItemLib;
class RotaryTableItemCPP;
class RotaryTableCfg;

// ===================================================================

class RotaryTableCPP : public ::google::protobuf::Message {
 public:
  RotaryTableCPP();
  virtual ~RotaryTableCPP();

  RotaryTableCPP(const RotaryTableCPP& from);

  inline RotaryTableCPP& operator=(const RotaryTableCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RotaryTableCPP& default_instance();

  void Swap(RotaryTableCPP* other);

  // implements Message ----------------------------------------------

  RotaryTableCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RotaryTableCPP& from);
  void MergeFrom(const RotaryTableCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unlock_level = 1;
  inline bool has_unlock_level() const;
  inline void clear_unlock_level();
  static const int kUnlockLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 unlock_level() const;
  inline void set_unlock_level(::google::protobuf::uint32 value);

  // required uint32 daily_friendly_draw_cnt = 2;
  inline bool has_daily_friendly_draw_cnt() const;
  inline void clear_daily_friendly_draw_cnt();
  static const int kDailyFriendlyDrawCntFieldNumber = 2;
  inline ::google::protobuf::uint32 daily_friendly_draw_cnt() const;
  inline void set_daily_friendly_draw_cnt(::google::protobuf::uint32 value);

  // required uint32 daily_free_draw_cnt = 3;
  inline bool has_daily_free_draw_cnt() const;
  inline void clear_daily_free_draw_cnt();
  static const int kDailyFreeDrawCntFieldNumber = 3;
  inline ::google::protobuf::uint32 daily_free_draw_cnt() const;
  inline void set_daily_free_draw_cnt(::google::protobuf::uint32 value);

  // required uint32 daily_login_draw_cnt = 4;
  inline bool has_daily_login_draw_cnt() const;
  inline void clear_daily_login_draw_cnt();
  static const int kDailyLoginDrawCntFieldNumber = 4;
  inline ::google::protobuf::uint32 daily_login_draw_cnt() const;
  inline void set_daily_login_draw_cnt(::google::protobuf::uint32 value);

  // required uint32 cost_friendly_value_draw = 5;
  inline bool has_cost_friendly_value_draw() const;
  inline void clear_cost_friendly_value_draw();
  static const int kCostFriendlyValueDrawFieldNumber = 5;
  inline ::google::protobuf::uint32 cost_friendly_value_draw() const;
  inline void set_cost_friendly_value_draw(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigRotaryTable.RotaryTableCPP)
 private:
  inline void set_has_unlock_level();
  inline void clear_has_unlock_level();
  inline void set_has_daily_friendly_draw_cnt();
  inline void clear_has_daily_friendly_draw_cnt();
  inline void set_has_daily_free_draw_cnt();
  inline void clear_has_daily_free_draw_cnt();
  inline void set_has_daily_login_draw_cnt();
  inline void clear_has_daily_login_draw_cnt();
  inline void set_has_cost_friendly_value_draw();
  inline void clear_has_cost_friendly_value_draw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 unlock_level_;
  ::google::protobuf::uint32 daily_friendly_draw_cnt_;
  ::google::protobuf::uint32 daily_free_draw_cnt_;
  ::google::protobuf::uint32 daily_login_draw_cnt_;
  ::google::protobuf::uint32 cost_friendly_value_draw_;
  friend void  protobuf_AddDesc_ConfigRotaryTable_2eproto();
  friend void protobuf_AssignDesc_ConfigRotaryTable_2eproto();
  friend void protobuf_ShutdownFile_ConfigRotaryTable_2eproto();

  void InitAsDefaultInstance();
  static RotaryTableCPP* default_instance_;
};
// -------------------------------------------------------------------

class RotaryTableGridCommonCPP : public ::google::protobuf::Message {
 public:
  RotaryTableGridCommonCPP();
  virtual ~RotaryTableGridCommonCPP();

  RotaryTableGridCommonCPP(const RotaryTableGridCommonCPP& from);

  inline RotaryTableGridCommonCPP& operator=(const RotaryTableGridCommonCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RotaryTableGridCommonCPP& default_instance();

  void Swap(RotaryTableGridCommonCPP* other);

  // implements Message ----------------------------------------------

  RotaryTableGridCommonCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RotaryTableGridCommonCPP& from);
  void MergeFrom(const RotaryTableGridCommonCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gridid = 1;
  inline bool has_gridid() const;
  inline void clear_gridid();
  static const int kGrididFieldNumber = 1;
  inline ::google::protobuf::uint32 gridid() const;
  inline void set_gridid(::google::protobuf::uint32 value);

  // required uint32 weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigRotaryTable.RotaryTableGridCommonCPP)
 private:
  inline void set_has_gridid();
  inline void clear_has_gridid();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gridid_;
  ::google::protobuf::uint32 weight_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_ConfigRotaryTable_2eproto();
  friend void protobuf_AssignDesc_ConfigRotaryTable_2eproto();
  friend void protobuf_ShutdownFile_ConfigRotaryTable_2eproto();

  void InitAsDefaultInstance();
  static RotaryTableGridCommonCPP* default_instance_;
};
// -------------------------------------------------------------------

class RandomItemLib : public ::google::protobuf::Message {
 public:
  RandomItemLib();
  virtual ~RandomItemLib();

  RandomItemLib(const RandomItemLib& from);

  inline RandomItemLib& operator=(const RandomItemLib& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandomItemLib& default_instance();

  void Swap(RandomItemLib* other);

  // implements Message ----------------------------------------------

  RandomItemLib* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandomItemLib& from);
  void MergeFrom(const RandomItemLib& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 itemid = 1;
  inline int itemid_size() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid(int index) const;
  inline void set_itemid(int index, ::google::protobuf::uint32 value);
  inline void add_itemid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      itemid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_itemid();

  // @@protoc_insertion_point(class_scope:ConfigRotaryTable.RandomItemLib)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > itemid_;
  friend void  protobuf_AddDesc_ConfigRotaryTable_2eproto();
  friend void protobuf_AssignDesc_ConfigRotaryTable_2eproto();
  friend void protobuf_ShutdownFile_ConfigRotaryTable_2eproto();

  void InitAsDefaultInstance();
  static RandomItemLib* default_instance_;
};
// -------------------------------------------------------------------

class RotaryTableItemCPP : public ::google::protobuf::Message {
 public:
  RotaryTableItemCPP();
  virtual ~RotaryTableItemCPP();

  RotaryTableItemCPP(const RotaryTableItemCPP& from);

  inline RotaryTableItemCPP& operator=(const RotaryTableItemCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RotaryTableItemCPP& default_instance();

  void Swap(RotaryTableItemCPP* other);

  // implements Message ----------------------------------------------

  RotaryTableItemCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RotaryTableItemCPP& from);
  void MergeFrom(const RotaryTableItemCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 diamondcnt = 1;
  inline int diamondcnt_size() const;
  inline void clear_diamondcnt();
  static const int kDiamondcntFieldNumber = 1;
  inline ::google::protobuf::uint32 diamondcnt(int index) const;
  inline void set_diamondcnt(int index, ::google::protobuf::uint32 value);
  inline void add_diamondcnt(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      diamondcnt() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_diamondcnt();

  // repeated uint32 coinBaseK = 2;
  inline int coinbasek_size() const;
  inline void clear_coinbasek();
  static const int kCoinBaseKFieldNumber = 2;
  inline ::google::protobuf::uint32 coinbasek(int index) const;
  inline void set_coinbasek(int index, ::google::protobuf::uint32 value);
  inline void add_coinbasek(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      coinbasek() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_coinbasek();

  // repeated uint32 speedcardcnt = 3;
  inline int speedcardcnt_size() const;
  inline void clear_speedcardcnt();
  static const int kSpeedcardcntFieldNumber = 3;
  inline ::google::protobuf::uint32 speedcardcnt(int index) const;
  inline void set_speedcardcnt(int index, ::google::protobuf::uint32 value);
  inline void add_speedcardcnt(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      speedcardcnt() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_speedcardcnt();

  // required uint32 cropbaseK = 4;
  inline bool has_cropbasek() const;
  inline void clear_cropbasek();
  static const int kCropbaseKFieldNumber = 4;
  inline ::google::protobuf::uint32 cropbasek() const;
  inline void set_cropbasek(::google::protobuf::uint32 value);

  // repeated .ConfigRotaryTable.RandomItemLib randomitemlib = 5;
  inline int randomitemlib_size() const;
  inline void clear_randomitemlib();
  static const int kRandomitemlibFieldNumber = 5;
  inline const ::ConfigRotaryTable::RandomItemLib& randomitemlib(int index) const;
  inline ::ConfigRotaryTable::RandomItemLib* mutable_randomitemlib(int index);
  inline ::ConfigRotaryTable::RandomItemLib* add_randomitemlib();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigRotaryTable::RandomItemLib >&
      randomitemlib() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigRotaryTable::RandomItemLib >*
      mutable_randomitemlib();

  // @@protoc_insertion_point(class_scope:ConfigRotaryTable.RotaryTableItemCPP)
 private:
  inline void set_has_cropbasek();
  inline void clear_has_cropbasek();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > diamondcnt_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > coinbasek_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > speedcardcnt_;
  ::google::protobuf::RepeatedPtrField< ::ConfigRotaryTable::RandomItemLib > randomitemlib_;
  ::google::protobuf::uint32 cropbasek_;
  friend void  protobuf_AddDesc_ConfigRotaryTable_2eproto();
  friend void protobuf_AssignDesc_ConfigRotaryTable_2eproto();
  friend void protobuf_ShutdownFile_ConfigRotaryTable_2eproto();

  void InitAsDefaultInstance();
  static RotaryTableItemCPP* default_instance_;
};
// -------------------------------------------------------------------

class RotaryTableCfg : public ::google::protobuf::Message {
 public:
  RotaryTableCfg();
  virtual ~RotaryTableCfg();

  RotaryTableCfg(const RotaryTableCfg& from);

  inline RotaryTableCfg& operator=(const RotaryTableCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RotaryTableCfg& default_instance();

  void Swap(RotaryTableCfg* other);

  // implements Message ----------------------------------------------

  RotaryTableCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RotaryTableCfg& from);
  void MergeFrom(const RotaryTableCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ConfigRotaryTable.RotaryTableCPP rotarytablebase = 1;
  inline bool has_rotarytablebase() const;
  inline void clear_rotarytablebase();
  static const int kRotarytablebaseFieldNumber = 1;
  inline const ::ConfigRotaryTable::RotaryTableCPP& rotarytablebase() const;
  inline ::ConfigRotaryTable::RotaryTableCPP* mutable_rotarytablebase();
  inline ::ConfigRotaryTable::RotaryTableCPP* release_rotarytablebase();
  inline void set_allocated_rotarytablebase(::ConfigRotaryTable::RotaryTableCPP* rotarytablebase);

  // repeated .ConfigRotaryTable.RotaryTableGridCommonCPP gridcommon = 2;
  inline int gridcommon_size() const;
  inline void clear_gridcommon();
  static const int kGridcommonFieldNumber = 2;
  inline const ::ConfigRotaryTable::RotaryTableGridCommonCPP& gridcommon(int index) const;
  inline ::ConfigRotaryTable::RotaryTableGridCommonCPP* mutable_gridcommon(int index);
  inline ::ConfigRotaryTable::RotaryTableGridCommonCPP* add_gridcommon();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigRotaryTable::RotaryTableGridCommonCPP >&
      gridcommon() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigRotaryTable::RotaryTableGridCommonCPP >*
      mutable_gridcommon();

  // required .ConfigRotaryTable.RotaryTableItemCPP griditeminfo = 3;
  inline bool has_griditeminfo() const;
  inline void clear_griditeminfo();
  static const int kGriditeminfoFieldNumber = 3;
  inline const ::ConfigRotaryTable::RotaryTableItemCPP& griditeminfo() const;
  inline ::ConfigRotaryTable::RotaryTableItemCPP* mutable_griditeminfo();
  inline ::ConfigRotaryTable::RotaryTableItemCPP* release_griditeminfo();
  inline void set_allocated_griditeminfo(::ConfigRotaryTable::RotaryTableItemCPP* griditeminfo);

  // @@protoc_insertion_point(class_scope:ConfigRotaryTable.RotaryTableCfg)
 private:
  inline void set_has_rotarytablebase();
  inline void clear_has_rotarytablebase();
  inline void set_has_griditeminfo();
  inline void clear_has_griditeminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ConfigRotaryTable::RotaryTableCPP* rotarytablebase_;
  ::google::protobuf::RepeatedPtrField< ::ConfigRotaryTable::RotaryTableGridCommonCPP > gridcommon_;
  ::ConfigRotaryTable::RotaryTableItemCPP* griditeminfo_;
  friend void  protobuf_AddDesc_ConfigRotaryTable_2eproto();
  friend void protobuf_AssignDesc_ConfigRotaryTable_2eproto();
  friend void protobuf_ShutdownFile_ConfigRotaryTable_2eproto();

  void InitAsDefaultInstance();
  static RotaryTableCfg* default_instance_;
};
// ===================================================================


// ===================================================================

// RotaryTableCPP

// required uint32 unlock_level = 1;
inline bool RotaryTableCPP::has_unlock_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RotaryTableCPP::set_has_unlock_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RotaryTableCPP::clear_has_unlock_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RotaryTableCPP::clear_unlock_level() {
  unlock_level_ = 0u;
  clear_has_unlock_level();
}
inline ::google::protobuf::uint32 RotaryTableCPP::unlock_level() const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableCPP.unlock_level)
  return unlock_level_;
}
inline void RotaryTableCPP::set_unlock_level(::google::protobuf::uint32 value) {
  set_has_unlock_level();
  unlock_level_ = value;
  // @@protoc_insertion_point(field_set:ConfigRotaryTable.RotaryTableCPP.unlock_level)
}

// required uint32 daily_friendly_draw_cnt = 2;
inline bool RotaryTableCPP::has_daily_friendly_draw_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RotaryTableCPP::set_has_daily_friendly_draw_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RotaryTableCPP::clear_has_daily_friendly_draw_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RotaryTableCPP::clear_daily_friendly_draw_cnt() {
  daily_friendly_draw_cnt_ = 0u;
  clear_has_daily_friendly_draw_cnt();
}
inline ::google::protobuf::uint32 RotaryTableCPP::daily_friendly_draw_cnt() const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableCPP.daily_friendly_draw_cnt)
  return daily_friendly_draw_cnt_;
}
inline void RotaryTableCPP::set_daily_friendly_draw_cnt(::google::protobuf::uint32 value) {
  set_has_daily_friendly_draw_cnt();
  daily_friendly_draw_cnt_ = value;
  // @@protoc_insertion_point(field_set:ConfigRotaryTable.RotaryTableCPP.daily_friendly_draw_cnt)
}

// required uint32 daily_free_draw_cnt = 3;
inline bool RotaryTableCPP::has_daily_free_draw_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RotaryTableCPP::set_has_daily_free_draw_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RotaryTableCPP::clear_has_daily_free_draw_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RotaryTableCPP::clear_daily_free_draw_cnt() {
  daily_free_draw_cnt_ = 0u;
  clear_has_daily_free_draw_cnt();
}
inline ::google::protobuf::uint32 RotaryTableCPP::daily_free_draw_cnt() const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableCPP.daily_free_draw_cnt)
  return daily_free_draw_cnt_;
}
inline void RotaryTableCPP::set_daily_free_draw_cnt(::google::protobuf::uint32 value) {
  set_has_daily_free_draw_cnt();
  daily_free_draw_cnt_ = value;
  // @@protoc_insertion_point(field_set:ConfigRotaryTable.RotaryTableCPP.daily_free_draw_cnt)
}

// required uint32 daily_login_draw_cnt = 4;
inline bool RotaryTableCPP::has_daily_login_draw_cnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RotaryTableCPP::set_has_daily_login_draw_cnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RotaryTableCPP::clear_has_daily_login_draw_cnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RotaryTableCPP::clear_daily_login_draw_cnt() {
  daily_login_draw_cnt_ = 0u;
  clear_has_daily_login_draw_cnt();
}
inline ::google::protobuf::uint32 RotaryTableCPP::daily_login_draw_cnt() const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableCPP.daily_login_draw_cnt)
  return daily_login_draw_cnt_;
}
inline void RotaryTableCPP::set_daily_login_draw_cnt(::google::protobuf::uint32 value) {
  set_has_daily_login_draw_cnt();
  daily_login_draw_cnt_ = value;
  // @@protoc_insertion_point(field_set:ConfigRotaryTable.RotaryTableCPP.daily_login_draw_cnt)
}

// required uint32 cost_friendly_value_draw = 5;
inline bool RotaryTableCPP::has_cost_friendly_value_draw() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RotaryTableCPP::set_has_cost_friendly_value_draw() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RotaryTableCPP::clear_has_cost_friendly_value_draw() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RotaryTableCPP::clear_cost_friendly_value_draw() {
  cost_friendly_value_draw_ = 0u;
  clear_has_cost_friendly_value_draw();
}
inline ::google::protobuf::uint32 RotaryTableCPP::cost_friendly_value_draw() const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableCPP.cost_friendly_value_draw)
  return cost_friendly_value_draw_;
}
inline void RotaryTableCPP::set_cost_friendly_value_draw(::google::protobuf::uint32 value) {
  set_has_cost_friendly_value_draw();
  cost_friendly_value_draw_ = value;
  // @@protoc_insertion_point(field_set:ConfigRotaryTable.RotaryTableCPP.cost_friendly_value_draw)
}

// -------------------------------------------------------------------

// RotaryTableGridCommonCPP

// required uint32 gridid = 1;
inline bool RotaryTableGridCommonCPP::has_gridid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RotaryTableGridCommonCPP::set_has_gridid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RotaryTableGridCommonCPP::clear_has_gridid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RotaryTableGridCommonCPP::clear_gridid() {
  gridid_ = 0u;
  clear_has_gridid();
}
inline ::google::protobuf::uint32 RotaryTableGridCommonCPP::gridid() const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableGridCommonCPP.gridid)
  return gridid_;
}
inline void RotaryTableGridCommonCPP::set_gridid(::google::protobuf::uint32 value) {
  set_has_gridid();
  gridid_ = value;
  // @@protoc_insertion_point(field_set:ConfigRotaryTable.RotaryTableGridCommonCPP.gridid)
}

// required uint32 weight = 2;
inline bool RotaryTableGridCommonCPP::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RotaryTableGridCommonCPP::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RotaryTableGridCommonCPP::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RotaryTableGridCommonCPP::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 RotaryTableGridCommonCPP::weight() const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableGridCommonCPP.weight)
  return weight_;
}
inline void RotaryTableGridCommonCPP::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ConfigRotaryTable.RotaryTableGridCommonCPP.weight)
}

// required uint32 type = 3;
inline bool RotaryTableGridCommonCPP::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RotaryTableGridCommonCPP::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RotaryTableGridCommonCPP::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RotaryTableGridCommonCPP::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 RotaryTableGridCommonCPP::type() const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableGridCommonCPP.type)
  return type_;
}
inline void RotaryTableGridCommonCPP::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ConfigRotaryTable.RotaryTableGridCommonCPP.type)
}

// -------------------------------------------------------------------

// RandomItemLib

// repeated uint32 itemid = 1;
inline int RandomItemLib::itemid_size() const {
  return itemid_.size();
}
inline void RandomItemLib::clear_itemid() {
  itemid_.Clear();
}
inline ::google::protobuf::uint32 RandomItemLib::itemid(int index) const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RandomItemLib.itemid)
  return itemid_.Get(index);
}
inline void RandomItemLib::set_itemid(int index, ::google::protobuf::uint32 value) {
  itemid_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigRotaryTable.RandomItemLib.itemid)
}
inline void RandomItemLib::add_itemid(::google::protobuf::uint32 value) {
  itemid_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigRotaryTable.RandomItemLib.itemid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RandomItemLib::itemid() const {
  // @@protoc_insertion_point(field_list:ConfigRotaryTable.RandomItemLib.itemid)
  return itemid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RandomItemLib::mutable_itemid() {
  // @@protoc_insertion_point(field_mutable_list:ConfigRotaryTable.RandomItemLib.itemid)
  return &itemid_;
}

// -------------------------------------------------------------------

// RotaryTableItemCPP

// repeated uint32 diamondcnt = 1;
inline int RotaryTableItemCPP::diamondcnt_size() const {
  return diamondcnt_.size();
}
inline void RotaryTableItemCPP::clear_diamondcnt() {
  diamondcnt_.Clear();
}
inline ::google::protobuf::uint32 RotaryTableItemCPP::diamondcnt(int index) const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableItemCPP.diamondcnt)
  return diamondcnt_.Get(index);
}
inline void RotaryTableItemCPP::set_diamondcnt(int index, ::google::protobuf::uint32 value) {
  diamondcnt_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigRotaryTable.RotaryTableItemCPP.diamondcnt)
}
inline void RotaryTableItemCPP::add_diamondcnt(::google::protobuf::uint32 value) {
  diamondcnt_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigRotaryTable.RotaryTableItemCPP.diamondcnt)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RotaryTableItemCPP::diamondcnt() const {
  // @@protoc_insertion_point(field_list:ConfigRotaryTable.RotaryTableItemCPP.diamondcnt)
  return diamondcnt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RotaryTableItemCPP::mutable_diamondcnt() {
  // @@protoc_insertion_point(field_mutable_list:ConfigRotaryTable.RotaryTableItemCPP.diamondcnt)
  return &diamondcnt_;
}

// repeated uint32 coinBaseK = 2;
inline int RotaryTableItemCPP::coinbasek_size() const {
  return coinbasek_.size();
}
inline void RotaryTableItemCPP::clear_coinbasek() {
  coinbasek_.Clear();
}
inline ::google::protobuf::uint32 RotaryTableItemCPP::coinbasek(int index) const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableItemCPP.coinBaseK)
  return coinbasek_.Get(index);
}
inline void RotaryTableItemCPP::set_coinbasek(int index, ::google::protobuf::uint32 value) {
  coinbasek_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigRotaryTable.RotaryTableItemCPP.coinBaseK)
}
inline void RotaryTableItemCPP::add_coinbasek(::google::protobuf::uint32 value) {
  coinbasek_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigRotaryTable.RotaryTableItemCPP.coinBaseK)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RotaryTableItemCPP::coinbasek() const {
  // @@protoc_insertion_point(field_list:ConfigRotaryTable.RotaryTableItemCPP.coinBaseK)
  return coinbasek_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RotaryTableItemCPP::mutable_coinbasek() {
  // @@protoc_insertion_point(field_mutable_list:ConfigRotaryTable.RotaryTableItemCPP.coinBaseK)
  return &coinbasek_;
}

// repeated uint32 speedcardcnt = 3;
inline int RotaryTableItemCPP::speedcardcnt_size() const {
  return speedcardcnt_.size();
}
inline void RotaryTableItemCPP::clear_speedcardcnt() {
  speedcardcnt_.Clear();
}
inline ::google::protobuf::uint32 RotaryTableItemCPP::speedcardcnt(int index) const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableItemCPP.speedcardcnt)
  return speedcardcnt_.Get(index);
}
inline void RotaryTableItemCPP::set_speedcardcnt(int index, ::google::protobuf::uint32 value) {
  speedcardcnt_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigRotaryTable.RotaryTableItemCPP.speedcardcnt)
}
inline void RotaryTableItemCPP::add_speedcardcnt(::google::protobuf::uint32 value) {
  speedcardcnt_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigRotaryTable.RotaryTableItemCPP.speedcardcnt)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RotaryTableItemCPP::speedcardcnt() const {
  // @@protoc_insertion_point(field_list:ConfigRotaryTable.RotaryTableItemCPP.speedcardcnt)
  return speedcardcnt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RotaryTableItemCPP::mutable_speedcardcnt() {
  // @@protoc_insertion_point(field_mutable_list:ConfigRotaryTable.RotaryTableItemCPP.speedcardcnt)
  return &speedcardcnt_;
}

// required uint32 cropbaseK = 4;
inline bool RotaryTableItemCPP::has_cropbasek() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RotaryTableItemCPP::set_has_cropbasek() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RotaryTableItemCPP::clear_has_cropbasek() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RotaryTableItemCPP::clear_cropbasek() {
  cropbasek_ = 0u;
  clear_has_cropbasek();
}
inline ::google::protobuf::uint32 RotaryTableItemCPP::cropbasek() const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableItemCPP.cropbaseK)
  return cropbasek_;
}
inline void RotaryTableItemCPP::set_cropbasek(::google::protobuf::uint32 value) {
  set_has_cropbasek();
  cropbasek_ = value;
  // @@protoc_insertion_point(field_set:ConfigRotaryTable.RotaryTableItemCPP.cropbaseK)
}

// repeated .ConfigRotaryTable.RandomItemLib randomitemlib = 5;
inline int RotaryTableItemCPP::randomitemlib_size() const {
  return randomitemlib_.size();
}
inline void RotaryTableItemCPP::clear_randomitemlib() {
  randomitemlib_.Clear();
}
inline const ::ConfigRotaryTable::RandomItemLib& RotaryTableItemCPP::randomitemlib(int index) const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableItemCPP.randomitemlib)
  return randomitemlib_.Get(index);
}
inline ::ConfigRotaryTable::RandomItemLib* RotaryTableItemCPP::mutable_randomitemlib(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigRotaryTable.RotaryTableItemCPP.randomitemlib)
  return randomitemlib_.Mutable(index);
}
inline ::ConfigRotaryTable::RandomItemLib* RotaryTableItemCPP::add_randomitemlib() {
  // @@protoc_insertion_point(field_add:ConfigRotaryTable.RotaryTableItemCPP.randomitemlib)
  return randomitemlib_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigRotaryTable::RandomItemLib >&
RotaryTableItemCPP::randomitemlib() const {
  // @@protoc_insertion_point(field_list:ConfigRotaryTable.RotaryTableItemCPP.randomitemlib)
  return randomitemlib_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigRotaryTable::RandomItemLib >*
RotaryTableItemCPP::mutable_randomitemlib() {
  // @@protoc_insertion_point(field_mutable_list:ConfigRotaryTable.RotaryTableItemCPP.randomitemlib)
  return &randomitemlib_;
}

// -------------------------------------------------------------------

// RotaryTableCfg

// required .ConfigRotaryTable.RotaryTableCPP rotarytablebase = 1;
inline bool RotaryTableCfg::has_rotarytablebase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RotaryTableCfg::set_has_rotarytablebase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RotaryTableCfg::clear_has_rotarytablebase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RotaryTableCfg::clear_rotarytablebase() {
  if (rotarytablebase_ != NULL) rotarytablebase_->::ConfigRotaryTable::RotaryTableCPP::Clear();
  clear_has_rotarytablebase();
}
inline const ::ConfigRotaryTable::RotaryTableCPP& RotaryTableCfg::rotarytablebase() const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableCfg.rotarytablebase)
  return rotarytablebase_ != NULL ? *rotarytablebase_ : *default_instance_->rotarytablebase_;
}
inline ::ConfigRotaryTable::RotaryTableCPP* RotaryTableCfg::mutable_rotarytablebase() {
  set_has_rotarytablebase();
  if (rotarytablebase_ == NULL) rotarytablebase_ = new ::ConfigRotaryTable::RotaryTableCPP;
  // @@protoc_insertion_point(field_mutable:ConfigRotaryTable.RotaryTableCfg.rotarytablebase)
  return rotarytablebase_;
}
inline ::ConfigRotaryTable::RotaryTableCPP* RotaryTableCfg::release_rotarytablebase() {
  clear_has_rotarytablebase();
  ::ConfigRotaryTable::RotaryTableCPP* temp = rotarytablebase_;
  rotarytablebase_ = NULL;
  return temp;
}
inline void RotaryTableCfg::set_allocated_rotarytablebase(::ConfigRotaryTable::RotaryTableCPP* rotarytablebase) {
  delete rotarytablebase_;
  rotarytablebase_ = rotarytablebase;
  if (rotarytablebase) {
    set_has_rotarytablebase();
  } else {
    clear_has_rotarytablebase();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigRotaryTable.RotaryTableCfg.rotarytablebase)
}

// repeated .ConfigRotaryTable.RotaryTableGridCommonCPP gridcommon = 2;
inline int RotaryTableCfg::gridcommon_size() const {
  return gridcommon_.size();
}
inline void RotaryTableCfg::clear_gridcommon() {
  gridcommon_.Clear();
}
inline const ::ConfigRotaryTable::RotaryTableGridCommonCPP& RotaryTableCfg::gridcommon(int index) const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableCfg.gridcommon)
  return gridcommon_.Get(index);
}
inline ::ConfigRotaryTable::RotaryTableGridCommonCPP* RotaryTableCfg::mutable_gridcommon(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigRotaryTable.RotaryTableCfg.gridcommon)
  return gridcommon_.Mutable(index);
}
inline ::ConfigRotaryTable::RotaryTableGridCommonCPP* RotaryTableCfg::add_gridcommon() {
  // @@protoc_insertion_point(field_add:ConfigRotaryTable.RotaryTableCfg.gridcommon)
  return gridcommon_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigRotaryTable::RotaryTableGridCommonCPP >&
RotaryTableCfg::gridcommon() const {
  // @@protoc_insertion_point(field_list:ConfigRotaryTable.RotaryTableCfg.gridcommon)
  return gridcommon_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigRotaryTable::RotaryTableGridCommonCPP >*
RotaryTableCfg::mutable_gridcommon() {
  // @@protoc_insertion_point(field_mutable_list:ConfigRotaryTable.RotaryTableCfg.gridcommon)
  return &gridcommon_;
}

// required .ConfigRotaryTable.RotaryTableItemCPP griditeminfo = 3;
inline bool RotaryTableCfg::has_griditeminfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RotaryTableCfg::set_has_griditeminfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RotaryTableCfg::clear_has_griditeminfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RotaryTableCfg::clear_griditeminfo() {
  if (griditeminfo_ != NULL) griditeminfo_->::ConfigRotaryTable::RotaryTableItemCPP::Clear();
  clear_has_griditeminfo();
}
inline const ::ConfigRotaryTable::RotaryTableItemCPP& RotaryTableCfg::griditeminfo() const {
  // @@protoc_insertion_point(field_get:ConfigRotaryTable.RotaryTableCfg.griditeminfo)
  return griditeminfo_ != NULL ? *griditeminfo_ : *default_instance_->griditeminfo_;
}
inline ::ConfigRotaryTable::RotaryTableItemCPP* RotaryTableCfg::mutable_griditeminfo() {
  set_has_griditeminfo();
  if (griditeminfo_ == NULL) griditeminfo_ = new ::ConfigRotaryTable::RotaryTableItemCPP;
  // @@protoc_insertion_point(field_mutable:ConfigRotaryTable.RotaryTableCfg.griditeminfo)
  return griditeminfo_;
}
inline ::ConfigRotaryTable::RotaryTableItemCPP* RotaryTableCfg::release_griditeminfo() {
  clear_has_griditeminfo();
  ::ConfigRotaryTable::RotaryTableItemCPP* temp = griditeminfo_;
  griditeminfo_ = NULL;
  return temp;
}
inline void RotaryTableCfg::set_allocated_griditeminfo(::ConfigRotaryTable::RotaryTableItemCPP* griditeminfo) {
  delete griditeminfo_;
  griditeminfo_ = griditeminfo;
  if (griditeminfo) {
    set_has_griditeminfo();
  } else {
    clear_has_griditeminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigRotaryTable.RotaryTableCfg.griditeminfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigRotaryTable

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ConfigRotaryTable_2eproto__INCLUDED
