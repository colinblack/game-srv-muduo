// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigNPCSeller.proto

#ifndef PROTOBUF_ConfigNPCSeller_2eproto__INCLUDED
#define PROTOBUF_ConfigNPCSeller_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ConfigNPCSeller {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ConfigNPCSeller_2eproto();
void protobuf_AssignDesc_ConfigNPCSeller_2eproto();
void protobuf_ShutdownFile_ConfigNPCSeller_2eproto();

class NPCSellerMaterial;
class NPCSellerCPP;
class NPCSellerCfg;

// ===================================================================

class NPCSellerMaterial : public ::google::protobuf::Message {
 public:
  NPCSellerMaterial();
  virtual ~NPCSellerMaterial();

  NPCSellerMaterial(const NPCSellerMaterial& from);

  inline NPCSellerMaterial& operator=(const NPCSellerMaterial& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NPCSellerMaterial& default_instance();

  void Swap(NPCSellerMaterial* other);

  // implements Message ----------------------------------------------

  NPCSellerMaterial* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NPCSellerMaterial& from);
  void MergeFrom(const NPCSellerMaterial& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:ConfigNPCSeller.NPCSellerMaterial)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  friend void  protobuf_AddDesc_ConfigNPCSeller_2eproto();
  friend void protobuf_AssignDesc_ConfigNPCSeller_2eproto();
  friend void protobuf_ShutdownFile_ConfigNPCSeller_2eproto();

  void InitAsDefaultInstance();
  static NPCSellerMaterial* default_instance_;
};
// -------------------------------------------------------------------

class NPCSellerCPP : public ::google::protobuf::Message {
 public:
  NPCSellerCPP();
  virtual ~NPCSellerCPP();

  NPCSellerCPP(const NPCSellerCPP& from);

  inline NPCSellerCPP& operator=(const NPCSellerCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NPCSellerCPP& default_instance();

  void Swap(NPCSellerCPP* other);

  // implements Message ----------------------------------------------

  NPCSellerCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NPCSellerCPP& from);
  void MergeFrom(const NPCSellerCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 unlockLevel = 1;
  inline bool has_unlocklevel() const;
  inline void clear_unlocklevel();
  static const int kUnlockLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 unlocklevel() const;
  inline void set_unlocklevel(::google::protobuf::uint32 value);

  // required float priceBase = 2;
  inline bool has_pricebase() const;
  inline void clear_pricebase();
  static const int kPriceBaseFieldNumber = 2;
  inline float pricebase() const;
  inline void set_pricebase(float value);

  // repeated uint32 priceDiscount = 3;
  inline int pricediscount_size() const;
  inline void clear_pricediscount();
  static const int kPriceDiscountFieldNumber = 3;
  inline ::google::protobuf::uint32 pricediscount(int index) const;
  inline void set_pricediscount(int index, ::google::protobuf::uint32 value);
  inline void add_pricediscount(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pricediscount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pricediscount();

  // repeated uint32 visitInterval = 4;
  inline int visitinterval_size() const;
  inline void clear_visitinterval();
  static const int kVisitIntervalFieldNumber = 4;
  inline ::google::protobuf::uint32 visitinterval(int index) const;
  inline void set_visitinterval(int index, ::google::protobuf::uint32 value);
  inline void add_visitinterval(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      visitinterval() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_visitinterval();

  // required uint32 maxVisitInterval = 5;
  inline bool has_maxvisitinterval() const;
  inline void clear_maxvisitinterval();
  static const int kMaxVisitIntervalFieldNumber = 5;
  inline ::google::protobuf::uint32 maxvisitinterval() const;
  inline void set_maxvisitinterval(::google::protobuf::uint32 value);

  // repeated .ConfigNPCSeller.NPCSellerMaterial material = 6;
  inline int material_size() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 6;
  inline const ::ConfigNPCSeller::NPCSellerMaterial& material(int index) const;
  inline ::ConfigNPCSeller::NPCSellerMaterial* mutable_material(int index);
  inline ::ConfigNPCSeller::NPCSellerMaterial* add_material();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigNPCSeller::NPCSellerMaterial >&
      material() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigNPCSeller::NPCSellerMaterial >*
      mutable_material();

  // repeated uint32 sellCount = 7;
  inline int sellcount_size() const;
  inline void clear_sellcount();
  static const int kSellCountFieldNumber = 7;
  inline ::google::protobuf::uint32 sellcount(int index) const;
  inline void set_sellcount(int index, ::google::protobuf::uint32 value);
  inline void add_sellcount(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      sellcount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_sellcount();

  // required uint32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigNPCSeller.NPCSellerCPP)
 private:
  inline void set_has_unlocklevel();
  inline void clear_has_unlocklevel();
  inline void set_has_pricebase();
  inline void clear_has_pricebase();
  inline void set_has_maxvisitinterval();
  inline void clear_has_maxvisitinterval();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 unlocklevel_;
  float pricebase_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pricediscount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > visitinterval_;
  ::google::protobuf::RepeatedPtrField< ::ConfigNPCSeller::NPCSellerMaterial > material_;
  ::google::protobuf::uint32 maxvisitinterval_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > sellcount_;
  friend void  protobuf_AddDesc_ConfigNPCSeller_2eproto();
  friend void protobuf_AssignDesc_ConfigNPCSeller_2eproto();
  friend void protobuf_ShutdownFile_ConfigNPCSeller_2eproto();

  void InitAsDefaultInstance();
  static NPCSellerCPP* default_instance_;
};
// -------------------------------------------------------------------

class NPCSellerCfg : public ::google::protobuf::Message {
 public:
  NPCSellerCfg();
  virtual ~NPCSellerCfg();

  NPCSellerCfg(const NPCSellerCfg& from);

  inline NPCSellerCfg& operator=(const NPCSellerCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NPCSellerCfg& default_instance();

  void Swap(NPCSellerCfg* other);

  // implements Message ----------------------------------------------

  NPCSellerCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NPCSellerCfg& from);
  void MergeFrom(const NPCSellerCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ConfigNPCSeller.NPCSellerCPP npcSeller = 1;
  inline bool has_npcseller() const;
  inline void clear_npcseller();
  static const int kNpcSellerFieldNumber = 1;
  inline const ::ConfigNPCSeller::NPCSellerCPP& npcseller() const;
  inline ::ConfigNPCSeller::NPCSellerCPP* mutable_npcseller();
  inline ::ConfigNPCSeller::NPCSellerCPP* release_npcseller();
  inline void set_allocated_npcseller(::ConfigNPCSeller::NPCSellerCPP* npcseller);

  // @@protoc_insertion_point(class_scope:ConfigNPCSeller.NPCSellerCfg)
 private:
  inline void set_has_npcseller();
  inline void clear_has_npcseller();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ConfigNPCSeller::NPCSellerCPP* npcseller_;
  friend void  protobuf_AddDesc_ConfigNPCSeller_2eproto();
  friend void protobuf_AssignDesc_ConfigNPCSeller_2eproto();
  friend void protobuf_ShutdownFile_ConfigNPCSeller_2eproto();

  void InitAsDefaultInstance();
  static NPCSellerCfg* default_instance_;
};
// ===================================================================


// ===================================================================

// NPCSellerMaterial

// repeated uint32 id = 1;
inline int NPCSellerMaterial::id_size() const {
  return id_.size();
}
inline void NPCSellerMaterial::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 NPCSellerMaterial::id(int index) const {
  // @@protoc_insertion_point(field_get:ConfigNPCSeller.NPCSellerMaterial.id)
  return id_.Get(index);
}
inline void NPCSellerMaterial::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigNPCSeller.NPCSellerMaterial.id)
}
inline void NPCSellerMaterial::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigNPCSeller.NPCSellerMaterial.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NPCSellerMaterial::id() const {
  // @@protoc_insertion_point(field_list:ConfigNPCSeller.NPCSellerMaterial.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NPCSellerMaterial::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:ConfigNPCSeller.NPCSellerMaterial.id)
  return &id_;
}

// -------------------------------------------------------------------

// NPCSellerCPP

// required uint32 unlockLevel = 1;
inline bool NPCSellerCPP::has_unlocklevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NPCSellerCPP::set_has_unlocklevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NPCSellerCPP::clear_has_unlocklevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NPCSellerCPP::clear_unlocklevel() {
  unlocklevel_ = 0u;
  clear_has_unlocklevel();
}
inline ::google::protobuf::uint32 NPCSellerCPP::unlocklevel() const {
  // @@protoc_insertion_point(field_get:ConfigNPCSeller.NPCSellerCPP.unlockLevel)
  return unlocklevel_;
}
inline void NPCSellerCPP::set_unlocklevel(::google::protobuf::uint32 value) {
  set_has_unlocklevel();
  unlocklevel_ = value;
  // @@protoc_insertion_point(field_set:ConfigNPCSeller.NPCSellerCPP.unlockLevel)
}

// required float priceBase = 2;
inline bool NPCSellerCPP::has_pricebase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NPCSellerCPP::set_has_pricebase() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NPCSellerCPP::clear_has_pricebase() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NPCSellerCPP::clear_pricebase() {
  pricebase_ = 0;
  clear_has_pricebase();
}
inline float NPCSellerCPP::pricebase() const {
  // @@protoc_insertion_point(field_get:ConfigNPCSeller.NPCSellerCPP.priceBase)
  return pricebase_;
}
inline void NPCSellerCPP::set_pricebase(float value) {
  set_has_pricebase();
  pricebase_ = value;
  // @@protoc_insertion_point(field_set:ConfigNPCSeller.NPCSellerCPP.priceBase)
}

// repeated uint32 priceDiscount = 3;
inline int NPCSellerCPP::pricediscount_size() const {
  return pricediscount_.size();
}
inline void NPCSellerCPP::clear_pricediscount() {
  pricediscount_.Clear();
}
inline ::google::protobuf::uint32 NPCSellerCPP::pricediscount(int index) const {
  // @@protoc_insertion_point(field_get:ConfigNPCSeller.NPCSellerCPP.priceDiscount)
  return pricediscount_.Get(index);
}
inline void NPCSellerCPP::set_pricediscount(int index, ::google::protobuf::uint32 value) {
  pricediscount_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigNPCSeller.NPCSellerCPP.priceDiscount)
}
inline void NPCSellerCPP::add_pricediscount(::google::protobuf::uint32 value) {
  pricediscount_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigNPCSeller.NPCSellerCPP.priceDiscount)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NPCSellerCPP::pricediscount() const {
  // @@protoc_insertion_point(field_list:ConfigNPCSeller.NPCSellerCPP.priceDiscount)
  return pricediscount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NPCSellerCPP::mutable_pricediscount() {
  // @@protoc_insertion_point(field_mutable_list:ConfigNPCSeller.NPCSellerCPP.priceDiscount)
  return &pricediscount_;
}

// repeated uint32 visitInterval = 4;
inline int NPCSellerCPP::visitinterval_size() const {
  return visitinterval_.size();
}
inline void NPCSellerCPP::clear_visitinterval() {
  visitinterval_.Clear();
}
inline ::google::protobuf::uint32 NPCSellerCPP::visitinterval(int index) const {
  // @@protoc_insertion_point(field_get:ConfigNPCSeller.NPCSellerCPP.visitInterval)
  return visitinterval_.Get(index);
}
inline void NPCSellerCPP::set_visitinterval(int index, ::google::protobuf::uint32 value) {
  visitinterval_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigNPCSeller.NPCSellerCPP.visitInterval)
}
inline void NPCSellerCPP::add_visitinterval(::google::protobuf::uint32 value) {
  visitinterval_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigNPCSeller.NPCSellerCPP.visitInterval)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NPCSellerCPP::visitinterval() const {
  // @@protoc_insertion_point(field_list:ConfigNPCSeller.NPCSellerCPP.visitInterval)
  return visitinterval_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NPCSellerCPP::mutable_visitinterval() {
  // @@protoc_insertion_point(field_mutable_list:ConfigNPCSeller.NPCSellerCPP.visitInterval)
  return &visitinterval_;
}

// required uint32 maxVisitInterval = 5;
inline bool NPCSellerCPP::has_maxvisitinterval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NPCSellerCPP::set_has_maxvisitinterval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NPCSellerCPP::clear_has_maxvisitinterval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NPCSellerCPP::clear_maxvisitinterval() {
  maxvisitinterval_ = 0u;
  clear_has_maxvisitinterval();
}
inline ::google::protobuf::uint32 NPCSellerCPP::maxvisitinterval() const {
  // @@protoc_insertion_point(field_get:ConfigNPCSeller.NPCSellerCPP.maxVisitInterval)
  return maxvisitinterval_;
}
inline void NPCSellerCPP::set_maxvisitinterval(::google::protobuf::uint32 value) {
  set_has_maxvisitinterval();
  maxvisitinterval_ = value;
  // @@protoc_insertion_point(field_set:ConfigNPCSeller.NPCSellerCPP.maxVisitInterval)
}

// repeated .ConfigNPCSeller.NPCSellerMaterial material = 6;
inline int NPCSellerCPP::material_size() const {
  return material_.size();
}
inline void NPCSellerCPP::clear_material() {
  material_.Clear();
}
inline const ::ConfigNPCSeller::NPCSellerMaterial& NPCSellerCPP::material(int index) const {
  // @@protoc_insertion_point(field_get:ConfigNPCSeller.NPCSellerCPP.material)
  return material_.Get(index);
}
inline ::ConfigNPCSeller::NPCSellerMaterial* NPCSellerCPP::mutable_material(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigNPCSeller.NPCSellerCPP.material)
  return material_.Mutable(index);
}
inline ::ConfigNPCSeller::NPCSellerMaterial* NPCSellerCPP::add_material() {
  // @@protoc_insertion_point(field_add:ConfigNPCSeller.NPCSellerCPP.material)
  return material_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigNPCSeller::NPCSellerMaterial >&
NPCSellerCPP::material() const {
  // @@protoc_insertion_point(field_list:ConfigNPCSeller.NPCSellerCPP.material)
  return material_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigNPCSeller::NPCSellerMaterial >*
NPCSellerCPP::mutable_material() {
  // @@protoc_insertion_point(field_mutable_list:ConfigNPCSeller.NPCSellerCPP.material)
  return &material_;
}

// repeated uint32 sellCount = 7;
inline int NPCSellerCPP::sellcount_size() const {
  return sellcount_.size();
}
inline void NPCSellerCPP::clear_sellcount() {
  sellcount_.Clear();
}
inline ::google::protobuf::uint32 NPCSellerCPP::sellcount(int index) const {
  // @@protoc_insertion_point(field_get:ConfigNPCSeller.NPCSellerCPP.sellCount)
  return sellcount_.Get(index);
}
inline void NPCSellerCPP::set_sellcount(int index, ::google::protobuf::uint32 value) {
  sellcount_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigNPCSeller.NPCSellerCPP.sellCount)
}
inline void NPCSellerCPP::add_sellcount(::google::protobuf::uint32 value) {
  sellcount_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigNPCSeller.NPCSellerCPP.sellCount)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NPCSellerCPP::sellcount() const {
  // @@protoc_insertion_point(field_list:ConfigNPCSeller.NPCSellerCPP.sellCount)
  return sellcount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NPCSellerCPP::mutable_sellcount() {
  // @@protoc_insertion_point(field_mutable_list:ConfigNPCSeller.NPCSellerCPP.sellCount)
  return &sellcount_;
}

// required uint32 level = 8;
inline bool NPCSellerCPP::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NPCSellerCPP::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NPCSellerCPP::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NPCSellerCPP::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 NPCSellerCPP::level() const {
  // @@protoc_insertion_point(field_get:ConfigNPCSeller.NPCSellerCPP.level)
  return level_;
}
inline void NPCSellerCPP::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:ConfigNPCSeller.NPCSellerCPP.level)
}

// -------------------------------------------------------------------

// NPCSellerCfg

// required .ConfigNPCSeller.NPCSellerCPP npcSeller = 1;
inline bool NPCSellerCfg::has_npcseller() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NPCSellerCfg::set_has_npcseller() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NPCSellerCfg::clear_has_npcseller() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NPCSellerCfg::clear_npcseller() {
  if (npcseller_ != NULL) npcseller_->::ConfigNPCSeller::NPCSellerCPP::Clear();
  clear_has_npcseller();
}
inline const ::ConfigNPCSeller::NPCSellerCPP& NPCSellerCfg::npcseller() const {
  // @@protoc_insertion_point(field_get:ConfigNPCSeller.NPCSellerCfg.npcSeller)
  return npcseller_ != NULL ? *npcseller_ : *default_instance_->npcseller_;
}
inline ::ConfigNPCSeller::NPCSellerCPP* NPCSellerCfg::mutable_npcseller() {
  set_has_npcseller();
  if (npcseller_ == NULL) npcseller_ = new ::ConfigNPCSeller::NPCSellerCPP;
  // @@protoc_insertion_point(field_mutable:ConfigNPCSeller.NPCSellerCfg.npcSeller)
  return npcseller_;
}
inline ::ConfigNPCSeller::NPCSellerCPP* NPCSellerCfg::release_npcseller() {
  clear_has_npcseller();
  ::ConfigNPCSeller::NPCSellerCPP* temp = npcseller_;
  npcseller_ = NULL;
  return temp;
}
inline void NPCSellerCfg::set_allocated_npcseller(::ConfigNPCSeller::NPCSellerCPP* npcseller) {
  delete npcseller_;
  npcseller_ = npcseller;
  if (npcseller) {
    set_has_npcseller();
  } else {
    clear_has_npcseller();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigNPCSeller.NPCSellerCfg.npcSeller)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigNPCSeller

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ConfigNPCSeller_2eproto__INCLUDED
