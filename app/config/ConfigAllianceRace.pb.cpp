// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigAllianceRace.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigAllianceRace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigAllianceRace {

namespace {

const ::google::protobuf::Descriptor* RaceGradeRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceGradeRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceGrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceGrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceTaskCond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceTaskCond_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceTaskStorageItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceTaskStorageItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceTaskStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceTaskStorage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceTaskChance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceTaskChance_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceRewardRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceRewardRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceRewardStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceRewardStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceWatchAdReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceWatchAdReward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigAllianceRace_2eproto() {
  protobuf_AddDesc_ConfigAllianceRace_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigAllianceRace.proto");
  GOOGLE_CHECK(file != NULL);
  RaceGradeRank_descriptor_ = file->message_type(0);
  static const int RaceGradeRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceGradeRank, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceGradeRank, point_),
  };
  RaceGradeRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceGradeRank_descriptor_,
      RaceGradeRank::default_instance_,
      RaceGradeRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceGradeRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceGradeRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceGradeRank));
  RaceGrade_descriptor_ = file->message_type(1);
  static const int RaceGrade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceGrade, race_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceGrade, rank_),
  };
  RaceGrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceGrade_descriptor_,
      RaceGrade::default_instance_,
      RaceGrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceGrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceGrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceGrade));
  RaceTaskCond_descriptor_ = file->message_type(2);
  static const int RaceTaskCond_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskCond, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskCond, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskCond, count_),
  };
  RaceTaskCond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceTaskCond_descriptor_,
      RaceTaskCond::default_instance_,
      RaceTaskCond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskCond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskCond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceTaskCond));
  RaceTaskStorageItem_descriptor_ = file->message_type(3);
  static const int RaceTaskStorageItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskStorageItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskStorageItem, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskStorageItem, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskStorageItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskStorageItem, cond_),
  };
  RaceTaskStorageItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceTaskStorageItem_descriptor_,
      RaceTaskStorageItem::default_instance_,
      RaceTaskStorageItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskStorageItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskStorageItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceTaskStorageItem));
  RaceTaskStorage_descriptor_ = file->message_type(4);
  static const int RaceTaskStorage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskStorage, storage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskStorage, items_),
  };
  RaceTaskStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceTaskStorage_descriptor_,
      RaceTaskStorage::default_instance_,
      RaceTaskStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceTaskStorage));
  RaceTaskChance_descriptor_ = file->message_type(5);
  static const int RaceTaskChance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskChance, race_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskChance, value_),
  };
  RaceTaskChance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceTaskChance_descriptor_,
      RaceTaskChance::default_instance_,
      RaceTaskChance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskChance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTaskChance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceTaskChance));
  RaceTask_descriptor_ = file->message_type(6);
  static const int RaceTask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTask, cdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTask, buy_cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTask, buy_cd_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTask, buy_chance_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTask, chance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTask, storage_),
  };
  RaceTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceTask_descriptor_,
      RaceTask::default_instance_,
      RaceTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceTask));
  RaceRewardRank_descriptor_ = file->message_type(7);
  static const int RaceRewardRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceRewardRank, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceRewardRank, rate_),
  };
  RaceRewardRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceRewardRank_descriptor_,
      RaceRewardRank::default_instance_,
      RaceRewardRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceRewardRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceRewardRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceRewardRank));
  RaceRewardStage_descriptor_ = file->message_type(8);
  static const int RaceRewardStage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceRewardStage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceRewardStage, race_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceRewardStage, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceRewardStage, reward_),
  };
  RaceRewardStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceRewardStage_descriptor_,
      RaceRewardStage::default_instance_,
      RaceRewardStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceRewardStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceRewardStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceRewardStage));
  RaceReward_descriptor_ = file->message_type(9);
  static const int RaceReward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceReward, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceReward, max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceReward, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceReward, grade_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceReward, stage_),
  };
  RaceReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceReward_descriptor_,
      RaceReward::default_instance_,
      RaceReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceReward));
  RaceInfo_descriptor_ = file->message_type(10);
  static const int RaceInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceInfo, stage_reward_refresh_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceInfo, start_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceInfo, end_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceInfo, watch_ad_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceInfo, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceInfo, rewards_),
  };
  RaceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceInfo_descriptor_,
      RaceInfo::default_instance_,
      RaceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceInfo));
  RaceWatchAdReward_descriptor_ = file->message_type(11);
  static const int RaceWatchAdReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceWatchAdReward, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceWatchAdReward, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceWatchAdReward, count_),
  };
  RaceWatchAdReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceWatchAdReward_descriptor_,
      RaceWatchAdReward::default_instance_,
      RaceWatchAdReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceWatchAdReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceWatchAdReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceWatchAdReward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigAllianceRace_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceGradeRank_descriptor_, &RaceGradeRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceGrade_descriptor_, &RaceGrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceTaskCond_descriptor_, &RaceTaskCond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceTaskStorageItem_descriptor_, &RaceTaskStorageItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceTaskStorage_descriptor_, &RaceTaskStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceTaskChance_descriptor_, &RaceTaskChance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceTask_descriptor_, &RaceTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceRewardRank_descriptor_, &RaceRewardRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceRewardStage_descriptor_, &RaceRewardStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceReward_descriptor_, &RaceReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceInfo_descriptor_, &RaceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceWatchAdReward_descriptor_, &RaceWatchAdReward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigAllianceRace_2eproto() {
  delete RaceGradeRank::default_instance_;
  delete RaceGradeRank_reflection_;
  delete RaceGrade::default_instance_;
  delete RaceGrade_reflection_;
  delete RaceTaskCond::default_instance_;
  delete RaceTaskCond_reflection_;
  delete RaceTaskStorageItem::default_instance_;
  delete RaceTaskStorageItem_reflection_;
  delete RaceTaskStorage::default_instance_;
  delete RaceTaskStorage_reflection_;
  delete RaceTaskChance::default_instance_;
  delete RaceTaskChance_reflection_;
  delete RaceTask::default_instance_;
  delete RaceTask_reflection_;
  delete RaceRewardRank::default_instance_;
  delete RaceRewardRank_reflection_;
  delete RaceRewardStage::default_instance_;
  delete RaceRewardStage_reflection_;
  delete RaceReward::default_instance_;
  delete RaceReward_reflection_;
  delete RaceInfo::default_instance_;
  delete RaceInfo_reflection_;
  delete RaceWatchAdReward::default_instance_;
  delete RaceWatchAdReward_reflection_;
}

void protobuf_AddDesc_ConfigAllianceRace_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030ConfigAllianceRace.proto\022\022ConfigAllian"
    "ceRace\032\026CommonGiftConfig.proto\"*\n\rRaceGr"
    "adeRank\022\n\n\002id\030\001 \002(\r\022\r\n\005point\030\002 \002(\r\"P\n\tRa"
    "ceGrade\022\022\n\nrace_level\030\001 \002(\r\022/\n\004rank\030\002 \003("
    "\0132!.ConfigAllianceRace.RaceGradeRank\"7\n\014"
    "RaceTaskCond\022\014\n\004type\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\r"
    "\n\005count\030\003 \002(\r\"}\n\023RaceTaskStorageItem\022\n\n\002"
    "id\030\001 \002(\r\022\r\n\005point\030\002 \002(\r\022\014\n\004time\030\003 \002(\r\022\r\n"
    "\005level\030\004 \002(\r\022.\n\004cond\030\005 \003(\0132 .ConfigAllia"
    "nceRace.RaceTaskCond\"]\n\017RaceTaskStorage\022"
    "\022\n\nstorage_id\030\001 \002(\r\0226\n\005items\030\002 \003(\0132\'.Con"
    "figAllianceRace.RaceTaskStorageItem\"3\n\016R"
    "aceTaskChance\022\022\n\nrace_level\030\001 \002(\r\022\r\n\005val"
    "ue\030\002 \002(\r\"\307\001\n\010RaceTask\022\016\n\006cdtime\030\001 \002(\r\022\023\n"
    "\013buy_cd_time\030\002 \002(\r\022\023\n\013buy_cd_cost\030\003 \002(\r\022"
    "\027\n\017buy_chance_cost\030\004 \002(\r\0222\n\006chance\030\005 \003(\013"
    "2\".ConfigAllianceRace.RaceTaskChance\0224\n\007"
    "storage\030\006 \003(\0132#.ConfigAllianceRace.RaceT"
    "askStorage\"*\n\016RaceRewardRank\022\n\n\002id\030\001 \002(\r"
    "\022\014\n\004rate\030\002 \002(\002\"x\n\017RaceRewardStage\022\n\n\002id\030"
    "\001 \002(\r\022\022\n\nrace_level\030\002 \002(\r\022\r\n\005point\030\003 \002(\r"
    "\0226\n\006reward\030\004 \003(\0132&.CommonGiftConfig.Comm"
    "onModifyItemRate\"\342\001\n\nRaceReward\022\n\n\002id\030\001 "
    "\002(\r\022\021\n\tmin_level\030\002 \002(\r\022\021\n\tmax_level\030\003 \002("
    "\r\0220\n\004rank\030\004 \003(\0132\".ConfigAllianceRace.Rac"
    "eRewardRank\022<\n\014grade_reward\030\005 \003(\0132&.Comm"
    "onGiftConfig.CommonModifyItemRate\0222\n\005sta"
    "ge\030\006 \003(\0132#.ConfigAllianceRace.RaceReward"
    "Stage\"\232\002\n\010RaceInfo\022!\n\031stage_reward_refre"
    "sh_cost\030\001 \002(\r\022\020\n\010start_ts\030\002 \002(\r\022\016\n\006end_t"
    "s\030\003 \002(\r\022,\n\005grade\030\004 \003(\0132\035.ConfigAllianceR"
    "ace.RaceGrade\022>\n\017watch_ad_reward\030\005 \002(\0132%"
    ".ConfigAllianceRace.RaceWatchAdReward\022*\n"
    "\004task\030\006 \002(\0132\034.ConfigAllianceRace.RaceTas"
    "k\022/\n\007rewards\030\007 \003(\0132\036.ConfigAllianceRace."
    "RaceReward\"B\n\021RaceWatchAdReward\022\017\n\007diamo"
    "nd\030\001 \002(\r\022\r\n\005point\030\002 \002(\r\022\r\n\005count\030\003 \002(\r", 1478);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigAllianceRace.proto", &protobuf_RegisterTypes);
  RaceGradeRank::default_instance_ = new RaceGradeRank();
  RaceGrade::default_instance_ = new RaceGrade();
  RaceTaskCond::default_instance_ = new RaceTaskCond();
  RaceTaskStorageItem::default_instance_ = new RaceTaskStorageItem();
  RaceTaskStorage::default_instance_ = new RaceTaskStorage();
  RaceTaskChance::default_instance_ = new RaceTaskChance();
  RaceTask::default_instance_ = new RaceTask();
  RaceRewardRank::default_instance_ = new RaceRewardRank();
  RaceRewardStage::default_instance_ = new RaceRewardStage();
  RaceReward::default_instance_ = new RaceReward();
  RaceInfo::default_instance_ = new RaceInfo();
  RaceWatchAdReward::default_instance_ = new RaceWatchAdReward();
  RaceGradeRank::default_instance_->InitAsDefaultInstance();
  RaceGrade::default_instance_->InitAsDefaultInstance();
  RaceTaskCond::default_instance_->InitAsDefaultInstance();
  RaceTaskStorageItem::default_instance_->InitAsDefaultInstance();
  RaceTaskStorage::default_instance_->InitAsDefaultInstance();
  RaceTaskChance::default_instance_->InitAsDefaultInstance();
  RaceTask::default_instance_->InitAsDefaultInstance();
  RaceRewardRank::default_instance_->InitAsDefaultInstance();
  RaceRewardStage::default_instance_->InitAsDefaultInstance();
  RaceReward::default_instance_->InitAsDefaultInstance();
  RaceInfo::default_instance_->InitAsDefaultInstance();
  RaceWatchAdReward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigAllianceRace_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigAllianceRace_2eproto {
  StaticDescriptorInitializer_ConfigAllianceRace_2eproto() {
    protobuf_AddDesc_ConfigAllianceRace_2eproto();
  }
} static_descriptor_initializer_ConfigAllianceRace_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RaceGradeRank::kIdFieldNumber;
const int RaceGradeRank::kPointFieldNumber;
#endif  // !_MSC_VER

RaceGradeRank::RaceGradeRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAllianceRace.RaceGradeRank)
}

void RaceGradeRank::InitAsDefaultInstance() {
}

RaceGradeRank::RaceGradeRank(const RaceGradeRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAllianceRace.RaceGradeRank)
}

void RaceGradeRank::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceGradeRank::~RaceGradeRank() {
  // @@protoc_insertion_point(destructor:ConfigAllianceRace.RaceGradeRank)
  SharedDtor();
}

void RaceGradeRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceGradeRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceGradeRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceGradeRank_descriptor_;
}

const RaceGradeRank& RaceGradeRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAllianceRace_2eproto();
  return *default_instance_;
}

RaceGradeRank* RaceGradeRank::default_instance_ = NULL;

RaceGradeRank* RaceGradeRank::New() const {
  return new RaceGradeRank;
}

void RaceGradeRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaceGradeRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, point_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceGradeRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAllianceRace.RaceGradeRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // required uint32 point = 2;
      case 2: {
        if (tag == 16) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAllianceRace.RaceGradeRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAllianceRace.RaceGradeRank)
  return false;
#undef DO_
}

void RaceGradeRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAllianceRace.RaceGradeRank)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAllianceRace.RaceGradeRank)
}

::google::protobuf::uint8* RaceGradeRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAllianceRace.RaceGradeRank)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAllianceRace.RaceGradeRank)
  return target;
}

int RaceGradeRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceGradeRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceGradeRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceGradeRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceGradeRank::MergeFrom(const RaceGradeRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceGradeRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceGradeRank::CopyFrom(const RaceGradeRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceGradeRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RaceGradeRank::Swap(RaceGradeRank* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceGradeRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceGradeRank_descriptor_;
  metadata.reflection = RaceGradeRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceGrade::kRaceLevelFieldNumber;
const int RaceGrade::kRankFieldNumber;
#endif  // !_MSC_VER

RaceGrade::RaceGrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAllianceRace.RaceGrade)
}

void RaceGrade::InitAsDefaultInstance() {
}

RaceGrade::RaceGrade(const RaceGrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAllianceRace.RaceGrade)
}

void RaceGrade::SharedCtor() {
  _cached_size_ = 0;
  race_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceGrade::~RaceGrade() {
  // @@protoc_insertion_point(destructor:ConfigAllianceRace.RaceGrade)
  SharedDtor();
}

void RaceGrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceGrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceGrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceGrade_descriptor_;
}

const RaceGrade& RaceGrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAllianceRace_2eproto();
  return *default_instance_;
}

RaceGrade* RaceGrade::default_instance_ = NULL;

RaceGrade* RaceGrade::New() const {
  return new RaceGrade;
}

void RaceGrade::Clear() {
  race_level_ = 0u;
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceGrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAllianceRace.RaceGrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 race_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &race_level_)));
          set_has_race_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        break;
      }

      // repeated .ConfigAllianceRace.RaceGradeRank rank = 2;
      case 2: {
        if (tag == 18) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAllianceRace.RaceGrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAllianceRace.RaceGrade)
  return false;
#undef DO_
}

void RaceGrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAllianceRace.RaceGrade)
  // required uint32 race_level = 1;
  if (has_race_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->race_level(), output);
  }

  // repeated .ConfigAllianceRace.RaceGradeRank rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAllianceRace.RaceGrade)
}

::google::protobuf::uint8* RaceGrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAllianceRace.RaceGrade)
  // required uint32 race_level = 1;
  if (has_race_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->race_level(), target);
  }

  // repeated .ConfigAllianceRace.RaceGradeRank rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAllianceRace.RaceGrade)
  return target;
}

int RaceGrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 race_level = 1;
    if (has_race_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->race_level());
    }

  }
  // repeated .ConfigAllianceRace.RaceGradeRank rank = 2;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceGrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceGrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceGrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceGrade::MergeFrom(const RaceGrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_race_level()) {
      set_race_level(from.race_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceGrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceGrade::CopyFrom(const RaceGrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceGrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rank())) return false;
  return true;
}

void RaceGrade::Swap(RaceGrade* other) {
  if (other != this) {
    std::swap(race_level_, other->race_level_);
    rank_.Swap(&other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceGrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceGrade_descriptor_;
  metadata.reflection = RaceGrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceTaskCond::kTypeFieldNumber;
const int RaceTaskCond::kIdFieldNumber;
const int RaceTaskCond::kCountFieldNumber;
#endif  // !_MSC_VER

RaceTaskCond::RaceTaskCond()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAllianceRace.RaceTaskCond)
}

void RaceTaskCond::InitAsDefaultInstance() {
}

RaceTaskCond::RaceTaskCond(const RaceTaskCond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAllianceRace.RaceTaskCond)
}

void RaceTaskCond::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceTaskCond::~RaceTaskCond() {
  // @@protoc_insertion_point(destructor:ConfigAllianceRace.RaceTaskCond)
  SharedDtor();
}

void RaceTaskCond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceTaskCond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceTaskCond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceTaskCond_descriptor_;
}

const RaceTaskCond& RaceTaskCond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAllianceRace_2eproto();
  return *default_instance_;
}

RaceTaskCond* RaceTaskCond::default_instance_ = NULL;

RaceTaskCond* RaceTaskCond::New() const {
  return new RaceTaskCond;
}

void RaceTaskCond::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaceTaskCond*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceTaskCond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAllianceRace.RaceTaskCond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAllianceRace.RaceTaskCond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAllianceRace.RaceTaskCond)
  return false;
#undef DO_
}

void RaceTaskCond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAllianceRace.RaceTaskCond)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAllianceRace.RaceTaskCond)
}

::google::protobuf::uint8* RaceTaskCond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAllianceRace.RaceTaskCond)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAllianceRace.RaceTaskCond)
  return target;
}

int RaceTaskCond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceTaskCond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceTaskCond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceTaskCond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceTaskCond::MergeFrom(const RaceTaskCond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceTaskCond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceTaskCond::CopyFrom(const RaceTaskCond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceTaskCond::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RaceTaskCond::Swap(RaceTaskCond* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceTaskCond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceTaskCond_descriptor_;
  metadata.reflection = RaceTaskCond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceTaskStorageItem::kIdFieldNumber;
const int RaceTaskStorageItem::kPointFieldNumber;
const int RaceTaskStorageItem::kTimeFieldNumber;
const int RaceTaskStorageItem::kLevelFieldNumber;
const int RaceTaskStorageItem::kCondFieldNumber;
#endif  // !_MSC_VER

RaceTaskStorageItem::RaceTaskStorageItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAllianceRace.RaceTaskStorageItem)
}

void RaceTaskStorageItem::InitAsDefaultInstance() {
}

RaceTaskStorageItem::RaceTaskStorageItem(const RaceTaskStorageItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAllianceRace.RaceTaskStorageItem)
}

void RaceTaskStorageItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  point_ = 0u;
  time_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceTaskStorageItem::~RaceTaskStorageItem() {
  // @@protoc_insertion_point(destructor:ConfigAllianceRace.RaceTaskStorageItem)
  SharedDtor();
}

void RaceTaskStorageItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceTaskStorageItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceTaskStorageItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceTaskStorageItem_descriptor_;
}

const RaceTaskStorageItem& RaceTaskStorageItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAllianceRace_2eproto();
  return *default_instance_;
}

RaceTaskStorageItem* RaceTaskStorageItem::default_instance_ = NULL;

RaceTaskStorageItem* RaceTaskStorageItem::New() const {
  return new RaceTaskStorageItem;
}

void RaceTaskStorageItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaceTaskStorageItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  cond_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceTaskStorageItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAllianceRace.RaceTaskStorageItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // required uint32 point = 2;
      case 2: {
        if (tag == 16) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cond;
        break;
      }

      // repeated .ConfigAllianceRace.RaceTaskCond cond = 5;
      case 5: {
        if (tag == 42) {
         parse_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cond()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cond;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAllianceRace.RaceTaskStorageItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAllianceRace.RaceTaskStorageItem)
  return false;
#undef DO_
}

void RaceTaskStorageItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAllianceRace.RaceTaskStorageItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // repeated .ConfigAllianceRace.RaceTaskCond cond = 5;
  for (int i = 0; i < this->cond_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cond(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAllianceRace.RaceTaskStorageItem)
}

::google::protobuf::uint8* RaceTaskStorageItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAllianceRace.RaceTaskStorageItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // repeated .ConfigAllianceRace.RaceTaskCond cond = 5;
  for (int i = 0; i < this->cond_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cond(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAllianceRace.RaceTaskStorageItem)
  return target;
}

int RaceTaskStorageItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  // repeated .ConfigAllianceRace.RaceTaskCond cond = 5;
  total_size += 1 * this->cond_size();
  for (int i = 0; i < this->cond_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cond(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceTaskStorageItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceTaskStorageItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceTaskStorageItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceTaskStorageItem::MergeFrom(const RaceTaskStorageItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  cond_.MergeFrom(from.cond_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceTaskStorageItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceTaskStorageItem::CopyFrom(const RaceTaskStorageItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceTaskStorageItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cond())) return false;
  return true;
}

void RaceTaskStorageItem::Swap(RaceTaskStorageItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(point_, other->point_);
    std::swap(time_, other->time_);
    std::swap(level_, other->level_);
    cond_.Swap(&other->cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceTaskStorageItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceTaskStorageItem_descriptor_;
  metadata.reflection = RaceTaskStorageItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceTaskStorage::kStorageIdFieldNumber;
const int RaceTaskStorage::kItemsFieldNumber;
#endif  // !_MSC_VER

RaceTaskStorage::RaceTaskStorage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAllianceRace.RaceTaskStorage)
}

void RaceTaskStorage::InitAsDefaultInstance() {
}

RaceTaskStorage::RaceTaskStorage(const RaceTaskStorage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAllianceRace.RaceTaskStorage)
}

void RaceTaskStorage::SharedCtor() {
  _cached_size_ = 0;
  storage_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceTaskStorage::~RaceTaskStorage() {
  // @@protoc_insertion_point(destructor:ConfigAllianceRace.RaceTaskStorage)
  SharedDtor();
}

void RaceTaskStorage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceTaskStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceTaskStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceTaskStorage_descriptor_;
}

const RaceTaskStorage& RaceTaskStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAllianceRace_2eproto();
  return *default_instance_;
}

RaceTaskStorage* RaceTaskStorage::default_instance_ = NULL;

RaceTaskStorage* RaceTaskStorage::New() const {
  return new RaceTaskStorage;
}

void RaceTaskStorage::Clear() {
  storage_id_ = 0u;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceTaskStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAllianceRace.RaceTaskStorage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 storage_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storage_id_)));
          set_has_storage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .ConfigAllianceRace.RaceTaskStorageItem items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAllianceRace.RaceTaskStorage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAllianceRace.RaceTaskStorage)
  return false;
#undef DO_
}

void RaceTaskStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAllianceRace.RaceTaskStorage)
  // required uint32 storage_id = 1;
  if (has_storage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->storage_id(), output);
  }

  // repeated .ConfigAllianceRace.RaceTaskStorageItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAllianceRace.RaceTaskStorage)
}

::google::protobuf::uint8* RaceTaskStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAllianceRace.RaceTaskStorage)
  // required uint32 storage_id = 1;
  if (has_storage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->storage_id(), target);
  }

  // repeated .ConfigAllianceRace.RaceTaskStorageItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAllianceRace.RaceTaskStorage)
  return target;
}

int RaceTaskStorage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 storage_id = 1;
    if (has_storage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storage_id());
    }

  }
  // repeated .ConfigAllianceRace.RaceTaskStorageItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceTaskStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceTaskStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceTaskStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceTaskStorage::MergeFrom(const RaceTaskStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storage_id()) {
      set_storage_id(from.storage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceTaskStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceTaskStorage::CopyFrom(const RaceTaskStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceTaskStorage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void RaceTaskStorage::Swap(RaceTaskStorage* other) {
  if (other != this) {
    std::swap(storage_id_, other->storage_id_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceTaskStorage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceTaskStorage_descriptor_;
  metadata.reflection = RaceTaskStorage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceTaskChance::kRaceLevelFieldNumber;
const int RaceTaskChance::kValueFieldNumber;
#endif  // !_MSC_VER

RaceTaskChance::RaceTaskChance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAllianceRace.RaceTaskChance)
}

void RaceTaskChance::InitAsDefaultInstance() {
}

RaceTaskChance::RaceTaskChance(const RaceTaskChance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAllianceRace.RaceTaskChance)
}

void RaceTaskChance::SharedCtor() {
  _cached_size_ = 0;
  race_level_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceTaskChance::~RaceTaskChance() {
  // @@protoc_insertion_point(destructor:ConfigAllianceRace.RaceTaskChance)
  SharedDtor();
}

void RaceTaskChance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceTaskChance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceTaskChance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceTaskChance_descriptor_;
}

const RaceTaskChance& RaceTaskChance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAllianceRace_2eproto();
  return *default_instance_;
}

RaceTaskChance* RaceTaskChance::default_instance_ = NULL;

RaceTaskChance* RaceTaskChance::New() const {
  return new RaceTaskChance;
}

void RaceTaskChance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaceTaskChance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(race_level_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceTaskChance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAllianceRace.RaceTaskChance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 race_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &race_level_)));
          set_has_race_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAllianceRace.RaceTaskChance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAllianceRace.RaceTaskChance)
  return false;
#undef DO_
}

void RaceTaskChance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAllianceRace.RaceTaskChance)
  // required uint32 race_level = 1;
  if (has_race_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->race_level(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAllianceRace.RaceTaskChance)
}

::google::protobuf::uint8* RaceTaskChance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAllianceRace.RaceTaskChance)
  // required uint32 race_level = 1;
  if (has_race_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->race_level(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAllianceRace.RaceTaskChance)
  return target;
}

int RaceTaskChance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 race_level = 1;
    if (has_race_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->race_level());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceTaskChance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceTaskChance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceTaskChance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceTaskChance::MergeFrom(const RaceTaskChance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_race_level()) {
      set_race_level(from.race_level());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceTaskChance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceTaskChance::CopyFrom(const RaceTaskChance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceTaskChance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RaceTaskChance::Swap(RaceTaskChance* other) {
  if (other != this) {
    std::swap(race_level_, other->race_level_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceTaskChance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceTaskChance_descriptor_;
  metadata.reflection = RaceTaskChance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceTask::kCdtimeFieldNumber;
const int RaceTask::kBuyCdTimeFieldNumber;
const int RaceTask::kBuyCdCostFieldNumber;
const int RaceTask::kBuyChanceCostFieldNumber;
const int RaceTask::kChanceFieldNumber;
const int RaceTask::kStorageFieldNumber;
#endif  // !_MSC_VER

RaceTask::RaceTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAllianceRace.RaceTask)
}

void RaceTask::InitAsDefaultInstance() {
}

RaceTask::RaceTask(const RaceTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAllianceRace.RaceTask)
}

void RaceTask::SharedCtor() {
  _cached_size_ = 0;
  cdtime_ = 0u;
  buy_cd_time_ = 0u;
  buy_cd_cost_ = 0u;
  buy_chance_cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceTask::~RaceTask() {
  // @@protoc_insertion_point(destructor:ConfigAllianceRace.RaceTask)
  SharedDtor();
}

void RaceTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceTask_descriptor_;
}

const RaceTask& RaceTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAllianceRace_2eproto();
  return *default_instance_;
}

RaceTask* RaceTask::default_instance_ = NULL;

RaceTask* RaceTask::New() const {
  return new RaceTask;
}

void RaceTask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaceTask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cdtime_, buy_chance_cost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  chance_.Clear();
  storage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAllianceRace.RaceTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cdtime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buy_cd_time;
        break;
      }

      // required uint32 buy_cd_time = 2;
      case 2: {
        if (tag == 16) {
         parse_buy_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_cd_time_)));
          set_has_buy_cd_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buy_cd_cost;
        break;
      }

      // required uint32 buy_cd_cost = 3;
      case 3: {
        if (tag == 24) {
         parse_buy_cd_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_cd_cost_)));
          set_has_buy_cd_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buy_chance_cost;
        break;
      }

      // required uint32 buy_chance_cost = 4;
      case 4: {
        if (tag == 32) {
         parse_buy_chance_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_chance_cost_)));
          set_has_buy_chance_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_chance;
        break;
      }

      // repeated .ConfigAllianceRace.RaceTaskChance chance = 5;
      case 5: {
        if (tag == 42) {
         parse_chance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_chance;
        if (input->ExpectTag(50)) goto parse_storage;
        break;
      }

      // repeated .ConfigAllianceRace.RaceTaskStorage storage = 6;
      case 6: {
        if (tag == 50) {
         parse_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_storage;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAllianceRace.RaceTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAllianceRace.RaceTask)
  return false;
#undef DO_
}

void RaceTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAllianceRace.RaceTask)
  // required uint32 cdtime = 1;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cdtime(), output);
  }

  // required uint32 buy_cd_time = 2;
  if (has_buy_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buy_cd_time(), output);
  }

  // required uint32 buy_cd_cost = 3;
  if (has_buy_cd_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buy_cd_cost(), output);
  }

  // required uint32 buy_chance_cost = 4;
  if (has_buy_chance_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buy_chance_cost(), output);
  }

  // repeated .ConfigAllianceRace.RaceTaskChance chance = 5;
  for (int i = 0; i < this->chance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->chance(i), output);
  }

  // repeated .ConfigAllianceRace.RaceTaskStorage storage = 6;
  for (int i = 0; i < this->storage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->storage(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAllianceRace.RaceTask)
}

::google::protobuf::uint8* RaceTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAllianceRace.RaceTask)
  // required uint32 cdtime = 1;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cdtime(), target);
  }

  // required uint32 buy_cd_time = 2;
  if (has_buy_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buy_cd_time(), target);
  }

  // required uint32 buy_cd_cost = 3;
  if (has_buy_cd_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buy_cd_cost(), target);
  }

  // required uint32 buy_chance_cost = 4;
  if (has_buy_chance_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buy_chance_cost(), target);
  }

  // repeated .ConfigAllianceRace.RaceTaskChance chance = 5;
  for (int i = 0; i < this->chance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->chance(i), target);
  }

  // repeated .ConfigAllianceRace.RaceTaskStorage storage = 6;
  for (int i = 0; i < this->storage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->storage(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAllianceRace.RaceTask)
  return target;
}

int RaceTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cdtime = 1;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdtime());
    }

    // required uint32 buy_cd_time = 2;
    if (has_buy_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_cd_time());
    }

    // required uint32 buy_cd_cost = 3;
    if (has_buy_cd_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_cd_cost());
    }

    // required uint32 buy_chance_cost = 4;
    if (has_buy_chance_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_chance_cost());
    }

  }
  // repeated .ConfigAllianceRace.RaceTaskChance chance = 5;
  total_size += 1 * this->chance_size();
  for (int i = 0; i < this->chance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chance(i));
  }

  // repeated .ConfigAllianceRace.RaceTaskStorage storage = 6;
  total_size += 1 * this->storage_size();
  for (int i = 0; i < this->storage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceTask::MergeFrom(const RaceTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  chance_.MergeFrom(from.chance_);
  storage_.MergeFrom(from.storage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
    if (from.has_buy_cd_time()) {
      set_buy_cd_time(from.buy_cd_time());
    }
    if (from.has_buy_cd_cost()) {
      set_buy_cd_cost(from.buy_cd_cost());
    }
    if (from.has_buy_chance_cost()) {
      set_buy_chance_cost(from.buy_chance_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceTask::CopyFrom(const RaceTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->chance())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->storage())) return false;
  return true;
}

void RaceTask::Swap(RaceTask* other) {
  if (other != this) {
    std::swap(cdtime_, other->cdtime_);
    std::swap(buy_cd_time_, other->buy_cd_time_);
    std::swap(buy_cd_cost_, other->buy_cd_cost_);
    std::swap(buy_chance_cost_, other->buy_chance_cost_);
    chance_.Swap(&other->chance_);
    storage_.Swap(&other->storage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceTask_descriptor_;
  metadata.reflection = RaceTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceRewardRank::kIdFieldNumber;
const int RaceRewardRank::kRateFieldNumber;
#endif  // !_MSC_VER

RaceRewardRank::RaceRewardRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAllianceRace.RaceRewardRank)
}

void RaceRewardRank::InitAsDefaultInstance() {
}

RaceRewardRank::RaceRewardRank(const RaceRewardRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAllianceRace.RaceRewardRank)
}

void RaceRewardRank::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceRewardRank::~RaceRewardRank() {
  // @@protoc_insertion_point(destructor:ConfigAllianceRace.RaceRewardRank)
  SharedDtor();
}

void RaceRewardRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceRewardRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceRewardRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceRewardRank_descriptor_;
}

const RaceRewardRank& RaceRewardRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAllianceRace_2eproto();
  return *default_instance_;
}

RaceRewardRank* RaceRewardRank::default_instance_ = NULL;

RaceRewardRank* RaceRewardRank::New() const {
  return new RaceRewardRank;
}

void RaceRewardRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaceRewardRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, rate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceRewardRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAllianceRace.RaceRewardRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_rate;
        break;
      }

      // required float rate = 2;
      case 2: {
        if (tag == 21) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAllianceRace.RaceRewardRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAllianceRace.RaceRewardRank)
  return false;
#undef DO_
}

void RaceRewardRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAllianceRace.RaceRewardRank)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required float rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAllianceRace.RaceRewardRank)
}

::google::protobuf::uint8* RaceRewardRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAllianceRace.RaceRewardRank)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required float rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAllianceRace.RaceRewardRank)
  return target;
}

int RaceRewardRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required float rate = 2;
    if (has_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceRewardRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceRewardRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceRewardRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceRewardRank::MergeFrom(const RaceRewardRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceRewardRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceRewardRank::CopyFrom(const RaceRewardRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceRewardRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RaceRewardRank::Swap(RaceRewardRank* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceRewardRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceRewardRank_descriptor_;
  metadata.reflection = RaceRewardRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceRewardStage::kIdFieldNumber;
const int RaceRewardStage::kRaceLevelFieldNumber;
const int RaceRewardStage::kPointFieldNumber;
const int RaceRewardStage::kRewardFieldNumber;
#endif  // !_MSC_VER

RaceRewardStage::RaceRewardStage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAllianceRace.RaceRewardStage)
}

void RaceRewardStage::InitAsDefaultInstance() {
}

RaceRewardStage::RaceRewardStage(const RaceRewardStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAllianceRace.RaceRewardStage)
}

void RaceRewardStage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  race_level_ = 0u;
  point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceRewardStage::~RaceRewardStage() {
  // @@protoc_insertion_point(destructor:ConfigAllianceRace.RaceRewardStage)
  SharedDtor();
}

void RaceRewardStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceRewardStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceRewardStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceRewardStage_descriptor_;
}

const RaceRewardStage& RaceRewardStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAllianceRace_2eproto();
  return *default_instance_;
}

RaceRewardStage* RaceRewardStage::default_instance_ = NULL;

RaceRewardStage* RaceRewardStage::New() const {
  return new RaceRewardStage;
}

void RaceRewardStage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaceRewardStage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, race_level_);
    point_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceRewardStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAllianceRace.RaceRewardStage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_race_level;
        break;
      }

      // required uint32 race_level = 2;
      case 2: {
        if (tag == 16) {
         parse_race_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &race_level_)));
          set_has_race_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }

      // required uint32 point = 3;
      case 3: {
        if (tag == 24) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // repeated .CommonGiftConfig.CommonModifyItemRate reward = 4;
      case 4: {
        if (tag == 34) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAllianceRace.RaceRewardStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAllianceRace.RaceRewardStage)
  return false;
#undef DO_
}

void RaceRewardStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAllianceRace.RaceRewardStage)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 race_level = 2;
  if (has_race_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->race_level(), output);
  }

  // required uint32 point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->point(), output);
  }

  // repeated .CommonGiftConfig.CommonModifyItemRate reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAllianceRace.RaceRewardStage)
}

::google::protobuf::uint8* RaceRewardStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAllianceRace.RaceRewardStage)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 race_level = 2;
  if (has_race_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->race_level(), target);
  }

  // required uint32 point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->point(), target);
  }

  // repeated .CommonGiftConfig.CommonModifyItemRate reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAllianceRace.RaceRewardStage)
  return target;
}

int RaceRewardStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 race_level = 2;
    if (has_race_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->race_level());
    }

    // required uint32 point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

  }
  // repeated .CommonGiftConfig.CommonModifyItemRate reward = 4;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceRewardStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceRewardStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceRewardStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceRewardStage::MergeFrom(const RaceRewardStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_race_level()) {
      set_race_level(from.race_level());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceRewardStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceRewardStage::CopyFrom(const RaceRewardStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceRewardStage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void RaceRewardStage::Swap(RaceRewardStage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(race_level_, other->race_level_);
    std::swap(point_, other->point_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceRewardStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceRewardStage_descriptor_;
  metadata.reflection = RaceRewardStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceReward::kIdFieldNumber;
const int RaceReward::kMinLevelFieldNumber;
const int RaceReward::kMaxLevelFieldNumber;
const int RaceReward::kRankFieldNumber;
const int RaceReward::kGradeRewardFieldNumber;
const int RaceReward::kStageFieldNumber;
#endif  // !_MSC_VER

RaceReward::RaceReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAllianceRace.RaceReward)
}

void RaceReward::InitAsDefaultInstance() {
}

RaceReward::RaceReward(const RaceReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAllianceRace.RaceReward)
}

void RaceReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  min_level_ = 0u;
  max_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceReward::~RaceReward() {
  // @@protoc_insertion_point(destructor:ConfigAllianceRace.RaceReward)
  SharedDtor();
}

void RaceReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceReward_descriptor_;
}

const RaceReward& RaceReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAllianceRace_2eproto();
  return *default_instance_;
}

RaceReward* RaceReward::default_instance_ = NULL;

RaceReward* RaceReward::New() const {
  return new RaceReward;
}

void RaceReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaceReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, min_level_);
    max_level_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rank_.Clear();
  grade_reward_.Clear();
  stage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAllianceRace.RaceReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_level;
        break;
      }

      // required uint32 min_level = 2;
      case 2: {
        if (tag == 16) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_level;
        break;
      }

      // required uint32 max_level = 3;
      case 3: {
        if (tag == 24) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rank;
        break;
      }

      // repeated .ConfigAllianceRace.RaceRewardRank rank = 4;
      case 4: {
        if (tag == 34) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rank;
        if (input->ExpectTag(42)) goto parse_grade_reward;
        break;
      }

      // repeated .CommonGiftConfig.CommonModifyItemRate grade_reward = 5;
      case 5: {
        if (tag == 42) {
         parse_grade_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grade_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_grade_reward;
        if (input->ExpectTag(50)) goto parse_stage;
        break;
      }

      // repeated .ConfigAllianceRace.RaceRewardStage stage = 6;
      case 6: {
        if (tag == 50) {
         parse_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stage;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAllianceRace.RaceReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAllianceRace.RaceReward)
  return false;
#undef DO_
}

void RaceReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAllianceRace.RaceReward)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 min_level = 2;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_level(), output);
  }

  // required uint32 max_level = 3;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_level(), output);
  }

  // repeated .ConfigAllianceRace.RaceRewardRank rank = 4;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rank(i), output);
  }

  // repeated .CommonGiftConfig.CommonModifyItemRate grade_reward = 5;
  for (int i = 0; i < this->grade_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->grade_reward(i), output);
  }

  // repeated .ConfigAllianceRace.RaceRewardStage stage = 6;
  for (int i = 0; i < this->stage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stage(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAllianceRace.RaceReward)
}

::google::protobuf::uint8* RaceReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAllianceRace.RaceReward)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 min_level = 2;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_level(), target);
  }

  // required uint32 max_level = 3;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_level(), target);
  }

  // repeated .ConfigAllianceRace.RaceRewardRank rank = 4;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rank(i), target);
  }

  // repeated .CommonGiftConfig.CommonModifyItemRate grade_reward = 5;
  for (int i = 0; i < this->grade_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->grade_reward(i), target);
  }

  // repeated .ConfigAllianceRace.RaceRewardStage stage = 6;
  for (int i = 0; i < this->stage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stage(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAllianceRace.RaceReward)
  return target;
}

int RaceReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 min_level = 2;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_level());
    }

    // required uint32 max_level = 3;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_level());
    }

  }
  // repeated .ConfigAllianceRace.RaceRewardRank rank = 4;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  // repeated .CommonGiftConfig.CommonModifyItemRate grade_reward = 5;
  total_size += 1 * this->grade_reward_size();
  for (int i = 0; i < this->grade_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grade_reward(i));
  }

  // repeated .ConfigAllianceRace.RaceRewardStage stage = 6;
  total_size += 1 * this->stage_size();
  for (int i = 0; i < this->stage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceReward::MergeFrom(const RaceReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  grade_reward_.MergeFrom(from.grade_reward_);
  stage_.MergeFrom(from.stage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceReward::CopyFrom(const RaceReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rank())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->grade_reward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stage())) return false;
  return true;
}

void RaceReward::Swap(RaceReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(min_level_, other->min_level_);
    std::swap(max_level_, other->max_level_);
    rank_.Swap(&other->rank_);
    grade_reward_.Swap(&other->grade_reward_);
    stage_.Swap(&other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceReward_descriptor_;
  metadata.reflection = RaceReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceInfo::kStageRewardRefreshCostFieldNumber;
const int RaceInfo::kStartTsFieldNumber;
const int RaceInfo::kEndTsFieldNumber;
const int RaceInfo::kGradeFieldNumber;
const int RaceInfo::kWatchAdRewardFieldNumber;
const int RaceInfo::kTaskFieldNumber;
const int RaceInfo::kRewardsFieldNumber;
#endif  // !_MSC_VER

RaceInfo::RaceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAllianceRace.RaceInfo)
}

void RaceInfo::InitAsDefaultInstance() {
  watch_ad_reward_ = const_cast< ::ConfigAllianceRace::RaceWatchAdReward*>(&::ConfigAllianceRace::RaceWatchAdReward::default_instance());
  task_ = const_cast< ::ConfigAllianceRace::RaceTask*>(&::ConfigAllianceRace::RaceTask::default_instance());
}

RaceInfo::RaceInfo(const RaceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAllianceRace.RaceInfo)
}

void RaceInfo::SharedCtor() {
  _cached_size_ = 0;
  stage_reward_refresh_cost_ = 0u;
  start_ts_ = 0u;
  end_ts_ = 0u;
  watch_ad_reward_ = NULL;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceInfo::~RaceInfo() {
  // @@protoc_insertion_point(destructor:ConfigAllianceRace.RaceInfo)
  SharedDtor();
}

void RaceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete watch_ad_reward_;
    delete task_;
  }
}

void RaceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceInfo_descriptor_;
}

const RaceInfo& RaceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAllianceRace_2eproto();
  return *default_instance_;
}

RaceInfo* RaceInfo::default_instance_ = NULL;

RaceInfo* RaceInfo::New() const {
  return new RaceInfo;
}

void RaceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(stage_reward_refresh_cost_, start_ts_);
    end_ts_ = 0u;
    if (has_watch_ad_reward()) {
      if (watch_ad_reward_ != NULL) watch_ad_reward_->::ConfigAllianceRace::RaceWatchAdReward::Clear();
    }
    if (has_task()) {
      if (task_ != NULL) task_->::ConfigAllianceRace::RaceTask::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  grade_.Clear();
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAllianceRace.RaceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stage_reward_refresh_cost = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_reward_refresh_cost_)));
          set_has_stage_reward_refresh_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_ts;
        break;
      }

      // required uint32 start_ts = 2;
      case 2: {
        if (tag == 16) {
         parse_start_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_ts_)));
          set_has_start_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end_ts;
        break;
      }

      // required uint32 end_ts = 3;
      case 3: {
        if (tag == 24) {
         parse_end_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_ts_)));
          set_has_end_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_grade;
        break;
      }

      // repeated .ConfigAllianceRace.RaceGrade grade = 4;
      case 4: {
        if (tag == 34) {
         parse_grade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grade()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_grade;
        if (input->ExpectTag(42)) goto parse_watch_ad_reward;
        break;
      }

      // required .ConfigAllianceRace.RaceWatchAdReward watch_ad_reward = 5;
      case 5: {
        if (tag == 42) {
         parse_watch_ad_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_watch_ad_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_task;
        break;
      }

      // required .ConfigAllianceRace.RaceTask task = 6;
      case 6: {
        if (tag == 50) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rewards;
        break;
      }

      // repeated .ConfigAllianceRace.RaceReward rewards = 7;
      case 7: {
        if (tag == 58) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAllianceRace.RaceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAllianceRace.RaceInfo)
  return false;
#undef DO_
}

void RaceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAllianceRace.RaceInfo)
  // required uint32 stage_reward_refresh_cost = 1;
  if (has_stage_reward_refresh_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage_reward_refresh_cost(), output);
  }

  // required uint32 start_ts = 2;
  if (has_start_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_ts(), output);
  }

  // required uint32 end_ts = 3;
  if (has_end_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_ts(), output);
  }

  // repeated .ConfigAllianceRace.RaceGrade grade = 4;
  for (int i = 0; i < this->grade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->grade(i), output);
  }

  // required .ConfigAllianceRace.RaceWatchAdReward watch_ad_reward = 5;
  if (has_watch_ad_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->watch_ad_reward(), output);
  }

  // required .ConfigAllianceRace.RaceTask task = 6;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->task(), output);
  }

  // repeated .ConfigAllianceRace.RaceReward rewards = 7;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAllianceRace.RaceInfo)
}

::google::protobuf::uint8* RaceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAllianceRace.RaceInfo)
  // required uint32 stage_reward_refresh_cost = 1;
  if (has_stage_reward_refresh_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage_reward_refresh_cost(), target);
  }

  // required uint32 start_ts = 2;
  if (has_start_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_ts(), target);
  }

  // required uint32 end_ts = 3;
  if (has_end_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_ts(), target);
  }

  // repeated .ConfigAllianceRace.RaceGrade grade = 4;
  for (int i = 0; i < this->grade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->grade(i), target);
  }

  // required .ConfigAllianceRace.RaceWatchAdReward watch_ad_reward = 5;
  if (has_watch_ad_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->watch_ad_reward(), target);
  }

  // required .ConfigAllianceRace.RaceTask task = 6;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->task(), target);
  }

  // repeated .ConfigAllianceRace.RaceReward rewards = 7;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAllianceRace.RaceInfo)
  return target;
}

int RaceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stage_reward_refresh_cost = 1;
    if (has_stage_reward_refresh_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_reward_refresh_cost());
    }

    // required uint32 start_ts = 2;
    if (has_start_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_ts());
    }

    // required uint32 end_ts = 3;
    if (has_end_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_ts());
    }

    // required .ConfigAllianceRace.RaceWatchAdReward watch_ad_reward = 5;
    if (has_watch_ad_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->watch_ad_reward());
    }

    // required .ConfigAllianceRace.RaceTask task = 6;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

  }
  // repeated .ConfigAllianceRace.RaceGrade grade = 4;
  total_size += 1 * this->grade_size();
  for (int i = 0; i < this->grade_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grade(i));
  }

  // repeated .ConfigAllianceRace.RaceReward rewards = 7;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceInfo::MergeFrom(const RaceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  grade_.MergeFrom(from.grade_);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_reward_refresh_cost()) {
      set_stage_reward_refresh_cost(from.stage_reward_refresh_cost());
    }
    if (from.has_start_ts()) {
      set_start_ts(from.start_ts());
    }
    if (from.has_end_ts()) {
      set_end_ts(from.end_ts());
    }
    if (from.has_watch_ad_reward()) {
      mutable_watch_ad_reward()->::ConfigAllianceRace::RaceWatchAdReward::MergeFrom(from.watch_ad_reward());
    }
    if (from.has_task()) {
      mutable_task()->::ConfigAllianceRace::RaceTask::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceInfo::CopyFrom(const RaceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->grade())) return false;
  if (has_watch_ad_reward()) {
    if (!this->watch_ad_reward().IsInitialized()) return false;
  }
  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void RaceInfo::Swap(RaceInfo* other) {
  if (other != this) {
    std::swap(stage_reward_refresh_cost_, other->stage_reward_refresh_cost_);
    std::swap(start_ts_, other->start_ts_);
    std::swap(end_ts_, other->end_ts_);
    grade_.Swap(&other->grade_);
    std::swap(watch_ad_reward_, other->watch_ad_reward_);
    std::swap(task_, other->task_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceInfo_descriptor_;
  metadata.reflection = RaceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceWatchAdReward::kDiamondFieldNumber;
const int RaceWatchAdReward::kPointFieldNumber;
const int RaceWatchAdReward::kCountFieldNumber;
#endif  // !_MSC_VER

RaceWatchAdReward::RaceWatchAdReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAllianceRace.RaceWatchAdReward)
}

void RaceWatchAdReward::InitAsDefaultInstance() {
}

RaceWatchAdReward::RaceWatchAdReward(const RaceWatchAdReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAllianceRace.RaceWatchAdReward)
}

void RaceWatchAdReward::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = 0u;
  point_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceWatchAdReward::~RaceWatchAdReward() {
  // @@protoc_insertion_point(destructor:ConfigAllianceRace.RaceWatchAdReward)
  SharedDtor();
}

void RaceWatchAdReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceWatchAdReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceWatchAdReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceWatchAdReward_descriptor_;
}

const RaceWatchAdReward& RaceWatchAdReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAllianceRace_2eproto();
  return *default_instance_;
}

RaceWatchAdReward* RaceWatchAdReward::default_instance_ = NULL;

RaceWatchAdReward* RaceWatchAdReward::New() const {
  return new RaceWatchAdReward;
}

void RaceWatchAdReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaceWatchAdReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(diamond_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceWatchAdReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAllianceRace.RaceWatchAdReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 diamond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // required uint32 point = 2;
      case 2: {
        if (tag == 16) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAllianceRace.RaceWatchAdReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAllianceRace.RaceWatchAdReward)
  return false;
#undef DO_
}

void RaceWatchAdReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAllianceRace.RaceWatchAdReward)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->diamond(), output);
  }

  // required uint32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAllianceRace.RaceWatchAdReward)
}

::google::protobuf::uint8* RaceWatchAdReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAllianceRace.RaceWatchAdReward)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->diamond(), target);
  }

  // required uint32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAllianceRace.RaceWatchAdReward)
  return target;
}

int RaceWatchAdReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // required uint32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceWatchAdReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceWatchAdReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceWatchAdReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceWatchAdReward::MergeFrom(const RaceWatchAdReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceWatchAdReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceWatchAdReward::CopyFrom(const RaceWatchAdReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceWatchAdReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RaceWatchAdReward::Swap(RaceWatchAdReward* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    std::swap(point_, other->point_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceWatchAdReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceWatchAdReward_descriptor_;
  metadata.reflection = RaceWatchAdReward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigAllianceRace

// @@protoc_insertion_point(global_scope)
