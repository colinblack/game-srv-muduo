// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigRotaryTable.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigRotaryTable.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigRotaryTable {

namespace {

const ::google::protobuf::Descriptor* RotaryTableCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotaryTableCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotaryTableGridCommonCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotaryTableGridCommonCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomItemLib_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomItemLib_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotaryTableItemCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotaryTableItemCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotaryTableCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotaryTableCfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigRotaryTable_2eproto() {
  protobuf_AddDesc_ConfigRotaryTable_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigRotaryTable.proto");
  GOOGLE_CHECK(file != NULL);
  RotaryTableCPP_descriptor_ = file->message_type(0);
  static const int RotaryTableCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCPP, unlock_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCPP, daily_friendly_draw_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCPP, daily_free_draw_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCPP, daily_login_draw_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCPP, cost_friendly_value_draw_),
  };
  RotaryTableCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotaryTableCPP_descriptor_,
      RotaryTableCPP::default_instance_,
      RotaryTableCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotaryTableCPP));
  RotaryTableGridCommonCPP_descriptor_ = file->message_type(1);
  static const int RotaryTableGridCommonCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableGridCommonCPP, gridid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableGridCommonCPP, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableGridCommonCPP, type_),
  };
  RotaryTableGridCommonCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotaryTableGridCommonCPP_descriptor_,
      RotaryTableGridCommonCPP::default_instance_,
      RotaryTableGridCommonCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableGridCommonCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableGridCommonCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotaryTableGridCommonCPP));
  RandomItemLib_descriptor_ = file->message_type(2);
  static const int RandomItemLib_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomItemLib, itemid_),
  };
  RandomItemLib_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomItemLib_descriptor_,
      RandomItemLib::default_instance_,
      RandomItemLib_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomItemLib, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomItemLib, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomItemLib));
  RotaryTableItemCPP_descriptor_ = file->message_type(3);
  static const int RotaryTableItemCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableItemCPP, diamondcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableItemCPP, coinbasek_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableItemCPP, speedcardcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableItemCPP, cropbasek_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableItemCPP, randomitemlib_),
  };
  RotaryTableItemCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotaryTableItemCPP_descriptor_,
      RotaryTableItemCPP::default_instance_,
      RotaryTableItemCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableItemCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableItemCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotaryTableItemCPP));
  RotaryTableCfg_descriptor_ = file->message_type(4);
  static const int RotaryTableCfg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCfg, rotarytablebase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCfg, gridcommon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCfg, griditeminfo_),
  };
  RotaryTableCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotaryTableCfg_descriptor_,
      RotaryTableCfg::default_instance_,
      RotaryTableCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotaryTableCfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigRotaryTable_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotaryTableCPP_descriptor_, &RotaryTableCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotaryTableGridCommonCPP_descriptor_, &RotaryTableGridCommonCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomItemLib_descriptor_, &RandomItemLib::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotaryTableItemCPP_descriptor_, &RotaryTableItemCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotaryTableCfg_descriptor_, &RotaryTableCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigRotaryTable_2eproto() {
  delete RotaryTableCPP::default_instance_;
  delete RotaryTableCPP_reflection_;
  delete RotaryTableGridCommonCPP::default_instance_;
  delete RotaryTableGridCommonCPP_reflection_;
  delete RandomItemLib::default_instance_;
  delete RandomItemLib_reflection_;
  delete RotaryTableItemCPP::default_instance_;
  delete RotaryTableItemCPP_reflection_;
  delete RotaryTableCfg::default_instance_;
  delete RotaryTableCfg_reflection_;
}

void protobuf_AddDesc_ConfigRotaryTable_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ConfigRotaryTable.proto\022\021ConfigRotaryT"
    "able\"\244\001\n\016RotaryTableCPP\022\024\n\014unlock_level\030"
    "\001 \002(\r\022\037\n\027daily_friendly_draw_cnt\030\002 \002(\r\022\033"
    "\n\023daily_free_draw_cnt\030\003 \002(\r\022\034\n\024daily_log"
    "in_draw_cnt\030\004 \002(\r\022 \n\030cost_friendly_value"
    "_draw\030\005 \002(\r\"H\n\030RotaryTableGridCommonCPP\022"
    "\016\n\006gridid\030\001 \002(\r\022\016\n\006weight\030\002 \002(\r\022\014\n\004type\030"
    "\003 \002(\r\"\037\n\rRandomItemLib\022\016\n\006itemid\030\001 \003(\r\"\235"
    "\001\n\022RotaryTableItemCPP\022\022\n\ndiamondcnt\030\001 \003("
    "\r\022\021\n\tcoinBaseK\030\002 \003(\r\022\024\n\014speedcardcnt\030\003 \003"
    "(\r\022\021\n\tcropbaseK\030\004 \002(\r\0227\n\rrandomitemlib\030\005"
    " \003(\0132 .ConfigRotaryTable.RandomItemLib\"\312"
    "\001\n\016RotaryTableCfg\022:\n\017rotarytablebase\030\001 \002"
    "(\0132!.ConfigRotaryTable.RotaryTableCPP\022\?\n"
    "\ngridcommon\030\002 \003(\0132+.ConfigRotaryTable.Ro"
    "taryTableGridCommonCPP\022;\n\014griditeminfo\030\003"
    " \002(\0132%.ConfigRotaryTable.RotaryTableItem"
    "CPP", 683);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigRotaryTable.proto", &protobuf_RegisterTypes);
  RotaryTableCPP::default_instance_ = new RotaryTableCPP();
  RotaryTableGridCommonCPP::default_instance_ = new RotaryTableGridCommonCPP();
  RandomItemLib::default_instance_ = new RandomItemLib();
  RotaryTableItemCPP::default_instance_ = new RotaryTableItemCPP();
  RotaryTableCfg::default_instance_ = new RotaryTableCfg();
  RotaryTableCPP::default_instance_->InitAsDefaultInstance();
  RotaryTableGridCommonCPP::default_instance_->InitAsDefaultInstance();
  RandomItemLib::default_instance_->InitAsDefaultInstance();
  RotaryTableItemCPP::default_instance_->InitAsDefaultInstance();
  RotaryTableCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigRotaryTable_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigRotaryTable_2eproto {
  StaticDescriptorInitializer_ConfigRotaryTable_2eproto() {
    protobuf_AddDesc_ConfigRotaryTable_2eproto();
  }
} static_descriptor_initializer_ConfigRotaryTable_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RotaryTableCPP::kUnlockLevelFieldNumber;
const int RotaryTableCPP::kDailyFriendlyDrawCntFieldNumber;
const int RotaryTableCPP::kDailyFreeDrawCntFieldNumber;
const int RotaryTableCPP::kDailyLoginDrawCntFieldNumber;
const int RotaryTableCPP::kCostFriendlyValueDrawFieldNumber;
#endif  // !_MSC_VER

RotaryTableCPP::RotaryTableCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigRotaryTable.RotaryTableCPP)
}

void RotaryTableCPP::InitAsDefaultInstance() {
}

RotaryTableCPP::RotaryTableCPP(const RotaryTableCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigRotaryTable.RotaryTableCPP)
}

void RotaryTableCPP::SharedCtor() {
  _cached_size_ = 0;
  unlock_level_ = 0u;
  daily_friendly_draw_cnt_ = 0u;
  daily_free_draw_cnt_ = 0u;
  daily_login_draw_cnt_ = 0u;
  cost_friendly_value_draw_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotaryTableCPP::~RotaryTableCPP() {
  // @@protoc_insertion_point(destructor:ConfigRotaryTable.RotaryTableCPP)
  SharedDtor();
}

void RotaryTableCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RotaryTableCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotaryTableCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotaryTableCPP_descriptor_;
}

const RotaryTableCPP& RotaryTableCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigRotaryTable_2eproto();
  return *default_instance_;
}

RotaryTableCPP* RotaryTableCPP::default_instance_ = NULL;

RotaryTableCPP* RotaryTableCPP::New() const {
  return new RotaryTableCPP;
}

void RotaryTableCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RotaryTableCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(unlock_level_, cost_friendly_value_draw_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotaryTableCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigRotaryTable.RotaryTableCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unlock_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_level_)));
          set_has_unlock_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_daily_friendly_draw_cnt;
        break;
      }

      // required uint32 daily_friendly_draw_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_daily_friendly_draw_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_friendly_draw_cnt_)));
          set_has_daily_friendly_draw_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_daily_free_draw_cnt;
        break;
      }

      // required uint32 daily_free_draw_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_daily_free_draw_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_free_draw_cnt_)));
          set_has_daily_free_draw_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_daily_login_draw_cnt;
        break;
      }

      // required uint32 daily_login_draw_cnt = 4;
      case 4: {
        if (tag == 32) {
         parse_daily_login_draw_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_login_draw_cnt_)));
          set_has_daily_login_draw_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cost_friendly_value_draw;
        break;
      }

      // required uint32 cost_friendly_value_draw = 5;
      case 5: {
        if (tag == 40) {
         parse_cost_friendly_value_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_friendly_value_draw_)));
          set_has_cost_friendly_value_draw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigRotaryTable.RotaryTableCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigRotaryTable.RotaryTableCPP)
  return false;
#undef DO_
}

void RotaryTableCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigRotaryTable.RotaryTableCPP)
  // required uint32 unlock_level = 1;
  if (has_unlock_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unlock_level(), output);
  }

  // required uint32 daily_friendly_draw_cnt = 2;
  if (has_daily_friendly_draw_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->daily_friendly_draw_cnt(), output);
  }

  // required uint32 daily_free_draw_cnt = 3;
  if (has_daily_free_draw_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->daily_free_draw_cnt(), output);
  }

  // required uint32 daily_login_draw_cnt = 4;
  if (has_daily_login_draw_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->daily_login_draw_cnt(), output);
  }

  // required uint32 cost_friendly_value_draw = 5;
  if (has_cost_friendly_value_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cost_friendly_value_draw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigRotaryTable.RotaryTableCPP)
}

::google::protobuf::uint8* RotaryTableCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigRotaryTable.RotaryTableCPP)
  // required uint32 unlock_level = 1;
  if (has_unlock_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unlock_level(), target);
  }

  // required uint32 daily_friendly_draw_cnt = 2;
  if (has_daily_friendly_draw_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->daily_friendly_draw_cnt(), target);
  }

  // required uint32 daily_free_draw_cnt = 3;
  if (has_daily_free_draw_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->daily_free_draw_cnt(), target);
  }

  // required uint32 daily_login_draw_cnt = 4;
  if (has_daily_login_draw_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->daily_login_draw_cnt(), target);
  }

  // required uint32 cost_friendly_value_draw = 5;
  if (has_cost_friendly_value_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cost_friendly_value_draw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigRotaryTable.RotaryTableCPP)
  return target;
}

int RotaryTableCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unlock_level = 1;
    if (has_unlock_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlock_level());
    }

    // required uint32 daily_friendly_draw_cnt = 2;
    if (has_daily_friendly_draw_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_friendly_draw_cnt());
    }

    // required uint32 daily_free_draw_cnt = 3;
    if (has_daily_free_draw_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_free_draw_cnt());
    }

    // required uint32 daily_login_draw_cnt = 4;
    if (has_daily_login_draw_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_login_draw_cnt());
    }

    // required uint32 cost_friendly_value_draw = 5;
    if (has_cost_friendly_value_draw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_friendly_value_draw());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotaryTableCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotaryTableCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotaryTableCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotaryTableCPP::MergeFrom(const RotaryTableCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unlock_level()) {
      set_unlock_level(from.unlock_level());
    }
    if (from.has_daily_friendly_draw_cnt()) {
      set_daily_friendly_draw_cnt(from.daily_friendly_draw_cnt());
    }
    if (from.has_daily_free_draw_cnt()) {
      set_daily_free_draw_cnt(from.daily_free_draw_cnt());
    }
    if (from.has_daily_login_draw_cnt()) {
      set_daily_login_draw_cnt(from.daily_login_draw_cnt());
    }
    if (from.has_cost_friendly_value_draw()) {
      set_cost_friendly_value_draw(from.cost_friendly_value_draw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotaryTableCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotaryTableCPP::CopyFrom(const RotaryTableCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotaryTableCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RotaryTableCPP::Swap(RotaryTableCPP* other) {
  if (other != this) {
    std::swap(unlock_level_, other->unlock_level_);
    std::swap(daily_friendly_draw_cnt_, other->daily_friendly_draw_cnt_);
    std::swap(daily_free_draw_cnt_, other->daily_free_draw_cnt_);
    std::swap(daily_login_draw_cnt_, other->daily_login_draw_cnt_);
    std::swap(cost_friendly_value_draw_, other->cost_friendly_value_draw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotaryTableCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotaryTableCPP_descriptor_;
  metadata.reflection = RotaryTableCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RotaryTableGridCommonCPP::kGrididFieldNumber;
const int RotaryTableGridCommonCPP::kWeightFieldNumber;
const int RotaryTableGridCommonCPP::kTypeFieldNumber;
#endif  // !_MSC_VER

RotaryTableGridCommonCPP::RotaryTableGridCommonCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigRotaryTable.RotaryTableGridCommonCPP)
}

void RotaryTableGridCommonCPP::InitAsDefaultInstance() {
}

RotaryTableGridCommonCPP::RotaryTableGridCommonCPP(const RotaryTableGridCommonCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigRotaryTable.RotaryTableGridCommonCPP)
}

void RotaryTableGridCommonCPP::SharedCtor() {
  _cached_size_ = 0;
  gridid_ = 0u;
  weight_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotaryTableGridCommonCPP::~RotaryTableGridCommonCPP() {
  // @@protoc_insertion_point(destructor:ConfigRotaryTable.RotaryTableGridCommonCPP)
  SharedDtor();
}

void RotaryTableGridCommonCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RotaryTableGridCommonCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotaryTableGridCommonCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotaryTableGridCommonCPP_descriptor_;
}

const RotaryTableGridCommonCPP& RotaryTableGridCommonCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigRotaryTable_2eproto();
  return *default_instance_;
}

RotaryTableGridCommonCPP* RotaryTableGridCommonCPP::default_instance_ = NULL;

RotaryTableGridCommonCPP* RotaryTableGridCommonCPP::New() const {
  return new RotaryTableGridCommonCPP;
}

void RotaryTableGridCommonCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RotaryTableGridCommonCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gridid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotaryTableGridCommonCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigRotaryTable.RotaryTableGridCommonCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gridid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridid_)));
          set_has_gridid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // required uint32 weight = 2;
      case 2: {
        if (tag == 16) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigRotaryTable.RotaryTableGridCommonCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigRotaryTable.RotaryTableGridCommonCPP)
  return false;
#undef DO_
}

void RotaryTableGridCommonCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigRotaryTable.RotaryTableGridCommonCPP)
  // required uint32 gridid = 1;
  if (has_gridid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gridid(), output);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigRotaryTable.RotaryTableGridCommonCPP)
}

::google::protobuf::uint8* RotaryTableGridCommonCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigRotaryTable.RotaryTableGridCommonCPP)
  // required uint32 gridid = 1;
  if (has_gridid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gridid(), target);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigRotaryTable.RotaryTableGridCommonCPP)
  return target;
}

int RotaryTableGridCommonCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gridid = 1;
    if (has_gridid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridid());
    }

    // required uint32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotaryTableGridCommonCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotaryTableGridCommonCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotaryTableGridCommonCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotaryTableGridCommonCPP::MergeFrom(const RotaryTableGridCommonCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gridid()) {
      set_gridid(from.gridid());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotaryTableGridCommonCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotaryTableGridCommonCPP::CopyFrom(const RotaryTableGridCommonCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotaryTableGridCommonCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RotaryTableGridCommonCPP::Swap(RotaryTableGridCommonCPP* other) {
  if (other != this) {
    std::swap(gridid_, other->gridid_);
    std::swap(weight_, other->weight_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotaryTableGridCommonCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotaryTableGridCommonCPP_descriptor_;
  metadata.reflection = RotaryTableGridCommonCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomItemLib::kItemidFieldNumber;
#endif  // !_MSC_VER

RandomItemLib::RandomItemLib()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigRotaryTable.RandomItemLib)
}

void RandomItemLib::InitAsDefaultInstance() {
}

RandomItemLib::RandomItemLib(const RandomItemLib& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigRotaryTable.RandomItemLib)
}

void RandomItemLib::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomItemLib::~RandomItemLib() {
  // @@protoc_insertion_point(destructor:ConfigRotaryTable.RandomItemLib)
  SharedDtor();
}

void RandomItemLib::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandomItemLib::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomItemLib::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomItemLib_descriptor_;
}

const RandomItemLib& RandomItemLib::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigRotaryTable_2eproto();
  return *default_instance_;
}

RandomItemLib* RandomItemLib::default_instance_ = NULL;

RandomItemLib* RandomItemLib::New() const {
  return new RandomItemLib;
}

void RandomItemLib::Clear() {
  itemid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomItemLib::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigRotaryTable.RandomItemLib)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_itemid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_itemid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigRotaryTable.RandomItemLib)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigRotaryTable.RandomItemLib)
  return false;
#undef DO_
}

void RandomItemLib::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigRotaryTable.RandomItemLib)
  // repeated uint32 itemid = 1;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->itemid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigRotaryTable.RandomItemLib)
}

::google::protobuf::uint8* RandomItemLib::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigRotaryTable.RandomItemLib)
  // repeated uint32 itemid = 1;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->itemid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigRotaryTable.RandomItemLib)
  return target;
}

int RandomItemLib::ByteSize() const {
  int total_size = 0;

  // repeated uint32 itemid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomItemLib::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomItemLib* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomItemLib*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomItemLib::MergeFrom(const RandomItemLib& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomItemLib::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomItemLib::CopyFrom(const RandomItemLib& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomItemLib::IsInitialized() const {

  return true;
}

void RandomItemLib::Swap(RandomItemLib* other) {
  if (other != this) {
    itemid_.Swap(&other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomItemLib::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomItemLib_descriptor_;
  metadata.reflection = RandomItemLib_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RotaryTableItemCPP::kDiamondcntFieldNumber;
const int RotaryTableItemCPP::kCoinBaseKFieldNumber;
const int RotaryTableItemCPP::kSpeedcardcntFieldNumber;
const int RotaryTableItemCPP::kCropbaseKFieldNumber;
const int RotaryTableItemCPP::kRandomitemlibFieldNumber;
#endif  // !_MSC_VER

RotaryTableItemCPP::RotaryTableItemCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigRotaryTable.RotaryTableItemCPP)
}

void RotaryTableItemCPP::InitAsDefaultInstance() {
}

RotaryTableItemCPP::RotaryTableItemCPP(const RotaryTableItemCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigRotaryTable.RotaryTableItemCPP)
}

void RotaryTableItemCPP::SharedCtor() {
  _cached_size_ = 0;
  cropbasek_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotaryTableItemCPP::~RotaryTableItemCPP() {
  // @@protoc_insertion_point(destructor:ConfigRotaryTable.RotaryTableItemCPP)
  SharedDtor();
}

void RotaryTableItemCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RotaryTableItemCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotaryTableItemCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotaryTableItemCPP_descriptor_;
}

const RotaryTableItemCPP& RotaryTableItemCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigRotaryTable_2eproto();
  return *default_instance_;
}

RotaryTableItemCPP* RotaryTableItemCPP::default_instance_ = NULL;

RotaryTableItemCPP* RotaryTableItemCPP::New() const {
  return new RotaryTableItemCPP;
}

void RotaryTableItemCPP::Clear() {
  cropbasek_ = 0u;
  diamondcnt_.Clear();
  coinbasek_.Clear();
  speedcardcnt_.Clear();
  randomitemlib_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotaryTableItemCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigRotaryTable.RotaryTableItemCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 diamondcnt = 1;
      case 1: {
        if (tag == 8) {
         parse_diamondcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_diamondcnt())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_diamondcnt())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_diamondcnt;
        if (input->ExpectTag(16)) goto parse_coinBaseK;
        break;
      }

      // repeated uint32 coinBaseK = 2;
      case 2: {
        if (tag == 16) {
         parse_coinBaseK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_coinbasek())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_coinbasek())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coinBaseK;
        if (input->ExpectTag(24)) goto parse_speedcardcnt;
        break;
      }

      // repeated uint32 speedcardcnt = 3;
      case 3: {
        if (tag == 24) {
         parse_speedcardcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_speedcardcnt())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_speedcardcnt())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_speedcardcnt;
        if (input->ExpectTag(32)) goto parse_cropbaseK;
        break;
      }

      // required uint32 cropbaseK = 4;
      case 4: {
        if (tag == 32) {
         parse_cropbaseK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cropbasek_)));
          set_has_cropbasek();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_randomitemlib;
        break;
      }

      // repeated .ConfigRotaryTable.RandomItemLib randomitemlib = 5;
      case 5: {
        if (tag == 42) {
         parse_randomitemlib:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_randomitemlib()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_randomitemlib;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigRotaryTable.RotaryTableItemCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigRotaryTable.RotaryTableItemCPP)
  return false;
#undef DO_
}

void RotaryTableItemCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigRotaryTable.RotaryTableItemCPP)
  // repeated uint32 diamondcnt = 1;
  for (int i = 0; i < this->diamondcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->diamondcnt(i), output);
  }

  // repeated uint32 coinBaseK = 2;
  for (int i = 0; i < this->coinbasek_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->coinbasek(i), output);
  }

  // repeated uint32 speedcardcnt = 3;
  for (int i = 0; i < this->speedcardcnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->speedcardcnt(i), output);
  }

  // required uint32 cropbaseK = 4;
  if (has_cropbasek()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cropbasek(), output);
  }

  // repeated .ConfigRotaryTable.RandomItemLib randomitemlib = 5;
  for (int i = 0; i < this->randomitemlib_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->randomitemlib(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigRotaryTable.RotaryTableItemCPP)
}

::google::protobuf::uint8* RotaryTableItemCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigRotaryTable.RotaryTableItemCPP)
  // repeated uint32 diamondcnt = 1;
  for (int i = 0; i < this->diamondcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->diamondcnt(i), target);
  }

  // repeated uint32 coinBaseK = 2;
  for (int i = 0; i < this->coinbasek_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->coinbasek(i), target);
  }

  // repeated uint32 speedcardcnt = 3;
  for (int i = 0; i < this->speedcardcnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->speedcardcnt(i), target);
  }

  // required uint32 cropbaseK = 4;
  if (has_cropbasek()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cropbasek(), target);
  }

  // repeated .ConfigRotaryTable.RandomItemLib randomitemlib = 5;
  for (int i = 0; i < this->randomitemlib_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->randomitemlib(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigRotaryTable.RotaryTableItemCPP)
  return target;
}

int RotaryTableItemCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required uint32 cropbaseK = 4;
    if (has_cropbasek()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cropbasek());
    }

  }
  // repeated uint32 diamondcnt = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->diamondcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->diamondcnt(i));
    }
    total_size += 1 * this->diamondcnt_size() + data_size;
  }

  // repeated uint32 coinBaseK = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->coinbasek_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->coinbasek(i));
    }
    total_size += 1 * this->coinbasek_size() + data_size;
  }

  // repeated uint32 speedcardcnt = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->speedcardcnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->speedcardcnt(i));
    }
    total_size += 1 * this->speedcardcnt_size() + data_size;
  }

  // repeated .ConfigRotaryTable.RandomItemLib randomitemlib = 5;
  total_size += 1 * this->randomitemlib_size();
  for (int i = 0; i < this->randomitemlib_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->randomitemlib(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotaryTableItemCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotaryTableItemCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotaryTableItemCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotaryTableItemCPP::MergeFrom(const RotaryTableItemCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  diamondcnt_.MergeFrom(from.diamondcnt_);
  coinbasek_.MergeFrom(from.coinbasek_);
  speedcardcnt_.MergeFrom(from.speedcardcnt_);
  randomitemlib_.MergeFrom(from.randomitemlib_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_cropbasek()) {
      set_cropbasek(from.cropbasek());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotaryTableItemCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotaryTableItemCPP::CopyFrom(const RotaryTableItemCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotaryTableItemCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void RotaryTableItemCPP::Swap(RotaryTableItemCPP* other) {
  if (other != this) {
    diamondcnt_.Swap(&other->diamondcnt_);
    coinbasek_.Swap(&other->coinbasek_);
    speedcardcnt_.Swap(&other->speedcardcnt_);
    std::swap(cropbasek_, other->cropbasek_);
    randomitemlib_.Swap(&other->randomitemlib_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotaryTableItemCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotaryTableItemCPP_descriptor_;
  metadata.reflection = RotaryTableItemCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RotaryTableCfg::kRotarytablebaseFieldNumber;
const int RotaryTableCfg::kGridcommonFieldNumber;
const int RotaryTableCfg::kGriditeminfoFieldNumber;
#endif  // !_MSC_VER

RotaryTableCfg::RotaryTableCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigRotaryTable.RotaryTableCfg)
}

void RotaryTableCfg::InitAsDefaultInstance() {
  rotarytablebase_ = const_cast< ::ConfigRotaryTable::RotaryTableCPP*>(&::ConfigRotaryTable::RotaryTableCPP::default_instance());
  griditeminfo_ = const_cast< ::ConfigRotaryTable::RotaryTableItemCPP*>(&::ConfigRotaryTable::RotaryTableItemCPP::default_instance());
}

RotaryTableCfg::RotaryTableCfg(const RotaryTableCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigRotaryTable.RotaryTableCfg)
}

void RotaryTableCfg::SharedCtor() {
  _cached_size_ = 0;
  rotarytablebase_ = NULL;
  griditeminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotaryTableCfg::~RotaryTableCfg() {
  // @@protoc_insertion_point(destructor:ConfigRotaryTable.RotaryTableCfg)
  SharedDtor();
}

void RotaryTableCfg::SharedDtor() {
  if (this != default_instance_) {
    delete rotarytablebase_;
    delete griditeminfo_;
  }
}

void RotaryTableCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotaryTableCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotaryTableCfg_descriptor_;
}

const RotaryTableCfg& RotaryTableCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigRotaryTable_2eproto();
  return *default_instance_;
}

RotaryTableCfg* RotaryTableCfg::default_instance_ = NULL;

RotaryTableCfg* RotaryTableCfg::New() const {
  return new RotaryTableCfg;
}

void RotaryTableCfg::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_rotarytablebase()) {
      if (rotarytablebase_ != NULL) rotarytablebase_->::ConfigRotaryTable::RotaryTableCPP::Clear();
    }
    if (has_griditeminfo()) {
      if (griditeminfo_ != NULL) griditeminfo_->::ConfigRotaryTable::RotaryTableItemCPP::Clear();
    }
  }
  gridcommon_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotaryTableCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigRotaryTable.RotaryTableCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConfigRotaryTable.RotaryTableCPP rotarytablebase = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotarytablebase()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gridcommon;
        break;
      }

      // repeated .ConfigRotaryTable.RotaryTableGridCommonCPP gridcommon = 2;
      case 2: {
        if (tag == 18) {
         parse_gridcommon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gridcommon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gridcommon;
        if (input->ExpectTag(26)) goto parse_griditeminfo;
        break;
      }

      // required .ConfigRotaryTable.RotaryTableItemCPP griditeminfo = 3;
      case 3: {
        if (tag == 26) {
         parse_griditeminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_griditeminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigRotaryTable.RotaryTableCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigRotaryTable.RotaryTableCfg)
  return false;
#undef DO_
}

void RotaryTableCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigRotaryTable.RotaryTableCfg)
  // required .ConfigRotaryTable.RotaryTableCPP rotarytablebase = 1;
  if (has_rotarytablebase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rotarytablebase(), output);
  }

  // repeated .ConfigRotaryTable.RotaryTableGridCommonCPP gridcommon = 2;
  for (int i = 0; i < this->gridcommon_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gridcommon(i), output);
  }

  // required .ConfigRotaryTable.RotaryTableItemCPP griditeminfo = 3;
  if (has_griditeminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->griditeminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigRotaryTable.RotaryTableCfg)
}

::google::protobuf::uint8* RotaryTableCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigRotaryTable.RotaryTableCfg)
  // required .ConfigRotaryTable.RotaryTableCPP rotarytablebase = 1;
  if (has_rotarytablebase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rotarytablebase(), target);
  }

  // repeated .ConfigRotaryTable.RotaryTableGridCommonCPP gridcommon = 2;
  for (int i = 0; i < this->gridcommon_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gridcommon(i), target);
  }

  // required .ConfigRotaryTable.RotaryTableItemCPP griditeminfo = 3;
  if (has_griditeminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->griditeminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigRotaryTable.RotaryTableCfg)
  return target;
}

int RotaryTableCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConfigRotaryTable.RotaryTableCPP rotarytablebase = 1;
    if (has_rotarytablebase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotarytablebase());
    }

    // required .ConfigRotaryTable.RotaryTableItemCPP griditeminfo = 3;
    if (has_griditeminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->griditeminfo());
    }

  }
  // repeated .ConfigRotaryTable.RotaryTableGridCommonCPP gridcommon = 2;
  total_size += 1 * this->gridcommon_size();
  for (int i = 0; i < this->gridcommon_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gridcommon(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotaryTableCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotaryTableCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotaryTableCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotaryTableCfg::MergeFrom(const RotaryTableCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridcommon_.MergeFrom(from.gridcommon_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rotarytablebase()) {
      mutable_rotarytablebase()->::ConfigRotaryTable::RotaryTableCPP::MergeFrom(from.rotarytablebase());
    }
    if (from.has_griditeminfo()) {
      mutable_griditeminfo()->::ConfigRotaryTable::RotaryTableItemCPP::MergeFrom(from.griditeminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotaryTableCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotaryTableCfg::CopyFrom(const RotaryTableCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotaryTableCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_rotarytablebase()) {
    if (!this->rotarytablebase().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->gridcommon())) return false;
  if (has_griditeminfo()) {
    if (!this->griditeminfo().IsInitialized()) return false;
  }
  return true;
}

void RotaryTableCfg::Swap(RotaryTableCfg* other) {
  if (other != this) {
    std::swap(rotarytablebase_, other->rotarytablebase_);
    gridcommon_.Swap(&other->gridcommon_);
    std::swap(griditeminfo_, other->griditeminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotaryTableCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotaryTableCfg_descriptor_;
  metadata.reflection = RotaryTableCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigRotaryTable

// @@protoc_insertion_point(global_scope)
