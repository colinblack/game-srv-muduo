// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigMapExpand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigMapExpand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigMapExpand {

namespace {

const ::google::protobuf::Descriptor* UnLockLandCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnLockLandCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapExpandCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapExpandCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockLandCostCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockLandCostCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapExpandInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapExpandInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigMapExpand_2eproto() {
  protobuf_AddDesc_ConfigMapExpand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigMapExpand.proto");
  GOOGLE_CHECK(file != NULL);
  UnLockLandCPP_descriptor_ = file->message_type(0);
  static const int UnLockLandCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockLandCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockLandCPP, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockLandCPP, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockLandCPP, footprint_),
  };
  UnLockLandCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnLockLandCPP_descriptor_,
      UnLockLandCPP::default_instance_,
      UnLockLandCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockLandCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnLockLandCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnLockLandCPP));
  MapExpandCPP_descriptor_ = file->message_type(1);
  static const int MapExpandCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapExpandCPP, unlocklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapExpandCPP, land_),
  };
  MapExpandCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapExpandCPP_descriptor_,
      MapExpandCPP::default_instance_,
      MapExpandCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapExpandCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapExpandCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapExpandCPP));
  UnlockLandCostCPP_descriptor_ = file->message_type(2);
  static const int UnlockLandCostCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockLandCostCPP, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockLandCostCPP, cost_),
  };
  UnlockLandCostCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockLandCostCPP_descriptor_,
      UnlockLandCostCPP::default_instance_,
      UnlockLandCostCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockLandCostCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockLandCostCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockLandCostCPP));
  MapExpandInfo_descriptor_ = file->message_type(3);
  static const int MapExpandInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapExpandInfo, landinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapExpandInfo, unlockcost_),
  };
  MapExpandInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapExpandInfo_descriptor_,
      MapExpandInfo::default_instance_,
      MapExpandInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapExpandInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapExpandInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapExpandInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigMapExpand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnLockLandCPP_descriptor_, &UnLockLandCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapExpandCPP_descriptor_, &MapExpandCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockLandCostCPP_descriptor_, &UnlockLandCostCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapExpandInfo_descriptor_, &MapExpandInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigMapExpand_2eproto() {
  delete UnLockLandCPP::default_instance_;
  delete UnLockLandCPP_reflection_;
  delete MapExpandCPP::default_instance_;
  delete MapExpandCPP_reflection_;
  delete UnlockLandCostCPP::default_instance_;
  delete UnlockLandCostCPP_reflection_;
  delete MapExpandInfo::default_instance_;
  delete MapExpandInfo_reflection_;
}

void protobuf_AddDesc_ConfigMapExpand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ConfigMapExpand.proto\022\017ConfigMapExpand"
    "\032\026CommonGiftConfig.proto\"I\n\rUnLockLandCP"
    "P\022\n\n\002id\030\001 \002(\r\022\013\n\003pos\030\002 \003(\r\022\014\n\004type\030\003 \002(\r"
    "\022\021\n\tfootprint\030\004 \003(\r\"Q\n\014MapExpandCPP\022\023\n\013u"
    "nLockLevel\030\001 \002(\r\022,\n\004land\030\002 \003(\0132\036.ConfigM"
    "apExpand.UnLockLandCPP\"S\n\021UnlockLandCost"
    "CPP\022\014\n\004type\030\001 \002(\r\0220\n\004cost\030\002 \002(\0132\".Common"
    "GiftConfig.CommonModifyItem\"x\n\rMapExpand"
    "Info\022/\n\010landInfo\030\001 \002(\0132\035.ConfigMapExpand"
    ".MapExpandCPP\0226\n\nunLockCost\030\002 \003(\0132\".Conf"
    "igMapExpand.UnlockLandCostCPP", 429);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigMapExpand.proto", &protobuf_RegisterTypes);
  UnLockLandCPP::default_instance_ = new UnLockLandCPP();
  MapExpandCPP::default_instance_ = new MapExpandCPP();
  UnlockLandCostCPP::default_instance_ = new UnlockLandCostCPP();
  MapExpandInfo::default_instance_ = new MapExpandInfo();
  UnLockLandCPP::default_instance_->InitAsDefaultInstance();
  MapExpandCPP::default_instance_->InitAsDefaultInstance();
  UnlockLandCostCPP::default_instance_->InitAsDefaultInstance();
  MapExpandInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigMapExpand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigMapExpand_2eproto {
  StaticDescriptorInitializer_ConfigMapExpand_2eproto() {
    protobuf_AddDesc_ConfigMapExpand_2eproto();
  }
} static_descriptor_initializer_ConfigMapExpand_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UnLockLandCPP::kIdFieldNumber;
const int UnLockLandCPP::kPosFieldNumber;
const int UnLockLandCPP::kTypeFieldNumber;
const int UnLockLandCPP::kFootprintFieldNumber;
#endif  // !_MSC_VER

UnLockLandCPP::UnLockLandCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigMapExpand.UnLockLandCPP)
}

void UnLockLandCPP::InitAsDefaultInstance() {
}

UnLockLandCPP::UnLockLandCPP(const UnLockLandCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigMapExpand.UnLockLandCPP)
}

void UnLockLandCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnLockLandCPP::~UnLockLandCPP() {
  // @@protoc_insertion_point(destructor:ConfigMapExpand.UnLockLandCPP)
  SharedDtor();
}

void UnLockLandCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnLockLandCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnLockLandCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnLockLandCPP_descriptor_;
}

const UnLockLandCPP& UnLockLandCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigMapExpand_2eproto();
  return *default_instance_;
}

UnLockLandCPP* UnLockLandCPP::default_instance_ = NULL;

UnLockLandCPP* UnLockLandCPP::New() const {
  return new UnLockLandCPP;
}

void UnLockLandCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnLockLandCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  pos_.Clear();
  footprint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnLockLandCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigMapExpand.UnLockLandCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // repeated uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_pos())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_footprint;
        break;
      }

      // repeated uint32 footprint = 4;
      case 4: {
        if (tag == 32) {
         parse_footprint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_footprint())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_footprint())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_footprint;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigMapExpand.UnLockLandCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigMapExpand.UnLockLandCPP)
  return false;
#undef DO_
}

void UnLockLandCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigMapExpand.UnLockLandCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->pos(i), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // repeated uint32 footprint = 4;
  for (int i = 0; i < this->footprint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->footprint(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigMapExpand.UnLockLandCPP)
}

::google::protobuf::uint8* UnLockLandCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigMapExpand.UnLockLandCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->pos(i), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // repeated uint32 footprint = 4;
  for (int i = 0; i < this->footprint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->footprint(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigMapExpand.UnLockLandCPP)
  return target;
}

int UnLockLandCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated uint32 pos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }

  // repeated uint32 footprint = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->footprint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->footprint(i));
    }
    total_size += 1 * this->footprint_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnLockLandCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnLockLandCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnLockLandCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnLockLandCPP::MergeFrom(const UnLockLandCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  footprint_.MergeFrom(from.footprint_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnLockLandCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnLockLandCPP::CopyFrom(const UnLockLandCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnLockLandCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void UnLockLandCPP::Swap(UnLockLandCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    pos_.Swap(&other->pos_);
    std::swap(type_, other->type_);
    footprint_.Swap(&other->footprint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnLockLandCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnLockLandCPP_descriptor_;
  metadata.reflection = UnLockLandCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapExpandCPP::kUnLockLevelFieldNumber;
const int MapExpandCPP::kLandFieldNumber;
#endif  // !_MSC_VER

MapExpandCPP::MapExpandCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigMapExpand.MapExpandCPP)
}

void MapExpandCPP::InitAsDefaultInstance() {
}

MapExpandCPP::MapExpandCPP(const MapExpandCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigMapExpand.MapExpandCPP)
}

void MapExpandCPP::SharedCtor() {
  _cached_size_ = 0;
  unlocklevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapExpandCPP::~MapExpandCPP() {
  // @@protoc_insertion_point(destructor:ConfigMapExpand.MapExpandCPP)
  SharedDtor();
}

void MapExpandCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapExpandCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapExpandCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapExpandCPP_descriptor_;
}

const MapExpandCPP& MapExpandCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigMapExpand_2eproto();
  return *default_instance_;
}

MapExpandCPP* MapExpandCPP::default_instance_ = NULL;

MapExpandCPP* MapExpandCPP::New() const {
  return new MapExpandCPP;
}

void MapExpandCPP::Clear() {
  unlocklevel_ = 0u;
  land_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapExpandCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigMapExpand.MapExpandCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unLockLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlocklevel_)));
          set_has_unlocklevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_land;
        break;
      }

      // repeated .ConfigMapExpand.UnLockLandCPP land = 2;
      case 2: {
        if (tag == 18) {
         parse_land:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_land()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_land;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigMapExpand.MapExpandCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigMapExpand.MapExpandCPP)
  return false;
#undef DO_
}

void MapExpandCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigMapExpand.MapExpandCPP)
  // required uint32 unLockLevel = 1;
  if (has_unlocklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unlocklevel(), output);
  }

  // repeated .ConfigMapExpand.UnLockLandCPP land = 2;
  for (int i = 0; i < this->land_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->land(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigMapExpand.MapExpandCPP)
}

::google::protobuf::uint8* MapExpandCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigMapExpand.MapExpandCPP)
  // required uint32 unLockLevel = 1;
  if (has_unlocklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unlocklevel(), target);
  }

  // repeated .ConfigMapExpand.UnLockLandCPP land = 2;
  for (int i = 0; i < this->land_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->land(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigMapExpand.MapExpandCPP)
  return target;
}

int MapExpandCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unLockLevel = 1;
    if (has_unlocklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlocklevel());
    }

  }
  // repeated .ConfigMapExpand.UnLockLandCPP land = 2;
  total_size += 1 * this->land_size();
  for (int i = 0; i < this->land_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->land(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapExpandCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapExpandCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapExpandCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapExpandCPP::MergeFrom(const MapExpandCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  land_.MergeFrom(from.land_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unlocklevel()) {
      set_unlocklevel(from.unlocklevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapExpandCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapExpandCPP::CopyFrom(const MapExpandCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapExpandCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->land())) return false;
  return true;
}

void MapExpandCPP::Swap(MapExpandCPP* other) {
  if (other != this) {
    std::swap(unlocklevel_, other->unlocklevel_);
    land_.Swap(&other->land_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapExpandCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapExpandCPP_descriptor_;
  metadata.reflection = MapExpandCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockLandCostCPP::kTypeFieldNumber;
const int UnlockLandCostCPP::kCostFieldNumber;
#endif  // !_MSC_VER

UnlockLandCostCPP::UnlockLandCostCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigMapExpand.UnlockLandCostCPP)
}

void UnlockLandCostCPP::InitAsDefaultInstance() {
  cost_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

UnlockLandCostCPP::UnlockLandCostCPP(const UnlockLandCostCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigMapExpand.UnlockLandCostCPP)
}

void UnlockLandCostCPP::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  cost_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockLandCostCPP::~UnlockLandCostCPP() {
  // @@protoc_insertion_point(destructor:ConfigMapExpand.UnlockLandCostCPP)
  SharedDtor();
}

void UnlockLandCostCPP::SharedDtor() {
  if (this != default_instance_) {
    delete cost_;
  }
}

void UnlockLandCostCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockLandCostCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockLandCostCPP_descriptor_;
}

const UnlockLandCostCPP& UnlockLandCostCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigMapExpand_2eproto();
  return *default_instance_;
}

UnlockLandCostCPP* UnlockLandCostCPP::default_instance_ = NULL;

UnlockLandCostCPP* UnlockLandCostCPP::New() const {
  return new UnlockLandCostCPP;
}

void UnlockLandCostCPP::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0u;
    if (has_cost()) {
      if (cost_ != NULL) cost_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockLandCostCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigMapExpand.UnlockLandCostCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cost;
        break;
      }

      // required .CommonGiftConfig.CommonModifyItem cost = 2;
      case 2: {
        if (tag == 18) {
         parse_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigMapExpand.UnlockLandCostCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigMapExpand.UnlockLandCostCPP)
  return false;
#undef DO_
}

void UnlockLandCostCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigMapExpand.UnlockLandCostCPP)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required .CommonGiftConfig.CommonModifyItem cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigMapExpand.UnlockLandCostCPP)
}

::google::protobuf::uint8* UnlockLandCostCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigMapExpand.UnlockLandCostCPP)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required .CommonGiftConfig.CommonModifyItem cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigMapExpand.UnlockLandCostCPP)
  return target;
}

int UnlockLandCostCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .CommonGiftConfig.CommonModifyItem cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockLandCostCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockLandCostCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockLandCostCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockLandCostCPP::MergeFrom(const UnlockLandCostCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cost()) {
      mutable_cost()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockLandCostCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockLandCostCPP::CopyFrom(const UnlockLandCostCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockLandCostCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cost()) {
    if (!this->cost().IsInitialized()) return false;
  }
  return true;
}

void UnlockLandCostCPP::Swap(UnlockLandCostCPP* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockLandCostCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockLandCostCPP_descriptor_;
  metadata.reflection = UnlockLandCostCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapExpandInfo::kLandInfoFieldNumber;
const int MapExpandInfo::kUnLockCostFieldNumber;
#endif  // !_MSC_VER

MapExpandInfo::MapExpandInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigMapExpand.MapExpandInfo)
}

void MapExpandInfo::InitAsDefaultInstance() {
  landinfo_ = const_cast< ::ConfigMapExpand::MapExpandCPP*>(&::ConfigMapExpand::MapExpandCPP::default_instance());
}

MapExpandInfo::MapExpandInfo(const MapExpandInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigMapExpand.MapExpandInfo)
}

void MapExpandInfo::SharedCtor() {
  _cached_size_ = 0;
  landinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapExpandInfo::~MapExpandInfo() {
  // @@protoc_insertion_point(destructor:ConfigMapExpand.MapExpandInfo)
  SharedDtor();
}

void MapExpandInfo::SharedDtor() {
  if (this != default_instance_) {
    delete landinfo_;
  }
}

void MapExpandInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapExpandInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapExpandInfo_descriptor_;
}

const MapExpandInfo& MapExpandInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigMapExpand_2eproto();
  return *default_instance_;
}

MapExpandInfo* MapExpandInfo::default_instance_ = NULL;

MapExpandInfo* MapExpandInfo::New() const {
  return new MapExpandInfo;
}

void MapExpandInfo::Clear() {
  if (has_landinfo()) {
    if (landinfo_ != NULL) landinfo_->::ConfigMapExpand::MapExpandCPP::Clear();
  }
  unlockcost_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapExpandInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigMapExpand.MapExpandInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConfigMapExpand.MapExpandCPP landInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_landinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_unLockCost;
        break;
      }

      // repeated .ConfigMapExpand.UnlockLandCostCPP unLockCost = 2;
      case 2: {
        if (tag == 18) {
         parse_unLockCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unlockcost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_unLockCost;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigMapExpand.MapExpandInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigMapExpand.MapExpandInfo)
  return false;
#undef DO_
}

void MapExpandInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigMapExpand.MapExpandInfo)
  // required .ConfigMapExpand.MapExpandCPP landInfo = 1;
  if (has_landinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->landinfo(), output);
  }

  // repeated .ConfigMapExpand.UnlockLandCostCPP unLockCost = 2;
  for (int i = 0; i < this->unlockcost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unlockcost(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigMapExpand.MapExpandInfo)
}

::google::protobuf::uint8* MapExpandInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigMapExpand.MapExpandInfo)
  // required .ConfigMapExpand.MapExpandCPP landInfo = 1;
  if (has_landinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->landinfo(), target);
  }

  // repeated .ConfigMapExpand.UnlockLandCostCPP unLockCost = 2;
  for (int i = 0; i < this->unlockcost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unlockcost(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigMapExpand.MapExpandInfo)
  return target;
}

int MapExpandInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConfigMapExpand.MapExpandCPP landInfo = 1;
    if (has_landinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->landinfo());
    }

  }
  // repeated .ConfigMapExpand.UnlockLandCostCPP unLockCost = 2;
  total_size += 1 * this->unlockcost_size();
  for (int i = 0; i < this->unlockcost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unlockcost(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapExpandInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapExpandInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapExpandInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapExpandInfo::MergeFrom(const MapExpandInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlockcost_.MergeFrom(from.unlockcost_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_landinfo()) {
      mutable_landinfo()->::ConfigMapExpand::MapExpandCPP::MergeFrom(from.landinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapExpandInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapExpandInfo::CopyFrom(const MapExpandInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapExpandInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_landinfo()) {
    if (!this->landinfo().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->unlockcost())) return false;
  return true;
}

void MapExpandInfo::Swap(MapExpandInfo* other) {
  if (other != this) {
    std::swap(landinfo_, other->landinfo_);
    unlockcost_.Swap(&other->unlockcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapExpandInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapExpandInfo_descriptor_;
  metadata.reflection = MapExpandInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigMapExpand

// @@protoc_insertion_point(global_scope)
