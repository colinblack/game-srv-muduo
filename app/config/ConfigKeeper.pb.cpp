// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigKeeper.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigKeeper.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigKeeper {

namespace {

const ::google::protobuf::Descriptor* KeeperUpgradeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperUpgradeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeeperTaskTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperTaskTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeeperTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeeperInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeeperCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperCfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigKeeper_2eproto() {
  protobuf_AddDesc_ConfigKeeper_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigKeeper.proto");
  GOOGLE_CHECK(file != NULL);
  KeeperUpgradeItem_descriptor_ = file->message_type(0);
  static const int KeeperUpgradeItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperUpgradeItem, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperUpgradeItem, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperUpgradeItem, cap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperUpgradeItem, item_),
  };
  KeeperUpgradeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperUpgradeItem_descriptor_,
      KeeperUpgradeItem::default_instance_,
      KeeperUpgradeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperUpgradeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperUpgradeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperUpgradeItem));
  KeeperTaskTarget_descriptor_ = file->message_type(1);
  static const int KeeperTaskTarget_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTaskTarget, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTaskTarget, tid_),
  };
  KeeperTaskTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperTaskTarget_descriptor_,
      KeeperTaskTarget::default_instance_,
      KeeperTaskTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTaskTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTaskTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperTaskTarget));
  KeeperTask_descriptor_ = file->message_type(2);
  static const int KeeperTask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTask, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTask, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTask, target_),
  };
  KeeperTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperTask_descriptor_,
      KeeperTask::default_instance_,
      KeeperTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperTask));
  KeeperInfo_descriptor_ = file->message_type(3);
  static const int KeeperInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfo, item_),
  };
  KeeperInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperInfo_descriptor_,
      KeeperInfo::default_instance_,
      KeeperInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperInfo));
  KeeperCfg_descriptor_ = file->message_type(4);
  static const int KeeperCfg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperCfg, upgrade_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperCfg, ad_reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperCfg, upgrade_cost_reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperCfg, upgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperCfg, keeper_),
  };
  KeeperCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperCfg_descriptor_,
      KeeperCfg::default_instance_,
      KeeperCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperCfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigKeeper_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperUpgradeItem_descriptor_, &KeeperUpgradeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperTaskTarget_descriptor_, &KeeperTaskTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperTask_descriptor_, &KeeperTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperInfo_descriptor_, &KeeperInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperCfg_descriptor_, &KeeperCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigKeeper_2eproto() {
  delete KeeperUpgradeItem::default_instance_;
  delete KeeperUpgradeItem_reflection_;
  delete KeeperTaskTarget::default_instance_;
  delete KeeperTaskTarget_reflection_;
  delete KeeperTask::default_instance_;
  delete KeeperTask_reflection_;
  delete KeeperInfo::default_instance_;
  delete KeeperInfo_reflection_;
  delete KeeperCfg::default_instance_;
  delete KeeperCfg_reflection_;
}

void protobuf_AddDesc_ConfigKeeper_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ConfigKeeper.proto\022\014ConfigKeeper\032\026Comm"
    "onGiftConfig.proto\"l\n\021KeeperUpgradeItem\022"
    "\013\n\003exp\030\001 \002(\r\022\013\n\003max\030\002 \002(\r\022\013\n\003cap\030\003 \002(\r\0220"
    "\n\004item\030\004 \002(\0132\".CommonGiftConfig.CommonMo"
    "difyItem\"+\n\020KeeperTaskTarget\022\n\n\002id\030\001 \002(\r"
    "\022\013\n\003tid\030\002 \002(\r\"W\n\nKeeperTask\022\014\n\004type\030\001 \002("
    "\r\022\013\n\003bid\030\002 \002(\r\022.\n\006target\030\003 \003(\0132\036.ConfigK"
    "eeper.KeeperTaskTarget\"@\n\nKeeperInfo\022\n\n\002"
    "id\030\001 \002(\r\022&\n\004item\030\002 \003(\0132\030.ConfigKeeper.Ke"
    "eperTask\"\267\001\n\tKeeperCfg\022\024\n\014upgrade_cost\030\001"
    " \002(\005\022\026\n\016ad_reward_time\030\002 \002(\r\022 \n\030upgrade_"
    "cost_reward_time\030\003 \002(\r\0220\n\007upgrade\030\004 \003(\0132"
    "\037.ConfigKeeper.KeeperUpgradeItem\022(\n\006keep"
    "er\030\005 \003(\0132\030.ConfigKeeper.KeeperInfo", 554);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigKeeper.proto", &protobuf_RegisterTypes);
  KeeperUpgradeItem::default_instance_ = new KeeperUpgradeItem();
  KeeperTaskTarget::default_instance_ = new KeeperTaskTarget();
  KeeperTask::default_instance_ = new KeeperTask();
  KeeperInfo::default_instance_ = new KeeperInfo();
  KeeperCfg::default_instance_ = new KeeperCfg();
  KeeperUpgradeItem::default_instance_->InitAsDefaultInstance();
  KeeperTaskTarget::default_instance_->InitAsDefaultInstance();
  KeeperTask::default_instance_->InitAsDefaultInstance();
  KeeperInfo::default_instance_->InitAsDefaultInstance();
  KeeperCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigKeeper_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigKeeper_2eproto {
  StaticDescriptorInitializer_ConfigKeeper_2eproto() {
    protobuf_AddDesc_ConfigKeeper_2eproto();
  }
} static_descriptor_initializer_ConfigKeeper_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int KeeperUpgradeItem::kExpFieldNumber;
const int KeeperUpgradeItem::kMaxFieldNumber;
const int KeeperUpgradeItem::kCapFieldNumber;
const int KeeperUpgradeItem::kItemFieldNumber;
#endif  // !_MSC_VER

KeeperUpgradeItem::KeeperUpgradeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigKeeper.KeeperUpgradeItem)
}

void KeeperUpgradeItem::InitAsDefaultInstance() {
  item_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

KeeperUpgradeItem::KeeperUpgradeItem(const KeeperUpgradeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigKeeper.KeeperUpgradeItem)
}

void KeeperUpgradeItem::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0u;
  max_ = 0u;
  cap_ = 0u;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperUpgradeItem::~KeeperUpgradeItem() {
  // @@protoc_insertion_point(destructor:ConfigKeeper.KeeperUpgradeItem)
  SharedDtor();
}

void KeeperUpgradeItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void KeeperUpgradeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperUpgradeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperUpgradeItem_descriptor_;
}

const KeeperUpgradeItem& KeeperUpgradeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigKeeper_2eproto();
  return *default_instance_;
}

KeeperUpgradeItem* KeeperUpgradeItem::default_instance_ = NULL;

KeeperUpgradeItem* KeeperUpgradeItem::New() const {
  return new KeeperUpgradeItem;
}

void KeeperUpgradeItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KeeperUpgradeItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(exp_, max_);
    cap_ = 0u;
    if (has_item()) {
      if (item_ != NULL) item_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperUpgradeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigKeeper.KeeperUpgradeItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 exp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max;
        break;
      }

      // required uint32 max = 2;
      case 2: {
        if (tag == 16) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cap;
        break;
      }

      // required uint32 cap = 3;
      case 3: {
        if (tag == 24) {
         parse_cap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cap_)));
          set_has_cap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // required .CommonGiftConfig.CommonModifyItem item = 4;
      case 4: {
        if (tag == 34) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigKeeper.KeeperUpgradeItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigKeeper.KeeperUpgradeItem)
  return false;
#undef DO_
}

void KeeperUpgradeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigKeeper.KeeperUpgradeItem)
  // required uint32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exp(), output);
  }

  // required uint32 max = 2;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max(), output);
  }

  // required uint32 cap = 3;
  if (has_cap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cap(), output);
  }

  // required .CommonGiftConfig.CommonModifyItem item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigKeeper.KeeperUpgradeItem)
}

::google::protobuf::uint8* KeeperUpgradeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigKeeper.KeeperUpgradeItem)
  // required uint32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exp(), target);
  }

  // required uint32 max = 2;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max(), target);
  }

  // required uint32 cap = 3;
  if (has_cap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cap(), target);
  }

  // required .CommonGiftConfig.CommonModifyItem item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigKeeper.KeeperUpgradeItem)
  return target;
}

int KeeperUpgradeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 max = 2;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max());
    }

    // required uint32 cap = 3;
    if (has_cap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cap());
    }

    // required .CommonGiftConfig.CommonModifyItem item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperUpgradeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperUpgradeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperUpgradeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperUpgradeItem::MergeFrom(const KeeperUpgradeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_cap()) {
      set_cap(from.cap());
    }
    if (from.has_item()) {
      mutable_item()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperUpgradeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperUpgradeItem::CopyFrom(const KeeperUpgradeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperUpgradeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void KeeperUpgradeItem::Swap(KeeperUpgradeItem* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(max_, other->max_);
    std::swap(cap_, other->cap_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperUpgradeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperUpgradeItem_descriptor_;
  metadata.reflection = KeeperUpgradeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeeperTaskTarget::kIdFieldNumber;
const int KeeperTaskTarget::kTidFieldNumber;
#endif  // !_MSC_VER

KeeperTaskTarget::KeeperTaskTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigKeeper.KeeperTaskTarget)
}

void KeeperTaskTarget::InitAsDefaultInstance() {
}

KeeperTaskTarget::KeeperTaskTarget(const KeeperTaskTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigKeeper.KeeperTaskTarget)
}

void KeeperTaskTarget::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperTaskTarget::~KeeperTaskTarget() {
  // @@protoc_insertion_point(destructor:ConfigKeeper.KeeperTaskTarget)
  SharedDtor();
}

void KeeperTaskTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeeperTaskTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperTaskTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperTaskTarget_descriptor_;
}

const KeeperTaskTarget& KeeperTaskTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigKeeper_2eproto();
  return *default_instance_;
}

KeeperTaskTarget* KeeperTaskTarget::default_instance_ = NULL;

KeeperTaskTarget* KeeperTaskTarget::New() const {
  return new KeeperTaskTarget;
}

void KeeperTaskTarget::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KeeperTaskTarget*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, tid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperTaskTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigKeeper.KeeperTaskTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tid;
        break;
      }

      // required uint32 tid = 2;
      case 2: {
        if (tag == 16) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigKeeper.KeeperTaskTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigKeeper.KeeperTaskTarget)
  return false;
#undef DO_
}

void KeeperTaskTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigKeeper.KeeperTaskTarget)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigKeeper.KeeperTaskTarget)
}

::google::protobuf::uint8* KeeperTaskTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigKeeper.KeeperTaskTarget)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigKeeper.KeeperTaskTarget)
  return target;
}

int KeeperTaskTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperTaskTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperTaskTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperTaskTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperTaskTarget::MergeFrom(const KeeperTaskTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperTaskTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperTaskTarget::CopyFrom(const KeeperTaskTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperTaskTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KeeperTaskTarget::Swap(KeeperTaskTarget* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tid_, other->tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperTaskTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperTaskTarget_descriptor_;
  metadata.reflection = KeeperTaskTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeeperTask::kTypeFieldNumber;
const int KeeperTask::kBidFieldNumber;
const int KeeperTask::kTargetFieldNumber;
#endif  // !_MSC_VER

KeeperTask::KeeperTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigKeeper.KeeperTask)
}

void KeeperTask::InitAsDefaultInstance() {
}

KeeperTask::KeeperTask(const KeeperTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigKeeper.KeeperTask)
}

void KeeperTask::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  bid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperTask::~KeeperTask() {
  // @@protoc_insertion_point(destructor:ConfigKeeper.KeeperTask)
  SharedDtor();
}

void KeeperTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeeperTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperTask_descriptor_;
}

const KeeperTask& KeeperTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigKeeper_2eproto();
  return *default_instance_;
}

KeeperTask* KeeperTask::default_instance_ = NULL;

KeeperTask* KeeperTask::New() const {
  return new KeeperTask;
}

void KeeperTask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KeeperTask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, bid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  target_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigKeeper.KeeperTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bid;
        break;
      }

      // required uint32 bid = 2;
      case 2: {
        if (tag == 16) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // repeated .ConfigKeeper.KeeperTaskTarget target = 3;
      case 3: {
        if (tag == 26) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigKeeper.KeeperTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigKeeper.KeeperTask)
  return false;
#undef DO_
}

void KeeperTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigKeeper.KeeperTask)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bid(), output);
  }

  // repeated .ConfigKeeper.KeeperTaskTarget target = 3;
  for (int i = 0; i < this->target_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigKeeper.KeeperTask)
}

::google::protobuf::uint8* KeeperTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigKeeper.KeeperTask)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 bid = 2;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bid(), target);
  }

  // repeated .ConfigKeeper.KeeperTaskTarget target = 3;
  for (int i = 0; i < this->target_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigKeeper.KeeperTask)
  return target;
}

int KeeperTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bid());
    }

  }
  // repeated .ConfigKeeper.KeeperTaskTarget target = 3;
  total_size += 1 * this->target_size();
  for (int i = 0; i < this->target_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperTask::MergeFrom(const KeeperTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_.MergeFrom(from.target_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperTask::CopyFrom(const KeeperTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->target())) return false;
  return true;
}

void KeeperTask::Swap(KeeperTask* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(bid_, other->bid_);
    target_.Swap(&other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperTask_descriptor_;
  metadata.reflection = KeeperTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeeperInfo::kIdFieldNumber;
const int KeeperInfo::kItemFieldNumber;
#endif  // !_MSC_VER

KeeperInfo::KeeperInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigKeeper.KeeperInfo)
}

void KeeperInfo::InitAsDefaultInstance() {
}

KeeperInfo::KeeperInfo(const KeeperInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigKeeper.KeeperInfo)
}

void KeeperInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperInfo::~KeeperInfo() {
  // @@protoc_insertion_point(destructor:ConfigKeeper.KeeperInfo)
  SharedDtor();
}

void KeeperInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeeperInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperInfo_descriptor_;
}

const KeeperInfo& KeeperInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigKeeper_2eproto();
  return *default_instance_;
}

KeeperInfo* KeeperInfo::default_instance_ = NULL;

KeeperInfo* KeeperInfo::New() const {
  return new KeeperInfo;
}

void KeeperInfo::Clear() {
  id_ = 0u;
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigKeeper.KeeperInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .ConfigKeeper.KeeperTask item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigKeeper.KeeperInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigKeeper.KeeperInfo)
  return false;
#undef DO_
}

void KeeperInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigKeeper.KeeperInfo)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .ConfigKeeper.KeeperTask item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigKeeper.KeeperInfo)
}

::google::protobuf::uint8* KeeperInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigKeeper.KeeperInfo)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .ConfigKeeper.KeeperTask item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigKeeper.KeeperInfo)
  return target;
}

int KeeperInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .ConfigKeeper.KeeperTask item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperInfo::MergeFrom(const KeeperInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperInfo::CopyFrom(const KeeperInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void KeeperInfo::Swap(KeeperInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperInfo_descriptor_;
  metadata.reflection = KeeperInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeeperCfg::kUpgradeCostFieldNumber;
const int KeeperCfg::kAdRewardTimeFieldNumber;
const int KeeperCfg::kUpgradeCostRewardTimeFieldNumber;
const int KeeperCfg::kUpgradeFieldNumber;
const int KeeperCfg::kKeeperFieldNumber;
#endif  // !_MSC_VER

KeeperCfg::KeeperCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigKeeper.KeeperCfg)
}

void KeeperCfg::InitAsDefaultInstance() {
}

KeeperCfg::KeeperCfg(const KeeperCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigKeeper.KeeperCfg)
}

void KeeperCfg::SharedCtor() {
  _cached_size_ = 0;
  upgrade_cost_ = 0;
  ad_reward_time_ = 0u;
  upgrade_cost_reward_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperCfg::~KeeperCfg() {
  // @@protoc_insertion_point(destructor:ConfigKeeper.KeeperCfg)
  SharedDtor();
}

void KeeperCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeeperCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperCfg_descriptor_;
}

const KeeperCfg& KeeperCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigKeeper_2eproto();
  return *default_instance_;
}

KeeperCfg* KeeperCfg::default_instance_ = NULL;

KeeperCfg* KeeperCfg::New() const {
  return new KeeperCfg;
}

void KeeperCfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KeeperCfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(upgrade_cost_, ad_reward_time_);
    upgrade_cost_reward_time_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  upgrade_.Clear();
  keeper_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigKeeper.KeeperCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 upgrade_cost = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_cost_)));
          set_has_upgrade_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ad_reward_time;
        break;
      }

      // required uint32 ad_reward_time = 2;
      case 2: {
        if (tag == 16) {
         parse_ad_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_reward_time_)));
          set_has_ad_reward_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_upgrade_cost_reward_time;
        break;
      }

      // required uint32 upgrade_cost_reward_time = 3;
      case 3: {
        if (tag == 24) {
         parse_upgrade_cost_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgrade_cost_reward_time_)));
          set_has_upgrade_cost_reward_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_upgrade;
        break;
      }

      // repeated .ConfigKeeper.KeeperUpgradeItem upgrade = 4;
      case 4: {
        if (tag == 34) {
         parse_upgrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upgrade()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_upgrade;
        if (input->ExpectTag(42)) goto parse_keeper;
        break;
      }

      // repeated .ConfigKeeper.KeeperInfo keeper = 5;
      case 5: {
        if (tag == 42) {
         parse_keeper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keeper()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_keeper;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigKeeper.KeeperCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigKeeper.KeeperCfg)
  return false;
#undef DO_
}

void KeeperCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigKeeper.KeeperCfg)
  // required int32 upgrade_cost = 1;
  if (has_upgrade_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->upgrade_cost(), output);
  }

  // required uint32 ad_reward_time = 2;
  if (has_ad_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ad_reward_time(), output);
  }

  // required uint32 upgrade_cost_reward_time = 3;
  if (has_upgrade_cost_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->upgrade_cost_reward_time(), output);
  }

  // repeated .ConfigKeeper.KeeperUpgradeItem upgrade = 4;
  for (int i = 0; i < this->upgrade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->upgrade(i), output);
  }

  // repeated .ConfigKeeper.KeeperInfo keeper = 5;
  for (int i = 0; i < this->keeper_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->keeper(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigKeeper.KeeperCfg)
}

::google::protobuf::uint8* KeeperCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigKeeper.KeeperCfg)
  // required int32 upgrade_cost = 1;
  if (has_upgrade_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->upgrade_cost(), target);
  }

  // required uint32 ad_reward_time = 2;
  if (has_ad_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ad_reward_time(), target);
  }

  // required uint32 upgrade_cost_reward_time = 3;
  if (has_upgrade_cost_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->upgrade_cost_reward_time(), target);
  }

  // repeated .ConfigKeeper.KeeperUpgradeItem upgrade = 4;
  for (int i = 0; i < this->upgrade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->upgrade(i), target);
  }

  // repeated .ConfigKeeper.KeeperInfo keeper = 5;
  for (int i = 0; i < this->keeper_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->keeper(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigKeeper.KeeperCfg)
  return target;
}

int KeeperCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 upgrade_cost = 1;
    if (has_upgrade_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_cost());
    }

    // required uint32 ad_reward_time = 2;
    if (has_ad_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_reward_time());
    }

    // required uint32 upgrade_cost_reward_time = 3;
    if (has_upgrade_cost_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgrade_cost_reward_time());
    }

  }
  // repeated .ConfigKeeper.KeeperUpgradeItem upgrade = 4;
  total_size += 1 * this->upgrade_size();
  for (int i = 0; i < this->upgrade_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upgrade(i));
  }

  // repeated .ConfigKeeper.KeeperInfo keeper = 5;
  total_size += 1 * this->keeper_size();
  for (int i = 0; i < this->keeper_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keeper(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperCfg::MergeFrom(const KeeperCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  upgrade_.MergeFrom(from.upgrade_);
  keeper_.MergeFrom(from.keeper_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upgrade_cost()) {
      set_upgrade_cost(from.upgrade_cost());
    }
    if (from.has_ad_reward_time()) {
      set_ad_reward_time(from.ad_reward_time());
    }
    if (from.has_upgrade_cost_reward_time()) {
      set_upgrade_cost_reward_time(from.upgrade_cost_reward_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperCfg::CopyFrom(const KeeperCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->upgrade())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->keeper())) return false;
  return true;
}

void KeeperCfg::Swap(KeeperCfg* other) {
  if (other != this) {
    std::swap(upgrade_cost_, other->upgrade_cost_);
    std::swap(ad_reward_time_, other->ad_reward_time_);
    std::swap(upgrade_cost_reward_time_, other->upgrade_cost_reward_time_);
    upgrade_.Swap(&other->upgrade_);
    keeper_.Swap(&other->keeper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperCfg_descriptor_;
  metadata.reflection = KeeperCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigKeeper

// @@protoc_insertion_point(global_scope)
