// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CdKey.proto

#ifndef PROTOBUF_CdKey_2eproto__INCLUDED
#define PROTOBUF_CdKey_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonGiftConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace CdKey {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CdKey_2eproto();
void protobuf_AssignDesc_CdKey_2eproto();
void protobuf_ShutdownFile_CdKey_2eproto();

class RewardInfo;
class CdKeyCfg;

// ===================================================================

class RewardInfo : public ::google::protobuf::Message {
 public:
  RewardInfo();
  virtual ~RewardInfo();

  RewardInfo(const RewardInfo& from);

  inline RewardInfo& operator=(const RewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardInfo& default_instance();

  void Swap(RewardInfo* other);

  // implements Message ----------------------------------------------

  RewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardInfo& from);
  void MergeFrom(const RewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated .CommonGiftConfig.CommonModifyItem prize = 2;
  inline int prize_size() const;
  inline void clear_prize();
  static const int kPrizeFieldNumber = 2;
  inline const ::CommonGiftConfig::CommonModifyItem& prize(int index) const;
  inline ::CommonGiftConfig::CommonModifyItem* mutable_prize(int index);
  inline ::CommonGiftConfig::CommonModifyItem* add_prize();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem >&
      prize() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem >*
      mutable_prize();

  // @@protoc_insertion_point(class_scope:CdKey.RewardInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem > prize_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_CdKey_2eproto();
  friend void protobuf_AssignDesc_CdKey_2eproto();
  friend void protobuf_ShutdownFile_CdKey_2eproto();

  void InitAsDefaultInstance();
  static RewardInfo* default_instance_;
};
// -------------------------------------------------------------------

class CdKeyCfg : public ::google::protobuf::Message {
 public:
  CdKeyCfg();
  virtual ~CdKeyCfg();

  CdKeyCfg(const CdKeyCfg& from);

  inline CdKeyCfg& operator=(const CdKeyCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CdKeyCfg& default_instance();

  void Swap(CdKeyCfg* other);

  // implements Message ----------------------------------------------

  CdKeyCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CdKeyCfg& from);
  void MergeFrom(const CdKeyCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CdKey.RewardInfo rewards = 1;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 1;
  inline const ::CdKey::RewardInfo& rewards(int index) const;
  inline ::CdKey::RewardInfo* mutable_rewards(int index);
  inline ::CdKey::RewardInfo* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::CdKey::RewardInfo >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::CdKey::RewardInfo >*
      mutable_rewards();

  // @@protoc_insertion_point(class_scope:CdKey.CdKeyCfg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CdKey::RewardInfo > rewards_;
  friend void  protobuf_AddDesc_CdKey_2eproto();
  friend void protobuf_AssignDesc_CdKey_2eproto();
  friend void protobuf_ShutdownFile_CdKey_2eproto();

  void InitAsDefaultInstance();
  static CdKeyCfg* default_instance_;
};
// ===================================================================


// ===================================================================

// RewardInfo

// required uint32 type = 1;
inline bool RewardInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 RewardInfo::type() const {
  // @@protoc_insertion_point(field_get:CdKey.RewardInfo.type)
  return type_;
}
inline void RewardInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CdKey.RewardInfo.type)
}

// repeated .CommonGiftConfig.CommonModifyItem prize = 2;
inline int RewardInfo::prize_size() const {
  return prize_.size();
}
inline void RewardInfo::clear_prize() {
  prize_.Clear();
}
inline const ::CommonGiftConfig::CommonModifyItem& RewardInfo::prize(int index) const {
  // @@protoc_insertion_point(field_get:CdKey.RewardInfo.prize)
  return prize_.Get(index);
}
inline ::CommonGiftConfig::CommonModifyItem* RewardInfo::mutable_prize(int index) {
  // @@protoc_insertion_point(field_mutable:CdKey.RewardInfo.prize)
  return prize_.Mutable(index);
}
inline ::CommonGiftConfig::CommonModifyItem* RewardInfo::add_prize() {
  // @@protoc_insertion_point(field_add:CdKey.RewardInfo.prize)
  return prize_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem >&
RewardInfo::prize() const {
  // @@protoc_insertion_point(field_list:CdKey.RewardInfo.prize)
  return prize_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem >*
RewardInfo::mutable_prize() {
  // @@protoc_insertion_point(field_mutable_list:CdKey.RewardInfo.prize)
  return &prize_;
}

// -------------------------------------------------------------------

// CdKeyCfg

// repeated .CdKey.RewardInfo rewards = 1;
inline int CdKeyCfg::rewards_size() const {
  return rewards_.size();
}
inline void CdKeyCfg::clear_rewards() {
  rewards_.Clear();
}
inline const ::CdKey::RewardInfo& CdKeyCfg::rewards(int index) const {
  // @@protoc_insertion_point(field_get:CdKey.CdKeyCfg.rewards)
  return rewards_.Get(index);
}
inline ::CdKey::RewardInfo* CdKeyCfg::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:CdKey.CdKeyCfg.rewards)
  return rewards_.Mutable(index);
}
inline ::CdKey::RewardInfo* CdKeyCfg::add_rewards() {
  // @@protoc_insertion_point(field_add:CdKey.CdKeyCfg.rewards)
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CdKey::RewardInfo >&
CdKeyCfg::rewards() const {
  // @@protoc_insertion_point(field_list:CdKey.CdKeyCfg.rewards)
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::CdKey::RewardInfo >*
CdKeyCfg::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:CdKey.CdKeyCfg.rewards)
  return &rewards_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CdKey

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CdKey_2eproto__INCLUDED
