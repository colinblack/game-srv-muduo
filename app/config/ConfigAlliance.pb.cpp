// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigAlliance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigAlliance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigAlliance {

namespace {

const ::google::protobuf::Descriptor* TypeStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TypeStorage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Donation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Donation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Alliance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Alliance_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigAlliance_2eproto() {
  protobuf_AddDesc_ConfigAlliance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigAlliance.proto");
  GOOGLE_CHECK(file != NULL);
  TypeStorage_descriptor_ = file->message_type(0);
  static const int TypeStorage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeStorage, limitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeStorage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeStorage, products_),
  };
  TypeStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TypeStorage_descriptor_,
      TypeStorage::default_instance_,
      TypeStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TypeStorage));
  Donation_descriptor_ = file->message_type(1);
  static const int Donation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Donation, cdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Donation, cdprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Donation, type_storge_),
  };
  Donation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Donation_descriptor_,
      Donation::default_instance_,
      Donation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Donation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Donation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Donation));
  Alliance_descriptor_ = file->message_type(2);
  static const int Alliance_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alliance, create_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alliance, create_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alliance, member_num_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alliance, director_num_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alliance, committee_num_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alliance, donation_),
  };
  Alliance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Alliance_descriptor_,
      Alliance::default_instance_,
      Alliance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alliance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alliance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Alliance));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigAlliance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TypeStorage_descriptor_, &TypeStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Donation_descriptor_, &Donation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Alliance_descriptor_, &Alliance::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigAlliance_2eproto() {
  delete TypeStorage::default_instance_;
  delete TypeStorage_reflection_;
  delete Donation::default_instance_;
  delete Donation_reflection_;
  delete Alliance::default_instance_;
  delete Alliance_reflection_;
}

void protobuf_AddDesc_ConfigAlliance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ConfigAlliance.proto\022\016ConfigAlliance\032\026"
    "CommonGiftConfig.proto\"\?\n\013TypeStorage\022\020\n"
    "\010limitnum\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\020\n\010product"
    "s\030\003 \003(\r\"]\n\010Donation\022\016\n\006cdtime\030\001 \002(\r\022\017\n\007c"
    "dprice\030\002 \002(\r\0220\n\013type_storge\030\003 \003(\0132\033.Conf"
    "igAlliance.TypeStorage\"\330\001\n\010Alliance\022\024\n\014c"
    "reate_level\030\001 \002(\r\0227\n\013create_cost\030\002 \002(\0132\""
    ".CommonGiftConfig.CommonModifyItem\022\030\n\020me"
    "mber_num_limit\030\003 \002(\r\022\032\n\022director_num_lim"
    "it\030\004 \002(\r\022\033\n\023committee_num_limit\030\005 \002(\r\022*\n"
    "\010donation\030\006 \002(\0132\030.ConfigAlliance.Donatio"
    "n", 441);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigAlliance.proto", &protobuf_RegisterTypes);
  TypeStorage::default_instance_ = new TypeStorage();
  Donation::default_instance_ = new Donation();
  Alliance::default_instance_ = new Alliance();
  TypeStorage::default_instance_->InitAsDefaultInstance();
  Donation::default_instance_->InitAsDefaultInstance();
  Alliance::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigAlliance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigAlliance_2eproto {
  StaticDescriptorInitializer_ConfigAlliance_2eproto() {
    protobuf_AddDesc_ConfigAlliance_2eproto();
  }
} static_descriptor_initializer_ConfigAlliance_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TypeStorage::kLimitnumFieldNumber;
const int TypeStorage::kTypeFieldNumber;
const int TypeStorage::kProductsFieldNumber;
#endif  // !_MSC_VER

TypeStorage::TypeStorage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAlliance.TypeStorage)
}

void TypeStorage::InitAsDefaultInstance() {
}

TypeStorage::TypeStorage(const TypeStorage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAlliance.TypeStorage)
}

void TypeStorage::SharedCtor() {
  _cached_size_ = 0;
  limitnum_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TypeStorage::~TypeStorage() {
  // @@protoc_insertion_point(destructor:ConfigAlliance.TypeStorage)
  SharedDtor();
}

void TypeStorage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TypeStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TypeStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypeStorage_descriptor_;
}

const TypeStorage& TypeStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAlliance_2eproto();
  return *default_instance_;
}

TypeStorage* TypeStorage::default_instance_ = NULL;

TypeStorage* TypeStorage::New() const {
  return new TypeStorage;
}

void TypeStorage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TypeStorage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(limitnum_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  products_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TypeStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAlliance.TypeStorage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 limitnum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limitnum_)));
          set_has_limitnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_products;
        break;
      }

      // repeated uint32 products = 3;
      case 3: {
        if (tag == 24) {
         parse_products:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_products())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_products())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_products;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAlliance.TypeStorage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAlliance.TypeStorage)
  return false;
#undef DO_
}

void TypeStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAlliance.TypeStorage)
  // required uint32 limitnum = 1;
  if (has_limitnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->limitnum(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // repeated uint32 products = 3;
  for (int i = 0; i < this->products_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->products(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAlliance.TypeStorage)
}

::google::protobuf::uint8* TypeStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAlliance.TypeStorage)
  // required uint32 limitnum = 1;
  if (has_limitnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->limitnum(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // repeated uint32 products = 3;
  for (int i = 0; i < this->products_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->products(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAlliance.TypeStorage)
  return target;
}

int TypeStorage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 limitnum = 1;
    if (has_limitnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limitnum());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated uint32 products = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->products_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->products(i));
    }
    total_size += 1 * this->products_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TypeStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TypeStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TypeStorage::MergeFrom(const TypeStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  products_.MergeFrom(from.products_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_limitnum()) {
      set_limitnum(from.limitnum());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TypeStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeStorage::CopyFrom(const TypeStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeStorage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TypeStorage::Swap(TypeStorage* other) {
  if (other != this) {
    std::swap(limitnum_, other->limitnum_);
    std::swap(type_, other->type_);
    products_.Swap(&other->products_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TypeStorage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TypeStorage_descriptor_;
  metadata.reflection = TypeStorage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Donation::kCdtimeFieldNumber;
const int Donation::kCdpriceFieldNumber;
const int Donation::kTypeStorgeFieldNumber;
#endif  // !_MSC_VER

Donation::Donation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAlliance.Donation)
}

void Donation::InitAsDefaultInstance() {
}

Donation::Donation(const Donation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAlliance.Donation)
}

void Donation::SharedCtor() {
  _cached_size_ = 0;
  cdtime_ = 0u;
  cdprice_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Donation::~Donation() {
  // @@protoc_insertion_point(destructor:ConfigAlliance.Donation)
  SharedDtor();
}

void Donation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Donation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Donation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Donation_descriptor_;
}

const Donation& Donation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAlliance_2eproto();
  return *default_instance_;
}

Donation* Donation::default_instance_ = NULL;

Donation* Donation::New() const {
  return new Donation;
}

void Donation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Donation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cdtime_, cdprice_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  type_storge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Donation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAlliance.Donation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cdtime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cdprice;
        break;
      }

      // required uint32 cdprice = 2;
      case 2: {
        if (tag == 16) {
         parse_cdprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdprice_)));
          set_has_cdprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type_storge;
        break;
      }

      // repeated .ConfigAlliance.TypeStorage type_storge = 3;
      case 3: {
        if (tag == 26) {
         parse_type_storge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_type_storge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type_storge;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAlliance.Donation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAlliance.Donation)
  return false;
#undef DO_
}

void Donation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAlliance.Donation)
  // required uint32 cdtime = 1;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cdtime(), output);
  }

  // required uint32 cdprice = 2;
  if (has_cdprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cdprice(), output);
  }

  // repeated .ConfigAlliance.TypeStorage type_storge = 3;
  for (int i = 0; i < this->type_storge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->type_storge(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAlliance.Donation)
}

::google::protobuf::uint8* Donation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAlliance.Donation)
  // required uint32 cdtime = 1;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cdtime(), target);
  }

  // required uint32 cdprice = 2;
  if (has_cdprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cdprice(), target);
  }

  // repeated .ConfigAlliance.TypeStorage type_storge = 3;
  for (int i = 0; i < this->type_storge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->type_storge(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAlliance.Donation)
  return target;
}

int Donation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cdtime = 1;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdtime());
    }

    // required uint32 cdprice = 2;
    if (has_cdprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdprice());
    }

  }
  // repeated .ConfigAlliance.TypeStorage type_storge = 3;
  total_size += 1 * this->type_storge_size();
  for (int i = 0; i < this->type_storge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->type_storge(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Donation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Donation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Donation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Donation::MergeFrom(const Donation& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_storge_.MergeFrom(from.type_storge_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
    if (from.has_cdprice()) {
      set_cdprice(from.cdprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Donation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Donation::CopyFrom(const Donation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Donation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->type_storge())) return false;
  return true;
}

void Donation::Swap(Donation* other) {
  if (other != this) {
    std::swap(cdtime_, other->cdtime_);
    std::swap(cdprice_, other->cdprice_);
    type_storge_.Swap(&other->type_storge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Donation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Donation_descriptor_;
  metadata.reflection = Donation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Alliance::kCreateLevelFieldNumber;
const int Alliance::kCreateCostFieldNumber;
const int Alliance::kMemberNumLimitFieldNumber;
const int Alliance::kDirectorNumLimitFieldNumber;
const int Alliance::kCommitteeNumLimitFieldNumber;
const int Alliance::kDonationFieldNumber;
#endif  // !_MSC_VER

Alliance::Alliance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigAlliance.Alliance)
}

void Alliance::InitAsDefaultInstance() {
  create_cost_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
  donation_ = const_cast< ::ConfigAlliance::Donation*>(&::ConfigAlliance::Donation::default_instance());
}

Alliance::Alliance(const Alliance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigAlliance.Alliance)
}

void Alliance::SharedCtor() {
  _cached_size_ = 0;
  create_level_ = 0u;
  create_cost_ = NULL;
  member_num_limit_ = 0u;
  director_num_limit_ = 0u;
  committee_num_limit_ = 0u;
  donation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Alliance::~Alliance() {
  // @@protoc_insertion_point(destructor:ConfigAlliance.Alliance)
  SharedDtor();
}

void Alliance::SharedDtor() {
  if (this != default_instance_) {
    delete create_cost_;
    delete donation_;
  }
}

void Alliance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Alliance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alliance_descriptor_;
}

const Alliance& Alliance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigAlliance_2eproto();
  return *default_instance_;
}

Alliance* Alliance::default_instance_ = NULL;

Alliance* Alliance::New() const {
  return new Alliance;
}

void Alliance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Alliance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(create_level_, committee_num_limit_);
    if (has_create_cost()) {
      if (create_cost_ != NULL) create_cost_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
    if (has_donation()) {
      if (donation_ != NULL) donation_->::ConfigAlliance::Donation::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Alliance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigAlliance.Alliance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 create_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_level_)));
          set_has_create_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_create_cost;
        break;
      }

      // required .CommonGiftConfig.CommonModifyItem create_cost = 2;
      case 2: {
        if (tag == 18) {
         parse_create_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_cost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_member_num_limit;
        break;
      }

      // required uint32 member_num_limit = 3;
      case 3: {
        if (tag == 24) {
         parse_member_num_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_num_limit_)));
          set_has_member_num_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_director_num_limit;
        break;
      }

      // required uint32 director_num_limit = 4;
      case 4: {
        if (tag == 32) {
         parse_director_num_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &director_num_limit_)));
          set_has_director_num_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_committee_num_limit;
        break;
      }

      // required uint32 committee_num_limit = 5;
      case 5: {
        if (tag == 40) {
         parse_committee_num_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &committee_num_limit_)));
          set_has_committee_num_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_donation;
        break;
      }

      // required .ConfigAlliance.Donation donation = 6;
      case 6: {
        if (tag == 50) {
         parse_donation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_donation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigAlliance.Alliance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigAlliance.Alliance)
  return false;
#undef DO_
}

void Alliance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigAlliance.Alliance)
  // required uint32 create_level = 1;
  if (has_create_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->create_level(), output);
  }

  // required .CommonGiftConfig.CommonModifyItem create_cost = 2;
  if (has_create_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->create_cost(), output);
  }

  // required uint32 member_num_limit = 3;
  if (has_member_num_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->member_num_limit(), output);
  }

  // required uint32 director_num_limit = 4;
  if (has_director_num_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->director_num_limit(), output);
  }

  // required uint32 committee_num_limit = 5;
  if (has_committee_num_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->committee_num_limit(), output);
  }

  // required .ConfigAlliance.Donation donation = 6;
  if (has_donation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->donation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigAlliance.Alliance)
}

::google::protobuf::uint8* Alliance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigAlliance.Alliance)
  // required uint32 create_level = 1;
  if (has_create_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->create_level(), target);
  }

  // required .CommonGiftConfig.CommonModifyItem create_cost = 2;
  if (has_create_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->create_cost(), target);
  }

  // required uint32 member_num_limit = 3;
  if (has_member_num_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->member_num_limit(), target);
  }

  // required uint32 director_num_limit = 4;
  if (has_director_num_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->director_num_limit(), target);
  }

  // required uint32 committee_num_limit = 5;
  if (has_committee_num_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->committee_num_limit(), target);
  }

  // required .ConfigAlliance.Donation donation = 6;
  if (has_donation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->donation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigAlliance.Alliance)
  return target;
}

int Alliance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 create_level = 1;
    if (has_create_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_level());
    }

    // required .CommonGiftConfig.CommonModifyItem create_cost = 2;
    if (has_create_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_cost());
    }

    // required uint32 member_num_limit = 3;
    if (has_member_num_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_num_limit());
    }

    // required uint32 director_num_limit = 4;
    if (has_director_num_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->director_num_limit());
    }

    // required uint32 committee_num_limit = 5;
    if (has_committee_num_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->committee_num_limit());
    }

    // required .ConfigAlliance.Donation donation = 6;
    if (has_donation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->donation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alliance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Alliance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Alliance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Alliance::MergeFrom(const Alliance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_create_level()) {
      set_create_level(from.create_level());
    }
    if (from.has_create_cost()) {
      mutable_create_cost()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.create_cost());
    }
    if (from.has_member_num_limit()) {
      set_member_num_limit(from.member_num_limit());
    }
    if (from.has_director_num_limit()) {
      set_director_num_limit(from.director_num_limit());
    }
    if (from.has_committee_num_limit()) {
      set_committee_num_limit(from.committee_num_limit());
    }
    if (from.has_donation()) {
      mutable_donation()->::ConfigAlliance::Donation::MergeFrom(from.donation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Alliance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alliance::CopyFrom(const Alliance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alliance::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_create_cost()) {
    if (!this->create_cost().IsInitialized()) return false;
  }
  if (has_donation()) {
    if (!this->donation().IsInitialized()) return false;
  }
  return true;
}

void Alliance::Swap(Alliance* other) {
  if (other != this) {
    std::swap(create_level_, other->create_level_);
    std::swap(create_cost_, other->create_cost_);
    std::swap(member_num_limit_, other->member_num_limit_);
    std::swap(director_num_limit_, other->director_num_limit_);
    std::swap(committee_num_limit_, other->committee_num_limit_);
    std::swap(donation_, other->donation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Alliance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Alliance_descriptor_;
  metadata.reflection = Alliance_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigAlliance

// @@protoc_insertion_point(global_scope)
