// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigShop.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigShop.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigShop {

namespace {

const ::google::protobuf::Descriptor* ShopCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCShopCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCShopCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigShop_2eproto() {
  protobuf_AddDesc_ConfigShop_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigShop.proto");
  GOOGLE_CHECK(file != NULL);
  ShopCPP_descriptor_ = file->message_type(0);
  static const int ShopCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, shelf_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, sell_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, item_base_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, shelf_base_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, invite_unlock_shelf_max_),
  };
  ShopCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopCPP_descriptor_,
      ShopCPP::default_instance_,
      ShopCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopCPP));
  NPCShopCPP_descriptor_ = file->message_type(1);
  static const int NPCShopCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCShopCPP, shelf_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCShopCPP, per_shelf_item_cnt_),
  };
  NPCShopCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCShopCPP_descriptor_,
      NPCShopCPP::default_instance_,
      NPCShopCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCShopCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCShopCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCShopCPP));
  ShopInfo_descriptor_ = file->message_type(2);
  static const int ShopInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, npcshop_),
  };
  ShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopInfo_descriptor_,
      ShopInfo::default_instance_,
      ShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigShop_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopCPP_descriptor_, &ShopCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCShopCPP_descriptor_, &NPCShopCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopInfo_descriptor_, &ShopInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigShop_2eproto() {
  delete ShopCPP::default_instance_;
  delete ShopCPP_reflection_;
  delete NPCShopCPP::default_instance_;
  delete NPCShopCPP_reflection_;
  delete ShopInfo::default_instance_;
  delete ShopInfo_reflection_;
}

void protobuf_AddDesc_ConfigShop_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ConfigShop.proto\022\nConfigShop\"\202\001\n\007ShopC"
    "PP\022\021\n\tshelf_cnt\030\001 \003(\r\022\020\n\010sell_cnt\030\002 \003(\r\022"
    "\027\n\017item_base_price\030\003 \002(\002\022\030\n\020shelf_base_p"
    "rice\030\004 \002(\r\022\037\n\027invite_unlock_shelf_max\030\005 "
    "\002(\r\";\n\nNPCShopCPP\022\021\n\tshelf_cnt\030\001 \002(\r\022\032\n\022"
    "per_shelf_item_cnt\030\002 \003(\r\"V\n\010ShopInfo\022!\n\004"
    "shop\030\001 \002(\0132\023.ConfigShop.ShopCPP\022\'\n\007npcsh"
    "op\030\002 \002(\0132\026.ConfigShop.NPCShopCPP", 312);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigShop.proto", &protobuf_RegisterTypes);
  ShopCPP::default_instance_ = new ShopCPP();
  NPCShopCPP::default_instance_ = new NPCShopCPP();
  ShopInfo::default_instance_ = new ShopInfo();
  ShopCPP::default_instance_->InitAsDefaultInstance();
  NPCShopCPP::default_instance_->InitAsDefaultInstance();
  ShopInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigShop_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigShop_2eproto {
  StaticDescriptorInitializer_ConfigShop_2eproto() {
    protobuf_AddDesc_ConfigShop_2eproto();
  }
} static_descriptor_initializer_ConfigShop_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ShopCPP::kShelfCntFieldNumber;
const int ShopCPP::kSellCntFieldNumber;
const int ShopCPP::kItemBasePriceFieldNumber;
const int ShopCPP::kShelfBasePriceFieldNumber;
const int ShopCPP::kInviteUnlockShelfMaxFieldNumber;
#endif  // !_MSC_VER

ShopCPP::ShopCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigShop.ShopCPP)
}

void ShopCPP::InitAsDefaultInstance() {
}

ShopCPP::ShopCPP(const ShopCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigShop.ShopCPP)
}

void ShopCPP::SharedCtor() {
  _cached_size_ = 0;
  item_base_price_ = 0;
  shelf_base_price_ = 0u;
  invite_unlock_shelf_max_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopCPP::~ShopCPP() {
  // @@protoc_insertion_point(destructor:ConfigShop.ShopCPP)
  SharedDtor();
}

void ShopCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopCPP_descriptor_;
}

const ShopCPP& ShopCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigShop_2eproto();
  return *default_instance_;
}

ShopCPP* ShopCPP::default_instance_ = NULL;

ShopCPP* ShopCPP::New() const {
  return new ShopCPP;
}

void ShopCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_base_price_, invite_unlock_shelf_max_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  shelf_cnt_.Clear();
  sell_cnt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigShop.ShopCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 shelf_cnt = 1;
      case 1: {
        if (tag == 8) {
         parse_shelf_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_shelf_cnt())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shelf_cnt())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_shelf_cnt;
        if (input->ExpectTag(16)) goto parse_sell_cnt;
        break;
      }

      // repeated uint32 sell_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_sell_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_sell_cnt())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sell_cnt())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sell_cnt;
        if (input->ExpectTag(29)) goto parse_item_base_price;
        break;
      }

      // required float item_base_price = 3;
      case 3: {
        if (tag == 29) {
         parse_item_base_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &item_base_price_)));
          set_has_item_base_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_shelf_base_price;
        break;
      }

      // required uint32 shelf_base_price = 4;
      case 4: {
        if (tag == 32) {
         parse_shelf_base_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shelf_base_price_)));
          set_has_shelf_base_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_invite_unlock_shelf_max;
        break;
      }

      // required uint32 invite_unlock_shelf_max = 5;
      case 5: {
        if (tag == 40) {
         parse_invite_unlock_shelf_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invite_unlock_shelf_max_)));
          set_has_invite_unlock_shelf_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigShop.ShopCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigShop.ShopCPP)
  return false;
#undef DO_
}

void ShopCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigShop.ShopCPP)
  // repeated uint32 shelf_cnt = 1;
  for (int i = 0; i < this->shelf_cnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->shelf_cnt(i), output);
  }

  // repeated uint32 sell_cnt = 2;
  for (int i = 0; i < this->sell_cnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->sell_cnt(i), output);
  }

  // required float item_base_price = 3;
  if (has_item_base_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->item_base_price(), output);
  }

  // required uint32 shelf_base_price = 4;
  if (has_shelf_base_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->shelf_base_price(), output);
  }

  // required uint32 invite_unlock_shelf_max = 5;
  if (has_invite_unlock_shelf_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->invite_unlock_shelf_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigShop.ShopCPP)
}

::google::protobuf::uint8* ShopCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigShop.ShopCPP)
  // repeated uint32 shelf_cnt = 1;
  for (int i = 0; i < this->shelf_cnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->shelf_cnt(i), target);
  }

  // repeated uint32 sell_cnt = 2;
  for (int i = 0; i < this->sell_cnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->sell_cnt(i), target);
  }

  // required float item_base_price = 3;
  if (has_item_base_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->item_base_price(), target);
  }

  // required uint32 shelf_base_price = 4;
  if (has_shelf_base_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->shelf_base_price(), target);
  }

  // required uint32 invite_unlock_shelf_max = 5;
  if (has_invite_unlock_shelf_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->invite_unlock_shelf_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigShop.ShopCPP)
  return target;
}

int ShopCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required float item_base_price = 3;
    if (has_item_base_price()) {
      total_size += 1 + 4;
    }

    // required uint32 shelf_base_price = 4;
    if (has_shelf_base_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shelf_base_price());
    }

    // required uint32 invite_unlock_shelf_max = 5;
    if (has_invite_unlock_shelf_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invite_unlock_shelf_max());
    }

  }
  // repeated uint32 shelf_cnt = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->shelf_cnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shelf_cnt(i));
    }
    total_size += 1 * this->shelf_cnt_size() + data_size;
  }

  // repeated uint32 sell_cnt = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->sell_cnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sell_cnt(i));
    }
    total_size += 1 * this->sell_cnt_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopCPP::MergeFrom(const ShopCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  shelf_cnt_.MergeFrom(from.shelf_cnt_);
  sell_cnt_.MergeFrom(from.sell_cnt_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_item_base_price()) {
      set_item_base_price(from.item_base_price());
    }
    if (from.has_shelf_base_price()) {
      set_shelf_base_price(from.shelf_base_price());
    }
    if (from.has_invite_unlock_shelf_max()) {
      set_invite_unlock_shelf_max(from.invite_unlock_shelf_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopCPP::CopyFrom(const ShopCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;

  return true;
}

void ShopCPP::Swap(ShopCPP* other) {
  if (other != this) {
    shelf_cnt_.Swap(&other->shelf_cnt_);
    sell_cnt_.Swap(&other->sell_cnt_);
    std::swap(item_base_price_, other->item_base_price_);
    std::swap(shelf_base_price_, other->shelf_base_price_);
    std::swap(invite_unlock_shelf_max_, other->invite_unlock_shelf_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopCPP_descriptor_;
  metadata.reflection = ShopCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCShopCPP::kShelfCntFieldNumber;
const int NPCShopCPP::kPerShelfItemCntFieldNumber;
#endif  // !_MSC_VER

NPCShopCPP::NPCShopCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigShop.NPCShopCPP)
}

void NPCShopCPP::InitAsDefaultInstance() {
}

NPCShopCPP::NPCShopCPP(const NPCShopCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigShop.NPCShopCPP)
}

void NPCShopCPP::SharedCtor() {
  _cached_size_ = 0;
  shelf_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCShopCPP::~NPCShopCPP() {
  // @@protoc_insertion_point(destructor:ConfigShop.NPCShopCPP)
  SharedDtor();
}

void NPCShopCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCShopCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCShopCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCShopCPP_descriptor_;
}

const NPCShopCPP& NPCShopCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigShop_2eproto();
  return *default_instance_;
}

NPCShopCPP* NPCShopCPP::default_instance_ = NULL;

NPCShopCPP* NPCShopCPP::New() const {
  return new NPCShopCPP;
}

void NPCShopCPP::Clear() {
  shelf_cnt_ = 0u;
  per_shelf_item_cnt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCShopCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigShop.NPCShopCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 shelf_cnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shelf_cnt_)));
          set_has_shelf_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_per_shelf_item_cnt;
        break;
      }

      // repeated uint32 per_shelf_item_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_per_shelf_item_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_per_shelf_item_cnt())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_per_shelf_item_cnt())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_per_shelf_item_cnt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigShop.NPCShopCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigShop.NPCShopCPP)
  return false;
#undef DO_
}

void NPCShopCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigShop.NPCShopCPP)
  // required uint32 shelf_cnt = 1;
  if (has_shelf_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shelf_cnt(), output);
  }

  // repeated uint32 per_shelf_item_cnt = 2;
  for (int i = 0; i < this->per_shelf_item_cnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->per_shelf_item_cnt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigShop.NPCShopCPP)
}

::google::protobuf::uint8* NPCShopCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigShop.NPCShopCPP)
  // required uint32 shelf_cnt = 1;
  if (has_shelf_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shelf_cnt(), target);
  }

  // repeated uint32 per_shelf_item_cnt = 2;
  for (int i = 0; i < this->per_shelf_item_cnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->per_shelf_item_cnt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigShop.NPCShopCPP)
  return target;
}

int NPCShopCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 shelf_cnt = 1;
    if (has_shelf_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shelf_cnt());
    }

  }
  // repeated uint32 per_shelf_item_cnt = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->per_shelf_item_cnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->per_shelf_item_cnt(i));
    }
    total_size += 1 * this->per_shelf_item_cnt_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCShopCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCShopCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCShopCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCShopCPP::MergeFrom(const NPCShopCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  per_shelf_item_cnt_.MergeFrom(from.per_shelf_item_cnt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shelf_cnt()) {
      set_shelf_cnt(from.shelf_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCShopCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCShopCPP::CopyFrom(const NPCShopCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCShopCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NPCShopCPP::Swap(NPCShopCPP* other) {
  if (other != this) {
    std::swap(shelf_cnt_, other->shelf_cnt_);
    per_shelf_item_cnt_.Swap(&other->per_shelf_item_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCShopCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCShopCPP_descriptor_;
  metadata.reflection = NPCShopCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopInfo::kShopFieldNumber;
const int ShopInfo::kNpcshopFieldNumber;
#endif  // !_MSC_VER

ShopInfo::ShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigShop.ShopInfo)
}

void ShopInfo::InitAsDefaultInstance() {
  shop_ = const_cast< ::ConfigShop::ShopCPP*>(&::ConfigShop::ShopCPP::default_instance());
  npcshop_ = const_cast< ::ConfigShop::NPCShopCPP*>(&::ConfigShop::NPCShopCPP::default_instance());
}

ShopInfo::ShopInfo(const ShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigShop.ShopInfo)
}

void ShopInfo::SharedCtor() {
  _cached_size_ = 0;
  shop_ = NULL;
  npcshop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopInfo::~ShopInfo() {
  // @@protoc_insertion_point(destructor:ConfigShop.ShopInfo)
  SharedDtor();
}

void ShopInfo::SharedDtor() {
  if (this != default_instance_) {
    delete shop_;
    delete npcshop_;
  }
}

void ShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopInfo_descriptor_;
}

const ShopInfo& ShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigShop_2eproto();
  return *default_instance_;
}

ShopInfo* ShopInfo::default_instance_ = NULL;

ShopInfo* ShopInfo::New() const {
  return new ShopInfo;
}

void ShopInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_shop()) {
      if (shop_ != NULL) shop_->::ConfigShop::ShopCPP::Clear();
    }
    if (has_npcshop()) {
      if (npcshop_ != NULL) npcshop_->::ConfigShop::NPCShopCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigShop.ShopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConfigShop.ShopCPP shop = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_npcshop;
        break;
      }

      // required .ConfigShop.NPCShopCPP npcshop = 2;
      case 2: {
        if (tag == 18) {
         parse_npcshop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npcshop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigShop.ShopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigShop.ShopInfo)
  return false;
#undef DO_
}

void ShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigShop.ShopInfo)
  // required .ConfigShop.ShopCPP shop = 1;
  if (has_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shop(), output);
  }

  // required .ConfigShop.NPCShopCPP npcshop = 2;
  if (has_npcshop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->npcshop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigShop.ShopInfo)
}

::google::protobuf::uint8* ShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigShop.ShopInfo)
  // required .ConfigShop.ShopCPP shop = 1;
  if (has_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shop(), target);
  }

  // required .ConfigShop.NPCShopCPP npcshop = 2;
  if (has_npcshop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->npcshop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigShop.ShopInfo)
  return target;
}

int ShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConfigShop.ShopCPP shop = 1;
    if (has_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop());
    }

    // required .ConfigShop.NPCShopCPP npcshop = 2;
    if (has_npcshop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npcshop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopInfo::MergeFrom(const ShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop()) {
      mutable_shop()->::ConfigShop::ShopCPP::MergeFrom(from.shop());
    }
    if (from.has_npcshop()) {
      mutable_npcshop()->::ConfigShop::NPCShopCPP::MergeFrom(from.npcshop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopInfo::CopyFrom(const ShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_shop()) {
    if (!this->shop().IsInitialized()) return false;
  }
  if (has_npcshop()) {
    if (!this->npcshop().IsInitialized()) return false;
  }
  return true;
}

void ShopInfo::Swap(ShopInfo* other) {
  if (other != this) {
    std::swap(shop_, other->shop_);
    std::swap(npcshop_, other->npcshop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopInfo_descriptor_;
  metadata.reflection = ShopInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigShop

// @@protoc_insertion_point(global_scope)
