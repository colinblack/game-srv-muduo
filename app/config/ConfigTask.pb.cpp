// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigTask.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigTask.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigTask {

namespace {

const ::google::protobuf::Descriptor* TaskCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigTask_2eproto() {
  protobuf_AddDesc_ConfigTask_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigTask.proto");
  GOOGLE_CHECK(file != NULL);
  TaskCondition_descriptor_ = file->message_type(0);
  static const int TaskCondition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCondition, value_),
  };
  TaskCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskCondition_descriptor_,
      TaskCondition::default_instance_,
      TaskCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskCondition));
  TaskCPP_descriptor_ = file->message_type(1);
  static const int TaskCPP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, pagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, reward_),
  };
  TaskCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskCPP_descriptor_,
      TaskCPP::default_instance_,
      TaskCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskCPP));
  MissionCPP_descriptor_ = file->message_type(2);
  static const int MissionCPP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, statisticaltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, reward_),
  };
  MissionCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionCPP_descriptor_,
      MissionCPP::default_instance_,
      MissionCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionCPP));
  TaskInfo_descriptor_ = file->message_type(3);
  static const int TaskInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, missions_),
  };
  TaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskInfo_descriptor_,
      TaskInfo::default_instance_,
      TaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigTask_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskCondition_descriptor_, &TaskCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskCPP_descriptor_, &TaskCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionCPP_descriptor_, &MissionCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskInfo_descriptor_, &TaskInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigTask_2eproto() {
  delete TaskCondition::default_instance_;
  delete TaskCondition_reflection_;
  delete TaskCPP::default_instance_;
  delete TaskCPP_reflection_;
  delete MissionCPP::default_instance_;
  delete MissionCPP_reflection_;
  delete TaskInfo::default_instance_;
  delete TaskInfo_reflection_;
}

void protobuf_AddDesc_ConfigTask_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ConfigTask.proto\022\nConfigTask\032\026CommonGi"
    "ftConfig.proto\"\036\n\rTaskCondition\022\r\n\005value"
    "\030\001 \003(\r\"\255\001\n\007TaskCPP\022\n\n\002id\030\001 \002(\r\022\020\n\010pagety"
    "pe\030\002 \002(\r\022\020\n\010tasktype\030\003 \002(\r\022,\n\tcondition\030"
    "\004 \003(\0132\031.ConfigTask.TaskCondition\022\020\n\010prio"
    "rity\030\005 \003(\r\0222\n\006reward\030\006 \003(\0132\".CommonGiftC"
    "onfig.CommonModifyItem\"\224\001\n\nMissionCPP\022\n\n"
    "\002id\030\001 \002(\r\022\014\n\004next\030\002 \003(\r\022\014\n\004type\030\003 \002(\r\022\027\n"
    "\017statisticalType\030\004 \002(\r\022\021\n\tcondition\030\005 \003("
    "\r\0222\n\006reward\030\006 \002(\0132\".CommonGiftConfig.Com"
    "monModifyItem\"W\n\010TaskInfo\022!\n\004task\030\001 \003(\0132"
    "\023.ConfigTask.TaskCPP\022(\n\010missions\030\002 \003(\0132\026"
    ".ConfigTask.MissionCPP", 502);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigTask.proto", &protobuf_RegisterTypes);
  TaskCondition::default_instance_ = new TaskCondition();
  TaskCPP::default_instance_ = new TaskCPP();
  MissionCPP::default_instance_ = new MissionCPP();
  TaskInfo::default_instance_ = new TaskInfo();
  TaskCondition::default_instance_->InitAsDefaultInstance();
  TaskCPP::default_instance_->InitAsDefaultInstance();
  MissionCPP::default_instance_->InitAsDefaultInstance();
  TaskInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigTask_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigTask_2eproto {
  StaticDescriptorInitializer_ConfigTask_2eproto() {
    protobuf_AddDesc_ConfigTask_2eproto();
  }
} static_descriptor_initializer_ConfigTask_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TaskCondition::kValueFieldNumber;
#endif  // !_MSC_VER

TaskCondition::TaskCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigTask.TaskCondition)
}

void TaskCondition::InitAsDefaultInstance() {
}

TaskCondition::TaskCondition(const TaskCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigTask.TaskCondition)
}

void TaskCondition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskCondition::~TaskCondition() {
  // @@protoc_insertion_point(destructor:ConfigTask.TaskCondition)
  SharedDtor();
}

void TaskCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskCondition_descriptor_;
}

const TaskCondition& TaskCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigTask_2eproto();
  return *default_instance_;
}

TaskCondition* TaskCondition::default_instance_ = NULL;

TaskCondition* TaskCondition::New() const {
  return new TaskCondition;
}

void TaskCondition::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigTask.TaskCondition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 value = 1;
      case 1: {
        if (tag == 8) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_value())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigTask.TaskCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigTask.TaskCondition)
  return false;
#undef DO_
}

void TaskCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigTask.TaskCondition)
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigTask.TaskCondition)
}

::google::protobuf::uint8* TaskCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigTask.TaskCondition)
  // repeated uint32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigTask.TaskCondition)
  return target;
}

int TaskCondition::ByteSize() const {
  int total_size = 0;

  // repeated uint32 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskCondition::MergeFrom(const TaskCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskCondition::CopyFrom(const TaskCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCondition::IsInitialized() const {

  return true;
}

void TaskCondition::Swap(TaskCondition* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskCondition_descriptor_;
  metadata.reflection = TaskCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskCPP::kIdFieldNumber;
const int TaskCPP::kPagetypeFieldNumber;
const int TaskCPP::kTasktypeFieldNumber;
const int TaskCPP::kConditionFieldNumber;
const int TaskCPP::kPriorityFieldNumber;
const int TaskCPP::kRewardFieldNumber;
#endif  // !_MSC_VER

TaskCPP::TaskCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigTask.TaskCPP)
}

void TaskCPP::InitAsDefaultInstance() {
}

TaskCPP::TaskCPP(const TaskCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigTask.TaskCPP)
}

void TaskCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pagetype_ = 0u;
  tasktype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskCPP::~TaskCPP() {
  // @@protoc_insertion_point(destructor:ConfigTask.TaskCPP)
  SharedDtor();
}

void TaskCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskCPP_descriptor_;
}

const TaskCPP& TaskCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigTask_2eproto();
  return *default_instance_;
}

TaskCPP* TaskCPP::default_instance_ = NULL;

TaskCPP* TaskCPP::New() const {
  return new TaskCPP;
}

void TaskCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaskCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, pagetype_);
    tasktype_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  condition_.Clear();
  priority_.Clear();
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigTask.TaskCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pagetype;
        break;
      }

      // required uint32 pagetype = 2;
      case 2: {
        if (tag == 16) {
         parse_pagetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pagetype_)));
          set_has_pagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tasktype;
        break;
      }

      // required uint32 tasktype = 3;
      case 3: {
        if (tag == 24) {
         parse_tasktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_condition;
        break;
      }

      // repeated .ConfigTask.TaskCondition condition = 4;
      case 4: {
        if (tag == 34) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_condition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_condition;
        if (input->ExpectTag(40)) goto parse_priority;
        break;
      }

      // repeated uint32 priority = 5;
      case 5: {
        if (tag == 40) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_priority())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_priority())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_priority;
        if (input->ExpectTag(50)) goto parse_reward;
        break;
      }

      // repeated .CommonGiftConfig.CommonModifyItem reward = 6;
      case 6: {
        if (tag == 50) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigTask.TaskCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigTask.TaskCPP)
  return false;
#undef DO_
}

void TaskCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigTask.TaskCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 pagetype = 2;
  if (has_pagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pagetype(), output);
  }

  // required uint32 tasktype = 3;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tasktype(), output);
  }

  // repeated .ConfigTask.TaskCondition condition = 4;
  for (int i = 0; i < this->condition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->condition(i), output);
  }

  // repeated uint32 priority = 5;
  for (int i = 0; i < this->priority_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->priority(i), output);
  }

  // repeated .CommonGiftConfig.CommonModifyItem reward = 6;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigTask.TaskCPP)
}

::google::protobuf::uint8* TaskCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigTask.TaskCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 pagetype = 2;
  if (has_pagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pagetype(), target);
  }

  // required uint32 tasktype = 3;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tasktype(), target);
  }

  // repeated .ConfigTask.TaskCondition condition = 4;
  for (int i = 0; i < this->condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->condition(i), target);
  }

  // repeated uint32 priority = 5;
  for (int i = 0; i < this->priority_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->priority(i), target);
  }

  // repeated .CommonGiftConfig.CommonModifyItem reward = 6;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigTask.TaskCPP)
  return target;
}

int TaskCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 pagetype = 2;
    if (has_pagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pagetype());
    }

    // required uint32 tasktype = 3;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }

  }
  // repeated .ConfigTask.TaskCondition condition = 4;
  total_size += 1 * this->condition_size();
  for (int i = 0; i < this->condition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->condition(i));
  }

  // repeated uint32 priority = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->priority_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->priority(i));
    }
    total_size += 1 * this->priority_size() + data_size;
  }

  // repeated .CommonGiftConfig.CommonModifyItem reward = 6;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskCPP::MergeFrom(const TaskCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  condition_.MergeFrom(from.condition_);
  priority_.MergeFrom(from.priority_);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pagetype()) {
      set_pagetype(from.pagetype());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskCPP::CopyFrom(const TaskCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void TaskCPP::Swap(TaskCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pagetype_, other->pagetype_);
    std::swap(tasktype_, other->tasktype_);
    condition_.Swap(&other->condition_);
    priority_.Swap(&other->priority_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskCPP_descriptor_;
  metadata.reflection = TaskCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionCPP::kIdFieldNumber;
const int MissionCPP::kNextFieldNumber;
const int MissionCPP::kTypeFieldNumber;
const int MissionCPP::kStatisticalTypeFieldNumber;
const int MissionCPP::kConditionFieldNumber;
const int MissionCPP::kRewardFieldNumber;
#endif  // !_MSC_VER

MissionCPP::MissionCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigTask.MissionCPP)
}

void MissionCPP::InitAsDefaultInstance() {
  reward_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

MissionCPP::MissionCPP(const MissionCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigTask.MissionCPP)
}

void MissionCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  statisticaltype_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionCPP::~MissionCPP() {
  // @@protoc_insertion_point(destructor:ConfigTask.MissionCPP)
  SharedDtor();
}

void MissionCPP::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void MissionCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionCPP_descriptor_;
}

const MissionCPP& MissionCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigTask_2eproto();
  return *default_instance_;
}

MissionCPP* MissionCPP::default_instance_ = NULL;

MissionCPP* MissionCPP::New() const {
  return new MissionCPP;
}

void MissionCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MissionCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 45) {
    ZR_(id_, type_);
    statisticaltype_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  next_.Clear();
  condition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigTask.MissionCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_next;
        break;
      }

      // repeated uint32 next = 2;
      case 2: {
        if (tag == 16) {
         parse_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_next())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_next())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_next;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_statisticalType;
        break;
      }

      // required uint32 statisticalType = 4;
      case 4: {
        if (tag == 32) {
         parse_statisticalType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statisticaltype_)));
          set_has_statisticaltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_condition;
        break;
      }

      // repeated uint32 condition = 5;
      case 5: {
        if (tag == 40) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_condition())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_condition())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_condition;
        if (input->ExpectTag(50)) goto parse_reward;
        break;
      }

      // required .CommonGiftConfig.CommonModifyItem reward = 6;
      case 6: {
        if (tag == 50) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigTask.MissionCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigTask.MissionCPP)
  return false;
#undef DO_
}

void MissionCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigTask.MissionCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 next = 2;
  for (int i = 0; i < this->next_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->next(i), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 statisticalType = 4;
  if (has_statisticaltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->statisticaltype(), output);
  }

  // repeated uint32 condition = 5;
  for (int i = 0; i < this->condition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->condition(i), output);
  }

  // required .CommonGiftConfig.CommonModifyItem reward = 6;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigTask.MissionCPP)
}

::google::protobuf::uint8* MissionCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigTask.MissionCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 next = 2;
  for (int i = 0; i < this->next_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->next(i), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 statisticalType = 4;
  if (has_statisticaltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->statisticaltype(), target);
  }

  // repeated uint32 condition = 5;
  for (int i = 0; i < this->condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->condition(i), target);
  }

  // required .CommonGiftConfig.CommonModifyItem reward = 6;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigTask.MissionCPP)
  return target;
}

int MissionCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 statisticalType = 4;
    if (has_statisticaltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statisticaltype());
    }

    // required .CommonGiftConfig.CommonModifyItem reward = 6;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  // repeated uint32 next = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->next_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->next(i));
    }
    total_size += 1 * this->next_size() + data_size;
  }

  // repeated uint32 condition = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->condition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->condition(i));
    }
    total_size += 1 * this->condition_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionCPP::MergeFrom(const MissionCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  next_.MergeFrom(from.next_);
  condition_.MergeFrom(from.condition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_statisticaltype()) {
      set_statisticaltype(from.statisticaltype());
    }
    if (from.has_reward()) {
      mutable_reward()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionCPP::CopyFrom(const MissionCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002d) != 0x0000002d) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void MissionCPP::Swap(MissionCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    next_.Swap(&other->next_);
    std::swap(type_, other->type_);
    std::swap(statisticaltype_, other->statisticaltype_);
    condition_.Swap(&other->condition_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionCPP_descriptor_;
  metadata.reflection = MissionCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskInfo::kTaskFieldNumber;
const int TaskInfo::kMissionsFieldNumber;
#endif  // !_MSC_VER

TaskInfo::TaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigTask.TaskInfo)
}

void TaskInfo::InitAsDefaultInstance() {
}

TaskInfo::TaskInfo(const TaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigTask.TaskInfo)
}

void TaskInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskInfo::~TaskInfo() {
  // @@protoc_insertion_point(destructor:ConfigTask.TaskInfo)
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskInfo_descriptor_;
}

const TaskInfo& TaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigTask_2eproto();
  return *default_instance_;
}

TaskInfo* TaskInfo::default_instance_ = NULL;

TaskInfo* TaskInfo::New() const {
  return new TaskInfo;
}

void TaskInfo::Clear() {
  task_.Clear();
  missions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigTask.TaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigTask.TaskCPP task = 1;
      case 1: {
        if (tag == 10) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_task;
        if (input->ExpectTag(18)) goto parse_missions;
        break;
      }

      // repeated .ConfigTask.MissionCPP missions = 2;
      case 2: {
        if (tag == 18) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_missions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigTask.TaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigTask.TaskInfo)
  return false;
#undef DO_
}

void TaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigTask.TaskInfo)
  // repeated .ConfigTask.TaskCPP task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(i), output);
  }

  // repeated .ConfigTask.MissionCPP missions = 2;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->missions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigTask.TaskInfo)
}

::google::protobuf::uint8* TaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigTask.TaskInfo)
  // repeated .ConfigTask.TaskCPP task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(i), target);
  }

  // repeated .ConfigTask.MissionCPP missions = 2;
  for (int i = 0; i < this->missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->missions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigTask.TaskInfo)
  return target;
}

int TaskInfo::ByteSize() const {
  int total_size = 0;

  // repeated .ConfigTask.TaskCPP task = 1;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  // repeated .ConfigTask.MissionCPP missions = 2;
  total_size += 1 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  missions_.MergeFrom(from.missions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->task())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->missions())) return false;
  return true;
}

void TaskInfo::Swap(TaskInfo* other) {
  if (other != this) {
    task_.Swap(&other->task_);
    missions_.Swap(&other->missions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskInfo_descriptor_;
  metadata.reflection = TaskInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigTask

// @@protoc_insertion_point(global_scope)
