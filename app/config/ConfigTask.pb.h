// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigTask.proto

#ifndef PROTOBUF_ConfigTask_2eproto__INCLUDED
#define PROTOBUF_ConfigTask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonGiftConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace ConfigTask {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ConfigTask_2eproto();
void protobuf_AssignDesc_ConfigTask_2eproto();
void protobuf_ShutdownFile_ConfigTask_2eproto();

class TaskCondition;
class TaskCPP;
class MissionCPP;
class TaskInfo;

// ===================================================================

class TaskCondition : public ::google::protobuf::Message {
 public:
  TaskCondition();
  virtual ~TaskCondition();

  TaskCondition(const TaskCondition& from);

  inline TaskCondition& operator=(const TaskCondition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskCondition& default_instance();

  void Swap(TaskCondition* other);

  // implements Message ----------------------------------------------

  TaskCondition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskCondition& from);
  void MergeFrom(const TaskCondition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::uint32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::uint32 value);
  inline void add_value(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:ConfigTask.TaskCondition)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > value_;
  friend void  protobuf_AddDesc_ConfigTask_2eproto();
  friend void protobuf_AssignDesc_ConfigTask_2eproto();
  friend void protobuf_ShutdownFile_ConfigTask_2eproto();

  void InitAsDefaultInstance();
  static TaskCondition* default_instance_;
};
// -------------------------------------------------------------------

class TaskCPP : public ::google::protobuf::Message {
 public:
  TaskCPP();
  virtual ~TaskCPP();

  TaskCPP(const TaskCPP& from);

  inline TaskCPP& operator=(const TaskCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskCPP& default_instance();

  void Swap(TaskCPP* other);

  // implements Message ----------------------------------------------

  TaskCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskCPP& from);
  void MergeFrom(const TaskCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 pagetype = 2;
  inline bool has_pagetype() const;
  inline void clear_pagetype();
  static const int kPagetypeFieldNumber = 2;
  inline ::google::protobuf::uint32 pagetype() const;
  inline void set_pagetype(::google::protobuf::uint32 value);

  // required uint32 tasktype = 3;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTasktypeFieldNumber = 3;
  inline ::google::protobuf::uint32 tasktype() const;
  inline void set_tasktype(::google::protobuf::uint32 value);

  // repeated .ConfigTask.TaskCondition condition = 4;
  inline int condition_size() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 4;
  inline const ::ConfigTask::TaskCondition& condition(int index) const;
  inline ::ConfigTask::TaskCondition* mutable_condition(int index);
  inline ::ConfigTask::TaskCondition* add_condition();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigTask::TaskCondition >&
      condition() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigTask::TaskCondition >*
      mutable_condition();

  // repeated uint32 priority = 5;
  inline int priority_size() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 5;
  inline ::google::protobuf::uint32 priority(int index) const;
  inline void set_priority(int index, ::google::protobuf::uint32 value);
  inline void add_priority(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      priority() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_priority();

  // repeated .CommonGiftConfig.CommonModifyItem reward = 6;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 6;
  inline const ::CommonGiftConfig::CommonModifyItem& reward(int index) const;
  inline ::CommonGiftConfig::CommonModifyItem* mutable_reward(int index);
  inline ::CommonGiftConfig::CommonModifyItem* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:ConfigTask.TaskCPP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pagetype();
  inline void clear_has_pagetype();
  inline void set_has_tasktype();
  inline void clear_has_tasktype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 pagetype_;
  ::google::protobuf::RepeatedPtrField< ::ConfigTask::TaskCondition > condition_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > priority_;
  ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem > reward_;
  ::google::protobuf::uint32 tasktype_;
  friend void  protobuf_AddDesc_ConfigTask_2eproto();
  friend void protobuf_AssignDesc_ConfigTask_2eproto();
  friend void protobuf_ShutdownFile_ConfigTask_2eproto();

  void InitAsDefaultInstance();
  static TaskCPP* default_instance_;
};
// -------------------------------------------------------------------

class MissionCPP : public ::google::protobuf::Message {
 public:
  MissionCPP();
  virtual ~MissionCPP();

  MissionCPP(const MissionCPP& from);

  inline MissionCPP& operator=(const MissionCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MissionCPP& default_instance();

  void Swap(MissionCPP* other);

  // implements Message ----------------------------------------------

  MissionCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MissionCPP& from);
  void MergeFrom(const MissionCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated uint32 next = 2;
  inline int next_size() const;
  inline void clear_next();
  static const int kNextFieldNumber = 2;
  inline ::google::protobuf::uint32 next(int index) const;
  inline void set_next(int index, ::google::protobuf::uint32 value);
  inline void add_next(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      next() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_next();

  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 statisticalType = 4;
  inline bool has_statisticaltype() const;
  inline void clear_statisticaltype();
  static const int kStatisticalTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 statisticaltype() const;
  inline void set_statisticaltype(::google::protobuf::uint32 value);

  // repeated uint32 condition = 5;
  inline int condition_size() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 5;
  inline ::google::protobuf::uint32 condition(int index) const;
  inline void set_condition(int index, ::google::protobuf::uint32 value);
  inline void add_condition(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      condition() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_condition();

  // required .CommonGiftConfig.CommonModifyItem reward = 6;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 6;
  inline const ::CommonGiftConfig::CommonModifyItem& reward() const;
  inline ::CommonGiftConfig::CommonModifyItem* mutable_reward();
  inline ::CommonGiftConfig::CommonModifyItem* release_reward();
  inline void set_allocated_reward(::CommonGiftConfig::CommonModifyItem* reward);

  // @@protoc_insertion_point(class_scope:ConfigTask.MissionCPP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_statisticaltype();
  inline void clear_has_statisticaltype();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > next_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > condition_;
  ::CommonGiftConfig::CommonModifyItem* reward_;
  ::google::protobuf::uint32 statisticaltype_;
  friend void  protobuf_AddDesc_ConfigTask_2eproto();
  friend void protobuf_AssignDesc_ConfigTask_2eproto();
  friend void protobuf_ShutdownFile_ConfigTask_2eproto();

  void InitAsDefaultInstance();
  static MissionCPP* default_instance_;
};
// -------------------------------------------------------------------

class TaskInfo : public ::google::protobuf::Message {
 public:
  TaskInfo();
  virtual ~TaskInfo();

  TaskInfo(const TaskInfo& from);

  inline TaskInfo& operator=(const TaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskInfo& default_instance();

  void Swap(TaskInfo* other);

  // implements Message ----------------------------------------------

  TaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskInfo& from);
  void MergeFrom(const TaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigTask.TaskCPP task = 1;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::ConfigTask::TaskCPP& task(int index) const;
  inline ::ConfigTask::TaskCPP* mutable_task(int index);
  inline ::ConfigTask::TaskCPP* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigTask::TaskCPP >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigTask::TaskCPP >*
      mutable_task();

  // repeated .ConfigTask.MissionCPP missions = 2;
  inline int missions_size() const;
  inline void clear_missions();
  static const int kMissionsFieldNumber = 2;
  inline const ::ConfigTask::MissionCPP& missions(int index) const;
  inline ::ConfigTask::MissionCPP* mutable_missions(int index);
  inline ::ConfigTask::MissionCPP* add_missions();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigTask::MissionCPP >&
      missions() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigTask::MissionCPP >*
      mutable_missions();

  // @@protoc_insertion_point(class_scope:ConfigTask.TaskInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigTask::TaskCPP > task_;
  ::google::protobuf::RepeatedPtrField< ::ConfigTask::MissionCPP > missions_;
  friend void  protobuf_AddDesc_ConfigTask_2eproto();
  friend void protobuf_AssignDesc_ConfigTask_2eproto();
  friend void protobuf_ShutdownFile_ConfigTask_2eproto();

  void InitAsDefaultInstance();
  static TaskInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// TaskCondition

// repeated uint32 value = 1;
inline int TaskCondition::value_size() const {
  return value_.size();
}
inline void TaskCondition::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::uint32 TaskCondition::value(int index) const {
  // @@protoc_insertion_point(field_get:ConfigTask.TaskCondition.value)
  return value_.Get(index);
}
inline void TaskCondition::set_value(int index, ::google::protobuf::uint32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigTask.TaskCondition.value)
}
inline void TaskCondition::add_value(::google::protobuf::uint32 value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigTask.TaskCondition.value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TaskCondition::value() const {
  // @@protoc_insertion_point(field_list:ConfigTask.TaskCondition.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TaskCondition::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:ConfigTask.TaskCondition.value)
  return &value_;
}

// -------------------------------------------------------------------

// TaskCPP

// required uint32 id = 1;
inline bool TaskCPP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskCPP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskCPP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskCPP::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TaskCPP::id() const {
  // @@protoc_insertion_point(field_get:ConfigTask.TaskCPP.id)
  return id_;
}
inline void TaskCPP::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigTask.TaskCPP.id)
}

// required uint32 pagetype = 2;
inline bool TaskCPP::has_pagetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskCPP::set_has_pagetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskCPP::clear_has_pagetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskCPP::clear_pagetype() {
  pagetype_ = 0u;
  clear_has_pagetype();
}
inline ::google::protobuf::uint32 TaskCPP::pagetype() const {
  // @@protoc_insertion_point(field_get:ConfigTask.TaskCPP.pagetype)
  return pagetype_;
}
inline void TaskCPP::set_pagetype(::google::protobuf::uint32 value) {
  set_has_pagetype();
  pagetype_ = value;
  // @@protoc_insertion_point(field_set:ConfigTask.TaskCPP.pagetype)
}

// required uint32 tasktype = 3;
inline bool TaskCPP::has_tasktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskCPP::set_has_tasktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskCPP::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskCPP::clear_tasktype() {
  tasktype_ = 0u;
  clear_has_tasktype();
}
inline ::google::protobuf::uint32 TaskCPP::tasktype() const {
  // @@protoc_insertion_point(field_get:ConfigTask.TaskCPP.tasktype)
  return tasktype_;
}
inline void TaskCPP::set_tasktype(::google::protobuf::uint32 value) {
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:ConfigTask.TaskCPP.tasktype)
}

// repeated .ConfigTask.TaskCondition condition = 4;
inline int TaskCPP::condition_size() const {
  return condition_.size();
}
inline void TaskCPP::clear_condition() {
  condition_.Clear();
}
inline const ::ConfigTask::TaskCondition& TaskCPP::condition(int index) const {
  // @@protoc_insertion_point(field_get:ConfigTask.TaskCPP.condition)
  return condition_.Get(index);
}
inline ::ConfigTask::TaskCondition* TaskCPP::mutable_condition(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigTask.TaskCPP.condition)
  return condition_.Mutable(index);
}
inline ::ConfigTask::TaskCondition* TaskCPP::add_condition() {
  // @@protoc_insertion_point(field_add:ConfigTask.TaskCPP.condition)
  return condition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigTask::TaskCondition >&
TaskCPP::condition() const {
  // @@protoc_insertion_point(field_list:ConfigTask.TaskCPP.condition)
  return condition_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigTask::TaskCondition >*
TaskCPP::mutable_condition() {
  // @@protoc_insertion_point(field_mutable_list:ConfigTask.TaskCPP.condition)
  return &condition_;
}

// repeated uint32 priority = 5;
inline int TaskCPP::priority_size() const {
  return priority_.size();
}
inline void TaskCPP::clear_priority() {
  priority_.Clear();
}
inline ::google::protobuf::uint32 TaskCPP::priority(int index) const {
  // @@protoc_insertion_point(field_get:ConfigTask.TaskCPP.priority)
  return priority_.Get(index);
}
inline void TaskCPP::set_priority(int index, ::google::protobuf::uint32 value) {
  priority_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigTask.TaskCPP.priority)
}
inline void TaskCPP::add_priority(::google::protobuf::uint32 value) {
  priority_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigTask.TaskCPP.priority)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TaskCPP::priority() const {
  // @@protoc_insertion_point(field_list:ConfigTask.TaskCPP.priority)
  return priority_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TaskCPP::mutable_priority() {
  // @@protoc_insertion_point(field_mutable_list:ConfigTask.TaskCPP.priority)
  return &priority_;
}

// repeated .CommonGiftConfig.CommonModifyItem reward = 6;
inline int TaskCPP::reward_size() const {
  return reward_.size();
}
inline void TaskCPP::clear_reward() {
  reward_.Clear();
}
inline const ::CommonGiftConfig::CommonModifyItem& TaskCPP::reward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigTask.TaskCPP.reward)
  return reward_.Get(index);
}
inline ::CommonGiftConfig::CommonModifyItem* TaskCPP::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigTask.TaskCPP.reward)
  return reward_.Mutable(index);
}
inline ::CommonGiftConfig::CommonModifyItem* TaskCPP::add_reward() {
  // @@protoc_insertion_point(field_add:ConfigTask.TaskCPP.reward)
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem >&
TaskCPP::reward() const {
  // @@protoc_insertion_point(field_list:ConfigTask.TaskCPP.reward)
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem >*
TaskCPP::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigTask.TaskCPP.reward)
  return &reward_;
}

// -------------------------------------------------------------------

// MissionCPP

// required uint32 id = 1;
inline bool MissionCPP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MissionCPP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MissionCPP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MissionCPP::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MissionCPP::id() const {
  // @@protoc_insertion_point(field_get:ConfigTask.MissionCPP.id)
  return id_;
}
inline void MissionCPP::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigTask.MissionCPP.id)
}

// repeated uint32 next = 2;
inline int MissionCPP::next_size() const {
  return next_.size();
}
inline void MissionCPP::clear_next() {
  next_.Clear();
}
inline ::google::protobuf::uint32 MissionCPP::next(int index) const {
  // @@protoc_insertion_point(field_get:ConfigTask.MissionCPP.next)
  return next_.Get(index);
}
inline void MissionCPP::set_next(int index, ::google::protobuf::uint32 value) {
  next_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigTask.MissionCPP.next)
}
inline void MissionCPP::add_next(::google::protobuf::uint32 value) {
  next_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigTask.MissionCPP.next)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MissionCPP::next() const {
  // @@protoc_insertion_point(field_list:ConfigTask.MissionCPP.next)
  return next_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MissionCPP::mutable_next() {
  // @@protoc_insertion_point(field_mutable_list:ConfigTask.MissionCPP.next)
  return &next_;
}

// required uint32 type = 3;
inline bool MissionCPP::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MissionCPP::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MissionCPP::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MissionCPP::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 MissionCPP::type() const {
  // @@protoc_insertion_point(field_get:ConfigTask.MissionCPP.type)
  return type_;
}
inline void MissionCPP::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ConfigTask.MissionCPP.type)
}

// required uint32 statisticalType = 4;
inline bool MissionCPP::has_statisticaltype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MissionCPP::set_has_statisticaltype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MissionCPP::clear_has_statisticaltype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MissionCPP::clear_statisticaltype() {
  statisticaltype_ = 0u;
  clear_has_statisticaltype();
}
inline ::google::protobuf::uint32 MissionCPP::statisticaltype() const {
  // @@protoc_insertion_point(field_get:ConfigTask.MissionCPP.statisticalType)
  return statisticaltype_;
}
inline void MissionCPP::set_statisticaltype(::google::protobuf::uint32 value) {
  set_has_statisticaltype();
  statisticaltype_ = value;
  // @@protoc_insertion_point(field_set:ConfigTask.MissionCPP.statisticalType)
}

// repeated uint32 condition = 5;
inline int MissionCPP::condition_size() const {
  return condition_.size();
}
inline void MissionCPP::clear_condition() {
  condition_.Clear();
}
inline ::google::protobuf::uint32 MissionCPP::condition(int index) const {
  // @@protoc_insertion_point(field_get:ConfigTask.MissionCPP.condition)
  return condition_.Get(index);
}
inline void MissionCPP::set_condition(int index, ::google::protobuf::uint32 value) {
  condition_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigTask.MissionCPP.condition)
}
inline void MissionCPP::add_condition(::google::protobuf::uint32 value) {
  condition_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigTask.MissionCPP.condition)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MissionCPP::condition() const {
  // @@protoc_insertion_point(field_list:ConfigTask.MissionCPP.condition)
  return condition_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MissionCPP::mutable_condition() {
  // @@protoc_insertion_point(field_mutable_list:ConfigTask.MissionCPP.condition)
  return &condition_;
}

// required .CommonGiftConfig.CommonModifyItem reward = 6;
inline bool MissionCPP::has_reward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MissionCPP::set_has_reward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MissionCPP::clear_has_reward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MissionCPP::clear_reward() {
  if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
  clear_has_reward();
}
inline const ::CommonGiftConfig::CommonModifyItem& MissionCPP::reward() const {
  // @@protoc_insertion_point(field_get:ConfigTask.MissionCPP.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::CommonGiftConfig::CommonModifyItem* MissionCPP::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::CommonGiftConfig::CommonModifyItem;
  // @@protoc_insertion_point(field_mutable:ConfigTask.MissionCPP.reward)
  return reward_;
}
inline ::CommonGiftConfig::CommonModifyItem* MissionCPP::release_reward() {
  clear_has_reward();
  ::CommonGiftConfig::CommonModifyItem* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void MissionCPP::set_allocated_reward(::CommonGiftConfig::CommonModifyItem* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigTask.MissionCPP.reward)
}

// -------------------------------------------------------------------

// TaskInfo

// repeated .ConfigTask.TaskCPP task = 1;
inline int TaskInfo::task_size() const {
  return task_.size();
}
inline void TaskInfo::clear_task() {
  task_.Clear();
}
inline const ::ConfigTask::TaskCPP& TaskInfo::task(int index) const {
  // @@protoc_insertion_point(field_get:ConfigTask.TaskInfo.task)
  return task_.Get(index);
}
inline ::ConfigTask::TaskCPP* TaskInfo::mutable_task(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigTask.TaskInfo.task)
  return task_.Mutable(index);
}
inline ::ConfigTask::TaskCPP* TaskInfo::add_task() {
  // @@protoc_insertion_point(field_add:ConfigTask.TaskInfo.task)
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigTask::TaskCPP >&
TaskInfo::task() const {
  // @@protoc_insertion_point(field_list:ConfigTask.TaskInfo.task)
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigTask::TaskCPP >*
TaskInfo::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:ConfigTask.TaskInfo.task)
  return &task_;
}

// repeated .ConfigTask.MissionCPP missions = 2;
inline int TaskInfo::missions_size() const {
  return missions_.size();
}
inline void TaskInfo::clear_missions() {
  missions_.Clear();
}
inline const ::ConfigTask::MissionCPP& TaskInfo::missions(int index) const {
  // @@protoc_insertion_point(field_get:ConfigTask.TaskInfo.missions)
  return missions_.Get(index);
}
inline ::ConfigTask::MissionCPP* TaskInfo::mutable_missions(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigTask.TaskInfo.missions)
  return missions_.Mutable(index);
}
inline ::ConfigTask::MissionCPP* TaskInfo::add_missions() {
  // @@protoc_insertion_point(field_add:ConfigTask.TaskInfo.missions)
  return missions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigTask::MissionCPP >&
TaskInfo::missions() const {
  // @@protoc_insertion_point(field_list:ConfigTask.TaskInfo.missions)
  return missions_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigTask::MissionCPP >*
TaskInfo::mutable_missions() {
  // @@protoc_insertion_point(field_mutable_list:ConfigTask.TaskInfo.missions)
  return &missions_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigTask

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ConfigTask_2eproto__INCLUDED
