// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigNPCSeller.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigNPCSeller.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigNPCSeller {

namespace {

const ::google::protobuf::Descriptor* NPCSellerMaterial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCSellerMaterial_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCSellerCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCSellerCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCSellerCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCSellerCfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigNPCSeller_2eproto() {
  protobuf_AddDesc_ConfigNPCSeller_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigNPCSeller.proto");
  GOOGLE_CHECK(file != NULL);
  NPCSellerMaterial_descriptor_ = file->message_type(0);
  static const int NPCSellerMaterial_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerMaterial, id_),
  };
  NPCSellerMaterial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCSellerMaterial_descriptor_,
      NPCSellerMaterial::default_instance_,
      NPCSellerMaterial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerMaterial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerMaterial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCSellerMaterial));
  NPCSellerCPP_descriptor_ = file->message_type(1);
  static const int NPCSellerCPP_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, unlocklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, pricebase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, pricediscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, visitinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, maxvisitinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, sellcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, level_),
  };
  NPCSellerCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCSellerCPP_descriptor_,
      NPCSellerCPP::default_instance_,
      NPCSellerCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCSellerCPP));
  NPCSellerCfg_descriptor_ = file->message_type(2);
  static const int NPCSellerCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCfg, npcseller_),
  };
  NPCSellerCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCSellerCfg_descriptor_,
      NPCSellerCfg::default_instance_,
      NPCSellerCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCSellerCfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigNPCSeller_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCSellerMaterial_descriptor_, &NPCSellerMaterial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCSellerCPP_descriptor_, &NPCSellerCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCSellerCfg_descriptor_, &NPCSellerCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigNPCSeller_2eproto() {
  delete NPCSellerMaterial::default_instance_;
  delete NPCSellerMaterial_reflection_;
  delete NPCSellerCPP::default_instance_;
  delete NPCSellerCPP_reflection_;
  delete NPCSellerCfg::default_instance_;
  delete NPCSellerCfg_reflection_;
}

void protobuf_AddDesc_ConfigNPCSeller_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ConfigNPCSeller.proto\022\017ConfigNPCSeller"
    "\"\037\n\021NPCSellerMaterial\022\n\n\002id\030\001 \003(\r\"\326\001\n\014NP"
    "CSellerCPP\022\023\n\013unlockLevel\030\001 \002(\r\022\021\n\tprice"
    "Base\030\002 \002(\002\022\025\n\rpriceDiscount\030\003 \003(\r\022\025\n\rvis"
    "itInterval\030\004 \003(\r\022\030\n\020maxVisitInterval\030\005 \002"
    "(\r\0224\n\010material\030\006 \003(\0132\".ConfigNPCSeller.N"
    "PCSellerMaterial\022\021\n\tsellCount\030\007 \003(\r\022\r\n\005l"
    "evel\030\010 \002(\r\"@\n\014NPCSellerCfg\0220\n\tnpcSeller\030"
    "\001 \002(\0132\035.ConfigNPCSeller.NPCSellerCPP", 356);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigNPCSeller.proto", &protobuf_RegisterTypes);
  NPCSellerMaterial::default_instance_ = new NPCSellerMaterial();
  NPCSellerCPP::default_instance_ = new NPCSellerCPP();
  NPCSellerCfg::default_instance_ = new NPCSellerCfg();
  NPCSellerMaterial::default_instance_->InitAsDefaultInstance();
  NPCSellerCPP::default_instance_->InitAsDefaultInstance();
  NPCSellerCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigNPCSeller_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigNPCSeller_2eproto {
  StaticDescriptorInitializer_ConfigNPCSeller_2eproto() {
    protobuf_AddDesc_ConfigNPCSeller_2eproto();
  }
} static_descriptor_initializer_ConfigNPCSeller_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NPCSellerMaterial::kIdFieldNumber;
#endif  // !_MSC_VER

NPCSellerMaterial::NPCSellerMaterial()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigNPCSeller.NPCSellerMaterial)
}

void NPCSellerMaterial::InitAsDefaultInstance() {
}

NPCSellerMaterial::NPCSellerMaterial(const NPCSellerMaterial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigNPCSeller.NPCSellerMaterial)
}

void NPCSellerMaterial::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCSellerMaterial::~NPCSellerMaterial() {
  // @@protoc_insertion_point(destructor:ConfigNPCSeller.NPCSellerMaterial)
  SharedDtor();
}

void NPCSellerMaterial::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCSellerMaterial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCSellerMaterial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCSellerMaterial_descriptor_;
}

const NPCSellerMaterial& NPCSellerMaterial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigNPCSeller_2eproto();
  return *default_instance_;
}

NPCSellerMaterial* NPCSellerMaterial::default_instance_ = NULL;

NPCSellerMaterial* NPCSellerMaterial::New() const {
  return new NPCSellerMaterial;
}

void NPCSellerMaterial::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCSellerMaterial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigNPCSeller.NPCSellerMaterial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (tag == 8) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigNPCSeller.NPCSellerMaterial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigNPCSeller.NPCSellerMaterial)
  return false;
#undef DO_
}

void NPCSellerMaterial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigNPCSeller.NPCSellerMaterial)
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigNPCSeller.NPCSellerMaterial)
}

::google::protobuf::uint8* NPCSellerMaterial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigNPCSeller.NPCSellerMaterial)
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigNPCSeller.NPCSellerMaterial)
  return target;
}

int NPCSellerMaterial::ByteSize() const {
  int total_size = 0;

  // repeated uint32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCSellerMaterial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCSellerMaterial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCSellerMaterial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCSellerMaterial::MergeFrom(const NPCSellerMaterial& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCSellerMaterial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCSellerMaterial::CopyFrom(const NPCSellerMaterial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCSellerMaterial::IsInitialized() const {

  return true;
}

void NPCSellerMaterial::Swap(NPCSellerMaterial* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCSellerMaterial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCSellerMaterial_descriptor_;
  metadata.reflection = NPCSellerMaterial_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCSellerCPP::kUnlockLevelFieldNumber;
const int NPCSellerCPP::kPriceBaseFieldNumber;
const int NPCSellerCPP::kPriceDiscountFieldNumber;
const int NPCSellerCPP::kVisitIntervalFieldNumber;
const int NPCSellerCPP::kMaxVisitIntervalFieldNumber;
const int NPCSellerCPP::kMaterialFieldNumber;
const int NPCSellerCPP::kSellCountFieldNumber;
const int NPCSellerCPP::kLevelFieldNumber;
#endif  // !_MSC_VER

NPCSellerCPP::NPCSellerCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigNPCSeller.NPCSellerCPP)
}

void NPCSellerCPP::InitAsDefaultInstance() {
}

NPCSellerCPP::NPCSellerCPP(const NPCSellerCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigNPCSeller.NPCSellerCPP)
}

void NPCSellerCPP::SharedCtor() {
  _cached_size_ = 0;
  unlocklevel_ = 0u;
  pricebase_ = 0;
  maxvisitinterval_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCSellerCPP::~NPCSellerCPP() {
  // @@protoc_insertion_point(destructor:ConfigNPCSeller.NPCSellerCPP)
  SharedDtor();
}

void NPCSellerCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCSellerCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCSellerCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCSellerCPP_descriptor_;
}

const NPCSellerCPP& NPCSellerCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigNPCSeller_2eproto();
  return *default_instance_;
}

NPCSellerCPP* NPCSellerCPP::default_instance_ = NULL;

NPCSellerCPP* NPCSellerCPP::New() const {
  return new NPCSellerCPP;
}

void NPCSellerCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NPCSellerCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(unlocklevel_, pricebase_);
  ZR_(maxvisitinterval_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  pricediscount_.Clear();
  visitinterval_.Clear();
  material_.Clear();
  sellcount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCSellerCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigNPCSeller.NPCSellerCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unlockLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlocklevel_)));
          set_has_unlocklevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_priceBase;
        break;
      }

      // required float priceBase = 2;
      case 2: {
        if (tag == 21) {
         parse_priceBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pricebase_)));
          set_has_pricebase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_priceDiscount;
        break;
      }

      // repeated uint32 priceDiscount = 3;
      case 3: {
        if (tag == 24) {
         parse_priceDiscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_pricediscount())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pricediscount())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_priceDiscount;
        if (input->ExpectTag(32)) goto parse_visitInterval;
        break;
      }

      // repeated uint32 visitInterval = 4;
      case 4: {
        if (tag == 32) {
         parse_visitInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_visitinterval())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_visitinterval())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_visitInterval;
        if (input->ExpectTag(40)) goto parse_maxVisitInterval;
        break;
      }

      // required uint32 maxVisitInterval = 5;
      case 5: {
        if (tag == 40) {
         parse_maxVisitInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxvisitinterval_)));
          set_has_maxvisitinterval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_material;
        break;
      }

      // repeated .ConfigNPCSeller.NPCSellerMaterial material = 6;
      case 6: {
        if (tag == 50) {
         parse_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_material()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_material;
        if (input->ExpectTag(56)) goto parse_sellCount;
        break;
      }

      // repeated uint32 sellCount = 7;
      case 7: {
        if (tag == 56) {
         parse_sellCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_sellcount())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sellcount())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sellCount;
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // required uint32 level = 8;
      case 8: {
        if (tag == 64) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigNPCSeller.NPCSellerCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigNPCSeller.NPCSellerCPP)
  return false;
#undef DO_
}

void NPCSellerCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigNPCSeller.NPCSellerCPP)
  // required uint32 unlockLevel = 1;
  if (has_unlocklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unlocklevel(), output);
  }

  // required float priceBase = 2;
  if (has_pricebase()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pricebase(), output);
  }

  // repeated uint32 priceDiscount = 3;
  for (int i = 0; i < this->pricediscount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->pricediscount(i), output);
  }

  // repeated uint32 visitInterval = 4;
  for (int i = 0; i < this->visitinterval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->visitinterval(i), output);
  }

  // required uint32 maxVisitInterval = 5;
  if (has_maxvisitinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxvisitinterval(), output);
  }

  // repeated .ConfigNPCSeller.NPCSellerMaterial material = 6;
  for (int i = 0; i < this->material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->material(i), output);
  }

  // repeated uint32 sellCount = 7;
  for (int i = 0; i < this->sellcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->sellcount(i), output);
  }

  // required uint32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigNPCSeller.NPCSellerCPP)
}

::google::protobuf::uint8* NPCSellerCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigNPCSeller.NPCSellerCPP)
  // required uint32 unlockLevel = 1;
  if (has_unlocklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unlocklevel(), target);
  }

  // required float priceBase = 2;
  if (has_pricebase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pricebase(), target);
  }

  // repeated uint32 priceDiscount = 3;
  for (int i = 0; i < this->pricediscount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->pricediscount(i), target);
  }

  // repeated uint32 visitInterval = 4;
  for (int i = 0; i < this->visitinterval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->visitinterval(i), target);
  }

  // required uint32 maxVisitInterval = 5;
  if (has_maxvisitinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxvisitinterval(), target);
  }

  // repeated .ConfigNPCSeller.NPCSellerMaterial material = 6;
  for (int i = 0; i < this->material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->material(i), target);
  }

  // repeated uint32 sellCount = 7;
  for (int i = 0; i < this->sellcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->sellcount(i), target);
  }

  // required uint32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigNPCSeller.NPCSellerCPP)
  return target;
}

int NPCSellerCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unlockLevel = 1;
    if (has_unlocklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlocklevel());
    }

    // required float priceBase = 2;
    if (has_pricebase()) {
      total_size += 1 + 4;
    }

    // required uint32 maxVisitInterval = 5;
    if (has_maxvisitinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxvisitinterval());
    }

    // required uint32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  // repeated uint32 priceDiscount = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pricediscount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pricediscount(i));
    }
    total_size += 1 * this->pricediscount_size() + data_size;
  }

  // repeated uint32 visitInterval = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->visitinterval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->visitinterval(i));
    }
    total_size += 1 * this->visitinterval_size() + data_size;
  }

  // repeated .ConfigNPCSeller.NPCSellerMaterial material = 6;
  total_size += 1 * this->material_size();
  for (int i = 0; i < this->material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->material(i));
  }

  // repeated uint32 sellCount = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->sellcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sellcount(i));
    }
    total_size += 1 * this->sellcount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCSellerCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCSellerCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCSellerCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCSellerCPP::MergeFrom(const NPCSellerCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  pricediscount_.MergeFrom(from.pricediscount_);
  visitinterval_.MergeFrom(from.visitinterval_);
  material_.MergeFrom(from.material_);
  sellcount_.MergeFrom(from.sellcount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unlocklevel()) {
      set_unlocklevel(from.unlocklevel());
    }
    if (from.has_pricebase()) {
      set_pricebase(from.pricebase());
    }
    if (from.has_maxvisitinterval()) {
      set_maxvisitinterval(from.maxvisitinterval());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCSellerCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCSellerCPP::CopyFrom(const NPCSellerCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCSellerCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000093) != 0x00000093) return false;

  return true;
}

void NPCSellerCPP::Swap(NPCSellerCPP* other) {
  if (other != this) {
    std::swap(unlocklevel_, other->unlocklevel_);
    std::swap(pricebase_, other->pricebase_);
    pricediscount_.Swap(&other->pricediscount_);
    visitinterval_.Swap(&other->visitinterval_);
    std::swap(maxvisitinterval_, other->maxvisitinterval_);
    material_.Swap(&other->material_);
    sellcount_.Swap(&other->sellcount_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCSellerCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCSellerCPP_descriptor_;
  metadata.reflection = NPCSellerCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCSellerCfg::kNpcSellerFieldNumber;
#endif  // !_MSC_VER

NPCSellerCfg::NPCSellerCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigNPCSeller.NPCSellerCfg)
}

void NPCSellerCfg::InitAsDefaultInstance() {
  npcseller_ = const_cast< ::ConfigNPCSeller::NPCSellerCPP*>(&::ConfigNPCSeller::NPCSellerCPP::default_instance());
}

NPCSellerCfg::NPCSellerCfg(const NPCSellerCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigNPCSeller.NPCSellerCfg)
}

void NPCSellerCfg::SharedCtor() {
  _cached_size_ = 0;
  npcseller_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCSellerCfg::~NPCSellerCfg() {
  // @@protoc_insertion_point(destructor:ConfigNPCSeller.NPCSellerCfg)
  SharedDtor();
}

void NPCSellerCfg::SharedDtor() {
  if (this != default_instance_) {
    delete npcseller_;
  }
}

void NPCSellerCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCSellerCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCSellerCfg_descriptor_;
}

const NPCSellerCfg& NPCSellerCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigNPCSeller_2eproto();
  return *default_instance_;
}

NPCSellerCfg* NPCSellerCfg::default_instance_ = NULL;

NPCSellerCfg* NPCSellerCfg::New() const {
  return new NPCSellerCfg;
}

void NPCSellerCfg::Clear() {
  if (has_npcseller()) {
    if (npcseller_ != NULL) npcseller_->::ConfigNPCSeller::NPCSellerCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCSellerCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigNPCSeller.NPCSellerCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConfigNPCSeller.NPCSellerCPP npcSeller = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npcseller()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigNPCSeller.NPCSellerCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigNPCSeller.NPCSellerCfg)
  return false;
#undef DO_
}

void NPCSellerCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigNPCSeller.NPCSellerCfg)
  // required .ConfigNPCSeller.NPCSellerCPP npcSeller = 1;
  if (has_npcseller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->npcseller(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigNPCSeller.NPCSellerCfg)
}

::google::protobuf::uint8* NPCSellerCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigNPCSeller.NPCSellerCfg)
  // required .ConfigNPCSeller.NPCSellerCPP npcSeller = 1;
  if (has_npcseller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npcseller(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigNPCSeller.NPCSellerCfg)
  return target;
}

int NPCSellerCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConfigNPCSeller.NPCSellerCPP npcSeller = 1;
    if (has_npcseller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npcseller());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCSellerCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCSellerCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCSellerCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCSellerCfg::MergeFrom(const NPCSellerCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcseller()) {
      mutable_npcseller()->::ConfigNPCSeller::NPCSellerCPP::MergeFrom(from.npcseller());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCSellerCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCSellerCfg::CopyFrom(const NPCSellerCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCSellerCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_npcseller()) {
    if (!this->npcseller().IsInitialized()) return false;
  }
  return true;
}

void NPCSellerCfg::Swap(NPCSellerCfg* other) {
  if (other != this) {
    std::swap(npcseller_, other->npcseller_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCSellerCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCSellerCfg_descriptor_;
  metadata.reflection = NPCSellerCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigNPCSeller

// @@protoc_insertion_point(global_scope)
