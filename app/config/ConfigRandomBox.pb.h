// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigRandomBox.proto

#ifndef PROTOBUF_ConfigRandomBox_2eproto__INCLUDED
#define PROTOBUF_ConfigRandomBox_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonGiftConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace ConfigRandomBox {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ConfigRandomBox_2eproto();
void protobuf_AssignDesc_ConfigRandomBox_2eproto();
void protobuf_ShutdownFile_ConfigRandomBox_2eproto();

class FreeRandomBoxCPP;
class ChargeRandomBoxCPP;
class RandomBoxTypeCPP;
class RandomBoxCPP;
class RandomBoxInfo;

// ===================================================================

class FreeRandomBoxCPP : public ::google::protobuf::Message {
 public:
  FreeRandomBoxCPP();
  virtual ~FreeRandomBoxCPP();

  FreeRandomBoxCPP(const FreeRandomBoxCPP& from);

  inline FreeRandomBoxCPP& operator=(const FreeRandomBoxCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreeRandomBoxCPP& default_instance();

  void Swap(FreeRandomBoxCPP* other);

  // implements Message ----------------------------------------------

  FreeRandomBoxCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FreeRandomBoxCPP& from);
  void MergeFrom(const FreeRandomBoxCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional uint32 itemid = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // required uint32 weight = 4;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 4;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigRandomBox.FreeRandomBoxCPP)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 weight_;
  friend void  protobuf_AddDesc_ConfigRandomBox_2eproto();
  friend void protobuf_AssignDesc_ConfigRandomBox_2eproto();
  friend void protobuf_ShutdownFile_ConfigRandomBox_2eproto();

  void InitAsDefaultInstance();
  static FreeRandomBoxCPP* default_instance_;
};
// -------------------------------------------------------------------

class ChargeRandomBoxCPP : public ::google::protobuf::Message {
 public:
  ChargeRandomBoxCPP();
  virtual ~ChargeRandomBoxCPP();

  ChargeRandomBoxCPP(const ChargeRandomBoxCPP& from);

  inline ChargeRandomBoxCPP& operator=(const ChargeRandomBoxCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChargeRandomBoxCPP& default_instance();

  void Swap(ChargeRandomBoxCPP* other);

  // implements Message ----------------------------------------------

  ChargeRandomBoxCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChargeRandomBoxCPP& from);
  void MergeFrom(const ChargeRandomBoxCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 giftid = 1;
  inline bool has_giftid() const;
  inline void clear_giftid();
  static const int kGiftidFieldNumber = 1;
  inline ::google::protobuf::uint32 giftid() const;
  inline void set_giftid(::google::protobuf::uint32 value);

  // required .CommonGiftConfig.CommonModifyItem gift = 2;
  inline bool has_gift() const;
  inline void clear_gift();
  static const int kGiftFieldNumber = 2;
  inline const ::CommonGiftConfig::CommonModifyItem& gift() const;
  inline ::CommonGiftConfig::CommonModifyItem* mutable_gift();
  inline ::CommonGiftConfig::CommonModifyItem* release_gift();
  inline void set_allocated_gift(::CommonGiftConfig::CommonModifyItem* gift);

  // required uint32 weight = 3;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 3;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // optional uint32 unlocklevel = 4;
  inline bool has_unlocklevel() const;
  inline void clear_unlocklevel();
  static const int kUnlocklevelFieldNumber = 4;
  inline ::google::protobuf::uint32 unlocklevel() const;
  inline void set_unlocklevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigRandomBox.ChargeRandomBoxCPP)
 private:
  inline void set_has_giftid();
  inline void clear_has_giftid();
  inline void set_has_gift();
  inline void clear_has_gift();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_unlocklevel();
  inline void clear_has_unlocklevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CommonGiftConfig::CommonModifyItem* gift_;
  ::google::protobuf::uint32 giftid_;
  ::google::protobuf::uint32 weight_;
  ::google::protobuf::uint32 unlocklevel_;
  friend void  protobuf_AddDesc_ConfigRandomBox_2eproto();
  friend void protobuf_AssignDesc_ConfigRandomBox_2eproto();
  friend void protobuf_ShutdownFile_ConfigRandomBox_2eproto();

  void InitAsDefaultInstance();
  static ChargeRandomBoxCPP* default_instance_;
};
// -------------------------------------------------------------------

class RandomBoxTypeCPP : public ::google::protobuf::Message {
 public:
  RandomBoxTypeCPP();
  virtual ~RandomBoxTypeCPP();

  RandomBoxTypeCPP(const RandomBoxTypeCPP& from);

  inline RandomBoxTypeCPP& operator=(const RandomBoxTypeCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandomBoxTypeCPP& default_instance();

  void Swap(RandomBoxTypeCPP* other);

  // implements Message ----------------------------------------------

  RandomBoxTypeCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandomBoxTypeCPP& from);
  void MergeFrom(const RandomBoxTypeCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigRandomBox.RandomBoxTypeCPP)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 weight_;
  friend void  protobuf_AddDesc_ConfigRandomBox_2eproto();
  friend void protobuf_AssignDesc_ConfigRandomBox_2eproto();
  friend void protobuf_ShutdownFile_ConfigRandomBox_2eproto();

  void InitAsDefaultInstance();
  static RandomBoxTypeCPP* default_instance_;
};
// -------------------------------------------------------------------

class RandomBoxCPP : public ::google::protobuf::Message {
 public:
  RandomBoxCPP();
  virtual ~RandomBoxCPP();

  RandomBoxCPP(const RandomBoxCPP& from);

  inline RandomBoxCPP& operator=(const RandomBoxCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandomBoxCPP& default_instance();

  void Swap(RandomBoxCPP* other);

  // implements Message ----------------------------------------------

  RandomBoxCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandomBoxCPP& from);
  void MergeFrom(const RandomBoxCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cdtime = 1;
  inline bool has_cdtime() const;
  inline void clear_cdtime();
  static const int kCdtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 cdtime() const;
  inline void set_cdtime(::google::protobuf::uint32 value);

  // repeated uint32 freeboxcoinbase = 2;
  inline int freeboxcoinbase_size() const;
  inline void clear_freeboxcoinbase();
  static const int kFreeboxcoinbaseFieldNumber = 2;
  inline ::google::protobuf::uint32 freeboxcoinbase(int index) const;
  inline void set_freeboxcoinbase(int index, ::google::protobuf::uint32 value);
  inline void add_freeboxcoinbase(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      freeboxcoinbase() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_freeboxcoinbase();

  // required uint32 giftboxdiscount = 3;
  inline bool has_giftboxdiscount() const;
  inline void clear_giftboxdiscount();
  static const int kGiftboxdiscountFieldNumber = 3;
  inline ::google::protobuf::uint32 giftboxdiscount() const;
  inline void set_giftboxdiscount(::google::protobuf::uint32 value);

  // required uint32 giftdimaonddiscount = 4;
  inline bool has_giftdimaonddiscount() const;
  inline void clear_giftdimaonddiscount();
  static const int kGiftdimaonddiscountFieldNumber = 4;
  inline ::google::protobuf::uint32 giftdimaonddiscount() const;
  inline void set_giftdimaonddiscount(::google::protobuf::uint32 value);

  // repeated .ConfigRandomBox.RandomBoxTypeCPP boxtype = 5;
  inline int boxtype_size() const;
  inline void clear_boxtype();
  static const int kBoxtypeFieldNumber = 5;
  inline const ::ConfigRandomBox::RandomBoxTypeCPP& boxtype(int index) const;
  inline ::ConfigRandomBox::RandomBoxTypeCPP* mutable_boxtype(int index);
  inline ::ConfigRandomBox::RandomBoxTypeCPP* add_boxtype();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::RandomBoxTypeCPP >&
      boxtype() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::RandomBoxTypeCPP >*
      mutable_boxtype();

  // @@protoc_insertion_point(class_scope:ConfigRandomBox.RandomBoxCPP)
 private:
  inline void set_has_cdtime();
  inline void clear_has_cdtime();
  inline void set_has_giftboxdiscount();
  inline void clear_has_giftboxdiscount();
  inline void set_has_giftdimaonddiscount();
  inline void clear_has_giftdimaonddiscount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > freeboxcoinbase_;
  ::google::protobuf::uint32 cdtime_;
  ::google::protobuf::uint32 giftboxdiscount_;
  ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::RandomBoxTypeCPP > boxtype_;
  ::google::protobuf::uint32 giftdimaonddiscount_;
  friend void  protobuf_AddDesc_ConfigRandomBox_2eproto();
  friend void protobuf_AssignDesc_ConfigRandomBox_2eproto();
  friend void protobuf_ShutdownFile_ConfigRandomBox_2eproto();

  void InitAsDefaultInstance();
  static RandomBoxCPP* default_instance_;
};
// -------------------------------------------------------------------

class RandomBoxInfo : public ::google::protobuf::Message {
 public:
  RandomBoxInfo();
  virtual ~RandomBoxInfo();

  RandomBoxInfo(const RandomBoxInfo& from);

  inline RandomBoxInfo& operator=(const RandomBoxInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandomBoxInfo& default_instance();

  void Swap(RandomBoxInfo* other);

  // implements Message ----------------------------------------------

  RandomBoxInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandomBoxInfo& from);
  void MergeFrom(const RandomBoxInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ConfigRandomBox.RandomBoxCPP randombox = 1;
  inline bool has_randombox() const;
  inline void clear_randombox();
  static const int kRandomboxFieldNumber = 1;
  inline const ::ConfigRandomBox::RandomBoxCPP& randombox() const;
  inline ::ConfigRandomBox::RandomBoxCPP* mutable_randombox();
  inline ::ConfigRandomBox::RandomBoxCPP* release_randombox();
  inline void set_allocated_randombox(::ConfigRandomBox::RandomBoxCPP* randombox);

  // repeated .ConfigRandomBox.FreeRandomBoxCPP freeboxgift = 2;
  inline int freeboxgift_size() const;
  inline void clear_freeboxgift();
  static const int kFreeboxgiftFieldNumber = 2;
  inline const ::ConfigRandomBox::FreeRandomBoxCPP& freeboxgift(int index) const;
  inline ::ConfigRandomBox::FreeRandomBoxCPP* mutable_freeboxgift(int index);
  inline ::ConfigRandomBox::FreeRandomBoxCPP* add_freeboxgift();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::FreeRandomBoxCPP >&
      freeboxgift() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::FreeRandomBoxCPP >*
      mutable_freeboxgift();

  // repeated .ConfigRandomBox.ChargeRandomBoxCPP chargeboxgift = 3;
  inline int chargeboxgift_size() const;
  inline void clear_chargeboxgift();
  static const int kChargeboxgiftFieldNumber = 3;
  inline const ::ConfigRandomBox::ChargeRandomBoxCPP& chargeboxgift(int index) const;
  inline ::ConfigRandomBox::ChargeRandomBoxCPP* mutable_chargeboxgift(int index);
  inline ::ConfigRandomBox::ChargeRandomBoxCPP* add_chargeboxgift();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::ChargeRandomBoxCPP >&
      chargeboxgift() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::ChargeRandomBoxCPP >*
      mutable_chargeboxgift();

  // @@protoc_insertion_point(class_scope:ConfigRandomBox.RandomBoxInfo)
 private:
  inline void set_has_randombox();
  inline void clear_has_randombox();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ConfigRandomBox::RandomBoxCPP* randombox_;
  ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::FreeRandomBoxCPP > freeboxgift_;
  ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::ChargeRandomBoxCPP > chargeboxgift_;
  friend void  protobuf_AddDesc_ConfigRandomBox_2eproto();
  friend void protobuf_AssignDesc_ConfigRandomBox_2eproto();
  friend void protobuf_ShutdownFile_ConfigRandomBox_2eproto();

  void InitAsDefaultInstance();
  static RandomBoxInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// FreeRandomBoxCPP

// required uint32 type = 1;
inline bool FreeRandomBoxCPP::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FreeRandomBoxCPP::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FreeRandomBoxCPP::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FreeRandomBoxCPP::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 FreeRandomBoxCPP::type() const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.FreeRandomBoxCPP.type)
  return type_;
}
inline void FreeRandomBoxCPP::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ConfigRandomBox.FreeRandomBoxCPP.type)
}

// required uint32 value = 2;
inline bool FreeRandomBoxCPP::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FreeRandomBoxCPP::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FreeRandomBoxCPP::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FreeRandomBoxCPP::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 FreeRandomBoxCPP::value() const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.FreeRandomBoxCPP.value)
  return value_;
}
inline void FreeRandomBoxCPP::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ConfigRandomBox.FreeRandomBoxCPP.value)
}

// optional uint32 itemid = 3;
inline bool FreeRandomBoxCPP::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FreeRandomBoxCPP::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FreeRandomBoxCPP::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FreeRandomBoxCPP::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 FreeRandomBoxCPP::itemid() const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.FreeRandomBoxCPP.itemid)
  return itemid_;
}
inline void FreeRandomBoxCPP::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:ConfigRandomBox.FreeRandomBoxCPP.itemid)
}

// required uint32 weight = 4;
inline bool FreeRandomBoxCPP::has_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FreeRandomBoxCPP::set_has_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FreeRandomBoxCPP::clear_has_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FreeRandomBoxCPP::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 FreeRandomBoxCPP::weight() const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.FreeRandomBoxCPP.weight)
  return weight_;
}
inline void FreeRandomBoxCPP::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ConfigRandomBox.FreeRandomBoxCPP.weight)
}

// -------------------------------------------------------------------

// ChargeRandomBoxCPP

// required uint32 giftid = 1;
inline bool ChargeRandomBoxCPP::has_giftid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChargeRandomBoxCPP::set_has_giftid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChargeRandomBoxCPP::clear_has_giftid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChargeRandomBoxCPP::clear_giftid() {
  giftid_ = 0u;
  clear_has_giftid();
}
inline ::google::protobuf::uint32 ChargeRandomBoxCPP::giftid() const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.ChargeRandomBoxCPP.giftid)
  return giftid_;
}
inline void ChargeRandomBoxCPP::set_giftid(::google::protobuf::uint32 value) {
  set_has_giftid();
  giftid_ = value;
  // @@protoc_insertion_point(field_set:ConfigRandomBox.ChargeRandomBoxCPP.giftid)
}

// required .CommonGiftConfig.CommonModifyItem gift = 2;
inline bool ChargeRandomBoxCPP::has_gift() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChargeRandomBoxCPP::set_has_gift() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChargeRandomBoxCPP::clear_has_gift() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChargeRandomBoxCPP::clear_gift() {
  if (gift_ != NULL) gift_->::CommonGiftConfig::CommonModifyItem::Clear();
  clear_has_gift();
}
inline const ::CommonGiftConfig::CommonModifyItem& ChargeRandomBoxCPP::gift() const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.ChargeRandomBoxCPP.gift)
  return gift_ != NULL ? *gift_ : *default_instance_->gift_;
}
inline ::CommonGiftConfig::CommonModifyItem* ChargeRandomBoxCPP::mutable_gift() {
  set_has_gift();
  if (gift_ == NULL) gift_ = new ::CommonGiftConfig::CommonModifyItem;
  // @@protoc_insertion_point(field_mutable:ConfigRandomBox.ChargeRandomBoxCPP.gift)
  return gift_;
}
inline ::CommonGiftConfig::CommonModifyItem* ChargeRandomBoxCPP::release_gift() {
  clear_has_gift();
  ::CommonGiftConfig::CommonModifyItem* temp = gift_;
  gift_ = NULL;
  return temp;
}
inline void ChargeRandomBoxCPP::set_allocated_gift(::CommonGiftConfig::CommonModifyItem* gift) {
  delete gift_;
  gift_ = gift;
  if (gift) {
    set_has_gift();
  } else {
    clear_has_gift();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigRandomBox.ChargeRandomBoxCPP.gift)
}

// required uint32 weight = 3;
inline bool ChargeRandomBoxCPP::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChargeRandomBoxCPP::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChargeRandomBoxCPP::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChargeRandomBoxCPP::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 ChargeRandomBoxCPP::weight() const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.ChargeRandomBoxCPP.weight)
  return weight_;
}
inline void ChargeRandomBoxCPP::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ConfigRandomBox.ChargeRandomBoxCPP.weight)
}

// optional uint32 unlocklevel = 4;
inline bool ChargeRandomBoxCPP::has_unlocklevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChargeRandomBoxCPP::set_has_unlocklevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChargeRandomBoxCPP::clear_has_unlocklevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChargeRandomBoxCPP::clear_unlocklevel() {
  unlocklevel_ = 0u;
  clear_has_unlocklevel();
}
inline ::google::protobuf::uint32 ChargeRandomBoxCPP::unlocklevel() const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.ChargeRandomBoxCPP.unlocklevel)
  return unlocklevel_;
}
inline void ChargeRandomBoxCPP::set_unlocklevel(::google::protobuf::uint32 value) {
  set_has_unlocklevel();
  unlocklevel_ = value;
  // @@protoc_insertion_point(field_set:ConfigRandomBox.ChargeRandomBoxCPP.unlocklevel)
}

// -------------------------------------------------------------------

// RandomBoxTypeCPP

// required uint32 type = 1;
inline bool RandomBoxTypeCPP::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandomBoxTypeCPP::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandomBoxTypeCPP::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandomBoxTypeCPP::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 RandomBoxTypeCPP::type() const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.RandomBoxTypeCPP.type)
  return type_;
}
inline void RandomBoxTypeCPP::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ConfigRandomBox.RandomBoxTypeCPP.type)
}

// required uint32 weight = 2;
inline bool RandomBoxTypeCPP::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandomBoxTypeCPP::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandomBoxTypeCPP::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandomBoxTypeCPP::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 RandomBoxTypeCPP::weight() const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.RandomBoxTypeCPP.weight)
  return weight_;
}
inline void RandomBoxTypeCPP::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ConfigRandomBox.RandomBoxTypeCPP.weight)
}

// -------------------------------------------------------------------

// RandomBoxCPP

// required uint32 cdtime = 1;
inline bool RandomBoxCPP::has_cdtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandomBoxCPP::set_has_cdtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandomBoxCPP::clear_has_cdtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandomBoxCPP::clear_cdtime() {
  cdtime_ = 0u;
  clear_has_cdtime();
}
inline ::google::protobuf::uint32 RandomBoxCPP::cdtime() const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.RandomBoxCPP.cdtime)
  return cdtime_;
}
inline void RandomBoxCPP::set_cdtime(::google::protobuf::uint32 value) {
  set_has_cdtime();
  cdtime_ = value;
  // @@protoc_insertion_point(field_set:ConfigRandomBox.RandomBoxCPP.cdtime)
}

// repeated uint32 freeboxcoinbase = 2;
inline int RandomBoxCPP::freeboxcoinbase_size() const {
  return freeboxcoinbase_.size();
}
inline void RandomBoxCPP::clear_freeboxcoinbase() {
  freeboxcoinbase_.Clear();
}
inline ::google::protobuf::uint32 RandomBoxCPP::freeboxcoinbase(int index) const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.RandomBoxCPP.freeboxcoinbase)
  return freeboxcoinbase_.Get(index);
}
inline void RandomBoxCPP::set_freeboxcoinbase(int index, ::google::protobuf::uint32 value) {
  freeboxcoinbase_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigRandomBox.RandomBoxCPP.freeboxcoinbase)
}
inline void RandomBoxCPP::add_freeboxcoinbase(::google::protobuf::uint32 value) {
  freeboxcoinbase_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigRandomBox.RandomBoxCPP.freeboxcoinbase)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RandomBoxCPP::freeboxcoinbase() const {
  // @@protoc_insertion_point(field_list:ConfigRandomBox.RandomBoxCPP.freeboxcoinbase)
  return freeboxcoinbase_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RandomBoxCPP::mutable_freeboxcoinbase() {
  // @@protoc_insertion_point(field_mutable_list:ConfigRandomBox.RandomBoxCPP.freeboxcoinbase)
  return &freeboxcoinbase_;
}

// required uint32 giftboxdiscount = 3;
inline bool RandomBoxCPP::has_giftboxdiscount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RandomBoxCPP::set_has_giftboxdiscount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RandomBoxCPP::clear_has_giftboxdiscount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RandomBoxCPP::clear_giftboxdiscount() {
  giftboxdiscount_ = 0u;
  clear_has_giftboxdiscount();
}
inline ::google::protobuf::uint32 RandomBoxCPP::giftboxdiscount() const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.RandomBoxCPP.giftboxdiscount)
  return giftboxdiscount_;
}
inline void RandomBoxCPP::set_giftboxdiscount(::google::protobuf::uint32 value) {
  set_has_giftboxdiscount();
  giftboxdiscount_ = value;
  // @@protoc_insertion_point(field_set:ConfigRandomBox.RandomBoxCPP.giftboxdiscount)
}

// required uint32 giftdimaonddiscount = 4;
inline bool RandomBoxCPP::has_giftdimaonddiscount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RandomBoxCPP::set_has_giftdimaonddiscount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RandomBoxCPP::clear_has_giftdimaonddiscount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RandomBoxCPP::clear_giftdimaonddiscount() {
  giftdimaonddiscount_ = 0u;
  clear_has_giftdimaonddiscount();
}
inline ::google::protobuf::uint32 RandomBoxCPP::giftdimaonddiscount() const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.RandomBoxCPP.giftdimaonddiscount)
  return giftdimaonddiscount_;
}
inline void RandomBoxCPP::set_giftdimaonddiscount(::google::protobuf::uint32 value) {
  set_has_giftdimaonddiscount();
  giftdimaonddiscount_ = value;
  // @@protoc_insertion_point(field_set:ConfigRandomBox.RandomBoxCPP.giftdimaonddiscount)
}

// repeated .ConfigRandomBox.RandomBoxTypeCPP boxtype = 5;
inline int RandomBoxCPP::boxtype_size() const {
  return boxtype_.size();
}
inline void RandomBoxCPP::clear_boxtype() {
  boxtype_.Clear();
}
inline const ::ConfigRandomBox::RandomBoxTypeCPP& RandomBoxCPP::boxtype(int index) const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.RandomBoxCPP.boxtype)
  return boxtype_.Get(index);
}
inline ::ConfigRandomBox::RandomBoxTypeCPP* RandomBoxCPP::mutable_boxtype(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigRandomBox.RandomBoxCPP.boxtype)
  return boxtype_.Mutable(index);
}
inline ::ConfigRandomBox::RandomBoxTypeCPP* RandomBoxCPP::add_boxtype() {
  // @@protoc_insertion_point(field_add:ConfigRandomBox.RandomBoxCPP.boxtype)
  return boxtype_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::RandomBoxTypeCPP >&
RandomBoxCPP::boxtype() const {
  // @@protoc_insertion_point(field_list:ConfigRandomBox.RandomBoxCPP.boxtype)
  return boxtype_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::RandomBoxTypeCPP >*
RandomBoxCPP::mutable_boxtype() {
  // @@protoc_insertion_point(field_mutable_list:ConfigRandomBox.RandomBoxCPP.boxtype)
  return &boxtype_;
}

// -------------------------------------------------------------------

// RandomBoxInfo

// required .ConfigRandomBox.RandomBoxCPP randombox = 1;
inline bool RandomBoxInfo::has_randombox() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandomBoxInfo::set_has_randombox() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandomBoxInfo::clear_has_randombox() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandomBoxInfo::clear_randombox() {
  if (randombox_ != NULL) randombox_->::ConfigRandomBox::RandomBoxCPP::Clear();
  clear_has_randombox();
}
inline const ::ConfigRandomBox::RandomBoxCPP& RandomBoxInfo::randombox() const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.RandomBoxInfo.randombox)
  return randombox_ != NULL ? *randombox_ : *default_instance_->randombox_;
}
inline ::ConfigRandomBox::RandomBoxCPP* RandomBoxInfo::mutable_randombox() {
  set_has_randombox();
  if (randombox_ == NULL) randombox_ = new ::ConfigRandomBox::RandomBoxCPP;
  // @@protoc_insertion_point(field_mutable:ConfigRandomBox.RandomBoxInfo.randombox)
  return randombox_;
}
inline ::ConfigRandomBox::RandomBoxCPP* RandomBoxInfo::release_randombox() {
  clear_has_randombox();
  ::ConfigRandomBox::RandomBoxCPP* temp = randombox_;
  randombox_ = NULL;
  return temp;
}
inline void RandomBoxInfo::set_allocated_randombox(::ConfigRandomBox::RandomBoxCPP* randombox) {
  delete randombox_;
  randombox_ = randombox;
  if (randombox) {
    set_has_randombox();
  } else {
    clear_has_randombox();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigRandomBox.RandomBoxInfo.randombox)
}

// repeated .ConfigRandomBox.FreeRandomBoxCPP freeboxgift = 2;
inline int RandomBoxInfo::freeboxgift_size() const {
  return freeboxgift_.size();
}
inline void RandomBoxInfo::clear_freeboxgift() {
  freeboxgift_.Clear();
}
inline const ::ConfigRandomBox::FreeRandomBoxCPP& RandomBoxInfo::freeboxgift(int index) const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.RandomBoxInfo.freeboxgift)
  return freeboxgift_.Get(index);
}
inline ::ConfigRandomBox::FreeRandomBoxCPP* RandomBoxInfo::mutable_freeboxgift(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigRandomBox.RandomBoxInfo.freeboxgift)
  return freeboxgift_.Mutable(index);
}
inline ::ConfigRandomBox::FreeRandomBoxCPP* RandomBoxInfo::add_freeboxgift() {
  // @@protoc_insertion_point(field_add:ConfigRandomBox.RandomBoxInfo.freeboxgift)
  return freeboxgift_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::FreeRandomBoxCPP >&
RandomBoxInfo::freeboxgift() const {
  // @@protoc_insertion_point(field_list:ConfigRandomBox.RandomBoxInfo.freeboxgift)
  return freeboxgift_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::FreeRandomBoxCPP >*
RandomBoxInfo::mutable_freeboxgift() {
  // @@protoc_insertion_point(field_mutable_list:ConfigRandomBox.RandomBoxInfo.freeboxgift)
  return &freeboxgift_;
}

// repeated .ConfigRandomBox.ChargeRandomBoxCPP chargeboxgift = 3;
inline int RandomBoxInfo::chargeboxgift_size() const {
  return chargeboxgift_.size();
}
inline void RandomBoxInfo::clear_chargeboxgift() {
  chargeboxgift_.Clear();
}
inline const ::ConfigRandomBox::ChargeRandomBoxCPP& RandomBoxInfo::chargeboxgift(int index) const {
  // @@protoc_insertion_point(field_get:ConfigRandomBox.RandomBoxInfo.chargeboxgift)
  return chargeboxgift_.Get(index);
}
inline ::ConfigRandomBox::ChargeRandomBoxCPP* RandomBoxInfo::mutable_chargeboxgift(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigRandomBox.RandomBoxInfo.chargeboxgift)
  return chargeboxgift_.Mutable(index);
}
inline ::ConfigRandomBox::ChargeRandomBoxCPP* RandomBoxInfo::add_chargeboxgift() {
  // @@protoc_insertion_point(field_add:ConfigRandomBox.RandomBoxInfo.chargeboxgift)
  return chargeboxgift_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::ChargeRandomBoxCPP >&
RandomBoxInfo::chargeboxgift() const {
  // @@protoc_insertion_point(field_list:ConfigRandomBox.RandomBoxInfo.chargeboxgift)
  return chargeboxgift_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigRandomBox::ChargeRandomBoxCPP >*
RandomBoxInfo::mutable_chargeboxgift() {
  // @@protoc_insertion_point(field_mutable_list:ConfigRandomBox.RandomBoxInfo.chargeboxgift)
  return &chargeboxgift_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigRandomBox

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ConfigRandomBox_2eproto__INCLUDED
