// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigFriendlyTree.proto

#ifndef PROTOBUF_ConfigFriendlyTree_2eproto__INCLUDED
#define PROTOBUF_ConfigFriendlyTree_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ConfigFriendlyTree {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ConfigFriendlyTree_2eproto();
void protobuf_AssignDesc_ConfigFriendlyTree_2eproto();
void protobuf_ShutdownFile_ConfigFriendlyTree_2eproto();

class FriendlyTreeCPP;
class FriendlyTreeCfg;

// ===================================================================

class FriendlyTreeCPP : public ::google::protobuf::Message {
 public:
  FriendlyTreeCPP();
  virtual ~FriendlyTreeCPP();

  FriendlyTreeCPP(const FriendlyTreeCPP& from);

  inline FriendlyTreeCPP& operator=(const FriendlyTreeCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendlyTreeCPP& default_instance();

  void Swap(FriendlyTreeCPP* other);

  // implements Message ----------------------------------------------

  FriendlyTreeCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendlyTreeCPP& from);
  void MergeFrom(const FriendlyTreeCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 waterTreeReward = 1;
  inline bool has_watertreereward() const;
  inline void clear_watertreereward();
  static const int kWaterTreeRewardFieldNumber = 1;
  inline ::google::protobuf::uint32 watertreereward() const;
  inline void set_watertreereward(::google::protobuf::uint32 value);

  // required uint32 rewardTreeReward = 2;
  inline bool has_rewardtreereward() const;
  inline void clear_rewardtreereward();
  static const int kRewardTreeRewardFieldNumber = 2;
  inline ::google::protobuf::uint32 rewardtreereward() const;
  inline void set_rewardtreereward(::google::protobuf::uint32 value);

  // required uint32 wateredPersonMax = 3;
  inline bool has_wateredpersonmax() const;
  inline void clear_wateredpersonmax();
  static const int kWateredPersonMaxFieldNumber = 3;
  inline ::google::protobuf::uint32 wateredpersonmax() const;
  inline void set_wateredpersonmax(::google::protobuf::uint32 value);

  // required uint32 treeCdTime = 4;
  inline bool has_treecdtime() const;
  inline void clear_treecdtime();
  static const int kTreeCdTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 treecdtime() const;
  inline void set_treecdtime(::google::protobuf::uint32 value);

  // required uint32 friendlyValueMax = 5;
  inline bool has_friendlyvaluemax() const;
  inline void clear_friendlyvaluemax();
  static const int kFriendlyValueMaxFieldNumber = 5;
  inline ::google::protobuf::uint32 friendlyvaluemax() const;
  inline void set_friendlyvaluemax(::google::protobuf::uint32 value);

  // required uint32 unlockLevel = 6;
  inline bool has_unlocklevel() const;
  inline void clear_unlocklevel();
  static const int kUnlockLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 unlocklevel() const;
  inline void set_unlocklevel(::google::protobuf::uint32 value);

  // required uint32 regrowthCDTime = 7;
  inline bool has_regrowthcdtime() const;
  inline void clear_regrowthcdtime();
  static const int kRegrowthCDTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 regrowthcdtime() const;
  inline void set_regrowthcdtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigFriendlyTree.FriendlyTreeCPP)
 private:
  inline void set_has_watertreereward();
  inline void clear_has_watertreereward();
  inline void set_has_rewardtreereward();
  inline void clear_has_rewardtreereward();
  inline void set_has_wateredpersonmax();
  inline void clear_has_wateredpersonmax();
  inline void set_has_treecdtime();
  inline void clear_has_treecdtime();
  inline void set_has_friendlyvaluemax();
  inline void clear_has_friendlyvaluemax();
  inline void set_has_unlocklevel();
  inline void clear_has_unlocklevel();
  inline void set_has_regrowthcdtime();
  inline void clear_has_regrowthcdtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 watertreereward_;
  ::google::protobuf::uint32 rewardtreereward_;
  ::google::protobuf::uint32 wateredpersonmax_;
  ::google::protobuf::uint32 treecdtime_;
  ::google::protobuf::uint32 friendlyvaluemax_;
  ::google::protobuf::uint32 unlocklevel_;
  ::google::protobuf::uint32 regrowthcdtime_;
  friend void  protobuf_AddDesc_ConfigFriendlyTree_2eproto();
  friend void protobuf_AssignDesc_ConfigFriendlyTree_2eproto();
  friend void protobuf_ShutdownFile_ConfigFriendlyTree_2eproto();

  void InitAsDefaultInstance();
  static FriendlyTreeCPP* default_instance_;
};
// -------------------------------------------------------------------

class FriendlyTreeCfg : public ::google::protobuf::Message {
 public:
  FriendlyTreeCfg();
  virtual ~FriendlyTreeCfg();

  FriendlyTreeCfg(const FriendlyTreeCfg& from);

  inline FriendlyTreeCfg& operator=(const FriendlyTreeCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendlyTreeCfg& default_instance();

  void Swap(FriendlyTreeCfg* other);

  // implements Message ----------------------------------------------

  FriendlyTreeCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendlyTreeCfg& from);
  void MergeFrom(const FriendlyTreeCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ConfigFriendlyTree.FriendlyTreeCPP friendlytree = 1;
  inline bool has_friendlytree() const;
  inline void clear_friendlytree();
  static const int kFriendlytreeFieldNumber = 1;
  inline const ::ConfigFriendlyTree::FriendlyTreeCPP& friendlytree() const;
  inline ::ConfigFriendlyTree::FriendlyTreeCPP* mutable_friendlytree();
  inline ::ConfigFriendlyTree::FriendlyTreeCPP* release_friendlytree();
  inline void set_allocated_friendlytree(::ConfigFriendlyTree::FriendlyTreeCPP* friendlytree);

  // @@protoc_insertion_point(class_scope:ConfigFriendlyTree.FriendlyTreeCfg)
 private:
  inline void set_has_friendlytree();
  inline void clear_has_friendlytree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ConfigFriendlyTree::FriendlyTreeCPP* friendlytree_;
  friend void  protobuf_AddDesc_ConfigFriendlyTree_2eproto();
  friend void protobuf_AssignDesc_ConfigFriendlyTree_2eproto();
  friend void protobuf_ShutdownFile_ConfigFriendlyTree_2eproto();

  void InitAsDefaultInstance();
  static FriendlyTreeCfg* default_instance_;
};
// ===================================================================


// ===================================================================

// FriendlyTreeCPP

// required uint32 waterTreeReward = 1;
inline bool FriendlyTreeCPP::has_watertreereward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendlyTreeCPP::set_has_watertreereward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendlyTreeCPP::clear_has_watertreereward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendlyTreeCPP::clear_watertreereward() {
  watertreereward_ = 0u;
  clear_has_watertreereward();
}
inline ::google::protobuf::uint32 FriendlyTreeCPP::watertreereward() const {
  // @@protoc_insertion_point(field_get:ConfigFriendlyTree.FriendlyTreeCPP.waterTreeReward)
  return watertreereward_;
}
inline void FriendlyTreeCPP::set_watertreereward(::google::protobuf::uint32 value) {
  set_has_watertreereward();
  watertreereward_ = value;
  // @@protoc_insertion_point(field_set:ConfigFriendlyTree.FriendlyTreeCPP.waterTreeReward)
}

// required uint32 rewardTreeReward = 2;
inline bool FriendlyTreeCPP::has_rewardtreereward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendlyTreeCPP::set_has_rewardtreereward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendlyTreeCPP::clear_has_rewardtreereward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendlyTreeCPP::clear_rewardtreereward() {
  rewardtreereward_ = 0u;
  clear_has_rewardtreereward();
}
inline ::google::protobuf::uint32 FriendlyTreeCPP::rewardtreereward() const {
  // @@protoc_insertion_point(field_get:ConfigFriendlyTree.FriendlyTreeCPP.rewardTreeReward)
  return rewardtreereward_;
}
inline void FriendlyTreeCPP::set_rewardtreereward(::google::protobuf::uint32 value) {
  set_has_rewardtreereward();
  rewardtreereward_ = value;
  // @@protoc_insertion_point(field_set:ConfigFriendlyTree.FriendlyTreeCPP.rewardTreeReward)
}

// required uint32 wateredPersonMax = 3;
inline bool FriendlyTreeCPP::has_wateredpersonmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendlyTreeCPP::set_has_wateredpersonmax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendlyTreeCPP::clear_has_wateredpersonmax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendlyTreeCPP::clear_wateredpersonmax() {
  wateredpersonmax_ = 0u;
  clear_has_wateredpersonmax();
}
inline ::google::protobuf::uint32 FriendlyTreeCPP::wateredpersonmax() const {
  // @@protoc_insertion_point(field_get:ConfigFriendlyTree.FriendlyTreeCPP.wateredPersonMax)
  return wateredpersonmax_;
}
inline void FriendlyTreeCPP::set_wateredpersonmax(::google::protobuf::uint32 value) {
  set_has_wateredpersonmax();
  wateredpersonmax_ = value;
  // @@protoc_insertion_point(field_set:ConfigFriendlyTree.FriendlyTreeCPP.wateredPersonMax)
}

// required uint32 treeCdTime = 4;
inline bool FriendlyTreeCPP::has_treecdtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendlyTreeCPP::set_has_treecdtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendlyTreeCPP::clear_has_treecdtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendlyTreeCPP::clear_treecdtime() {
  treecdtime_ = 0u;
  clear_has_treecdtime();
}
inline ::google::protobuf::uint32 FriendlyTreeCPP::treecdtime() const {
  // @@protoc_insertion_point(field_get:ConfigFriendlyTree.FriendlyTreeCPP.treeCdTime)
  return treecdtime_;
}
inline void FriendlyTreeCPP::set_treecdtime(::google::protobuf::uint32 value) {
  set_has_treecdtime();
  treecdtime_ = value;
  // @@protoc_insertion_point(field_set:ConfigFriendlyTree.FriendlyTreeCPP.treeCdTime)
}

// required uint32 friendlyValueMax = 5;
inline bool FriendlyTreeCPP::has_friendlyvaluemax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendlyTreeCPP::set_has_friendlyvaluemax() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendlyTreeCPP::clear_has_friendlyvaluemax() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendlyTreeCPP::clear_friendlyvaluemax() {
  friendlyvaluemax_ = 0u;
  clear_has_friendlyvaluemax();
}
inline ::google::protobuf::uint32 FriendlyTreeCPP::friendlyvaluemax() const {
  // @@protoc_insertion_point(field_get:ConfigFriendlyTree.FriendlyTreeCPP.friendlyValueMax)
  return friendlyvaluemax_;
}
inline void FriendlyTreeCPP::set_friendlyvaluemax(::google::protobuf::uint32 value) {
  set_has_friendlyvaluemax();
  friendlyvaluemax_ = value;
  // @@protoc_insertion_point(field_set:ConfigFriendlyTree.FriendlyTreeCPP.friendlyValueMax)
}

// required uint32 unlockLevel = 6;
inline bool FriendlyTreeCPP::has_unlocklevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendlyTreeCPP::set_has_unlocklevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendlyTreeCPP::clear_has_unlocklevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendlyTreeCPP::clear_unlocklevel() {
  unlocklevel_ = 0u;
  clear_has_unlocklevel();
}
inline ::google::protobuf::uint32 FriendlyTreeCPP::unlocklevel() const {
  // @@protoc_insertion_point(field_get:ConfigFriendlyTree.FriendlyTreeCPP.unlockLevel)
  return unlocklevel_;
}
inline void FriendlyTreeCPP::set_unlocklevel(::google::protobuf::uint32 value) {
  set_has_unlocklevel();
  unlocklevel_ = value;
  // @@protoc_insertion_point(field_set:ConfigFriendlyTree.FriendlyTreeCPP.unlockLevel)
}

// required uint32 regrowthCDTime = 7;
inline bool FriendlyTreeCPP::has_regrowthcdtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendlyTreeCPP::set_has_regrowthcdtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendlyTreeCPP::clear_has_regrowthcdtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendlyTreeCPP::clear_regrowthcdtime() {
  regrowthcdtime_ = 0u;
  clear_has_regrowthcdtime();
}
inline ::google::protobuf::uint32 FriendlyTreeCPP::regrowthcdtime() const {
  // @@protoc_insertion_point(field_get:ConfigFriendlyTree.FriendlyTreeCPP.regrowthCDTime)
  return regrowthcdtime_;
}
inline void FriendlyTreeCPP::set_regrowthcdtime(::google::protobuf::uint32 value) {
  set_has_regrowthcdtime();
  regrowthcdtime_ = value;
  // @@protoc_insertion_point(field_set:ConfigFriendlyTree.FriendlyTreeCPP.regrowthCDTime)
}

// -------------------------------------------------------------------

// FriendlyTreeCfg

// required .ConfigFriendlyTree.FriendlyTreeCPP friendlytree = 1;
inline bool FriendlyTreeCfg::has_friendlytree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendlyTreeCfg::set_has_friendlytree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendlyTreeCfg::clear_has_friendlytree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendlyTreeCfg::clear_friendlytree() {
  if (friendlytree_ != NULL) friendlytree_->::ConfigFriendlyTree::FriendlyTreeCPP::Clear();
  clear_has_friendlytree();
}
inline const ::ConfigFriendlyTree::FriendlyTreeCPP& FriendlyTreeCfg::friendlytree() const {
  // @@protoc_insertion_point(field_get:ConfigFriendlyTree.FriendlyTreeCfg.friendlytree)
  return friendlytree_ != NULL ? *friendlytree_ : *default_instance_->friendlytree_;
}
inline ::ConfigFriendlyTree::FriendlyTreeCPP* FriendlyTreeCfg::mutable_friendlytree() {
  set_has_friendlytree();
  if (friendlytree_ == NULL) friendlytree_ = new ::ConfigFriendlyTree::FriendlyTreeCPP;
  // @@protoc_insertion_point(field_mutable:ConfigFriendlyTree.FriendlyTreeCfg.friendlytree)
  return friendlytree_;
}
inline ::ConfigFriendlyTree::FriendlyTreeCPP* FriendlyTreeCfg::release_friendlytree() {
  clear_has_friendlytree();
  ::ConfigFriendlyTree::FriendlyTreeCPP* temp = friendlytree_;
  friendlytree_ = NULL;
  return temp;
}
inline void FriendlyTreeCfg::set_allocated_friendlytree(::ConfigFriendlyTree::FriendlyTreeCPP* friendlytree) {
  delete friendlytree_;
  friendlytree_ = friendlytree;
  if (friendlytree) {
    set_has_friendlytree();
  } else {
    clear_has_friendlytree();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigFriendlyTree.FriendlyTreeCfg.friendlytree)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigFriendlyTree

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ConfigFriendlyTree_2eproto__INCLUDED
