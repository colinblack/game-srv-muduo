// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigOrder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigOrder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigOrder {

namespace {

const ::google::protobuf::Descriptor* Order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Order_reflection_ = NULL;
const ::google::protobuf::Descriptor* Level_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Level_reflection_ = NULL;
const ::google::protobuf::Descriptor* Storage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Storage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderSolt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderSolt_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderBonusCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderBonusCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Base_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigOrder_2eproto() {
  protobuf_AddDesc_ConfigOrder_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigOrder.proto");
  GOOGLE_CHECK(file != NULL);
  Order_descriptor_ = file->message_type(0);
  static const int Order_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, count_),
  };
  Order_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Order_descriptor_,
      Order::default_instance_,
      Order_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Order));
  Level_descriptor_ = file->message_type(1);
  static const int Level_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, level_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, discard_cdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, orders_),
  };
  Level_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Level_descriptor_,
      Level::default_instance_,
      Level_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Level, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Level));
  Storage_descriptor_ = file->message_type(2);
  static const int Storage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Storage, storage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Storage, ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Storage, levels_),
  };
  Storage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Storage_descriptor_,
      Storage::default_instance_,
      Storage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Storage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Storage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Storage));
  Parameter_descriptor_ = file->message_type(3);
  static const int Parameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, random_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, random_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, discard_cdtime_),
  };
  Parameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parameter_descriptor_,
      Parameter::default_instance_,
      Parameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parameter));
  OrderSolt_descriptor_ = file->message_type(4);
  static const int OrderSolt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderSolt, solt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderSolt, storageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderSolt, ordermax_),
  };
  OrderSolt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderSolt_descriptor_,
      OrderSolt::default_instance_,
      OrderSolt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderSolt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderSolt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderSolt));
  OrderBonusCPP_descriptor_ = file->message_type(5);
  static const int OrderBonusCPP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBonusCPP, adbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBonusCPP, ad_bonus_cnt_daily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBonusCPP, cost_diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBonusCPP, diamond_bonus_cnt_daily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBonusCPP, diamond_bonus_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBonusCPP, diamondbonus_),
  };
  OrderBonusCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderBonusCPP_descriptor_,
      OrderBonusCPP::default_instance_,
      OrderBonusCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBonusCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBonusCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderBonusCPP));
  Base_descriptor_ = file->message_type(6);
  static const int Base_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, storages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, discard_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, ordersolt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, orderbonus_),
  };
  Base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Base_descriptor_,
      Base::default_instance_,
      Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Base));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigOrder_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Order_descriptor_, &Order::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Level_descriptor_, &Level::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Storage_descriptor_, &Storage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parameter_descriptor_, &Parameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderSolt_descriptor_, &OrderSolt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderBonusCPP_descriptor_, &OrderBonusCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Base_descriptor_, &Base::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigOrder_2eproto() {
  delete Order::default_instance_;
  delete Order_reflection_;
  delete Level::default_instance_;
  delete Level_reflection_;
  delete Storage::default_instance_;
  delete Storage_reflection_;
  delete Parameter::default_instance_;
  delete Parameter_reflection_;
  delete OrderSolt::default_instance_;
  delete OrderSolt_reflection_;
  delete OrderBonusCPP::default_instance_;
  delete OrderBonusCPP_reflection_;
  delete Base::default_instance_;
  delete Base_reflection_;
}

void protobuf_AddDesc_ConfigOrder_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ConfigOrder.proto\022\013ConfigOrder\"7\n\005Orde"
    "r\022\017\n\007propsid\030\001 \002(\r\022\016\n\006weight\030\002 \002(\r\022\r\n\005co"
    "unt\030\003 \002(\005\"d\n\005Level\022\020\n\010level_id\030\001 \002(\r\022\r\n\005"
    "level\030\002 \002(\r\022\026\n\016discard_cdtime\030\003 \002(\r\022\"\n\006o"
    "rders\030\004 \003(\0132\022.ConfigOrder.Order\"P\n\007Stora"
    "ge\022\022\n\nstorage_id\030\001 \002(\r\022\r\n\005ratio\030\002 \002(\r\022\"\n"
    "\006levels\030\003 \003(\0132\022.ConfigOrder.Level\"Z\n\tPar"
    "ameter\022\r\n\005level\030\001 \002(\r\022\022\n\nrandom_min\030\002 \002("
    "\002\022\022\n\nrandom_max\030\003 \002(\002\022\026\n\016discard_cdtime\030"
    "\004 \002(\r\">\n\tOrderSolt\022\014\n\004solt\030\001 \002(\r\022\021\n\tstor"
    "ageid\030\002 \003(\r\022\020\n\010orderMax\030\003 \002(\r\"\244\001\n\rOrderB"
    "onusCPP\022\017\n\007adbonus\030\001 \002(\r\022\032\n\022ad_bonus_cnt"
    "_daily\030\002 \002(\r\022\024\n\014cost_diamond\030\003 \002(\r\022\037\n\027di"
    "amond_bonus_cnt_daily\030\004 \002(\r\022\031\n\021diamond_b"
    "onus_day\030\005 \002(\r\022\024\n\014diamondbonus\030\006 \002(\r\"\314\001\n"
    "\004Base\022&\n\010storages\030\001 \003(\0132\024.ConfigOrder.St"
    "orage\022*\n\nparameters\030\002 \003(\0132\026.ConfigOrder."
    "Parameter\022\025\n\rdiscard_price\030\003 \002(\r\022)\n\torde"
    "rsolt\030\004 \003(\0132\026.ConfigOrder.OrderSolt\022.\n\no"
    "rderbonus\030\005 \002(\0132\032.ConfigOrder.OrderBonus"
    "CPP", 803);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigOrder.proto", &protobuf_RegisterTypes);
  Order::default_instance_ = new Order();
  Level::default_instance_ = new Level();
  Storage::default_instance_ = new Storage();
  Parameter::default_instance_ = new Parameter();
  OrderSolt::default_instance_ = new OrderSolt();
  OrderBonusCPP::default_instance_ = new OrderBonusCPP();
  Base::default_instance_ = new Base();
  Order::default_instance_->InitAsDefaultInstance();
  Level::default_instance_->InitAsDefaultInstance();
  Storage::default_instance_->InitAsDefaultInstance();
  Parameter::default_instance_->InitAsDefaultInstance();
  OrderSolt::default_instance_->InitAsDefaultInstance();
  OrderBonusCPP::default_instance_->InitAsDefaultInstance();
  Base::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigOrder_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigOrder_2eproto {
  StaticDescriptorInitializer_ConfigOrder_2eproto() {
    protobuf_AddDesc_ConfigOrder_2eproto();
  }
} static_descriptor_initializer_ConfigOrder_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Order::kPropsidFieldNumber;
const int Order::kWeightFieldNumber;
const int Order::kCountFieldNumber;
#endif  // !_MSC_VER

Order::Order()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigOrder.Order)
}

void Order::InitAsDefaultInstance() {
}

Order::Order(const Order& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigOrder.Order)
}

void Order::SharedCtor() {
  _cached_size_ = 0;
  propsid_ = 0u;
  weight_ = 0u;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:ConfigOrder.Order)
  SharedDtor();
}

void Order::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Order_descriptor_;
}

const Order& Order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigOrder_2eproto();
  return *default_instance_;
}

Order* Order::default_instance_ = NULL;

Order* Order::New() const {
  return new Order;
}

void Order::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Order*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(propsid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigOrder.Order)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 propsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // required uint32 weight = 2;
      case 2: {
        if (tag == 16) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigOrder.Order)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigOrder.Order)
  return false;
#undef DO_
}

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigOrder.Order)
  // required uint32 propsid = 1;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  // required int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigOrder.Order)
}

::google::protobuf::uint8* Order::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigOrder.Order)
  // required uint32 propsid = 1;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  // required int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigOrder.Order)
  return target;
}

int Order::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 propsid = 1;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

    // required int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Order* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Order*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Order::Swap(Order* other) {
  if (other != this) {
    std::swap(propsid_, other->propsid_);
    std::swap(weight_, other->weight_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Order_descriptor_;
  metadata.reflection = Order_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Level::kLevelIdFieldNumber;
const int Level::kLevelFieldNumber;
const int Level::kDiscardCdtimeFieldNumber;
const int Level::kOrdersFieldNumber;
#endif  // !_MSC_VER

Level::Level()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigOrder.Level)
}

void Level::InitAsDefaultInstance() {
}

Level::Level(const Level& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigOrder.Level)
}

void Level::SharedCtor() {
  _cached_size_ = 0;
  level_id_ = 0u;
  level_ = 0u;
  discard_cdtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Level::~Level() {
  // @@protoc_insertion_point(destructor:ConfigOrder.Level)
  SharedDtor();
}

void Level::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Level::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Level_descriptor_;
}

const Level& Level::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigOrder_2eproto();
  return *default_instance_;
}

Level* Level::default_instance_ = NULL;

Level* Level::New() const {
  return new Level;
}

void Level::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Level*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(level_id_, level_);
    discard_cdtime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  orders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigOrder.Level)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
          set_has_level_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_discard_cdtime;
        break;
      }

      // required uint32 discard_cdtime = 3;
      case 3: {
        if (tag == 24) {
         parse_discard_cdtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discard_cdtime_)));
          set_has_discard_cdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_orders;
        break;
      }

      // repeated .ConfigOrder.Order orders = 4;
      case 4: {
        if (tag == 34) {
         parse_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_orders;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigOrder.Level)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigOrder.Level)
  return false;
#undef DO_
}

void Level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigOrder.Level)
  // required uint32 level_id = 1;
  if (has_level_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level_id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 discard_cdtime = 3;
  if (has_discard_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->discard_cdtime(), output);
  }

  // repeated .ConfigOrder.Order orders = 4;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->orders(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigOrder.Level)
}

::google::protobuf::uint8* Level::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigOrder.Level)
  // required uint32 level_id = 1;
  if (has_level_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level_id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 discard_cdtime = 3;
  if (has_discard_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->discard_cdtime(), target);
  }

  // repeated .ConfigOrder.Order orders = 4;
  for (int i = 0; i < this->orders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->orders(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigOrder.Level)
  return target;
}

int Level::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level_id = 1;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 discard_cdtime = 3;
    if (has_discard_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discard_cdtime());
    }

  }
  // repeated .ConfigOrder.Order orders = 4;
  total_size += 1 * this->orders_size();
  for (int i = 0; i < this->orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Level::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Level* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Level*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Level::MergeFrom(const Level& from) {
  GOOGLE_CHECK_NE(&from, this);
  orders_.MergeFrom(from.orders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level_id()) {
      set_level_id(from.level_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_discard_cdtime()) {
      set_discard_cdtime(from.discard_cdtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Level::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Level::CopyFrom(const Level& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Level::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->orders())) return false;
  return true;
}

void Level::Swap(Level* other) {
  if (other != this) {
    std::swap(level_id_, other->level_id_);
    std::swap(level_, other->level_);
    std::swap(discard_cdtime_, other->discard_cdtime_);
    orders_.Swap(&other->orders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Level::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Level_descriptor_;
  metadata.reflection = Level_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Storage::kStorageIdFieldNumber;
const int Storage::kRatioFieldNumber;
const int Storage::kLevelsFieldNumber;
#endif  // !_MSC_VER

Storage::Storage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigOrder.Storage)
}

void Storage::InitAsDefaultInstance() {
}

Storage::Storage(const Storage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigOrder.Storage)
}

void Storage::SharedCtor() {
  _cached_size_ = 0;
  storage_id_ = 0u;
  ratio_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Storage::~Storage() {
  // @@protoc_insertion_point(destructor:ConfigOrder.Storage)
  SharedDtor();
}

void Storage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Storage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Storage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Storage_descriptor_;
}

const Storage& Storage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigOrder_2eproto();
  return *default_instance_;
}

Storage* Storage::default_instance_ = NULL;

Storage* Storage::New() const {
  return new Storage;
}

void Storage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Storage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(storage_id_, ratio_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  levels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Storage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigOrder.Storage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 storage_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storage_id_)));
          set_has_storage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ratio;
        break;
      }

      // required uint32 ratio = 2;
      case 2: {
        if (tag == 16) {
         parse_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_levels;
        break;
      }

      // repeated .ConfigOrder.Level levels = 3;
      case 3: {
        if (tag == 26) {
         parse_levels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_levels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigOrder.Storage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigOrder.Storage)
  return false;
#undef DO_
}

void Storage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigOrder.Storage)
  // required uint32 storage_id = 1;
  if (has_storage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->storage_id(), output);
  }

  // required uint32 ratio = 2;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ratio(), output);
  }

  // repeated .ConfigOrder.Level levels = 3;
  for (int i = 0; i < this->levels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->levels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigOrder.Storage)
}

::google::protobuf::uint8* Storage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigOrder.Storage)
  // required uint32 storage_id = 1;
  if (has_storage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->storage_id(), target);
  }

  // required uint32 ratio = 2;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ratio(), target);
  }

  // repeated .ConfigOrder.Level levels = 3;
  for (int i = 0; i < this->levels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->levels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigOrder.Storage)
  return target;
}

int Storage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 storage_id = 1;
    if (has_storage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storage_id());
    }

    // required uint32 ratio = 2;
    if (has_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ratio());
    }

  }
  // repeated .ConfigOrder.Level levels = 3;
  total_size += 1 * this->levels_size();
  for (int i = 0; i < this->levels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Storage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Storage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Storage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Storage::MergeFrom(const Storage& from) {
  GOOGLE_CHECK_NE(&from, this);
  levels_.MergeFrom(from.levels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storage_id()) {
      set_storage_id(from.storage_id());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Storage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Storage::CopyFrom(const Storage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Storage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->levels())) return false;
  return true;
}

void Storage::Swap(Storage* other) {
  if (other != this) {
    std::swap(storage_id_, other->storage_id_);
    std::swap(ratio_, other->ratio_);
    levels_.Swap(&other->levels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Storage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Storage_descriptor_;
  metadata.reflection = Storage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Parameter::kLevelFieldNumber;
const int Parameter::kRandomMinFieldNumber;
const int Parameter::kRandomMaxFieldNumber;
const int Parameter::kDiscardCdtimeFieldNumber;
#endif  // !_MSC_VER

Parameter::Parameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigOrder.Parameter)
}

void Parameter::InitAsDefaultInstance() {
}

Parameter::Parameter(const Parameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigOrder.Parameter)
}

void Parameter::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  random_min_ = 0;
  random_max_ = 0;
  discard_cdtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:ConfigOrder.Parameter)
  SharedDtor();
}

void Parameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parameter_descriptor_;
}

const Parameter& Parameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigOrder_2eproto();
  return *default_instance_;
}

Parameter* Parameter::default_instance_ = NULL;

Parameter* Parameter::New() const {
  return new Parameter;
}

void Parameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Parameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(level_, discard_cdtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigOrder.Parameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_random_min;
        break;
      }

      // required float random_min = 2;
      case 2: {
        if (tag == 21) {
         parse_random_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_min_)));
          set_has_random_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_random_max;
        break;
      }

      // required float random_max = 3;
      case 3: {
        if (tag == 29) {
         parse_random_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_max_)));
          set_has_random_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_discard_cdtime;
        break;
      }

      // required uint32 discard_cdtime = 4;
      case 4: {
        if (tag == 32) {
         parse_discard_cdtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discard_cdtime_)));
          set_has_discard_cdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigOrder.Parameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigOrder.Parameter)
  return false;
#undef DO_
}

void Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigOrder.Parameter)
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required float random_min = 2;
  if (has_random_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->random_min(), output);
  }

  // required float random_max = 3;
  if (has_random_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->random_max(), output);
  }

  // required uint32 discard_cdtime = 4;
  if (has_discard_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->discard_cdtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigOrder.Parameter)
}

::google::protobuf::uint8* Parameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigOrder.Parameter)
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required float random_min = 2;
  if (has_random_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->random_min(), target);
  }

  // required float random_max = 3;
  if (has_random_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->random_max(), target);
  }

  // required uint32 discard_cdtime = 4;
  if (has_discard_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->discard_cdtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigOrder.Parameter)
  return target;
}

int Parameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required float random_min = 2;
    if (has_random_min()) {
      total_size += 1 + 4;
    }

    // required float random_max = 3;
    if (has_random_max()) {
      total_size += 1 + 4;
    }

    // required uint32 discard_cdtime = 4;
    if (has_discard_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discard_cdtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parameter::MergeFrom(const Parameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_random_min()) {
      set_random_min(from.random_min());
    }
    if (from.has_random_max()) {
      set_random_max(from.random_max());
    }
    if (from.has_discard_cdtime()) {
      set_discard_cdtime(from.discard_cdtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter::CopyFrom(const Parameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Parameter::Swap(Parameter* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(random_min_, other->random_min_);
    std::swap(random_max_, other->random_max_);
    std::swap(discard_cdtime_, other->discard_cdtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parameter_descriptor_;
  metadata.reflection = Parameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderSolt::kSoltFieldNumber;
const int OrderSolt::kStorageidFieldNumber;
const int OrderSolt::kOrderMaxFieldNumber;
#endif  // !_MSC_VER

OrderSolt::OrderSolt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigOrder.OrderSolt)
}

void OrderSolt::InitAsDefaultInstance() {
}

OrderSolt::OrderSolt(const OrderSolt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigOrder.OrderSolt)
}

void OrderSolt::SharedCtor() {
  _cached_size_ = 0;
  solt_ = 0u;
  ordermax_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderSolt::~OrderSolt() {
  // @@protoc_insertion_point(destructor:ConfigOrder.OrderSolt)
  SharedDtor();
}

void OrderSolt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderSolt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderSolt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderSolt_descriptor_;
}

const OrderSolt& OrderSolt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigOrder_2eproto();
  return *default_instance_;
}

OrderSolt* OrderSolt::default_instance_ = NULL;

OrderSolt* OrderSolt::New() const {
  return new OrderSolt;
}

void OrderSolt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderSolt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(solt_, ordermax_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  storageid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderSolt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigOrder.OrderSolt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 solt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solt_)));
          set_has_solt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_storageid;
        break;
      }

      // repeated uint32 storageid = 2;
      case 2: {
        if (tag == 16) {
         parse_storageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_storageid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_storageid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_storageid;
        if (input->ExpectTag(24)) goto parse_orderMax;
        break;
      }

      // required uint32 orderMax = 3;
      case 3: {
        if (tag == 24) {
         parse_orderMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordermax_)));
          set_has_ordermax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigOrder.OrderSolt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigOrder.OrderSolt)
  return false;
#undef DO_
}

void OrderSolt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigOrder.OrderSolt)
  // required uint32 solt = 1;
  if (has_solt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->solt(), output);
  }

  // repeated uint32 storageid = 2;
  for (int i = 0; i < this->storageid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->storageid(i), output);
  }

  // required uint32 orderMax = 3;
  if (has_ordermax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ordermax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigOrder.OrderSolt)
}

::google::protobuf::uint8* OrderSolt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigOrder.OrderSolt)
  // required uint32 solt = 1;
  if (has_solt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->solt(), target);
  }

  // repeated uint32 storageid = 2;
  for (int i = 0; i < this->storageid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->storageid(i), target);
  }

  // required uint32 orderMax = 3;
  if (has_ordermax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ordermax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigOrder.OrderSolt)
  return target;
}

int OrderSolt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 solt = 1;
    if (has_solt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solt());
    }

    // required uint32 orderMax = 3;
    if (has_ordermax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordermax());
    }

  }
  // repeated uint32 storageid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->storageid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->storageid(i));
    }
    total_size += 1 * this->storageid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderSolt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderSolt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderSolt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderSolt::MergeFrom(const OrderSolt& from) {
  GOOGLE_CHECK_NE(&from, this);
  storageid_.MergeFrom(from.storageid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_solt()) {
      set_solt(from.solt());
    }
    if (from.has_ordermax()) {
      set_ordermax(from.ordermax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderSolt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderSolt::CopyFrom(const OrderSolt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderSolt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void OrderSolt::Swap(OrderSolt* other) {
  if (other != this) {
    std::swap(solt_, other->solt_);
    storageid_.Swap(&other->storageid_);
    std::swap(ordermax_, other->ordermax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderSolt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderSolt_descriptor_;
  metadata.reflection = OrderSolt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderBonusCPP::kAdbonusFieldNumber;
const int OrderBonusCPP::kAdBonusCntDailyFieldNumber;
const int OrderBonusCPP::kCostDiamondFieldNumber;
const int OrderBonusCPP::kDiamondBonusCntDailyFieldNumber;
const int OrderBonusCPP::kDiamondBonusDayFieldNumber;
const int OrderBonusCPP::kDiamondbonusFieldNumber;
#endif  // !_MSC_VER

OrderBonusCPP::OrderBonusCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigOrder.OrderBonusCPP)
}

void OrderBonusCPP::InitAsDefaultInstance() {
}

OrderBonusCPP::OrderBonusCPP(const OrderBonusCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigOrder.OrderBonusCPP)
}

void OrderBonusCPP::SharedCtor() {
  _cached_size_ = 0;
  adbonus_ = 0u;
  ad_bonus_cnt_daily_ = 0u;
  cost_diamond_ = 0u;
  diamond_bonus_cnt_daily_ = 0u;
  diamond_bonus_day_ = 0u;
  diamondbonus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderBonusCPP::~OrderBonusCPP() {
  // @@protoc_insertion_point(destructor:ConfigOrder.OrderBonusCPP)
  SharedDtor();
}

void OrderBonusCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderBonusCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderBonusCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderBonusCPP_descriptor_;
}

const OrderBonusCPP& OrderBonusCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigOrder_2eproto();
  return *default_instance_;
}

OrderBonusCPP* OrderBonusCPP::default_instance_ = NULL;

OrderBonusCPP* OrderBonusCPP::New() const {
  return new OrderBonusCPP;
}

void OrderBonusCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderBonusCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(adbonus_, diamondbonus_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderBonusCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigOrder.OrderBonusCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 adbonus = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adbonus_)));
          set_has_adbonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ad_bonus_cnt_daily;
        break;
      }

      // required uint32 ad_bonus_cnt_daily = 2;
      case 2: {
        if (tag == 16) {
         parse_ad_bonus_cnt_daily:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_bonus_cnt_daily_)));
          set_has_ad_bonus_cnt_daily();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cost_diamond;
        break;
      }

      // required uint32 cost_diamond = 3;
      case 3: {
        if (tag == 24) {
         parse_cost_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_diamond_)));
          set_has_cost_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_diamond_bonus_cnt_daily;
        break;
      }

      // required uint32 diamond_bonus_cnt_daily = 4;
      case 4: {
        if (tag == 32) {
         parse_diamond_bonus_cnt_daily:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_bonus_cnt_daily_)));
          set_has_diamond_bonus_cnt_daily();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_diamond_bonus_day;
        break;
      }

      // required uint32 diamond_bonus_day = 5;
      case 5: {
        if (tag == 40) {
         parse_diamond_bonus_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_bonus_day_)));
          set_has_diamond_bonus_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_diamondbonus;
        break;
      }

      // required uint32 diamondbonus = 6;
      case 6: {
        if (tag == 48) {
         parse_diamondbonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamondbonus_)));
          set_has_diamondbonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigOrder.OrderBonusCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigOrder.OrderBonusCPP)
  return false;
#undef DO_
}

void OrderBonusCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigOrder.OrderBonusCPP)
  // required uint32 adbonus = 1;
  if (has_adbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adbonus(), output);
  }

  // required uint32 ad_bonus_cnt_daily = 2;
  if (has_ad_bonus_cnt_daily()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ad_bonus_cnt_daily(), output);
  }

  // required uint32 cost_diamond = 3;
  if (has_cost_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost_diamond(), output);
  }

  // required uint32 diamond_bonus_cnt_daily = 4;
  if (has_diamond_bonus_cnt_daily()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->diamond_bonus_cnt_daily(), output);
  }

  // required uint32 diamond_bonus_day = 5;
  if (has_diamond_bonus_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->diamond_bonus_day(), output);
  }

  // required uint32 diamondbonus = 6;
  if (has_diamondbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->diamondbonus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigOrder.OrderBonusCPP)
}

::google::protobuf::uint8* OrderBonusCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigOrder.OrderBonusCPP)
  // required uint32 adbonus = 1;
  if (has_adbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adbonus(), target);
  }

  // required uint32 ad_bonus_cnt_daily = 2;
  if (has_ad_bonus_cnt_daily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ad_bonus_cnt_daily(), target);
  }

  // required uint32 cost_diamond = 3;
  if (has_cost_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost_diamond(), target);
  }

  // required uint32 diamond_bonus_cnt_daily = 4;
  if (has_diamond_bonus_cnt_daily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->diamond_bonus_cnt_daily(), target);
  }

  // required uint32 diamond_bonus_day = 5;
  if (has_diamond_bonus_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->diamond_bonus_day(), target);
  }

  // required uint32 diamondbonus = 6;
  if (has_diamondbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->diamondbonus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigOrder.OrderBonusCPP)
  return target;
}

int OrderBonusCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 adbonus = 1;
    if (has_adbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adbonus());
    }

    // required uint32 ad_bonus_cnt_daily = 2;
    if (has_ad_bonus_cnt_daily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_bonus_cnt_daily());
    }

    // required uint32 cost_diamond = 3;
    if (has_cost_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_diamond());
    }

    // required uint32 diamond_bonus_cnt_daily = 4;
    if (has_diamond_bonus_cnt_daily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond_bonus_cnt_daily());
    }

    // required uint32 diamond_bonus_day = 5;
    if (has_diamond_bonus_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond_bonus_day());
    }

    // required uint32 diamondbonus = 6;
    if (has_diamondbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamondbonus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderBonusCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderBonusCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderBonusCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderBonusCPP::MergeFrom(const OrderBonusCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adbonus()) {
      set_adbonus(from.adbonus());
    }
    if (from.has_ad_bonus_cnt_daily()) {
      set_ad_bonus_cnt_daily(from.ad_bonus_cnt_daily());
    }
    if (from.has_cost_diamond()) {
      set_cost_diamond(from.cost_diamond());
    }
    if (from.has_diamond_bonus_cnt_daily()) {
      set_diamond_bonus_cnt_daily(from.diamond_bonus_cnt_daily());
    }
    if (from.has_diamond_bonus_day()) {
      set_diamond_bonus_day(from.diamond_bonus_day());
    }
    if (from.has_diamondbonus()) {
      set_diamondbonus(from.diamondbonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderBonusCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBonusCPP::CopyFrom(const OrderBonusCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBonusCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void OrderBonusCPP::Swap(OrderBonusCPP* other) {
  if (other != this) {
    std::swap(adbonus_, other->adbonus_);
    std::swap(ad_bonus_cnt_daily_, other->ad_bonus_cnt_daily_);
    std::swap(cost_diamond_, other->cost_diamond_);
    std::swap(diamond_bonus_cnt_daily_, other->diamond_bonus_cnt_daily_);
    std::swap(diamond_bonus_day_, other->diamond_bonus_day_);
    std::swap(diamondbonus_, other->diamondbonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderBonusCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderBonusCPP_descriptor_;
  metadata.reflection = OrderBonusCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Base::kStoragesFieldNumber;
const int Base::kParametersFieldNumber;
const int Base::kDiscardPriceFieldNumber;
const int Base::kOrdersoltFieldNumber;
const int Base::kOrderbonusFieldNumber;
#endif  // !_MSC_VER

Base::Base()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigOrder.Base)
}

void Base::InitAsDefaultInstance() {
  orderbonus_ = const_cast< ::ConfigOrder::OrderBonusCPP*>(&::ConfigOrder::OrderBonusCPP::default_instance());
}

Base::Base(const Base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigOrder.Base)
}

void Base::SharedCtor() {
  _cached_size_ = 0;
  discard_price_ = 0u;
  orderbonus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Base::~Base() {
  // @@protoc_insertion_point(destructor:ConfigOrder.Base)
  SharedDtor();
}

void Base::SharedDtor() {
  if (this != default_instance_) {
    delete orderbonus_;
  }
}

void Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Base_descriptor_;
}

const Base& Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigOrder_2eproto();
  return *default_instance_;
}

Base* Base::default_instance_ = NULL;

Base* Base::New() const {
  return new Base;
}

void Base::Clear() {
  if (_has_bits_[0 / 32] & 20) {
    discard_price_ = 0u;
    if (has_orderbonus()) {
      if (orderbonus_ != NULL) orderbonus_->::ConfigOrder::OrderBonusCPP::Clear();
    }
  }
  storages_.Clear();
  parameters_.Clear();
  ordersolt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigOrder.Base)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigOrder.Storage storages = 1;
      case 1: {
        if (tag == 10) {
         parse_storages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_storages;
        if (input->ExpectTag(18)) goto parse_parameters;
        break;
      }

      // repeated .ConfigOrder.Parameter parameters = 2;
      case 2: {
        if (tag == 18) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parameters;
        if (input->ExpectTag(24)) goto parse_discard_price;
        break;
      }

      // required uint32 discard_price = 3;
      case 3: {
        if (tag == 24) {
         parse_discard_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discard_price_)));
          set_has_discard_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ordersolt;
        break;
      }

      // repeated .ConfigOrder.OrderSolt ordersolt = 4;
      case 4: {
        if (tag == 34) {
         parse_ordersolt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ordersolt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ordersolt;
        if (input->ExpectTag(42)) goto parse_orderbonus;
        break;
      }

      // required .ConfigOrder.OrderBonusCPP orderbonus = 5;
      case 5: {
        if (tag == 42) {
         parse_orderbonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orderbonus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigOrder.Base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigOrder.Base)
  return false;
#undef DO_
}

void Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigOrder.Base)
  // repeated .ConfigOrder.Storage storages = 1;
  for (int i = 0; i < this->storages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->storages(i), output);
  }

  // repeated .ConfigOrder.Parameter parameters = 2;
  for (int i = 0; i < this->parameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->parameters(i), output);
  }

  // required uint32 discard_price = 3;
  if (has_discard_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->discard_price(), output);
  }

  // repeated .ConfigOrder.OrderSolt ordersolt = 4;
  for (int i = 0; i < this->ordersolt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ordersolt(i), output);
  }

  // required .ConfigOrder.OrderBonusCPP orderbonus = 5;
  if (has_orderbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->orderbonus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigOrder.Base)
}

::google::protobuf::uint8* Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigOrder.Base)
  // repeated .ConfigOrder.Storage storages = 1;
  for (int i = 0; i < this->storages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->storages(i), target);
  }

  // repeated .ConfigOrder.Parameter parameters = 2;
  for (int i = 0; i < this->parameters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->parameters(i), target);
  }

  // required uint32 discard_price = 3;
  if (has_discard_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->discard_price(), target);
  }

  // repeated .ConfigOrder.OrderSolt ordersolt = 4;
  for (int i = 0; i < this->ordersolt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ordersolt(i), target);
  }

  // required .ConfigOrder.OrderBonusCPP orderbonus = 5;
  if (has_orderbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->orderbonus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigOrder.Base)
  return target;
}

int Base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 discard_price = 3;
    if (has_discard_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discard_price());
    }

    // required .ConfigOrder.OrderBonusCPP orderbonus = 5;
    if (has_orderbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orderbonus());
    }

  }
  // repeated .ConfigOrder.Storage storages = 1;
  total_size += 1 * this->storages_size();
  for (int i = 0; i < this->storages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storages(i));
  }

  // repeated .ConfigOrder.Parameter parameters = 2;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameters(i));
  }

  // repeated .ConfigOrder.OrderSolt ordersolt = 4;
  total_size += 1 * this->ordersolt_size();
  for (int i = 0; i < this->ordersolt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ordersolt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Base::MergeFrom(const Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  storages_.MergeFrom(from.storages_);
  parameters_.MergeFrom(from.parameters_);
  ordersolt_.MergeFrom(from.ordersolt_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_discard_price()) {
      set_discard_price(from.discard_price());
    }
    if (from.has_orderbonus()) {
      mutable_orderbonus()->::ConfigOrder::OrderBonusCPP::MergeFrom(from.orderbonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Base::CopyFrom(const Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000014) != 0x00000014) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->storages())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->parameters())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ordersolt())) return false;
  if (has_orderbonus()) {
    if (!this->orderbonus().IsInitialized()) return false;
  }
  return true;
}

void Base::Swap(Base* other) {
  if (other != this) {
    storages_.Swap(&other->storages_);
    parameters_.Swap(&other->parameters_);
    std::swap(discard_price_, other->discard_price_);
    ordersolt_.Swap(&other->ordersolt_);
    std::swap(orderbonus_, other->orderbonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Base_descriptor_;
  metadata.reflection = Base_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigOrder

// @@protoc_insertion_point(global_scope)
