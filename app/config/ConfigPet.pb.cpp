// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigPet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigPet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigPet {

namespace {

const ::google::protobuf::Descriptor* PetResidenceCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetResidenceCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetRewardCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetRewardCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetGardenCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetGardenCfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigPet_2eproto() {
  protobuf_AddDesc_ConfigPet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigPet.proto");
  GOOGLE_CHECK(file != NULL);
  PetResidenceCPP_descriptor_ = file->message_type(0);
  static const int PetResidenceCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetResidenceCPP, unlock_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetResidenceCPP, unlock_cost_),
  };
  PetResidenceCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetResidenceCPP_descriptor_,
      PetResidenceCPP::default_instance_,
      PetResidenceCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetResidenceCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetResidenceCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetResidenceCPP));
  PetCPP_descriptor_ = file->message_type(1);
  static const int PetCPP_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCPP, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCPP, unlock_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCPP, normal_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCPP, feed_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCPP, tease_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCPP, tease_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCPP, unlock_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCPP, comment_),
  };
  PetCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetCPP_descriptor_,
      PetCPP::default_instance_,
      PetCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetCPP));
  PetRewardCPP_descriptor_ = file->message_type(2);
  static const int PetRewardCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRewardCPP, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRewardCPP, reward_),
  };
  PetRewardCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetRewardCPP_descriptor_,
      PetRewardCPP::default_instance_,
      PetRewardCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRewardCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetRewardCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetRewardCPP));
  PetGardenCfg_descriptor_ = file->message_type(3);
  static const int PetGardenCfg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetGardenCfg, pet_residence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetGardenCfg, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetGardenCfg, pet_feed_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetGardenCfg, pet_tease_reward_),
  };
  PetGardenCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetGardenCfg_descriptor_,
      PetGardenCfg::default_instance_,
      PetGardenCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetGardenCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetGardenCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetGardenCfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigPet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetResidenceCPP_descriptor_, &PetResidenceCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetCPP_descriptor_, &PetCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetRewardCPP_descriptor_, &PetRewardCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetGardenCfg_descriptor_, &PetGardenCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigPet_2eproto() {
  delete PetResidenceCPP::default_instance_;
  delete PetResidenceCPP_reflection_;
  delete PetCPP::default_instance_;
  delete PetCPP_reflection_;
  delete PetRewardCPP::default_instance_;
  delete PetRewardCPP_reflection_;
  delete PetGardenCfg::default_instance_;
  delete PetGardenCfg_reflection_;
}

void protobuf_AddDesc_ConfigPet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ConfigPet.proto\022\tConfigPet\032\026CommonGift"
    "Config.proto\"`\n\017PetResidenceCPP\022\024\n\014unloc"
    "k_level\030\001 \002(\r\0227\n\013unlock_cost\030\002 \002(\0132\".Com"
    "monGiftConfig.CommonModifyItem\"\213\002\n\006PetCP"
    "P\022\r\n\005petid\030\001 \002(\r\022\024\n\014unlock_level\030\002 \002(\r\022\021"
    "\n\tnormal_cd\030\003 \002(\r\0225\n\tfeed_cost\030\004 \002(\0132\".C"
    "ommonGiftConfig.CommonModifyItem\022\020\n\010teas"
    "e_cd\030\005 \002(\r\0226\n\ntease_cost\030\006 \002(\0132\".CommonG"
    "iftConfig.CommonModifyItem\0227\n\013unlock_cos"
    "t\030\007 \002(\0132\".CommonGiftConfig.CommonModifyI"
    "tem\022\017\n\007comment\030\010 \002(\014\"R\n\014PetRewardCPP\022\016\n\006"
    "weight\030\001 \002(\r\0222\n\006reward\030\002 \001(\0132\".CommonGif"
    "tConfig.CommonModifyItem\"\306\001\n\014PetGardenCf"
    "g\0221\n\rpet_residence\030\001 \002(\0132\032.ConfigPet.Pet"
    "ResidenceCPP\022\036\n\003pet\030\002 \003(\0132\021.ConfigPet.Pe"
    "tCPP\0220\n\017pet_feed_reward\030\003 \003(\0132\027.ConfigPe"
    "t.PetRewardCPP\0221\n\020pet_tease_reward\030\004 \003(\013"
    "2\027.ConfigPet.PetRewardCPP", 705);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigPet.proto", &protobuf_RegisterTypes);
  PetResidenceCPP::default_instance_ = new PetResidenceCPP();
  PetCPP::default_instance_ = new PetCPP();
  PetRewardCPP::default_instance_ = new PetRewardCPP();
  PetGardenCfg::default_instance_ = new PetGardenCfg();
  PetResidenceCPP::default_instance_->InitAsDefaultInstance();
  PetCPP::default_instance_->InitAsDefaultInstance();
  PetRewardCPP::default_instance_->InitAsDefaultInstance();
  PetGardenCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigPet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigPet_2eproto {
  StaticDescriptorInitializer_ConfigPet_2eproto() {
    protobuf_AddDesc_ConfigPet_2eproto();
  }
} static_descriptor_initializer_ConfigPet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PetResidenceCPP::kUnlockLevelFieldNumber;
const int PetResidenceCPP::kUnlockCostFieldNumber;
#endif  // !_MSC_VER

PetResidenceCPP::PetResidenceCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigPet.PetResidenceCPP)
}

void PetResidenceCPP::InitAsDefaultInstance() {
  unlock_cost_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

PetResidenceCPP::PetResidenceCPP(const PetResidenceCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigPet.PetResidenceCPP)
}

void PetResidenceCPP::SharedCtor() {
  _cached_size_ = 0;
  unlock_level_ = 0u;
  unlock_cost_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetResidenceCPP::~PetResidenceCPP() {
  // @@protoc_insertion_point(destructor:ConfigPet.PetResidenceCPP)
  SharedDtor();
}

void PetResidenceCPP::SharedDtor() {
  if (this != default_instance_) {
    delete unlock_cost_;
  }
}

void PetResidenceCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetResidenceCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetResidenceCPP_descriptor_;
}

const PetResidenceCPP& PetResidenceCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigPet_2eproto();
  return *default_instance_;
}

PetResidenceCPP* PetResidenceCPP::default_instance_ = NULL;

PetResidenceCPP* PetResidenceCPP::New() const {
  return new PetResidenceCPP;
}

void PetResidenceCPP::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    unlock_level_ = 0u;
    if (has_unlock_cost()) {
      if (unlock_cost_ != NULL) unlock_cost_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetResidenceCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigPet.PetResidenceCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 unlock_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_level_)));
          set_has_unlock_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_unlock_cost;
        break;
      }

      // required .CommonGiftConfig.CommonModifyItem unlock_cost = 2;
      case 2: {
        if (tag == 18) {
         parse_unlock_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlock_cost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigPet.PetResidenceCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigPet.PetResidenceCPP)
  return false;
#undef DO_
}

void PetResidenceCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigPet.PetResidenceCPP)
  // required uint32 unlock_level = 1;
  if (has_unlock_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unlock_level(), output);
  }

  // required .CommonGiftConfig.CommonModifyItem unlock_cost = 2;
  if (has_unlock_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unlock_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigPet.PetResidenceCPP)
}

::google::protobuf::uint8* PetResidenceCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigPet.PetResidenceCPP)
  // required uint32 unlock_level = 1;
  if (has_unlock_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unlock_level(), target);
  }

  // required .CommonGiftConfig.CommonModifyItem unlock_cost = 2;
  if (has_unlock_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unlock_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigPet.PetResidenceCPP)
  return target;
}

int PetResidenceCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 unlock_level = 1;
    if (has_unlock_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlock_level());
    }

    // required .CommonGiftConfig.CommonModifyItem unlock_cost = 2;
    if (has_unlock_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlock_cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetResidenceCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetResidenceCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetResidenceCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetResidenceCPP::MergeFrom(const PetResidenceCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unlock_level()) {
      set_unlock_level(from.unlock_level());
    }
    if (from.has_unlock_cost()) {
      mutable_unlock_cost()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.unlock_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetResidenceCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetResidenceCPP::CopyFrom(const PetResidenceCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetResidenceCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_unlock_cost()) {
    if (!this->unlock_cost().IsInitialized()) return false;
  }
  return true;
}

void PetResidenceCPP::Swap(PetResidenceCPP* other) {
  if (other != this) {
    std::swap(unlock_level_, other->unlock_level_);
    std::swap(unlock_cost_, other->unlock_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetResidenceCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetResidenceCPP_descriptor_;
  metadata.reflection = PetResidenceCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetCPP::kPetidFieldNumber;
const int PetCPP::kUnlockLevelFieldNumber;
const int PetCPP::kNormalCdFieldNumber;
const int PetCPP::kFeedCostFieldNumber;
const int PetCPP::kTeaseCdFieldNumber;
const int PetCPP::kTeaseCostFieldNumber;
const int PetCPP::kUnlockCostFieldNumber;
const int PetCPP::kCommentFieldNumber;
#endif  // !_MSC_VER

PetCPP::PetCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigPet.PetCPP)
}

void PetCPP::InitAsDefaultInstance() {
  feed_cost_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
  tease_cost_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
  unlock_cost_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

PetCPP::PetCPP(const PetCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigPet.PetCPP)
}

void PetCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  petid_ = 0u;
  unlock_level_ = 0u;
  normal_cd_ = 0u;
  feed_cost_ = NULL;
  tease_cd_ = 0u;
  tease_cost_ = NULL;
  unlock_cost_ = NULL;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetCPP::~PetCPP() {
  // @@protoc_insertion_point(destructor:ConfigPet.PetCPP)
  SharedDtor();
}

void PetCPP::SharedDtor() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (this != default_instance_) {
    delete feed_cost_;
    delete tease_cost_;
    delete unlock_cost_;
  }
}

void PetCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetCPP_descriptor_;
}

const PetCPP& PetCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigPet_2eproto();
  return *default_instance_;
}

PetCPP* PetCPP::default_instance_ = NULL;

PetCPP* PetCPP::New() const {
  return new PetCPP;
}

void PetCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PetCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(petid_, unlock_level_);
    ZR_(normal_cd_, tease_cd_);
    if (has_feed_cost()) {
      if (feed_cost_ != NULL) feed_cost_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
    if (has_tease_cost()) {
      if (tease_cost_ != NULL) tease_cost_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
    if (has_unlock_cost()) {
      if (unlock_cost_ != NULL) unlock_cost_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigPet.PetCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unlock_level;
        break;
      }

      // required uint32 unlock_level = 2;
      case 2: {
        if (tag == 16) {
         parse_unlock_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_level_)));
          set_has_unlock_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_normal_cd;
        break;
      }

      // required uint32 normal_cd = 3;
      case 3: {
        if (tag == 24) {
         parse_normal_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_cd_)));
          set_has_normal_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_feed_cost;
        break;
      }

      // required .CommonGiftConfig.CommonModifyItem feed_cost = 4;
      case 4: {
        if (tag == 34) {
         parse_feed_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feed_cost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tease_cd;
        break;
      }

      // required uint32 tease_cd = 5;
      case 5: {
        if (tag == 40) {
         parse_tease_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tease_cd_)));
          set_has_tease_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tease_cost;
        break;
      }

      // required .CommonGiftConfig.CommonModifyItem tease_cost = 6;
      case 6: {
        if (tag == 50) {
         parse_tease_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tease_cost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_unlock_cost;
        break;
      }

      // required .CommonGiftConfig.CommonModifyItem unlock_cost = 7;
      case 7: {
        if (tag == 58) {
         parse_unlock_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlock_cost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_comment;
        break;
      }

      // required bytes comment = 8;
      case 8: {
        if (tag == 66) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_comment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigPet.PetCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigPet.PetCPP)
  return false;
#undef DO_
}

void PetCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigPet.PetCPP)
  // required uint32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->petid(), output);
  }

  // required uint32 unlock_level = 2;
  if (has_unlock_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unlock_level(), output);
  }

  // required uint32 normal_cd = 3;
  if (has_normal_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->normal_cd(), output);
  }

  // required .CommonGiftConfig.CommonModifyItem feed_cost = 4;
  if (has_feed_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->feed_cost(), output);
  }

  // required uint32 tease_cd = 5;
  if (has_tease_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tease_cd(), output);
  }

  // required .CommonGiftConfig.CommonModifyItem tease_cost = 6;
  if (has_tease_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tease_cost(), output);
  }

  // required .CommonGiftConfig.CommonModifyItem unlock_cost = 7;
  if (has_unlock_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->unlock_cost(), output);
  }

  // required bytes comment = 8;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigPet.PetCPP)
}

::google::protobuf::uint8* PetCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigPet.PetCPP)
  // required uint32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->petid(), target);
  }

  // required uint32 unlock_level = 2;
  if (has_unlock_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unlock_level(), target);
  }

  // required uint32 normal_cd = 3;
  if (has_normal_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->normal_cd(), target);
  }

  // required .CommonGiftConfig.CommonModifyItem feed_cost = 4;
  if (has_feed_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->feed_cost(), target);
  }

  // required uint32 tease_cd = 5;
  if (has_tease_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tease_cd(), target);
  }

  // required .CommonGiftConfig.CommonModifyItem tease_cost = 6;
  if (has_tease_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tease_cost(), target);
  }

  // required .CommonGiftConfig.CommonModifyItem unlock_cost = 7;
  if (has_unlock_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->unlock_cost(), target);
  }

  // required bytes comment = 8;
  if (has_comment()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigPet.PetCPP)
  return target;
}

int PetCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // required uint32 unlock_level = 2;
    if (has_unlock_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlock_level());
    }

    // required uint32 normal_cd = 3;
    if (has_normal_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_cd());
    }

    // required .CommonGiftConfig.CommonModifyItem feed_cost = 4;
    if (has_feed_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feed_cost());
    }

    // required uint32 tease_cd = 5;
    if (has_tease_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tease_cd());
    }

    // required .CommonGiftConfig.CommonModifyItem tease_cost = 6;
    if (has_tease_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tease_cost());
    }

    // required .CommonGiftConfig.CommonModifyItem unlock_cost = 7;
    if (has_unlock_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlock_cost());
    }

    // required bytes comment = 8;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetCPP::MergeFrom(const PetCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_unlock_level()) {
      set_unlock_level(from.unlock_level());
    }
    if (from.has_normal_cd()) {
      set_normal_cd(from.normal_cd());
    }
    if (from.has_feed_cost()) {
      mutable_feed_cost()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.feed_cost());
    }
    if (from.has_tease_cd()) {
      set_tease_cd(from.tease_cd());
    }
    if (from.has_tease_cost()) {
      mutable_tease_cost()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.tease_cost());
    }
    if (from.has_unlock_cost()) {
      mutable_unlock_cost()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.unlock_cost());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetCPP::CopyFrom(const PetCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_feed_cost()) {
    if (!this->feed_cost().IsInitialized()) return false;
  }
  if (has_tease_cost()) {
    if (!this->tease_cost().IsInitialized()) return false;
  }
  if (has_unlock_cost()) {
    if (!this->unlock_cost().IsInitialized()) return false;
  }
  return true;
}

void PetCPP::Swap(PetCPP* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(unlock_level_, other->unlock_level_);
    std::swap(normal_cd_, other->normal_cd_);
    std::swap(feed_cost_, other->feed_cost_);
    std::swap(tease_cd_, other->tease_cd_);
    std::swap(tease_cost_, other->tease_cost_);
    std::swap(unlock_cost_, other->unlock_cost_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetCPP_descriptor_;
  metadata.reflection = PetCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetRewardCPP::kWeightFieldNumber;
const int PetRewardCPP::kRewardFieldNumber;
#endif  // !_MSC_VER

PetRewardCPP::PetRewardCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigPet.PetRewardCPP)
}

void PetRewardCPP::InitAsDefaultInstance() {
  reward_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

PetRewardCPP::PetRewardCPP(const PetRewardCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigPet.PetRewardCPP)
}

void PetRewardCPP::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetRewardCPP::~PetRewardCPP() {
  // @@protoc_insertion_point(destructor:ConfigPet.PetRewardCPP)
  SharedDtor();
}

void PetRewardCPP::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void PetRewardCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetRewardCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetRewardCPP_descriptor_;
}

const PetRewardCPP& PetRewardCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigPet_2eproto();
  return *default_instance_;
}

PetRewardCPP* PetRewardCPP::default_instance_ = NULL;

PetRewardCPP* PetRewardCPP::New() const {
  return new PetRewardCPP;
}

void PetRewardCPP::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    weight_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetRewardCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigPet.PetRewardCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 weight = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // optional .CommonGiftConfig.CommonModifyItem reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigPet.PetRewardCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigPet.PetRewardCPP)
  return false;
#undef DO_
}

void PetRewardCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigPet.PetRewardCPP)
  // required uint32 weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->weight(), output);
  }

  // optional .CommonGiftConfig.CommonModifyItem reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigPet.PetRewardCPP)
}

::google::protobuf::uint8* PetRewardCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigPet.PetRewardCPP)
  // required uint32 weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->weight(), target);
  }

  // optional .CommonGiftConfig.CommonModifyItem reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigPet.PetRewardCPP)
  return target;
}

int PetRewardCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 weight = 1;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

    // optional .CommonGiftConfig.CommonModifyItem reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetRewardCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetRewardCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetRewardCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetRewardCPP::MergeFrom(const PetRewardCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_reward()) {
      mutable_reward()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetRewardCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetRewardCPP::CopyFrom(const PetRewardCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetRewardCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void PetRewardCPP::Swap(PetRewardCPP* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetRewardCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetRewardCPP_descriptor_;
  metadata.reflection = PetRewardCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetGardenCfg::kPetResidenceFieldNumber;
const int PetGardenCfg::kPetFieldNumber;
const int PetGardenCfg::kPetFeedRewardFieldNumber;
const int PetGardenCfg::kPetTeaseRewardFieldNumber;
#endif  // !_MSC_VER

PetGardenCfg::PetGardenCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigPet.PetGardenCfg)
}

void PetGardenCfg::InitAsDefaultInstance() {
  pet_residence_ = const_cast< ::ConfigPet::PetResidenceCPP*>(&::ConfigPet::PetResidenceCPP::default_instance());
}

PetGardenCfg::PetGardenCfg(const PetGardenCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigPet.PetGardenCfg)
}

void PetGardenCfg::SharedCtor() {
  _cached_size_ = 0;
  pet_residence_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetGardenCfg::~PetGardenCfg() {
  // @@protoc_insertion_point(destructor:ConfigPet.PetGardenCfg)
  SharedDtor();
}

void PetGardenCfg::SharedDtor() {
  if (this != default_instance_) {
    delete pet_residence_;
  }
}

void PetGardenCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetGardenCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetGardenCfg_descriptor_;
}

const PetGardenCfg& PetGardenCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigPet_2eproto();
  return *default_instance_;
}

PetGardenCfg* PetGardenCfg::default_instance_ = NULL;

PetGardenCfg* PetGardenCfg::New() const {
  return new PetGardenCfg;
}

void PetGardenCfg::Clear() {
  if (has_pet_residence()) {
    if (pet_residence_ != NULL) pet_residence_->::ConfigPet::PetResidenceCPP::Clear();
  }
  pet_.Clear();
  pet_feed_reward_.Clear();
  pet_tease_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetGardenCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigPet.PetGardenCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConfigPet.PetResidenceCPP pet_residence = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_residence()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pet;
        break;
      }

      // repeated .ConfigPet.PetCPP pet = 2;
      case 2: {
        if (tag == 18) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pet;
        if (input->ExpectTag(26)) goto parse_pet_feed_reward;
        break;
      }

      // repeated .ConfigPet.PetRewardCPP pet_feed_reward = 3;
      case 3: {
        if (tag == 26) {
         parse_pet_feed_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_feed_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pet_feed_reward;
        if (input->ExpectTag(34)) goto parse_pet_tease_reward;
        break;
      }

      // repeated .ConfigPet.PetRewardCPP pet_tease_reward = 4;
      case 4: {
        if (tag == 34) {
         parse_pet_tease_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_tease_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pet_tease_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigPet.PetGardenCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigPet.PetGardenCfg)
  return false;
#undef DO_
}

void PetGardenCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigPet.PetGardenCfg)
  // required .ConfigPet.PetResidenceCPP pet_residence = 1;
  if (has_pet_residence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pet_residence(), output);
  }

  // repeated .ConfigPet.PetCPP pet = 2;
  for (int i = 0; i < this->pet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pet(i), output);
  }

  // repeated .ConfigPet.PetRewardCPP pet_feed_reward = 3;
  for (int i = 0; i < this->pet_feed_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pet_feed_reward(i), output);
  }

  // repeated .ConfigPet.PetRewardCPP pet_tease_reward = 4;
  for (int i = 0; i < this->pet_tease_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pet_tease_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigPet.PetGardenCfg)
}

::google::protobuf::uint8* PetGardenCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigPet.PetGardenCfg)
  // required .ConfigPet.PetResidenceCPP pet_residence = 1;
  if (has_pet_residence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pet_residence(), target);
  }

  // repeated .ConfigPet.PetCPP pet = 2;
  for (int i = 0; i < this->pet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pet(i), target);
  }

  // repeated .ConfigPet.PetRewardCPP pet_feed_reward = 3;
  for (int i = 0; i < this->pet_feed_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pet_feed_reward(i), target);
  }

  // repeated .ConfigPet.PetRewardCPP pet_tease_reward = 4;
  for (int i = 0; i < this->pet_tease_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pet_tease_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigPet.PetGardenCfg)
  return target;
}

int PetGardenCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConfigPet.PetResidenceCPP pet_residence = 1;
    if (has_pet_residence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_residence());
    }

  }
  // repeated .ConfigPet.PetCPP pet = 2;
  total_size += 1 * this->pet_size();
  for (int i = 0; i < this->pet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet(i));
  }

  // repeated .ConfigPet.PetRewardCPP pet_feed_reward = 3;
  total_size += 1 * this->pet_feed_reward_size();
  for (int i = 0; i < this->pet_feed_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_feed_reward(i));
  }

  // repeated .ConfigPet.PetRewardCPP pet_tease_reward = 4;
  total_size += 1 * this->pet_tease_reward_size();
  for (int i = 0; i < this->pet_tease_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_tease_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetGardenCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetGardenCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetGardenCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetGardenCfg::MergeFrom(const PetGardenCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  pet_.MergeFrom(from.pet_);
  pet_feed_reward_.MergeFrom(from.pet_feed_reward_);
  pet_tease_reward_.MergeFrom(from.pet_tease_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet_residence()) {
      mutable_pet_residence()->::ConfigPet::PetResidenceCPP::MergeFrom(from.pet_residence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetGardenCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetGardenCfg::CopyFrom(const PetGardenCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetGardenCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pet_residence()) {
    if (!this->pet_residence().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->pet())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pet_feed_reward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pet_tease_reward())) return false;
  return true;
}

void PetGardenCfg::Swap(PetGardenCfg* other) {
  if (other != this) {
    std::swap(pet_residence_, other->pet_residence_);
    pet_.Swap(&other->pet_);
    pet_feed_reward_.Swap(&other->pet_feed_reward_);
    pet_tease_reward_.Swap(&other->pet_tease_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetGardenCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetGardenCfg_descriptor_;
  metadata.reflection = PetGardenCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigPet

// @@protoc_insertion_point(global_scope)
