// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigRandomBox.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigRandomBox.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigRandomBox {

namespace {

const ::google::protobuf::Descriptor* FreeRandomBoxCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreeRandomBoxCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeRandomBoxCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeRandomBoxCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomBoxTypeCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomBoxTypeCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomBoxCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomBoxCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomBoxInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomBoxInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigRandomBox_2eproto() {
  protobuf_AddDesc_ConfigRandomBox_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigRandomBox.proto");
  GOOGLE_CHECK(file != NULL);
  FreeRandomBoxCPP_descriptor_ = file->message_type(0);
  static const int FreeRandomBoxCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeRandomBoxCPP, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeRandomBoxCPP, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeRandomBoxCPP, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeRandomBoxCPP, weight_),
  };
  FreeRandomBoxCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreeRandomBoxCPP_descriptor_,
      FreeRandomBoxCPP::default_instance_,
      FreeRandomBoxCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeRandomBoxCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeRandomBoxCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreeRandomBoxCPP));
  ChargeRandomBoxCPP_descriptor_ = file->message_type(1);
  static const int ChargeRandomBoxCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeRandomBoxCPP, giftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeRandomBoxCPP, gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeRandomBoxCPP, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeRandomBoxCPP, unlocklevel_),
  };
  ChargeRandomBoxCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeRandomBoxCPP_descriptor_,
      ChargeRandomBoxCPP::default_instance_,
      ChargeRandomBoxCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeRandomBoxCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeRandomBoxCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeRandomBoxCPP));
  RandomBoxTypeCPP_descriptor_ = file->message_type(2);
  static const int RandomBoxTypeCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxTypeCPP, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxTypeCPP, weight_),
  };
  RandomBoxTypeCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomBoxTypeCPP_descriptor_,
      RandomBoxTypeCPP::default_instance_,
      RandomBoxTypeCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxTypeCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxTypeCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomBoxTypeCPP));
  RandomBoxCPP_descriptor_ = file->message_type(3);
  static const int RandomBoxCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxCPP, cdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxCPP, freeboxcoinbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxCPP, giftboxdiscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxCPP, giftdimaonddiscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxCPP, boxtype_),
  };
  RandomBoxCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomBoxCPP_descriptor_,
      RandomBoxCPP::default_instance_,
      RandomBoxCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomBoxCPP));
  RandomBoxInfo_descriptor_ = file->message_type(4);
  static const int RandomBoxInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxInfo, randombox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxInfo, freeboxgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxInfo, chargeboxgift_),
  };
  RandomBoxInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomBoxInfo_descriptor_,
      RandomBoxInfo::default_instance_,
      RandomBoxInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBoxInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomBoxInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigRandomBox_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreeRandomBoxCPP_descriptor_, &FreeRandomBoxCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeRandomBoxCPP_descriptor_, &ChargeRandomBoxCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomBoxTypeCPP_descriptor_, &RandomBoxTypeCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomBoxCPP_descriptor_, &RandomBoxCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomBoxInfo_descriptor_, &RandomBoxInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigRandomBox_2eproto() {
  delete FreeRandomBoxCPP::default_instance_;
  delete FreeRandomBoxCPP_reflection_;
  delete ChargeRandomBoxCPP::default_instance_;
  delete ChargeRandomBoxCPP_reflection_;
  delete RandomBoxTypeCPP::default_instance_;
  delete RandomBoxTypeCPP_reflection_;
  delete RandomBoxCPP::default_instance_;
  delete RandomBoxCPP_reflection_;
  delete RandomBoxInfo::default_instance_;
  delete RandomBoxInfo_reflection_;
}

void protobuf_AddDesc_ConfigRandomBox_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ConfigRandomBox.proto\022\017ConfigRandomBox"
    "\032\026CommonGiftConfig.proto\"O\n\020FreeRandomBo"
    "xCPP\022\014\n\004type\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\022\016\n\006ite"
    "mid\030\003 \001(\r\022\016\n\006weight\030\004 \002(\r\"{\n\022ChargeRando"
    "mBoxCPP\022\016\n\006giftid\030\001 \002(\r\0220\n\004gift\030\002 \002(\0132\"."
    "CommonGiftConfig.CommonModifyItem\022\016\n\006wei"
    "ght\030\003 \002(\r\022\023\n\013unlocklevel\030\004 \001(\r\"0\n\020Random"
    "BoxTypeCPP\022\014\n\004type\030\001 \002(\r\022\016\n\006weight\030\002 \002(\r"
    "\"\241\001\n\014RandomBoxCPP\022\016\n\006cdtime\030\001 \002(\r\022\027\n\017fre"
    "eboxcoinbase\030\002 \003(\r\022\027\n\017giftboxdiscount\030\003 "
    "\002(\r\022\033\n\023giftdimaonddiscount\030\004 \002(\r\0222\n\007boxt"
    "ype\030\005 \003(\0132!.ConfigRandomBox.RandomBoxTyp"
    "eCPP\"\265\001\n\rRandomBoxInfo\0220\n\trandombox\030\001 \002("
    "\0132\035.ConfigRandomBox.RandomBoxCPP\0226\n\013free"
    "boxgift\030\002 \003(\0132!.ConfigRandomBox.FreeRand"
    "omBoxCPP\022:\n\rchargeboxgift\030\003 \003(\0132#.Config"
    "RandomBox.ChargeRandomBoxCPP", 668);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigRandomBox.proto", &protobuf_RegisterTypes);
  FreeRandomBoxCPP::default_instance_ = new FreeRandomBoxCPP();
  ChargeRandomBoxCPP::default_instance_ = new ChargeRandomBoxCPP();
  RandomBoxTypeCPP::default_instance_ = new RandomBoxTypeCPP();
  RandomBoxCPP::default_instance_ = new RandomBoxCPP();
  RandomBoxInfo::default_instance_ = new RandomBoxInfo();
  FreeRandomBoxCPP::default_instance_->InitAsDefaultInstance();
  ChargeRandomBoxCPP::default_instance_->InitAsDefaultInstance();
  RandomBoxTypeCPP::default_instance_->InitAsDefaultInstance();
  RandomBoxCPP::default_instance_->InitAsDefaultInstance();
  RandomBoxInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigRandomBox_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigRandomBox_2eproto {
  StaticDescriptorInitializer_ConfigRandomBox_2eproto() {
    protobuf_AddDesc_ConfigRandomBox_2eproto();
  }
} static_descriptor_initializer_ConfigRandomBox_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FreeRandomBoxCPP::kTypeFieldNumber;
const int FreeRandomBoxCPP::kValueFieldNumber;
const int FreeRandomBoxCPP::kItemidFieldNumber;
const int FreeRandomBoxCPP::kWeightFieldNumber;
#endif  // !_MSC_VER

FreeRandomBoxCPP::FreeRandomBoxCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigRandomBox.FreeRandomBoxCPP)
}

void FreeRandomBoxCPP::InitAsDefaultInstance() {
}

FreeRandomBoxCPP::FreeRandomBoxCPP(const FreeRandomBoxCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigRandomBox.FreeRandomBoxCPP)
}

void FreeRandomBoxCPP::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = 0u;
  itemid_ = 0u;
  weight_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreeRandomBoxCPP::~FreeRandomBoxCPP() {
  // @@protoc_insertion_point(destructor:ConfigRandomBox.FreeRandomBoxCPP)
  SharedDtor();
}

void FreeRandomBoxCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreeRandomBoxCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreeRandomBoxCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreeRandomBoxCPP_descriptor_;
}

const FreeRandomBoxCPP& FreeRandomBoxCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigRandomBox_2eproto();
  return *default_instance_;
}

FreeRandomBoxCPP* FreeRandomBoxCPP::default_instance_ = NULL;

FreeRandomBoxCPP* FreeRandomBoxCPP::New() const {
  return new FreeRandomBoxCPP;
}

void FreeRandomBoxCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FreeRandomBoxCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, weight_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreeRandomBoxCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigRandomBox.FreeRandomBoxCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 3;
      case 3: {
        if (tag == 24) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_weight;
        break;
      }

      // required uint32 weight = 4;
      case 4: {
        if (tag == 32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigRandomBox.FreeRandomBoxCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigRandomBox.FreeRandomBoxCPP)
  return false;
#undef DO_
}

void FreeRandomBoxCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigRandomBox.FreeRandomBoxCPP)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional uint32 itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // required uint32 weight = 4;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigRandomBox.FreeRandomBoxCPP)
}

::google::protobuf::uint8* FreeRandomBoxCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigRandomBox.FreeRandomBoxCPP)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional uint32 itemid = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // required uint32 weight = 4;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigRandomBox.FreeRandomBoxCPP)
  return target;
}

int FreeRandomBoxCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 weight = 4;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreeRandomBoxCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreeRandomBoxCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreeRandomBoxCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreeRandomBoxCPP::MergeFrom(const FreeRandomBoxCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreeRandomBoxCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeRandomBoxCPP::CopyFrom(const FreeRandomBoxCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeRandomBoxCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void FreeRandomBoxCPP::Swap(FreeRandomBoxCPP* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(itemid_, other->itemid_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreeRandomBoxCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreeRandomBoxCPP_descriptor_;
  metadata.reflection = FreeRandomBoxCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeRandomBoxCPP::kGiftidFieldNumber;
const int ChargeRandomBoxCPP::kGiftFieldNumber;
const int ChargeRandomBoxCPP::kWeightFieldNumber;
const int ChargeRandomBoxCPP::kUnlocklevelFieldNumber;
#endif  // !_MSC_VER

ChargeRandomBoxCPP::ChargeRandomBoxCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigRandomBox.ChargeRandomBoxCPP)
}

void ChargeRandomBoxCPP::InitAsDefaultInstance() {
  gift_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

ChargeRandomBoxCPP::ChargeRandomBoxCPP(const ChargeRandomBoxCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigRandomBox.ChargeRandomBoxCPP)
}

void ChargeRandomBoxCPP::SharedCtor() {
  _cached_size_ = 0;
  giftid_ = 0u;
  gift_ = NULL;
  weight_ = 0u;
  unlocklevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeRandomBoxCPP::~ChargeRandomBoxCPP() {
  // @@protoc_insertion_point(destructor:ConfigRandomBox.ChargeRandomBoxCPP)
  SharedDtor();
}

void ChargeRandomBoxCPP::SharedDtor() {
  if (this != default_instance_) {
    delete gift_;
  }
}

void ChargeRandomBoxCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeRandomBoxCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeRandomBoxCPP_descriptor_;
}

const ChargeRandomBoxCPP& ChargeRandomBoxCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigRandomBox_2eproto();
  return *default_instance_;
}

ChargeRandomBoxCPP* ChargeRandomBoxCPP::default_instance_ = NULL;

ChargeRandomBoxCPP* ChargeRandomBoxCPP::New() const {
  return new ChargeRandomBoxCPP;
}

void ChargeRandomBoxCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChargeRandomBoxCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(giftid_, unlocklevel_);
    if (has_gift()) {
      if (gift_ != NULL) gift_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeRandomBoxCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigRandomBox.ChargeRandomBoxCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 giftid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gift;
        break;
      }

      // required .CommonGiftConfig.CommonModifyItem gift = 2;
      case 2: {
        if (tag == 18) {
         parse_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_weight;
        break;
      }

      // required uint32 weight = 3;
      case 3: {
        if (tag == 24) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unlocklevel;
        break;
      }

      // optional uint32 unlocklevel = 4;
      case 4: {
        if (tag == 32) {
         parse_unlocklevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlocklevel_)));
          set_has_unlocklevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigRandomBox.ChargeRandomBoxCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigRandomBox.ChargeRandomBoxCPP)
  return false;
#undef DO_
}

void ChargeRandomBoxCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigRandomBox.ChargeRandomBoxCPP)
  // required uint32 giftid = 1;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->giftid(), output);
  }

  // required .CommonGiftConfig.CommonModifyItem gift = 2;
  if (has_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gift(), output);
  }

  // required uint32 weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->weight(), output);
  }

  // optional uint32 unlocklevel = 4;
  if (has_unlocklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unlocklevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigRandomBox.ChargeRandomBoxCPP)
}

::google::protobuf::uint8* ChargeRandomBoxCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigRandomBox.ChargeRandomBoxCPP)
  // required uint32 giftid = 1;
  if (has_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->giftid(), target);
  }

  // required .CommonGiftConfig.CommonModifyItem gift = 2;
  if (has_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gift(), target);
  }

  // required uint32 weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->weight(), target);
  }

  // optional uint32 unlocklevel = 4;
  if (has_unlocklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unlocklevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigRandomBox.ChargeRandomBoxCPP)
  return target;
}

int ChargeRandomBoxCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 giftid = 1;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giftid());
    }

    // required .CommonGiftConfig.CommonModifyItem gift = 2;
    if (has_gift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gift());
    }

    // required uint32 weight = 3;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

    // optional uint32 unlocklevel = 4;
    if (has_unlocklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlocklevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeRandomBoxCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeRandomBoxCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeRandomBoxCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeRandomBoxCPP::MergeFrom(const ChargeRandomBoxCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
    if (from.has_gift()) {
      mutable_gift()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.gift());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_unlocklevel()) {
      set_unlocklevel(from.unlocklevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeRandomBoxCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeRandomBoxCPP::CopyFrom(const ChargeRandomBoxCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeRandomBoxCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_gift()) {
    if (!this->gift().IsInitialized()) return false;
  }
  return true;
}

void ChargeRandomBoxCPP::Swap(ChargeRandomBoxCPP* other) {
  if (other != this) {
    std::swap(giftid_, other->giftid_);
    std::swap(gift_, other->gift_);
    std::swap(weight_, other->weight_);
    std::swap(unlocklevel_, other->unlocklevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeRandomBoxCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeRandomBoxCPP_descriptor_;
  metadata.reflection = ChargeRandomBoxCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomBoxTypeCPP::kTypeFieldNumber;
const int RandomBoxTypeCPP::kWeightFieldNumber;
#endif  // !_MSC_VER

RandomBoxTypeCPP::RandomBoxTypeCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigRandomBox.RandomBoxTypeCPP)
}

void RandomBoxTypeCPP::InitAsDefaultInstance() {
}

RandomBoxTypeCPP::RandomBoxTypeCPP(const RandomBoxTypeCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigRandomBox.RandomBoxTypeCPP)
}

void RandomBoxTypeCPP::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  weight_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomBoxTypeCPP::~RandomBoxTypeCPP() {
  // @@protoc_insertion_point(destructor:ConfigRandomBox.RandomBoxTypeCPP)
  SharedDtor();
}

void RandomBoxTypeCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandomBoxTypeCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomBoxTypeCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomBoxTypeCPP_descriptor_;
}

const RandomBoxTypeCPP& RandomBoxTypeCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigRandomBox_2eproto();
  return *default_instance_;
}

RandomBoxTypeCPP* RandomBoxTypeCPP::default_instance_ = NULL;

RandomBoxTypeCPP* RandomBoxTypeCPP::New() const {
  return new RandomBoxTypeCPP;
}

void RandomBoxTypeCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RandomBoxTypeCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, weight_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomBoxTypeCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigRandomBox.RandomBoxTypeCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // required uint32 weight = 2;
      case 2: {
        if (tag == 16) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigRandomBox.RandomBoxTypeCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigRandomBox.RandomBoxTypeCPP)
  return false;
#undef DO_
}

void RandomBoxTypeCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigRandomBox.RandomBoxTypeCPP)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigRandomBox.RandomBoxTypeCPP)
}

::google::protobuf::uint8* RandomBoxTypeCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigRandomBox.RandomBoxTypeCPP)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigRandomBox.RandomBoxTypeCPP)
  return target;
}

int RandomBoxTypeCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomBoxTypeCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomBoxTypeCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomBoxTypeCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomBoxTypeCPP::MergeFrom(const RandomBoxTypeCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomBoxTypeCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomBoxTypeCPP::CopyFrom(const RandomBoxTypeCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomBoxTypeCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RandomBoxTypeCPP::Swap(RandomBoxTypeCPP* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomBoxTypeCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomBoxTypeCPP_descriptor_;
  metadata.reflection = RandomBoxTypeCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomBoxCPP::kCdtimeFieldNumber;
const int RandomBoxCPP::kFreeboxcoinbaseFieldNumber;
const int RandomBoxCPP::kGiftboxdiscountFieldNumber;
const int RandomBoxCPP::kGiftdimaonddiscountFieldNumber;
const int RandomBoxCPP::kBoxtypeFieldNumber;
#endif  // !_MSC_VER

RandomBoxCPP::RandomBoxCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigRandomBox.RandomBoxCPP)
}

void RandomBoxCPP::InitAsDefaultInstance() {
}

RandomBoxCPP::RandomBoxCPP(const RandomBoxCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigRandomBox.RandomBoxCPP)
}

void RandomBoxCPP::SharedCtor() {
  _cached_size_ = 0;
  cdtime_ = 0u;
  giftboxdiscount_ = 0u;
  giftdimaonddiscount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomBoxCPP::~RandomBoxCPP() {
  // @@protoc_insertion_point(destructor:ConfigRandomBox.RandomBoxCPP)
  SharedDtor();
}

void RandomBoxCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandomBoxCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomBoxCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomBoxCPP_descriptor_;
}

const RandomBoxCPP& RandomBoxCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigRandomBox_2eproto();
  return *default_instance_;
}

RandomBoxCPP* RandomBoxCPP::default_instance_ = NULL;

RandomBoxCPP* RandomBoxCPP::New() const {
  return new RandomBoxCPP;
}

void RandomBoxCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RandomBoxCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(cdtime_, giftboxdiscount_);
    giftdimaonddiscount_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  freeboxcoinbase_.Clear();
  boxtype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomBoxCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigRandomBox.RandomBoxCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cdtime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_freeboxcoinbase;
        break;
      }

      // repeated uint32 freeboxcoinbase = 2;
      case 2: {
        if (tag == 16) {
         parse_freeboxcoinbase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_freeboxcoinbase())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_freeboxcoinbase())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_freeboxcoinbase;
        if (input->ExpectTag(24)) goto parse_giftboxdiscount;
        break;
      }

      // required uint32 giftboxdiscount = 3;
      case 3: {
        if (tag == 24) {
         parse_giftboxdiscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giftboxdiscount_)));
          set_has_giftboxdiscount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_giftdimaonddiscount;
        break;
      }

      // required uint32 giftdimaonddiscount = 4;
      case 4: {
        if (tag == 32) {
         parse_giftdimaonddiscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giftdimaonddiscount_)));
          set_has_giftdimaonddiscount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_boxtype;
        break;
      }

      // repeated .ConfigRandomBox.RandomBoxTypeCPP boxtype = 5;
      case 5: {
        if (tag == 42) {
         parse_boxtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxtype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_boxtype;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigRandomBox.RandomBoxCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigRandomBox.RandomBoxCPP)
  return false;
#undef DO_
}

void RandomBoxCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigRandomBox.RandomBoxCPP)
  // required uint32 cdtime = 1;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cdtime(), output);
  }

  // repeated uint32 freeboxcoinbase = 2;
  for (int i = 0; i < this->freeboxcoinbase_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->freeboxcoinbase(i), output);
  }

  // required uint32 giftboxdiscount = 3;
  if (has_giftboxdiscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->giftboxdiscount(), output);
  }

  // required uint32 giftdimaonddiscount = 4;
  if (has_giftdimaonddiscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->giftdimaonddiscount(), output);
  }

  // repeated .ConfigRandomBox.RandomBoxTypeCPP boxtype = 5;
  for (int i = 0; i < this->boxtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->boxtype(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigRandomBox.RandomBoxCPP)
}

::google::protobuf::uint8* RandomBoxCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigRandomBox.RandomBoxCPP)
  // required uint32 cdtime = 1;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cdtime(), target);
  }

  // repeated uint32 freeboxcoinbase = 2;
  for (int i = 0; i < this->freeboxcoinbase_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->freeboxcoinbase(i), target);
  }

  // required uint32 giftboxdiscount = 3;
  if (has_giftboxdiscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->giftboxdiscount(), target);
  }

  // required uint32 giftdimaonddiscount = 4;
  if (has_giftdimaonddiscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->giftdimaonddiscount(), target);
  }

  // repeated .ConfigRandomBox.RandomBoxTypeCPP boxtype = 5;
  for (int i = 0; i < this->boxtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->boxtype(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigRandomBox.RandomBoxCPP)
  return target;
}

int RandomBoxCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cdtime = 1;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdtime());
    }

    // required uint32 giftboxdiscount = 3;
    if (has_giftboxdiscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giftboxdiscount());
    }

    // required uint32 giftdimaonddiscount = 4;
    if (has_giftdimaonddiscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giftdimaonddiscount());
    }

  }
  // repeated uint32 freeboxcoinbase = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->freeboxcoinbase_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->freeboxcoinbase(i));
    }
    total_size += 1 * this->freeboxcoinbase_size() + data_size;
  }

  // repeated .ConfigRandomBox.RandomBoxTypeCPP boxtype = 5;
  total_size += 1 * this->boxtype_size();
  for (int i = 0; i < this->boxtype_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxtype(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomBoxCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomBoxCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomBoxCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomBoxCPP::MergeFrom(const RandomBoxCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  freeboxcoinbase_.MergeFrom(from.freeboxcoinbase_);
  boxtype_.MergeFrom(from.boxtype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
    if (from.has_giftboxdiscount()) {
      set_giftboxdiscount(from.giftboxdiscount());
    }
    if (from.has_giftdimaonddiscount()) {
      set_giftdimaonddiscount(from.giftdimaonddiscount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomBoxCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomBoxCPP::CopyFrom(const RandomBoxCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomBoxCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->boxtype())) return false;
  return true;
}

void RandomBoxCPP::Swap(RandomBoxCPP* other) {
  if (other != this) {
    std::swap(cdtime_, other->cdtime_);
    freeboxcoinbase_.Swap(&other->freeboxcoinbase_);
    std::swap(giftboxdiscount_, other->giftboxdiscount_);
    std::swap(giftdimaonddiscount_, other->giftdimaonddiscount_);
    boxtype_.Swap(&other->boxtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomBoxCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomBoxCPP_descriptor_;
  metadata.reflection = RandomBoxCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomBoxInfo::kRandomboxFieldNumber;
const int RandomBoxInfo::kFreeboxgiftFieldNumber;
const int RandomBoxInfo::kChargeboxgiftFieldNumber;
#endif  // !_MSC_VER

RandomBoxInfo::RandomBoxInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigRandomBox.RandomBoxInfo)
}

void RandomBoxInfo::InitAsDefaultInstance() {
  randombox_ = const_cast< ::ConfigRandomBox::RandomBoxCPP*>(&::ConfigRandomBox::RandomBoxCPP::default_instance());
}

RandomBoxInfo::RandomBoxInfo(const RandomBoxInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigRandomBox.RandomBoxInfo)
}

void RandomBoxInfo::SharedCtor() {
  _cached_size_ = 0;
  randombox_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomBoxInfo::~RandomBoxInfo() {
  // @@protoc_insertion_point(destructor:ConfigRandomBox.RandomBoxInfo)
  SharedDtor();
}

void RandomBoxInfo::SharedDtor() {
  if (this != default_instance_) {
    delete randombox_;
  }
}

void RandomBoxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomBoxInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomBoxInfo_descriptor_;
}

const RandomBoxInfo& RandomBoxInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigRandomBox_2eproto();
  return *default_instance_;
}

RandomBoxInfo* RandomBoxInfo::default_instance_ = NULL;

RandomBoxInfo* RandomBoxInfo::New() const {
  return new RandomBoxInfo;
}

void RandomBoxInfo::Clear() {
  if (has_randombox()) {
    if (randombox_ != NULL) randombox_->::ConfigRandomBox::RandomBoxCPP::Clear();
  }
  freeboxgift_.Clear();
  chargeboxgift_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomBoxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigRandomBox.RandomBoxInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConfigRandomBox.RandomBoxCPP randombox = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randombox()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_freeboxgift;
        break;
      }

      // repeated .ConfigRandomBox.FreeRandomBoxCPP freeboxgift = 2;
      case 2: {
        if (tag == 18) {
         parse_freeboxgift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_freeboxgift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_freeboxgift;
        if (input->ExpectTag(26)) goto parse_chargeboxgift;
        break;
      }

      // repeated .ConfigRandomBox.ChargeRandomBoxCPP chargeboxgift = 3;
      case 3: {
        if (tag == 26) {
         parse_chargeboxgift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chargeboxgift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chargeboxgift;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigRandomBox.RandomBoxInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigRandomBox.RandomBoxInfo)
  return false;
#undef DO_
}

void RandomBoxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigRandomBox.RandomBoxInfo)
  // required .ConfigRandomBox.RandomBoxCPP randombox = 1;
  if (has_randombox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->randombox(), output);
  }

  // repeated .ConfigRandomBox.FreeRandomBoxCPP freeboxgift = 2;
  for (int i = 0; i < this->freeboxgift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->freeboxgift(i), output);
  }

  // repeated .ConfigRandomBox.ChargeRandomBoxCPP chargeboxgift = 3;
  for (int i = 0; i < this->chargeboxgift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chargeboxgift(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigRandomBox.RandomBoxInfo)
}

::google::protobuf::uint8* RandomBoxInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigRandomBox.RandomBoxInfo)
  // required .ConfigRandomBox.RandomBoxCPP randombox = 1;
  if (has_randombox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->randombox(), target);
  }

  // repeated .ConfigRandomBox.FreeRandomBoxCPP freeboxgift = 2;
  for (int i = 0; i < this->freeboxgift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->freeboxgift(i), target);
  }

  // repeated .ConfigRandomBox.ChargeRandomBoxCPP chargeboxgift = 3;
  for (int i = 0; i < this->chargeboxgift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chargeboxgift(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigRandomBox.RandomBoxInfo)
  return target;
}

int RandomBoxInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConfigRandomBox.RandomBoxCPP randombox = 1;
    if (has_randombox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->randombox());
    }

  }
  // repeated .ConfigRandomBox.FreeRandomBoxCPP freeboxgift = 2;
  total_size += 1 * this->freeboxgift_size();
  for (int i = 0; i < this->freeboxgift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->freeboxgift(i));
  }

  // repeated .ConfigRandomBox.ChargeRandomBoxCPP chargeboxgift = 3;
  total_size += 1 * this->chargeboxgift_size();
  for (int i = 0; i < this->chargeboxgift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chargeboxgift(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomBoxInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomBoxInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomBoxInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomBoxInfo::MergeFrom(const RandomBoxInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  freeboxgift_.MergeFrom(from.freeboxgift_);
  chargeboxgift_.MergeFrom(from.chargeboxgift_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_randombox()) {
      mutable_randombox()->::ConfigRandomBox::RandomBoxCPP::MergeFrom(from.randombox());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomBoxInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomBoxInfo::CopyFrom(const RandomBoxInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomBoxInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_randombox()) {
    if (!this->randombox().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->freeboxgift())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->chargeboxgift())) return false;
  return true;
}

void RandomBoxInfo::Swap(RandomBoxInfo* other) {
  if (other != this) {
    std::swap(randombox_, other->randombox_);
    freeboxgift_.Swap(&other->freeboxgift_);
    chargeboxgift_.Swap(&other->chargeboxgift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomBoxInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomBoxInfo_descriptor_;
  metadata.reflection = RandomBoxInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigRandomBox

// @@protoc_insertion_point(global_scope)
