// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigAllianceRace.proto

#ifndef PROTOBUF_ConfigAllianceRace_2eproto__INCLUDED
#define PROTOBUF_ConfigAllianceRace_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonGiftConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace ConfigAllianceRace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ConfigAllianceRace_2eproto();
void protobuf_AssignDesc_ConfigAllianceRace_2eproto();
void protobuf_ShutdownFile_ConfigAllianceRace_2eproto();

class RaceGradeRank;
class RaceGrade;
class RaceTaskCond;
class RaceTaskStorageItem;
class RaceTaskStorage;
class RaceTaskChance;
class RaceTask;
class RaceRewardRank;
class RaceRewardStage;
class RaceReward;
class RaceInfo;
class RaceWatchAdReward;

// ===================================================================

class RaceGradeRank : public ::google::protobuf::Message {
 public:
  RaceGradeRank();
  virtual ~RaceGradeRank();

  RaceGradeRank(const RaceGradeRank& from);

  inline RaceGradeRank& operator=(const RaceGradeRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceGradeRank& default_instance();

  void Swap(RaceGradeRank* other);

  // implements Message ----------------------------------------------

  RaceGradeRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceGradeRank& from);
  void MergeFrom(const RaceGradeRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 point = 2;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline ::google::protobuf::uint32 point() const;
  inline void set_point(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigAllianceRace.RaceGradeRank)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 point_;
  friend void  protobuf_AddDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_AssignDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_ShutdownFile_ConfigAllianceRace_2eproto();

  void InitAsDefaultInstance();
  static RaceGradeRank* default_instance_;
};
// -------------------------------------------------------------------

class RaceGrade : public ::google::protobuf::Message {
 public:
  RaceGrade();
  virtual ~RaceGrade();

  RaceGrade(const RaceGrade& from);

  inline RaceGrade& operator=(const RaceGrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceGrade& default_instance();

  void Swap(RaceGrade* other);

  // implements Message ----------------------------------------------

  RaceGrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceGrade& from);
  void MergeFrom(const RaceGrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 race_level = 1;
  inline bool has_race_level() const;
  inline void clear_race_level();
  static const int kRaceLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 race_level() const;
  inline void set_race_level(::google::protobuf::uint32 value);

  // repeated .ConfigAllianceRace.RaceGradeRank rank = 2;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline const ::ConfigAllianceRace::RaceGradeRank& rank(int index) const;
  inline ::ConfigAllianceRace::RaceGradeRank* mutable_rank(int index);
  inline ::ConfigAllianceRace::RaceGradeRank* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceGradeRank >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceGradeRank >*
      mutable_rank();

  // @@protoc_insertion_point(class_scope:ConfigAllianceRace.RaceGrade)
 private:
  inline void set_has_race_level();
  inline void clear_has_race_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceGradeRank > rank_;
  ::google::protobuf::uint32 race_level_;
  friend void  protobuf_AddDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_AssignDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_ShutdownFile_ConfigAllianceRace_2eproto();

  void InitAsDefaultInstance();
  static RaceGrade* default_instance_;
};
// -------------------------------------------------------------------

class RaceTaskCond : public ::google::protobuf::Message {
 public:
  RaceTaskCond();
  virtual ~RaceTaskCond();

  RaceTaskCond(const RaceTaskCond& from);

  inline RaceTaskCond& operator=(const RaceTaskCond& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceTaskCond& default_instance();

  void Swap(RaceTaskCond* other);

  // implements Message ----------------------------------------------

  RaceTaskCond* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceTaskCond& from);
  void MergeFrom(const RaceTaskCond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigAllianceRace.RaceTaskCond)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_AssignDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_ShutdownFile_ConfigAllianceRace_2eproto();

  void InitAsDefaultInstance();
  static RaceTaskCond* default_instance_;
};
// -------------------------------------------------------------------

class RaceTaskStorageItem : public ::google::protobuf::Message {
 public:
  RaceTaskStorageItem();
  virtual ~RaceTaskStorageItem();

  RaceTaskStorageItem(const RaceTaskStorageItem& from);

  inline RaceTaskStorageItem& operator=(const RaceTaskStorageItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceTaskStorageItem& default_instance();

  void Swap(RaceTaskStorageItem* other);

  // implements Message ----------------------------------------------

  RaceTaskStorageItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceTaskStorageItem& from);
  void MergeFrom(const RaceTaskStorageItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 point = 2;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline ::google::protobuf::uint32 point() const;
  inline void set_point(::google::protobuf::uint32 value);

  // required uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // repeated .ConfigAllianceRace.RaceTaskCond cond = 5;
  inline int cond_size() const;
  inline void clear_cond();
  static const int kCondFieldNumber = 5;
  inline const ::ConfigAllianceRace::RaceTaskCond& cond(int index) const;
  inline ::ConfigAllianceRace::RaceTaskCond* mutable_cond(int index);
  inline ::ConfigAllianceRace::RaceTaskCond* add_cond();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskCond >&
      cond() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskCond >*
      mutable_cond();

  // @@protoc_insertion_point(class_scope:ConfigAllianceRace.RaceTaskStorageItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 point_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskCond > cond_;
  friend void  protobuf_AddDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_AssignDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_ShutdownFile_ConfigAllianceRace_2eproto();

  void InitAsDefaultInstance();
  static RaceTaskStorageItem* default_instance_;
};
// -------------------------------------------------------------------

class RaceTaskStorage : public ::google::protobuf::Message {
 public:
  RaceTaskStorage();
  virtual ~RaceTaskStorage();

  RaceTaskStorage(const RaceTaskStorage& from);

  inline RaceTaskStorage& operator=(const RaceTaskStorage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceTaskStorage& default_instance();

  void Swap(RaceTaskStorage* other);

  // implements Message ----------------------------------------------

  RaceTaskStorage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceTaskStorage& from);
  void MergeFrom(const RaceTaskStorage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 storage_id = 1;
  inline bool has_storage_id() const;
  inline void clear_storage_id();
  static const int kStorageIdFieldNumber = 1;
  inline ::google::protobuf::uint32 storage_id() const;
  inline void set_storage_id(::google::protobuf::uint32 value);

  // repeated .ConfigAllianceRace.RaceTaskStorageItem items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::ConfigAllianceRace::RaceTaskStorageItem& items(int index) const;
  inline ::ConfigAllianceRace::RaceTaskStorageItem* mutable_items(int index);
  inline ::ConfigAllianceRace::RaceTaskStorageItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskStorageItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskStorageItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:ConfigAllianceRace.RaceTaskStorage)
 private:
  inline void set_has_storage_id();
  inline void clear_has_storage_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskStorageItem > items_;
  ::google::protobuf::uint32 storage_id_;
  friend void  protobuf_AddDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_AssignDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_ShutdownFile_ConfigAllianceRace_2eproto();

  void InitAsDefaultInstance();
  static RaceTaskStorage* default_instance_;
};
// -------------------------------------------------------------------

class RaceTaskChance : public ::google::protobuf::Message {
 public:
  RaceTaskChance();
  virtual ~RaceTaskChance();

  RaceTaskChance(const RaceTaskChance& from);

  inline RaceTaskChance& operator=(const RaceTaskChance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceTaskChance& default_instance();

  void Swap(RaceTaskChance* other);

  // implements Message ----------------------------------------------

  RaceTaskChance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceTaskChance& from);
  void MergeFrom(const RaceTaskChance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 race_level = 1;
  inline bool has_race_level() const;
  inline void clear_race_level();
  static const int kRaceLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 race_level() const;
  inline void set_race_level(::google::protobuf::uint32 value);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigAllianceRace.RaceTaskChance)
 private:
  inline void set_has_race_level();
  inline void clear_has_race_level();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 race_level_;
  ::google::protobuf::uint32 value_;
  friend void  protobuf_AddDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_AssignDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_ShutdownFile_ConfigAllianceRace_2eproto();

  void InitAsDefaultInstance();
  static RaceTaskChance* default_instance_;
};
// -------------------------------------------------------------------

class RaceTask : public ::google::protobuf::Message {
 public:
  RaceTask();
  virtual ~RaceTask();

  RaceTask(const RaceTask& from);

  inline RaceTask& operator=(const RaceTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceTask& default_instance();

  void Swap(RaceTask* other);

  // implements Message ----------------------------------------------

  RaceTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceTask& from);
  void MergeFrom(const RaceTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cdtime = 1;
  inline bool has_cdtime() const;
  inline void clear_cdtime();
  static const int kCdtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 cdtime() const;
  inline void set_cdtime(::google::protobuf::uint32 value);

  // required uint32 buy_cd_time = 2;
  inline bool has_buy_cd_time() const;
  inline void clear_buy_cd_time();
  static const int kBuyCdTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 buy_cd_time() const;
  inline void set_buy_cd_time(::google::protobuf::uint32 value);

  // required uint32 buy_cd_cost = 3;
  inline bool has_buy_cd_cost() const;
  inline void clear_buy_cd_cost();
  static const int kBuyCdCostFieldNumber = 3;
  inline ::google::protobuf::uint32 buy_cd_cost() const;
  inline void set_buy_cd_cost(::google::protobuf::uint32 value);

  // required uint32 buy_chance_cost = 4;
  inline bool has_buy_chance_cost() const;
  inline void clear_buy_chance_cost();
  static const int kBuyChanceCostFieldNumber = 4;
  inline ::google::protobuf::uint32 buy_chance_cost() const;
  inline void set_buy_chance_cost(::google::protobuf::uint32 value);

  // repeated .ConfigAllianceRace.RaceTaskChance chance = 5;
  inline int chance_size() const;
  inline void clear_chance();
  static const int kChanceFieldNumber = 5;
  inline const ::ConfigAllianceRace::RaceTaskChance& chance(int index) const;
  inline ::ConfigAllianceRace::RaceTaskChance* mutable_chance(int index);
  inline ::ConfigAllianceRace::RaceTaskChance* add_chance();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskChance >&
      chance() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskChance >*
      mutable_chance();

  // repeated .ConfigAllianceRace.RaceTaskStorage storage = 6;
  inline int storage_size() const;
  inline void clear_storage();
  static const int kStorageFieldNumber = 6;
  inline const ::ConfigAllianceRace::RaceTaskStorage& storage(int index) const;
  inline ::ConfigAllianceRace::RaceTaskStorage* mutable_storage(int index);
  inline ::ConfigAllianceRace::RaceTaskStorage* add_storage();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskStorage >&
      storage() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskStorage >*
      mutable_storage();

  // @@protoc_insertion_point(class_scope:ConfigAllianceRace.RaceTask)
 private:
  inline void set_has_cdtime();
  inline void clear_has_cdtime();
  inline void set_has_buy_cd_time();
  inline void clear_has_buy_cd_time();
  inline void set_has_buy_cd_cost();
  inline void clear_has_buy_cd_cost();
  inline void set_has_buy_chance_cost();
  inline void clear_has_buy_chance_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cdtime_;
  ::google::protobuf::uint32 buy_cd_time_;
  ::google::protobuf::uint32 buy_cd_cost_;
  ::google::protobuf::uint32 buy_chance_cost_;
  ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskChance > chance_;
  ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskStorage > storage_;
  friend void  protobuf_AddDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_AssignDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_ShutdownFile_ConfigAllianceRace_2eproto();

  void InitAsDefaultInstance();
  static RaceTask* default_instance_;
};
// -------------------------------------------------------------------

class RaceRewardRank : public ::google::protobuf::Message {
 public:
  RaceRewardRank();
  virtual ~RaceRewardRank();

  RaceRewardRank(const RaceRewardRank& from);

  inline RaceRewardRank& operator=(const RaceRewardRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceRewardRank& default_instance();

  void Swap(RaceRewardRank* other);

  // implements Message ----------------------------------------------

  RaceRewardRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceRewardRank& from);
  void MergeFrom(const RaceRewardRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required float rate = 2;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 2;
  inline float rate() const;
  inline void set_rate(float value);

  // @@protoc_insertion_point(class_scope:ConfigAllianceRace.RaceRewardRank)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rate();
  inline void clear_has_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  float rate_;
  friend void  protobuf_AddDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_AssignDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_ShutdownFile_ConfigAllianceRace_2eproto();

  void InitAsDefaultInstance();
  static RaceRewardRank* default_instance_;
};
// -------------------------------------------------------------------

class RaceRewardStage : public ::google::protobuf::Message {
 public:
  RaceRewardStage();
  virtual ~RaceRewardStage();

  RaceRewardStage(const RaceRewardStage& from);

  inline RaceRewardStage& operator=(const RaceRewardStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceRewardStage& default_instance();

  void Swap(RaceRewardStage* other);

  // implements Message ----------------------------------------------

  RaceRewardStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceRewardStage& from);
  void MergeFrom(const RaceRewardStage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 race_level = 2;
  inline bool has_race_level() const;
  inline void clear_race_level();
  static const int kRaceLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 race_level() const;
  inline void set_race_level(::google::protobuf::uint32 value);

  // required uint32 point = 3;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 3;
  inline ::google::protobuf::uint32 point() const;
  inline void set_point(::google::protobuf::uint32 value);

  // repeated .CommonGiftConfig.CommonModifyItemRate reward = 4;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline const ::CommonGiftConfig::CommonModifyItemRate& reward(int index) const;
  inline ::CommonGiftConfig::CommonModifyItemRate* mutable_reward(int index);
  inline ::CommonGiftConfig::CommonModifyItemRate* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItemRate >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItemRate >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:ConfigAllianceRace.RaceRewardStage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_race_level();
  inline void clear_has_race_level();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 race_level_;
  ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItemRate > reward_;
  ::google::protobuf::uint32 point_;
  friend void  protobuf_AddDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_AssignDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_ShutdownFile_ConfigAllianceRace_2eproto();

  void InitAsDefaultInstance();
  static RaceRewardStage* default_instance_;
};
// -------------------------------------------------------------------

class RaceReward : public ::google::protobuf::Message {
 public:
  RaceReward();
  virtual ~RaceReward();

  RaceReward(const RaceReward& from);

  inline RaceReward& operator=(const RaceReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceReward& default_instance();

  void Swap(RaceReward* other);

  // implements Message ----------------------------------------------

  RaceReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceReward& from);
  void MergeFrom(const RaceReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 min_level = 2;
  inline bool has_min_level() const;
  inline void clear_min_level();
  static const int kMinLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 min_level() const;
  inline void set_min_level(::google::protobuf::uint32 value);

  // required uint32 max_level = 3;
  inline bool has_max_level() const;
  inline void clear_max_level();
  static const int kMaxLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 max_level() const;
  inline void set_max_level(::google::protobuf::uint32 value);

  // repeated .ConfigAllianceRace.RaceRewardRank rank = 4;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline const ::ConfigAllianceRace::RaceRewardRank& rank(int index) const;
  inline ::ConfigAllianceRace::RaceRewardRank* mutable_rank(int index);
  inline ::ConfigAllianceRace::RaceRewardRank* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceRewardRank >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceRewardRank >*
      mutable_rank();

  // repeated .CommonGiftConfig.CommonModifyItemRate grade_reward = 5;
  inline int grade_reward_size() const;
  inline void clear_grade_reward();
  static const int kGradeRewardFieldNumber = 5;
  inline const ::CommonGiftConfig::CommonModifyItemRate& grade_reward(int index) const;
  inline ::CommonGiftConfig::CommonModifyItemRate* mutable_grade_reward(int index);
  inline ::CommonGiftConfig::CommonModifyItemRate* add_grade_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItemRate >&
      grade_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItemRate >*
      mutable_grade_reward();

  // repeated .ConfigAllianceRace.RaceRewardStage stage = 6;
  inline int stage_size() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 6;
  inline const ::ConfigAllianceRace::RaceRewardStage& stage(int index) const;
  inline ::ConfigAllianceRace::RaceRewardStage* mutable_stage(int index);
  inline ::ConfigAllianceRace::RaceRewardStage* add_stage();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceRewardStage >&
      stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceRewardStage >*
      mutable_stage();

  // @@protoc_insertion_point(class_scope:ConfigAllianceRace.RaceReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_min_level();
  inline void clear_has_min_level();
  inline void set_has_max_level();
  inline void clear_has_max_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 min_level_;
  ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceRewardRank > rank_;
  ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItemRate > grade_reward_;
  ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceRewardStage > stage_;
  ::google::protobuf::uint32 max_level_;
  friend void  protobuf_AddDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_AssignDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_ShutdownFile_ConfigAllianceRace_2eproto();

  void InitAsDefaultInstance();
  static RaceReward* default_instance_;
};
// -------------------------------------------------------------------

class RaceInfo : public ::google::protobuf::Message {
 public:
  RaceInfo();
  virtual ~RaceInfo();

  RaceInfo(const RaceInfo& from);

  inline RaceInfo& operator=(const RaceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceInfo& default_instance();

  void Swap(RaceInfo* other);

  // implements Message ----------------------------------------------

  RaceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceInfo& from);
  void MergeFrom(const RaceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 stage_reward_refresh_cost = 1;
  inline bool has_stage_reward_refresh_cost() const;
  inline void clear_stage_reward_refresh_cost();
  static const int kStageRewardRefreshCostFieldNumber = 1;
  inline ::google::protobuf::uint32 stage_reward_refresh_cost() const;
  inline void set_stage_reward_refresh_cost(::google::protobuf::uint32 value);

  // required uint32 start_ts = 2;
  inline bool has_start_ts() const;
  inline void clear_start_ts();
  static const int kStartTsFieldNumber = 2;
  inline ::google::protobuf::uint32 start_ts() const;
  inline void set_start_ts(::google::protobuf::uint32 value);

  // required uint32 end_ts = 3;
  inline bool has_end_ts() const;
  inline void clear_end_ts();
  static const int kEndTsFieldNumber = 3;
  inline ::google::protobuf::uint32 end_ts() const;
  inline void set_end_ts(::google::protobuf::uint32 value);

  // repeated .ConfigAllianceRace.RaceGrade grade = 4;
  inline int grade_size() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 4;
  inline const ::ConfigAllianceRace::RaceGrade& grade(int index) const;
  inline ::ConfigAllianceRace::RaceGrade* mutable_grade(int index);
  inline ::ConfigAllianceRace::RaceGrade* add_grade();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceGrade >&
      grade() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceGrade >*
      mutable_grade();

  // required .ConfigAllianceRace.RaceWatchAdReward watch_ad_reward = 5;
  inline bool has_watch_ad_reward() const;
  inline void clear_watch_ad_reward();
  static const int kWatchAdRewardFieldNumber = 5;
  inline const ::ConfigAllianceRace::RaceWatchAdReward& watch_ad_reward() const;
  inline ::ConfigAllianceRace::RaceWatchAdReward* mutable_watch_ad_reward();
  inline ::ConfigAllianceRace::RaceWatchAdReward* release_watch_ad_reward();
  inline void set_allocated_watch_ad_reward(::ConfigAllianceRace::RaceWatchAdReward* watch_ad_reward);

  // required .ConfigAllianceRace.RaceTask task = 6;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 6;
  inline const ::ConfigAllianceRace::RaceTask& task() const;
  inline ::ConfigAllianceRace::RaceTask* mutable_task();
  inline ::ConfigAllianceRace::RaceTask* release_task();
  inline void set_allocated_task(::ConfigAllianceRace::RaceTask* task);

  // repeated .ConfigAllianceRace.RaceReward rewards = 7;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 7;
  inline const ::ConfigAllianceRace::RaceReward& rewards(int index) const;
  inline ::ConfigAllianceRace::RaceReward* mutable_rewards(int index);
  inline ::ConfigAllianceRace::RaceReward* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceReward >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceReward >*
      mutable_rewards();

  // @@protoc_insertion_point(class_scope:ConfigAllianceRace.RaceInfo)
 private:
  inline void set_has_stage_reward_refresh_cost();
  inline void clear_has_stage_reward_refresh_cost();
  inline void set_has_start_ts();
  inline void clear_has_start_ts();
  inline void set_has_end_ts();
  inline void clear_has_end_ts();
  inline void set_has_watch_ad_reward();
  inline void clear_has_watch_ad_reward();
  inline void set_has_task();
  inline void clear_has_task();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 stage_reward_refresh_cost_;
  ::google::protobuf::uint32 start_ts_;
  ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceGrade > grade_;
  ::ConfigAllianceRace::RaceWatchAdReward* watch_ad_reward_;
  ::ConfigAllianceRace::RaceTask* task_;
  ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceReward > rewards_;
  ::google::protobuf::uint32 end_ts_;
  friend void  protobuf_AddDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_AssignDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_ShutdownFile_ConfigAllianceRace_2eproto();

  void InitAsDefaultInstance();
  static RaceInfo* default_instance_;
};
// -------------------------------------------------------------------

class RaceWatchAdReward : public ::google::protobuf::Message {
 public:
  RaceWatchAdReward();
  virtual ~RaceWatchAdReward();

  RaceWatchAdReward(const RaceWatchAdReward& from);

  inline RaceWatchAdReward& operator=(const RaceWatchAdReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaceWatchAdReward& default_instance();

  void Swap(RaceWatchAdReward* other);

  // implements Message ----------------------------------------------

  RaceWatchAdReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaceWatchAdReward& from);
  void MergeFrom(const RaceWatchAdReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 diamond = 1;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 1;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // required uint32 point = 2;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline ::google::protobuf::uint32 point() const;
  inline void set_point(::google::protobuf::uint32 value);

  // required uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigAllianceRace.RaceWatchAdReward)
 private:
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 diamond_;
  ::google::protobuf::uint32 point_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_AssignDesc_ConfigAllianceRace_2eproto();
  friend void protobuf_ShutdownFile_ConfigAllianceRace_2eproto();

  void InitAsDefaultInstance();
  static RaceWatchAdReward* default_instance_;
};
// ===================================================================


// ===================================================================

// RaceGradeRank

// required uint32 id = 1;
inline bool RaceGradeRank::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceGradeRank::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceGradeRank::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceGradeRank::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RaceGradeRank::id() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceGradeRank.id)
  return id_;
}
inline void RaceGradeRank::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceGradeRank.id)
}

// required uint32 point = 2;
inline bool RaceGradeRank::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceGradeRank::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceGradeRank::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceGradeRank::clear_point() {
  point_ = 0u;
  clear_has_point();
}
inline ::google::protobuf::uint32 RaceGradeRank::point() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceGradeRank.point)
  return point_;
}
inline void RaceGradeRank::set_point(::google::protobuf::uint32 value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceGradeRank.point)
}

// -------------------------------------------------------------------

// RaceGrade

// required uint32 race_level = 1;
inline bool RaceGrade::has_race_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceGrade::set_has_race_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceGrade::clear_has_race_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceGrade::clear_race_level() {
  race_level_ = 0u;
  clear_has_race_level();
}
inline ::google::protobuf::uint32 RaceGrade::race_level() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceGrade.race_level)
  return race_level_;
}
inline void RaceGrade::set_race_level(::google::protobuf::uint32 value) {
  set_has_race_level();
  race_level_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceGrade.race_level)
}

// repeated .ConfigAllianceRace.RaceGradeRank rank = 2;
inline int RaceGrade::rank_size() const {
  return rank_.size();
}
inline void RaceGrade::clear_rank() {
  rank_.Clear();
}
inline const ::ConfigAllianceRace::RaceGradeRank& RaceGrade::rank(int index) const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceGrade.rank)
  return rank_.Get(index);
}
inline ::ConfigAllianceRace::RaceGradeRank* RaceGrade::mutable_rank(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigAllianceRace.RaceGrade.rank)
  return rank_.Mutable(index);
}
inline ::ConfigAllianceRace::RaceGradeRank* RaceGrade::add_rank() {
  // @@protoc_insertion_point(field_add:ConfigAllianceRace.RaceGrade.rank)
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceGradeRank >&
RaceGrade::rank() const {
  // @@protoc_insertion_point(field_list:ConfigAllianceRace.RaceGrade.rank)
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceGradeRank >*
RaceGrade::mutable_rank() {
  // @@protoc_insertion_point(field_mutable_list:ConfigAllianceRace.RaceGrade.rank)
  return &rank_;
}

// -------------------------------------------------------------------

// RaceTaskCond

// required uint32 type = 1;
inline bool RaceTaskCond::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceTaskCond::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceTaskCond::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceTaskCond::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 RaceTaskCond::type() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTaskCond.type)
  return type_;
}
inline void RaceTaskCond::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceTaskCond.type)
}

// required uint32 id = 2;
inline bool RaceTaskCond::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceTaskCond::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceTaskCond::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceTaskCond::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RaceTaskCond::id() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTaskCond.id)
  return id_;
}
inline void RaceTaskCond::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceTaskCond.id)
}

// required uint32 count = 3;
inline bool RaceTaskCond::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaceTaskCond::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaceTaskCond::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaceTaskCond::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 RaceTaskCond::count() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTaskCond.count)
  return count_;
}
inline void RaceTaskCond::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceTaskCond.count)
}

// -------------------------------------------------------------------

// RaceTaskStorageItem

// required uint32 id = 1;
inline bool RaceTaskStorageItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceTaskStorageItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceTaskStorageItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceTaskStorageItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RaceTaskStorageItem::id() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTaskStorageItem.id)
  return id_;
}
inline void RaceTaskStorageItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceTaskStorageItem.id)
}

// required uint32 point = 2;
inline bool RaceTaskStorageItem::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceTaskStorageItem::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceTaskStorageItem::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceTaskStorageItem::clear_point() {
  point_ = 0u;
  clear_has_point();
}
inline ::google::protobuf::uint32 RaceTaskStorageItem::point() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTaskStorageItem.point)
  return point_;
}
inline void RaceTaskStorageItem::set_point(::google::protobuf::uint32 value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceTaskStorageItem.point)
}

// required uint32 time = 3;
inline bool RaceTaskStorageItem::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaceTaskStorageItem::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaceTaskStorageItem::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaceTaskStorageItem::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 RaceTaskStorageItem::time() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTaskStorageItem.time)
  return time_;
}
inline void RaceTaskStorageItem::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceTaskStorageItem.time)
}

// required uint32 level = 4;
inline bool RaceTaskStorageItem::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RaceTaskStorageItem::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RaceTaskStorageItem::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RaceTaskStorageItem::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 RaceTaskStorageItem::level() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTaskStorageItem.level)
  return level_;
}
inline void RaceTaskStorageItem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceTaskStorageItem.level)
}

// repeated .ConfigAllianceRace.RaceTaskCond cond = 5;
inline int RaceTaskStorageItem::cond_size() const {
  return cond_.size();
}
inline void RaceTaskStorageItem::clear_cond() {
  cond_.Clear();
}
inline const ::ConfigAllianceRace::RaceTaskCond& RaceTaskStorageItem::cond(int index) const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTaskStorageItem.cond)
  return cond_.Get(index);
}
inline ::ConfigAllianceRace::RaceTaskCond* RaceTaskStorageItem::mutable_cond(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigAllianceRace.RaceTaskStorageItem.cond)
  return cond_.Mutable(index);
}
inline ::ConfigAllianceRace::RaceTaskCond* RaceTaskStorageItem::add_cond() {
  // @@protoc_insertion_point(field_add:ConfigAllianceRace.RaceTaskStorageItem.cond)
  return cond_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskCond >&
RaceTaskStorageItem::cond() const {
  // @@protoc_insertion_point(field_list:ConfigAllianceRace.RaceTaskStorageItem.cond)
  return cond_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskCond >*
RaceTaskStorageItem::mutable_cond() {
  // @@protoc_insertion_point(field_mutable_list:ConfigAllianceRace.RaceTaskStorageItem.cond)
  return &cond_;
}

// -------------------------------------------------------------------

// RaceTaskStorage

// required uint32 storage_id = 1;
inline bool RaceTaskStorage::has_storage_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceTaskStorage::set_has_storage_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceTaskStorage::clear_has_storage_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceTaskStorage::clear_storage_id() {
  storage_id_ = 0u;
  clear_has_storage_id();
}
inline ::google::protobuf::uint32 RaceTaskStorage::storage_id() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTaskStorage.storage_id)
  return storage_id_;
}
inline void RaceTaskStorage::set_storage_id(::google::protobuf::uint32 value) {
  set_has_storage_id();
  storage_id_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceTaskStorage.storage_id)
}

// repeated .ConfigAllianceRace.RaceTaskStorageItem items = 2;
inline int RaceTaskStorage::items_size() const {
  return items_.size();
}
inline void RaceTaskStorage::clear_items() {
  items_.Clear();
}
inline const ::ConfigAllianceRace::RaceTaskStorageItem& RaceTaskStorage::items(int index) const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTaskStorage.items)
  return items_.Get(index);
}
inline ::ConfigAllianceRace::RaceTaskStorageItem* RaceTaskStorage::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigAllianceRace.RaceTaskStorage.items)
  return items_.Mutable(index);
}
inline ::ConfigAllianceRace::RaceTaskStorageItem* RaceTaskStorage::add_items() {
  // @@protoc_insertion_point(field_add:ConfigAllianceRace.RaceTaskStorage.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskStorageItem >&
RaceTaskStorage::items() const {
  // @@protoc_insertion_point(field_list:ConfigAllianceRace.RaceTaskStorage.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskStorageItem >*
RaceTaskStorage::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ConfigAllianceRace.RaceTaskStorage.items)
  return &items_;
}

// -------------------------------------------------------------------

// RaceTaskChance

// required uint32 race_level = 1;
inline bool RaceTaskChance::has_race_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceTaskChance::set_has_race_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceTaskChance::clear_has_race_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceTaskChance::clear_race_level() {
  race_level_ = 0u;
  clear_has_race_level();
}
inline ::google::protobuf::uint32 RaceTaskChance::race_level() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTaskChance.race_level)
  return race_level_;
}
inline void RaceTaskChance::set_race_level(::google::protobuf::uint32 value) {
  set_has_race_level();
  race_level_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceTaskChance.race_level)
}

// required uint32 value = 2;
inline bool RaceTaskChance::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceTaskChance::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceTaskChance::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceTaskChance::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 RaceTaskChance::value() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTaskChance.value)
  return value_;
}
inline void RaceTaskChance::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceTaskChance.value)
}

// -------------------------------------------------------------------

// RaceTask

// required uint32 cdtime = 1;
inline bool RaceTask::has_cdtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceTask::set_has_cdtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceTask::clear_has_cdtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceTask::clear_cdtime() {
  cdtime_ = 0u;
  clear_has_cdtime();
}
inline ::google::protobuf::uint32 RaceTask::cdtime() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTask.cdtime)
  return cdtime_;
}
inline void RaceTask::set_cdtime(::google::protobuf::uint32 value) {
  set_has_cdtime();
  cdtime_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceTask.cdtime)
}

// required uint32 buy_cd_time = 2;
inline bool RaceTask::has_buy_cd_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceTask::set_has_buy_cd_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceTask::clear_has_buy_cd_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceTask::clear_buy_cd_time() {
  buy_cd_time_ = 0u;
  clear_has_buy_cd_time();
}
inline ::google::protobuf::uint32 RaceTask::buy_cd_time() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTask.buy_cd_time)
  return buy_cd_time_;
}
inline void RaceTask::set_buy_cd_time(::google::protobuf::uint32 value) {
  set_has_buy_cd_time();
  buy_cd_time_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceTask.buy_cd_time)
}

// required uint32 buy_cd_cost = 3;
inline bool RaceTask::has_buy_cd_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaceTask::set_has_buy_cd_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaceTask::clear_has_buy_cd_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaceTask::clear_buy_cd_cost() {
  buy_cd_cost_ = 0u;
  clear_has_buy_cd_cost();
}
inline ::google::protobuf::uint32 RaceTask::buy_cd_cost() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTask.buy_cd_cost)
  return buy_cd_cost_;
}
inline void RaceTask::set_buy_cd_cost(::google::protobuf::uint32 value) {
  set_has_buy_cd_cost();
  buy_cd_cost_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceTask.buy_cd_cost)
}

// required uint32 buy_chance_cost = 4;
inline bool RaceTask::has_buy_chance_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RaceTask::set_has_buy_chance_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RaceTask::clear_has_buy_chance_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RaceTask::clear_buy_chance_cost() {
  buy_chance_cost_ = 0u;
  clear_has_buy_chance_cost();
}
inline ::google::protobuf::uint32 RaceTask::buy_chance_cost() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTask.buy_chance_cost)
  return buy_chance_cost_;
}
inline void RaceTask::set_buy_chance_cost(::google::protobuf::uint32 value) {
  set_has_buy_chance_cost();
  buy_chance_cost_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceTask.buy_chance_cost)
}

// repeated .ConfigAllianceRace.RaceTaskChance chance = 5;
inline int RaceTask::chance_size() const {
  return chance_.size();
}
inline void RaceTask::clear_chance() {
  chance_.Clear();
}
inline const ::ConfigAllianceRace::RaceTaskChance& RaceTask::chance(int index) const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTask.chance)
  return chance_.Get(index);
}
inline ::ConfigAllianceRace::RaceTaskChance* RaceTask::mutable_chance(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigAllianceRace.RaceTask.chance)
  return chance_.Mutable(index);
}
inline ::ConfigAllianceRace::RaceTaskChance* RaceTask::add_chance() {
  // @@protoc_insertion_point(field_add:ConfigAllianceRace.RaceTask.chance)
  return chance_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskChance >&
RaceTask::chance() const {
  // @@protoc_insertion_point(field_list:ConfigAllianceRace.RaceTask.chance)
  return chance_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskChance >*
RaceTask::mutable_chance() {
  // @@protoc_insertion_point(field_mutable_list:ConfigAllianceRace.RaceTask.chance)
  return &chance_;
}

// repeated .ConfigAllianceRace.RaceTaskStorage storage = 6;
inline int RaceTask::storage_size() const {
  return storage_.size();
}
inline void RaceTask::clear_storage() {
  storage_.Clear();
}
inline const ::ConfigAllianceRace::RaceTaskStorage& RaceTask::storage(int index) const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceTask.storage)
  return storage_.Get(index);
}
inline ::ConfigAllianceRace::RaceTaskStorage* RaceTask::mutable_storage(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigAllianceRace.RaceTask.storage)
  return storage_.Mutable(index);
}
inline ::ConfigAllianceRace::RaceTaskStorage* RaceTask::add_storage() {
  // @@protoc_insertion_point(field_add:ConfigAllianceRace.RaceTask.storage)
  return storage_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskStorage >&
RaceTask::storage() const {
  // @@protoc_insertion_point(field_list:ConfigAllianceRace.RaceTask.storage)
  return storage_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceTaskStorage >*
RaceTask::mutable_storage() {
  // @@protoc_insertion_point(field_mutable_list:ConfigAllianceRace.RaceTask.storage)
  return &storage_;
}

// -------------------------------------------------------------------

// RaceRewardRank

// required uint32 id = 1;
inline bool RaceRewardRank::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceRewardRank::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceRewardRank::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceRewardRank::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RaceRewardRank::id() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceRewardRank.id)
  return id_;
}
inline void RaceRewardRank::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceRewardRank.id)
}

// required float rate = 2;
inline bool RaceRewardRank::has_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceRewardRank::set_has_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceRewardRank::clear_has_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceRewardRank::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline float RaceRewardRank::rate() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceRewardRank.rate)
  return rate_;
}
inline void RaceRewardRank::set_rate(float value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceRewardRank.rate)
}

// -------------------------------------------------------------------

// RaceRewardStage

// required uint32 id = 1;
inline bool RaceRewardStage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceRewardStage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceRewardStage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceRewardStage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RaceRewardStage::id() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceRewardStage.id)
  return id_;
}
inline void RaceRewardStage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceRewardStage.id)
}

// required uint32 race_level = 2;
inline bool RaceRewardStage::has_race_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceRewardStage::set_has_race_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceRewardStage::clear_has_race_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceRewardStage::clear_race_level() {
  race_level_ = 0u;
  clear_has_race_level();
}
inline ::google::protobuf::uint32 RaceRewardStage::race_level() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceRewardStage.race_level)
  return race_level_;
}
inline void RaceRewardStage::set_race_level(::google::protobuf::uint32 value) {
  set_has_race_level();
  race_level_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceRewardStage.race_level)
}

// required uint32 point = 3;
inline bool RaceRewardStage::has_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaceRewardStage::set_has_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaceRewardStage::clear_has_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaceRewardStage::clear_point() {
  point_ = 0u;
  clear_has_point();
}
inline ::google::protobuf::uint32 RaceRewardStage::point() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceRewardStage.point)
  return point_;
}
inline void RaceRewardStage::set_point(::google::protobuf::uint32 value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceRewardStage.point)
}

// repeated .CommonGiftConfig.CommonModifyItemRate reward = 4;
inline int RaceRewardStage::reward_size() const {
  return reward_.size();
}
inline void RaceRewardStage::clear_reward() {
  reward_.Clear();
}
inline const ::CommonGiftConfig::CommonModifyItemRate& RaceRewardStage::reward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceRewardStage.reward)
  return reward_.Get(index);
}
inline ::CommonGiftConfig::CommonModifyItemRate* RaceRewardStage::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigAllianceRace.RaceRewardStage.reward)
  return reward_.Mutable(index);
}
inline ::CommonGiftConfig::CommonModifyItemRate* RaceRewardStage::add_reward() {
  // @@protoc_insertion_point(field_add:ConfigAllianceRace.RaceRewardStage.reward)
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItemRate >&
RaceRewardStage::reward() const {
  // @@protoc_insertion_point(field_list:ConfigAllianceRace.RaceRewardStage.reward)
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItemRate >*
RaceRewardStage::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigAllianceRace.RaceRewardStage.reward)
  return &reward_;
}

// -------------------------------------------------------------------

// RaceReward

// required uint32 id = 1;
inline bool RaceReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RaceReward::id() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceReward.id)
  return id_;
}
inline void RaceReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceReward.id)
}

// required uint32 min_level = 2;
inline bool RaceReward::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceReward::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceReward::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceReward::clear_min_level() {
  min_level_ = 0u;
  clear_has_min_level();
}
inline ::google::protobuf::uint32 RaceReward::min_level() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceReward.min_level)
  return min_level_;
}
inline void RaceReward::set_min_level(::google::protobuf::uint32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceReward.min_level)
}

// required uint32 max_level = 3;
inline bool RaceReward::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaceReward::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaceReward::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaceReward::clear_max_level() {
  max_level_ = 0u;
  clear_has_max_level();
}
inline ::google::protobuf::uint32 RaceReward::max_level() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceReward.max_level)
  return max_level_;
}
inline void RaceReward::set_max_level(::google::protobuf::uint32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceReward.max_level)
}

// repeated .ConfigAllianceRace.RaceRewardRank rank = 4;
inline int RaceReward::rank_size() const {
  return rank_.size();
}
inline void RaceReward::clear_rank() {
  rank_.Clear();
}
inline const ::ConfigAllianceRace::RaceRewardRank& RaceReward::rank(int index) const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceReward.rank)
  return rank_.Get(index);
}
inline ::ConfigAllianceRace::RaceRewardRank* RaceReward::mutable_rank(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigAllianceRace.RaceReward.rank)
  return rank_.Mutable(index);
}
inline ::ConfigAllianceRace::RaceRewardRank* RaceReward::add_rank() {
  // @@protoc_insertion_point(field_add:ConfigAllianceRace.RaceReward.rank)
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceRewardRank >&
RaceReward::rank() const {
  // @@protoc_insertion_point(field_list:ConfigAllianceRace.RaceReward.rank)
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceRewardRank >*
RaceReward::mutable_rank() {
  // @@protoc_insertion_point(field_mutable_list:ConfigAllianceRace.RaceReward.rank)
  return &rank_;
}

// repeated .CommonGiftConfig.CommonModifyItemRate grade_reward = 5;
inline int RaceReward::grade_reward_size() const {
  return grade_reward_.size();
}
inline void RaceReward::clear_grade_reward() {
  grade_reward_.Clear();
}
inline const ::CommonGiftConfig::CommonModifyItemRate& RaceReward::grade_reward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceReward.grade_reward)
  return grade_reward_.Get(index);
}
inline ::CommonGiftConfig::CommonModifyItemRate* RaceReward::mutable_grade_reward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigAllianceRace.RaceReward.grade_reward)
  return grade_reward_.Mutable(index);
}
inline ::CommonGiftConfig::CommonModifyItemRate* RaceReward::add_grade_reward() {
  // @@protoc_insertion_point(field_add:ConfigAllianceRace.RaceReward.grade_reward)
  return grade_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItemRate >&
RaceReward::grade_reward() const {
  // @@protoc_insertion_point(field_list:ConfigAllianceRace.RaceReward.grade_reward)
  return grade_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItemRate >*
RaceReward::mutable_grade_reward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigAllianceRace.RaceReward.grade_reward)
  return &grade_reward_;
}

// repeated .ConfigAllianceRace.RaceRewardStage stage = 6;
inline int RaceReward::stage_size() const {
  return stage_.size();
}
inline void RaceReward::clear_stage() {
  stage_.Clear();
}
inline const ::ConfigAllianceRace::RaceRewardStage& RaceReward::stage(int index) const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceReward.stage)
  return stage_.Get(index);
}
inline ::ConfigAllianceRace::RaceRewardStage* RaceReward::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigAllianceRace.RaceReward.stage)
  return stage_.Mutable(index);
}
inline ::ConfigAllianceRace::RaceRewardStage* RaceReward::add_stage() {
  // @@protoc_insertion_point(field_add:ConfigAllianceRace.RaceReward.stage)
  return stage_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceRewardStage >&
RaceReward::stage() const {
  // @@protoc_insertion_point(field_list:ConfigAllianceRace.RaceReward.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceRewardStage >*
RaceReward::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:ConfigAllianceRace.RaceReward.stage)
  return &stage_;
}

// -------------------------------------------------------------------

// RaceInfo

// required uint32 stage_reward_refresh_cost = 1;
inline bool RaceInfo::has_stage_reward_refresh_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceInfo::set_has_stage_reward_refresh_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceInfo::clear_has_stage_reward_refresh_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceInfo::clear_stage_reward_refresh_cost() {
  stage_reward_refresh_cost_ = 0u;
  clear_has_stage_reward_refresh_cost();
}
inline ::google::protobuf::uint32 RaceInfo::stage_reward_refresh_cost() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceInfo.stage_reward_refresh_cost)
  return stage_reward_refresh_cost_;
}
inline void RaceInfo::set_stage_reward_refresh_cost(::google::protobuf::uint32 value) {
  set_has_stage_reward_refresh_cost();
  stage_reward_refresh_cost_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceInfo.stage_reward_refresh_cost)
}

// required uint32 start_ts = 2;
inline bool RaceInfo::has_start_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceInfo::set_has_start_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceInfo::clear_has_start_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceInfo::clear_start_ts() {
  start_ts_ = 0u;
  clear_has_start_ts();
}
inline ::google::protobuf::uint32 RaceInfo::start_ts() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceInfo.start_ts)
  return start_ts_;
}
inline void RaceInfo::set_start_ts(::google::protobuf::uint32 value) {
  set_has_start_ts();
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceInfo.start_ts)
}

// required uint32 end_ts = 3;
inline bool RaceInfo::has_end_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaceInfo::set_has_end_ts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaceInfo::clear_has_end_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaceInfo::clear_end_ts() {
  end_ts_ = 0u;
  clear_has_end_ts();
}
inline ::google::protobuf::uint32 RaceInfo::end_ts() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceInfo.end_ts)
  return end_ts_;
}
inline void RaceInfo::set_end_ts(::google::protobuf::uint32 value) {
  set_has_end_ts();
  end_ts_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceInfo.end_ts)
}

// repeated .ConfigAllianceRace.RaceGrade grade = 4;
inline int RaceInfo::grade_size() const {
  return grade_.size();
}
inline void RaceInfo::clear_grade() {
  grade_.Clear();
}
inline const ::ConfigAllianceRace::RaceGrade& RaceInfo::grade(int index) const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceInfo.grade)
  return grade_.Get(index);
}
inline ::ConfigAllianceRace::RaceGrade* RaceInfo::mutable_grade(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigAllianceRace.RaceInfo.grade)
  return grade_.Mutable(index);
}
inline ::ConfigAllianceRace::RaceGrade* RaceInfo::add_grade() {
  // @@protoc_insertion_point(field_add:ConfigAllianceRace.RaceInfo.grade)
  return grade_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceGrade >&
RaceInfo::grade() const {
  // @@protoc_insertion_point(field_list:ConfigAllianceRace.RaceInfo.grade)
  return grade_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceGrade >*
RaceInfo::mutable_grade() {
  // @@protoc_insertion_point(field_mutable_list:ConfigAllianceRace.RaceInfo.grade)
  return &grade_;
}

// required .ConfigAllianceRace.RaceWatchAdReward watch_ad_reward = 5;
inline bool RaceInfo::has_watch_ad_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RaceInfo::set_has_watch_ad_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RaceInfo::clear_has_watch_ad_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RaceInfo::clear_watch_ad_reward() {
  if (watch_ad_reward_ != NULL) watch_ad_reward_->::ConfigAllianceRace::RaceWatchAdReward::Clear();
  clear_has_watch_ad_reward();
}
inline const ::ConfigAllianceRace::RaceWatchAdReward& RaceInfo::watch_ad_reward() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceInfo.watch_ad_reward)
  return watch_ad_reward_ != NULL ? *watch_ad_reward_ : *default_instance_->watch_ad_reward_;
}
inline ::ConfigAllianceRace::RaceWatchAdReward* RaceInfo::mutable_watch_ad_reward() {
  set_has_watch_ad_reward();
  if (watch_ad_reward_ == NULL) watch_ad_reward_ = new ::ConfigAllianceRace::RaceWatchAdReward;
  // @@protoc_insertion_point(field_mutable:ConfigAllianceRace.RaceInfo.watch_ad_reward)
  return watch_ad_reward_;
}
inline ::ConfigAllianceRace::RaceWatchAdReward* RaceInfo::release_watch_ad_reward() {
  clear_has_watch_ad_reward();
  ::ConfigAllianceRace::RaceWatchAdReward* temp = watch_ad_reward_;
  watch_ad_reward_ = NULL;
  return temp;
}
inline void RaceInfo::set_allocated_watch_ad_reward(::ConfigAllianceRace::RaceWatchAdReward* watch_ad_reward) {
  delete watch_ad_reward_;
  watch_ad_reward_ = watch_ad_reward;
  if (watch_ad_reward) {
    set_has_watch_ad_reward();
  } else {
    clear_has_watch_ad_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigAllianceRace.RaceInfo.watch_ad_reward)
}

// required .ConfigAllianceRace.RaceTask task = 6;
inline bool RaceInfo::has_task() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RaceInfo::set_has_task() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RaceInfo::clear_has_task() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RaceInfo::clear_task() {
  if (task_ != NULL) task_->::ConfigAllianceRace::RaceTask::Clear();
  clear_has_task();
}
inline const ::ConfigAllianceRace::RaceTask& RaceInfo::task() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceInfo.task)
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::ConfigAllianceRace::RaceTask* RaceInfo::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::ConfigAllianceRace::RaceTask;
  // @@protoc_insertion_point(field_mutable:ConfigAllianceRace.RaceInfo.task)
  return task_;
}
inline ::ConfigAllianceRace::RaceTask* RaceInfo::release_task() {
  clear_has_task();
  ::ConfigAllianceRace::RaceTask* temp = task_;
  task_ = NULL;
  return temp;
}
inline void RaceInfo::set_allocated_task(::ConfigAllianceRace::RaceTask* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigAllianceRace.RaceInfo.task)
}

// repeated .ConfigAllianceRace.RaceReward rewards = 7;
inline int RaceInfo::rewards_size() const {
  return rewards_.size();
}
inline void RaceInfo::clear_rewards() {
  rewards_.Clear();
}
inline const ::ConfigAllianceRace::RaceReward& RaceInfo::rewards(int index) const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceInfo.rewards)
  return rewards_.Get(index);
}
inline ::ConfigAllianceRace::RaceReward* RaceInfo::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigAllianceRace.RaceInfo.rewards)
  return rewards_.Mutable(index);
}
inline ::ConfigAllianceRace::RaceReward* RaceInfo::add_rewards() {
  // @@protoc_insertion_point(field_add:ConfigAllianceRace.RaceInfo.rewards)
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceReward >&
RaceInfo::rewards() const {
  // @@protoc_insertion_point(field_list:ConfigAllianceRace.RaceInfo.rewards)
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigAllianceRace::RaceReward >*
RaceInfo::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:ConfigAllianceRace.RaceInfo.rewards)
  return &rewards_;
}

// -------------------------------------------------------------------

// RaceWatchAdReward

// required uint32 diamond = 1;
inline bool RaceWatchAdReward::has_diamond() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaceWatchAdReward::set_has_diamond() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaceWatchAdReward::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaceWatchAdReward::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 RaceWatchAdReward::diamond() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceWatchAdReward.diamond)
  return diamond_;
}
inline void RaceWatchAdReward::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceWatchAdReward.diamond)
}

// required uint32 point = 2;
inline bool RaceWatchAdReward::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaceWatchAdReward::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaceWatchAdReward::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaceWatchAdReward::clear_point() {
  point_ = 0u;
  clear_has_point();
}
inline ::google::protobuf::uint32 RaceWatchAdReward::point() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceWatchAdReward.point)
  return point_;
}
inline void RaceWatchAdReward::set_point(::google::protobuf::uint32 value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceWatchAdReward.point)
}

// required uint32 count = 3;
inline bool RaceWatchAdReward::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaceWatchAdReward::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaceWatchAdReward::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaceWatchAdReward::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 RaceWatchAdReward::count() const {
  // @@protoc_insertion_point(field_get:ConfigAllianceRace.RaceWatchAdReward.count)
  return count_;
}
inline void RaceWatchAdReward::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:ConfigAllianceRace.RaceWatchAdReward.count)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigAllianceRace

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ConfigAllianceRace_2eproto__INCLUDED
