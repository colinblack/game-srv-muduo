// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoFriendlyTree.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoFriendlyTree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoFriendlyTree {

namespace {

const ::google::protobuf::Descriptor* FriendlyTreeBasicCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendlyTreeBasicCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendlyTreeStatusCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendlyTreeStatusCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendlyTreeCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendlyTreeCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendlyTreeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendlyTreeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendlyTreeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendlyTreeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaterFriendlyTreeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaterFriendlyTreeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaterFriendlyTreeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaterFriendlyTreeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWaterFriendlyTreeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWaterFriendlyTreeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSWaterFriendlyTreeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSWaterFriendlyTreeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardFriendlyTreeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardFriendlyTreeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardFriendlyTreeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardFriendlyTreeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushFriendlyTreeMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushFriendlyTreeMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoFriendlyTree_2eproto() {
  protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoFriendlyTree.proto");
  GOOGLE_CHECK(file != NULL);
  FriendlyTreeBasicCPP_descriptor_ = file->message_type(0);
  static const int FriendlyTreeBasicCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, ts_),
  };
  FriendlyTreeBasicCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendlyTreeBasicCPP_descriptor_,
      FriendlyTreeBasicCPP::default_instance_,
      FriendlyTreeBasicCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendlyTreeBasicCPP));
  FriendlyTreeStatusCPP_descriptor_ = file->message_type(1);
  static const int FriendlyTreeStatusCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeStatusCPP, treestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeStatusCPP, nextwaterts_),
  };
  FriendlyTreeStatusCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendlyTreeStatusCPP_descriptor_,
      FriendlyTreeStatusCPP::default_instance_,
      FriendlyTreeStatusCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeStatusCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeStatusCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendlyTreeStatusCPP));
  FriendlyTreeCPP_descriptor_ = file->message_type(2);
  static const int FriendlyTreeCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeCPP, basictreeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeCPP, statustreeinfo_),
  };
  FriendlyTreeCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendlyTreeCPP_descriptor_,
      FriendlyTreeCPP::default_instance_,
      FriendlyTreeCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendlyTreeCPP));
  GetFriendlyTreeReq_descriptor_ = file->message_type(3);
  static const int GetFriendlyTreeReq_offsets_[1] = {
  };
  GetFriendlyTreeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendlyTreeReq_descriptor_,
      GetFriendlyTreeReq::default_instance_,
      GetFriendlyTreeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendlyTreeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendlyTreeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendlyTreeReq));
  GetFriendlyTreeResp_descriptor_ = file->message_type(4);
  static const int GetFriendlyTreeResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendlyTreeResp, basictreeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendlyTreeResp, statustreeinfo_),
  };
  GetFriendlyTreeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendlyTreeResp_descriptor_,
      GetFriendlyTreeResp::default_instance_,
      GetFriendlyTreeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendlyTreeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendlyTreeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendlyTreeResp));
  WaterFriendlyTreeReq_descriptor_ = file->message_type(5);
  static const int WaterFriendlyTreeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaterFriendlyTreeReq, othuid_),
  };
  WaterFriendlyTreeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaterFriendlyTreeReq_descriptor_,
      WaterFriendlyTreeReq::default_instance_,
      WaterFriendlyTreeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaterFriendlyTreeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaterFriendlyTreeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaterFriendlyTreeReq));
  WaterFriendlyTreeResp_descriptor_ = file->message_type(6);
  static const int WaterFriendlyTreeResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaterFriendlyTreeResp, statustreeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaterFriendlyTreeResp, curfriendlyvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaterFriendlyTreeResp, basictreeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaterFriendlyTreeResp, code_),
  };
  WaterFriendlyTreeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaterFriendlyTreeResp_descriptor_,
      WaterFriendlyTreeResp::default_instance_,
      WaterFriendlyTreeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaterFriendlyTreeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaterFriendlyTreeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaterFriendlyTreeResp));
  CSWaterFriendlyTreeReq_descriptor_ = file->message_type(7);
  static const int CSWaterFriendlyTreeReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWaterFriendlyTreeReq, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWaterFriendlyTreeReq, myname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWaterFriendlyTreeReq, myhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWaterFriendlyTreeReq, othuid_),
  };
  CSWaterFriendlyTreeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWaterFriendlyTreeReq_descriptor_,
      CSWaterFriendlyTreeReq::default_instance_,
      CSWaterFriendlyTreeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWaterFriendlyTreeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWaterFriendlyTreeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWaterFriendlyTreeReq));
  CSWaterFriendlyTreeResp_descriptor_ = file->message_type(8);
  static const int CSWaterFriendlyTreeResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWaterFriendlyTreeResp, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWaterFriendlyTreeResp, statustreeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWaterFriendlyTreeResp, basictreeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWaterFriendlyTreeResp, code_),
  };
  CSWaterFriendlyTreeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSWaterFriendlyTreeResp_descriptor_,
      CSWaterFriendlyTreeResp::default_instance_,
      CSWaterFriendlyTreeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWaterFriendlyTreeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSWaterFriendlyTreeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSWaterFriendlyTreeResp));
  RewardFriendlyTreeReq_descriptor_ = file->message_type(9);
  static const int RewardFriendlyTreeReq_offsets_[1] = {
  };
  RewardFriendlyTreeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardFriendlyTreeReq_descriptor_,
      RewardFriendlyTreeReq::default_instance_,
      RewardFriendlyTreeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardFriendlyTreeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardFriendlyTreeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardFriendlyTreeReq));
  RewardFriendlyTreeResp_descriptor_ = file->message_type(10);
  static const int RewardFriendlyTreeResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardFriendlyTreeResp, basictreeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardFriendlyTreeResp, statustreeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardFriendlyTreeResp, friendlyvalue_),
  };
  RewardFriendlyTreeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardFriendlyTreeResp_descriptor_,
      RewardFriendlyTreeResp::default_instance_,
      RewardFriendlyTreeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardFriendlyTreeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardFriendlyTreeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardFriendlyTreeResp));
  PushFriendlyTreeMsg_descriptor_ = file->message_type(11);
  static const int PushFriendlyTreeMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFriendlyTreeMsg, basictreeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFriendlyTreeMsg, statustreeinfo_),
  };
  PushFriendlyTreeMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushFriendlyTreeMsg_descriptor_,
      PushFriendlyTreeMsg::default_instance_,
      PushFriendlyTreeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFriendlyTreeMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFriendlyTreeMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushFriendlyTreeMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoFriendlyTree_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendlyTreeBasicCPP_descriptor_, &FriendlyTreeBasicCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendlyTreeStatusCPP_descriptor_, &FriendlyTreeStatusCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendlyTreeCPP_descriptor_, &FriendlyTreeCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendlyTreeReq_descriptor_, &GetFriendlyTreeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendlyTreeResp_descriptor_, &GetFriendlyTreeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaterFriendlyTreeReq_descriptor_, &WaterFriendlyTreeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaterFriendlyTreeResp_descriptor_, &WaterFriendlyTreeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWaterFriendlyTreeReq_descriptor_, &CSWaterFriendlyTreeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSWaterFriendlyTreeResp_descriptor_, &CSWaterFriendlyTreeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardFriendlyTreeReq_descriptor_, &RewardFriendlyTreeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardFriendlyTreeResp_descriptor_, &RewardFriendlyTreeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushFriendlyTreeMsg_descriptor_, &PushFriendlyTreeMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoFriendlyTree_2eproto() {
  delete FriendlyTreeBasicCPP::default_instance_;
  delete FriendlyTreeBasicCPP_reflection_;
  delete FriendlyTreeStatusCPP::default_instance_;
  delete FriendlyTreeStatusCPP_reflection_;
  delete FriendlyTreeCPP::default_instance_;
  delete FriendlyTreeCPP_reflection_;
  delete GetFriendlyTreeReq::default_instance_;
  delete GetFriendlyTreeReq_reflection_;
  delete GetFriendlyTreeResp::default_instance_;
  delete GetFriendlyTreeResp_reflection_;
  delete WaterFriendlyTreeReq::default_instance_;
  delete WaterFriendlyTreeReq_reflection_;
  delete WaterFriendlyTreeResp::default_instance_;
  delete WaterFriendlyTreeResp_reflection_;
  delete CSWaterFriendlyTreeReq::default_instance_;
  delete CSWaterFriendlyTreeReq_reflection_;
  delete CSWaterFriendlyTreeResp::default_instance_;
  delete CSWaterFriendlyTreeResp_reflection_;
  delete RewardFriendlyTreeReq::default_instance_;
  delete RewardFriendlyTreeReq_reflection_;
  delete RewardFriendlyTreeResp::default_instance_;
  delete RewardFriendlyTreeResp_reflection_;
  delete PushFriendlyTreeMsg::default_instance_;
  delete PushFriendlyTreeMsg_reflection_;
}

void protobuf_AddDesc_ProtoFriendlyTree_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ProtoFriendlyTree.proto\022\021ProtoFriendly"
    "Tree\"Z\n\024FriendlyTreeBasicCPP\022\n\n\002id\030\001 \002(\r"
    "\022\016\n\006othuid\030\002 \002(\r\022\014\n\004name\030\003 \002(\014\022\014\n\004head\030\004"
    " \002(\014\022\n\n\002ts\030\005 \002(\r\"@\n\025FriendlyTreeStatusCP"
    "P\022\022\n\ntreestatus\030\001 \002(\r\022\023\n\013nextwaterts\030\002 \001"
    "(\r\"\223\001\n\017FriendlyTreeCPP\022>\n\rbasictreeinfo\030"
    "\001 \003(\0132\'.ProtoFriendlyTree.FriendlyTreeBa"
    "sicCPP\022@\n\016statustreeinfo\030\002 \002(\0132(.ProtoFr"
    "iendlyTree.FriendlyTreeStatusCPP\"\024\n\022GetF"
    "riendlyTreeReq\"\227\001\n\023GetFriendlyTreeResp\022>"
    "\n\rbasictreeinfo\030\001 \003(\0132\'.ProtoFriendlyTre"
    "e.FriendlyTreeBasicCPP\022@\n\016statustreeinfo"
    "\030\002 \002(\0132(.ProtoFriendlyTree.FriendlyTreeS"
    "tatusCPP\"&\n\024WaterFriendlyTreeReq\022\016\n\006othu"
    "id\030\001 \002(\r\"\301\001\n\025WaterFriendlyTreeResp\022@\n\016st"
    "atustreeinfo\030\001 \001(\0132(.ProtoFriendlyTree.F"
    "riendlyTreeStatusCPP\022\030\n\020curfriendlyvalue"
    "\030\002 \001(\r\022>\n\rbasictreeinfo\030\003 \001(\0132\'.ProtoFri"
    "endlyTree.FriendlyTreeBasicCPP\022\014\n\004code\030\004"
    " \002(\r\"W\n\026CSWaterFriendlyTreeReq\022\r\n\005myuid\030"
    "\001 \002(\r\022\016\n\006myname\030\002 \002(\014\022\016\n\006myhead\030\003 \002(\014\022\016\n"
    "\006othuid\030\004 \002(\r\"\270\001\n\027CSWaterFriendlyTreeRes"
    "p\022\r\n\005myuid\030\001 \001(\r\022@\n\016statustreeinfo\030\002 \001(\013"
    "2(.ProtoFriendlyTree.FriendlyTreeStatusC"
    "PP\022>\n\rbasictreeinfo\030\003 \001(\0132\'.ProtoFriendl"
    "yTree.FriendlyTreeBasicCPP\022\014\n\004code\030\004 \002(\r"
    "\"\027\n\025RewardFriendlyTreeReq\"\261\001\n\026RewardFrie"
    "ndlyTreeResp\022>\n\rbasictreeinfo\030\001 \003(\0132\'.Pr"
    "otoFriendlyTree.FriendlyTreeBasicCPP\022@\n\016"
    "statustreeinfo\030\002 \002(\0132(.ProtoFriendlyTree"
    ".FriendlyTreeStatusCPP\022\025\n\rfriendlyValue\030"
    "\003 \002(\r\"\227\001\n\023PushFriendlyTreeMsg\022>\n\rbasictr"
    "eeinfo\030\001 \003(\0132\'.ProtoFriendlyTree.Friendl"
    "yTreeBasicCPP\022@\n\016statustreeinfo\030\002 \002(\0132(."
    "ProtoFriendlyTree.FriendlyTreeStatusCPP", 1399);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoFriendlyTree.proto", &protobuf_RegisterTypes);
  FriendlyTreeBasicCPP::default_instance_ = new FriendlyTreeBasicCPP();
  FriendlyTreeStatusCPP::default_instance_ = new FriendlyTreeStatusCPP();
  FriendlyTreeCPP::default_instance_ = new FriendlyTreeCPP();
  GetFriendlyTreeReq::default_instance_ = new GetFriendlyTreeReq();
  GetFriendlyTreeResp::default_instance_ = new GetFriendlyTreeResp();
  WaterFriendlyTreeReq::default_instance_ = new WaterFriendlyTreeReq();
  WaterFriendlyTreeResp::default_instance_ = new WaterFriendlyTreeResp();
  CSWaterFriendlyTreeReq::default_instance_ = new CSWaterFriendlyTreeReq();
  CSWaterFriendlyTreeResp::default_instance_ = new CSWaterFriendlyTreeResp();
  RewardFriendlyTreeReq::default_instance_ = new RewardFriendlyTreeReq();
  RewardFriendlyTreeResp::default_instance_ = new RewardFriendlyTreeResp();
  PushFriendlyTreeMsg::default_instance_ = new PushFriendlyTreeMsg();
  FriendlyTreeBasicCPP::default_instance_->InitAsDefaultInstance();
  FriendlyTreeStatusCPP::default_instance_->InitAsDefaultInstance();
  FriendlyTreeCPP::default_instance_->InitAsDefaultInstance();
  GetFriendlyTreeReq::default_instance_->InitAsDefaultInstance();
  GetFriendlyTreeResp::default_instance_->InitAsDefaultInstance();
  WaterFriendlyTreeReq::default_instance_->InitAsDefaultInstance();
  WaterFriendlyTreeResp::default_instance_->InitAsDefaultInstance();
  CSWaterFriendlyTreeReq::default_instance_->InitAsDefaultInstance();
  CSWaterFriendlyTreeResp::default_instance_->InitAsDefaultInstance();
  RewardFriendlyTreeReq::default_instance_->InitAsDefaultInstance();
  RewardFriendlyTreeResp::default_instance_->InitAsDefaultInstance();
  PushFriendlyTreeMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoFriendlyTree_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoFriendlyTree_2eproto {
  StaticDescriptorInitializer_ProtoFriendlyTree_2eproto() {
    protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  }
} static_descriptor_initializer_ProtoFriendlyTree_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FriendlyTreeBasicCPP::kIdFieldNumber;
const int FriendlyTreeBasicCPP::kOthuidFieldNumber;
const int FriendlyTreeBasicCPP::kNameFieldNumber;
const int FriendlyTreeBasicCPP::kHeadFieldNumber;
const int FriendlyTreeBasicCPP::kTsFieldNumber;
#endif  // !_MSC_VER

FriendlyTreeBasicCPP::FriendlyTreeBasicCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendlyTree.FriendlyTreeBasicCPP)
}

void FriendlyTreeBasicCPP::InitAsDefaultInstance() {
}

FriendlyTreeBasicCPP::FriendlyTreeBasicCPP(const FriendlyTreeBasicCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendlyTree.FriendlyTreeBasicCPP)
}

void FriendlyTreeBasicCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  othuid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendlyTreeBasicCPP::~FriendlyTreeBasicCPP() {
  // @@protoc_insertion_point(destructor:ProtoFriendlyTree.FriendlyTreeBasicCPP)
  SharedDtor();
}

void FriendlyTreeBasicCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete head_;
  }
  if (this != default_instance_) {
  }
}

void FriendlyTreeBasicCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendlyTreeBasicCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendlyTreeBasicCPP_descriptor_;
}

const FriendlyTreeBasicCPP& FriendlyTreeBasicCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  return *default_instance_;
}

FriendlyTreeBasicCPP* FriendlyTreeBasicCPP::default_instance_ = NULL;

FriendlyTreeBasicCPP* FriendlyTreeBasicCPP::New() const {
  return new FriendlyTreeBasicCPP;
}

void FriendlyTreeBasicCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendlyTreeBasicCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, othuid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        head_->clear();
      }
    }
    ts_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendlyTreeBasicCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendlyTree.FriendlyTreeBasicCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_othuid;
        break;
      }

      // required uint32 othuid = 2;
      case 2: {
        if (tag == 16) {
         parse_othuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_head;
        break;
      }

      // required bytes head = 4;
      case 4: {
        if (tag == 34) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ts;
        break;
      }

      // required uint32 ts = 5;
      case 5: {
        if (tag == 40) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendlyTree.FriendlyTreeBasicCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendlyTree.FriendlyTreeBasicCPP)
  return false;
#undef DO_
}

void FriendlyTreeBasicCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendlyTree.FriendlyTreeBasicCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->othuid(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required bytes head = 4;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->head(), output);
  }

  // required uint32 ts = 5;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendlyTree.FriendlyTreeBasicCPP)
}

::google::protobuf::uint8* FriendlyTreeBasicCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendlyTree.FriendlyTreeBasicCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->othuid(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes head = 4;
  if (has_head()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->head(), target);
  }

  // required uint32 ts = 5;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendlyTree.FriendlyTreeBasicCPP)
  return target;
}

int FriendlyTreeBasicCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 othuid = 2;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes head = 4;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->head());
    }

    // required uint32 ts = 5;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendlyTreeBasicCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendlyTreeBasicCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendlyTreeBasicCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendlyTreeBasicCPP::MergeFrom(const FriendlyTreeBasicCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendlyTreeBasicCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendlyTreeBasicCPP::CopyFrom(const FriendlyTreeBasicCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendlyTreeBasicCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FriendlyTreeBasicCPP::Swap(FriendlyTreeBasicCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(othuid_, other->othuid_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendlyTreeBasicCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendlyTreeBasicCPP_descriptor_;
  metadata.reflection = FriendlyTreeBasicCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendlyTreeStatusCPP::kTreestatusFieldNumber;
const int FriendlyTreeStatusCPP::kNextwatertsFieldNumber;
#endif  // !_MSC_VER

FriendlyTreeStatusCPP::FriendlyTreeStatusCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendlyTree.FriendlyTreeStatusCPP)
}

void FriendlyTreeStatusCPP::InitAsDefaultInstance() {
}

FriendlyTreeStatusCPP::FriendlyTreeStatusCPP(const FriendlyTreeStatusCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendlyTree.FriendlyTreeStatusCPP)
}

void FriendlyTreeStatusCPP::SharedCtor() {
  _cached_size_ = 0;
  treestatus_ = 0u;
  nextwaterts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendlyTreeStatusCPP::~FriendlyTreeStatusCPP() {
  // @@protoc_insertion_point(destructor:ProtoFriendlyTree.FriendlyTreeStatusCPP)
  SharedDtor();
}

void FriendlyTreeStatusCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendlyTreeStatusCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendlyTreeStatusCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendlyTreeStatusCPP_descriptor_;
}

const FriendlyTreeStatusCPP& FriendlyTreeStatusCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  return *default_instance_;
}

FriendlyTreeStatusCPP* FriendlyTreeStatusCPP::default_instance_ = NULL;

FriendlyTreeStatusCPP* FriendlyTreeStatusCPP::New() const {
  return new FriendlyTreeStatusCPP;
}

void FriendlyTreeStatusCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendlyTreeStatusCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(treestatus_, nextwaterts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendlyTreeStatusCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendlyTree.FriendlyTreeStatusCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 treestatus = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treestatus_)));
          set_has_treestatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nextwaterts;
        break;
      }

      // optional uint32 nextwaterts = 2;
      case 2: {
        if (tag == 16) {
         parse_nextwaterts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextwaterts_)));
          set_has_nextwaterts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendlyTree.FriendlyTreeStatusCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendlyTree.FriendlyTreeStatusCPP)
  return false;
#undef DO_
}

void FriendlyTreeStatusCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendlyTree.FriendlyTreeStatusCPP)
  // required uint32 treestatus = 1;
  if (has_treestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->treestatus(), output);
  }

  // optional uint32 nextwaterts = 2;
  if (has_nextwaterts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nextwaterts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendlyTree.FriendlyTreeStatusCPP)
}

::google::protobuf::uint8* FriendlyTreeStatusCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendlyTree.FriendlyTreeStatusCPP)
  // required uint32 treestatus = 1;
  if (has_treestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->treestatus(), target);
  }

  // optional uint32 nextwaterts = 2;
  if (has_nextwaterts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nextwaterts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendlyTree.FriendlyTreeStatusCPP)
  return target;
}

int FriendlyTreeStatusCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 treestatus = 1;
    if (has_treestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treestatus());
    }

    // optional uint32 nextwaterts = 2;
    if (has_nextwaterts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextwaterts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendlyTreeStatusCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendlyTreeStatusCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendlyTreeStatusCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendlyTreeStatusCPP::MergeFrom(const FriendlyTreeStatusCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_treestatus()) {
      set_treestatus(from.treestatus());
    }
    if (from.has_nextwaterts()) {
      set_nextwaterts(from.nextwaterts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendlyTreeStatusCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendlyTreeStatusCPP::CopyFrom(const FriendlyTreeStatusCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendlyTreeStatusCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FriendlyTreeStatusCPP::Swap(FriendlyTreeStatusCPP* other) {
  if (other != this) {
    std::swap(treestatus_, other->treestatus_);
    std::swap(nextwaterts_, other->nextwaterts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendlyTreeStatusCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendlyTreeStatusCPP_descriptor_;
  metadata.reflection = FriendlyTreeStatusCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendlyTreeCPP::kBasictreeinfoFieldNumber;
const int FriendlyTreeCPP::kStatustreeinfoFieldNumber;
#endif  // !_MSC_VER

FriendlyTreeCPP::FriendlyTreeCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendlyTree.FriendlyTreeCPP)
}

void FriendlyTreeCPP::InitAsDefaultInstance() {
  statustreeinfo_ = const_cast< ::ProtoFriendlyTree::FriendlyTreeStatusCPP*>(&::ProtoFriendlyTree::FriendlyTreeStatusCPP::default_instance());
}

FriendlyTreeCPP::FriendlyTreeCPP(const FriendlyTreeCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendlyTree.FriendlyTreeCPP)
}

void FriendlyTreeCPP::SharedCtor() {
  _cached_size_ = 0;
  statustreeinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendlyTreeCPP::~FriendlyTreeCPP() {
  // @@protoc_insertion_point(destructor:ProtoFriendlyTree.FriendlyTreeCPP)
  SharedDtor();
}

void FriendlyTreeCPP::SharedDtor() {
  if (this != default_instance_) {
    delete statustreeinfo_;
  }
}

void FriendlyTreeCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendlyTreeCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendlyTreeCPP_descriptor_;
}

const FriendlyTreeCPP& FriendlyTreeCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  return *default_instance_;
}

FriendlyTreeCPP* FriendlyTreeCPP::default_instance_ = NULL;

FriendlyTreeCPP* FriendlyTreeCPP::New() const {
  return new FriendlyTreeCPP;
}

void FriendlyTreeCPP::Clear() {
  if (has_statustreeinfo()) {
    if (statustreeinfo_ != NULL) statustreeinfo_->::ProtoFriendlyTree::FriendlyTreeStatusCPP::Clear();
  }
  basictreeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendlyTreeCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendlyTree.FriendlyTreeCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
      case 1: {
        if (tag == 10) {
         parse_basictreeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basictreeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_basictreeinfo;
        if (input->ExpectTag(18)) goto parse_statustreeinfo;
        break;
      }

      // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_statustreeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statustreeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendlyTree.FriendlyTreeCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendlyTree.FriendlyTreeCPP)
  return false;
#undef DO_
}

void FriendlyTreeCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendlyTree.FriendlyTreeCPP)
  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basictreeinfo(i), output);
  }

  // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  if (has_statustreeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statustreeinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendlyTree.FriendlyTreeCPP)
}

::google::protobuf::uint8* FriendlyTreeCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendlyTree.FriendlyTreeCPP)
  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basictreeinfo(i), target);
  }

  // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  if (has_statustreeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->statustreeinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendlyTree.FriendlyTreeCPP)
  return target;
}

int FriendlyTreeCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
    if (has_statustreeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statustreeinfo());
    }

  }
  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  total_size += 1 * this->basictreeinfo_size();
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basictreeinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendlyTreeCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendlyTreeCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendlyTreeCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendlyTreeCPP::MergeFrom(const FriendlyTreeCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  basictreeinfo_.MergeFrom(from.basictreeinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_statustreeinfo()) {
      mutable_statustreeinfo()->::ProtoFriendlyTree::FriendlyTreeStatusCPP::MergeFrom(from.statustreeinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendlyTreeCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendlyTreeCPP::CopyFrom(const FriendlyTreeCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendlyTreeCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->basictreeinfo())) return false;
  if (has_statustreeinfo()) {
    if (!this->statustreeinfo().IsInitialized()) return false;
  }
  return true;
}

void FriendlyTreeCPP::Swap(FriendlyTreeCPP* other) {
  if (other != this) {
    basictreeinfo_.Swap(&other->basictreeinfo_);
    std::swap(statustreeinfo_, other->statustreeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendlyTreeCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendlyTreeCPP_descriptor_;
  metadata.reflection = FriendlyTreeCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetFriendlyTreeReq::GetFriendlyTreeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendlyTree.GetFriendlyTreeReq)
}

void GetFriendlyTreeReq::InitAsDefaultInstance() {
}

GetFriendlyTreeReq::GetFriendlyTreeReq(const GetFriendlyTreeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendlyTree.GetFriendlyTreeReq)
}

void GetFriendlyTreeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendlyTreeReq::~GetFriendlyTreeReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendlyTree.GetFriendlyTreeReq)
  SharedDtor();
}

void GetFriendlyTreeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendlyTreeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendlyTreeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendlyTreeReq_descriptor_;
}

const GetFriendlyTreeReq& GetFriendlyTreeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  return *default_instance_;
}

GetFriendlyTreeReq* GetFriendlyTreeReq::default_instance_ = NULL;

GetFriendlyTreeReq* GetFriendlyTreeReq::New() const {
  return new GetFriendlyTreeReq;
}

void GetFriendlyTreeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendlyTreeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendlyTree.GetFriendlyTreeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendlyTree.GetFriendlyTreeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendlyTree.GetFriendlyTreeReq)
  return false;
#undef DO_
}

void GetFriendlyTreeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendlyTree.GetFriendlyTreeReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendlyTree.GetFriendlyTreeReq)
}

::google::protobuf::uint8* GetFriendlyTreeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendlyTree.GetFriendlyTreeReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendlyTree.GetFriendlyTreeReq)
  return target;
}

int GetFriendlyTreeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendlyTreeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendlyTreeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendlyTreeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendlyTreeReq::MergeFrom(const GetFriendlyTreeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendlyTreeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendlyTreeReq::CopyFrom(const GetFriendlyTreeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendlyTreeReq::IsInitialized() const {

  return true;
}

void GetFriendlyTreeReq::Swap(GetFriendlyTreeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendlyTreeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendlyTreeReq_descriptor_;
  metadata.reflection = GetFriendlyTreeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendlyTreeResp::kBasictreeinfoFieldNumber;
const int GetFriendlyTreeResp::kStatustreeinfoFieldNumber;
#endif  // !_MSC_VER

GetFriendlyTreeResp::GetFriendlyTreeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendlyTree.GetFriendlyTreeResp)
}

void GetFriendlyTreeResp::InitAsDefaultInstance() {
  statustreeinfo_ = const_cast< ::ProtoFriendlyTree::FriendlyTreeStatusCPP*>(&::ProtoFriendlyTree::FriendlyTreeStatusCPP::default_instance());
}

GetFriendlyTreeResp::GetFriendlyTreeResp(const GetFriendlyTreeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendlyTree.GetFriendlyTreeResp)
}

void GetFriendlyTreeResp::SharedCtor() {
  _cached_size_ = 0;
  statustreeinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendlyTreeResp::~GetFriendlyTreeResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendlyTree.GetFriendlyTreeResp)
  SharedDtor();
}

void GetFriendlyTreeResp::SharedDtor() {
  if (this != default_instance_) {
    delete statustreeinfo_;
  }
}

void GetFriendlyTreeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendlyTreeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendlyTreeResp_descriptor_;
}

const GetFriendlyTreeResp& GetFriendlyTreeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  return *default_instance_;
}

GetFriendlyTreeResp* GetFriendlyTreeResp::default_instance_ = NULL;

GetFriendlyTreeResp* GetFriendlyTreeResp::New() const {
  return new GetFriendlyTreeResp;
}

void GetFriendlyTreeResp::Clear() {
  if (has_statustreeinfo()) {
    if (statustreeinfo_ != NULL) statustreeinfo_->::ProtoFriendlyTree::FriendlyTreeStatusCPP::Clear();
  }
  basictreeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendlyTreeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendlyTree.GetFriendlyTreeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
      case 1: {
        if (tag == 10) {
         parse_basictreeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basictreeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_basictreeinfo;
        if (input->ExpectTag(18)) goto parse_statustreeinfo;
        break;
      }

      // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_statustreeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statustreeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendlyTree.GetFriendlyTreeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendlyTree.GetFriendlyTreeResp)
  return false;
#undef DO_
}

void GetFriendlyTreeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendlyTree.GetFriendlyTreeResp)
  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basictreeinfo(i), output);
  }

  // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  if (has_statustreeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statustreeinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendlyTree.GetFriendlyTreeResp)
}

::google::protobuf::uint8* GetFriendlyTreeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendlyTree.GetFriendlyTreeResp)
  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basictreeinfo(i), target);
  }

  // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  if (has_statustreeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->statustreeinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendlyTree.GetFriendlyTreeResp)
  return target;
}

int GetFriendlyTreeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
    if (has_statustreeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statustreeinfo());
    }

  }
  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  total_size += 1 * this->basictreeinfo_size();
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basictreeinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendlyTreeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendlyTreeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendlyTreeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendlyTreeResp::MergeFrom(const GetFriendlyTreeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  basictreeinfo_.MergeFrom(from.basictreeinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_statustreeinfo()) {
      mutable_statustreeinfo()->::ProtoFriendlyTree::FriendlyTreeStatusCPP::MergeFrom(from.statustreeinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendlyTreeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendlyTreeResp::CopyFrom(const GetFriendlyTreeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendlyTreeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->basictreeinfo())) return false;
  if (has_statustreeinfo()) {
    if (!this->statustreeinfo().IsInitialized()) return false;
  }
  return true;
}

void GetFriendlyTreeResp::Swap(GetFriendlyTreeResp* other) {
  if (other != this) {
    basictreeinfo_.Swap(&other->basictreeinfo_);
    std::swap(statustreeinfo_, other->statustreeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendlyTreeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendlyTreeResp_descriptor_;
  metadata.reflection = GetFriendlyTreeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WaterFriendlyTreeReq::kOthuidFieldNumber;
#endif  // !_MSC_VER

WaterFriendlyTreeReq::WaterFriendlyTreeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendlyTree.WaterFriendlyTreeReq)
}

void WaterFriendlyTreeReq::InitAsDefaultInstance() {
}

WaterFriendlyTreeReq::WaterFriendlyTreeReq(const WaterFriendlyTreeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendlyTree.WaterFriendlyTreeReq)
}

void WaterFriendlyTreeReq::SharedCtor() {
  _cached_size_ = 0;
  othuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaterFriendlyTreeReq::~WaterFriendlyTreeReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendlyTree.WaterFriendlyTreeReq)
  SharedDtor();
}

void WaterFriendlyTreeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WaterFriendlyTreeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaterFriendlyTreeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaterFriendlyTreeReq_descriptor_;
}

const WaterFriendlyTreeReq& WaterFriendlyTreeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  return *default_instance_;
}

WaterFriendlyTreeReq* WaterFriendlyTreeReq::default_instance_ = NULL;

WaterFriendlyTreeReq* WaterFriendlyTreeReq::New() const {
  return new WaterFriendlyTreeReq;
}

void WaterFriendlyTreeReq::Clear() {
  othuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaterFriendlyTreeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendlyTree.WaterFriendlyTreeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 othuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendlyTree.WaterFriendlyTreeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendlyTree.WaterFriendlyTreeReq)
  return false;
#undef DO_
}

void WaterFriendlyTreeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendlyTree.WaterFriendlyTreeReq)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->othuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendlyTree.WaterFriendlyTreeReq)
}

::google::protobuf::uint8* WaterFriendlyTreeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendlyTree.WaterFriendlyTreeReq)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->othuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendlyTree.WaterFriendlyTreeReq)
  return target;
}

int WaterFriendlyTreeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 othuid = 1;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaterFriendlyTreeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaterFriendlyTreeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaterFriendlyTreeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaterFriendlyTreeReq::MergeFrom(const WaterFriendlyTreeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaterFriendlyTreeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaterFriendlyTreeReq::CopyFrom(const WaterFriendlyTreeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaterFriendlyTreeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WaterFriendlyTreeReq::Swap(WaterFriendlyTreeReq* other) {
  if (other != this) {
    std::swap(othuid_, other->othuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaterFriendlyTreeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaterFriendlyTreeReq_descriptor_;
  metadata.reflection = WaterFriendlyTreeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WaterFriendlyTreeResp::kStatustreeinfoFieldNumber;
const int WaterFriendlyTreeResp::kCurfriendlyvalueFieldNumber;
const int WaterFriendlyTreeResp::kBasictreeinfoFieldNumber;
const int WaterFriendlyTreeResp::kCodeFieldNumber;
#endif  // !_MSC_VER

WaterFriendlyTreeResp::WaterFriendlyTreeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendlyTree.WaterFriendlyTreeResp)
}

void WaterFriendlyTreeResp::InitAsDefaultInstance() {
  statustreeinfo_ = const_cast< ::ProtoFriendlyTree::FriendlyTreeStatusCPP*>(&::ProtoFriendlyTree::FriendlyTreeStatusCPP::default_instance());
  basictreeinfo_ = const_cast< ::ProtoFriendlyTree::FriendlyTreeBasicCPP*>(&::ProtoFriendlyTree::FriendlyTreeBasicCPP::default_instance());
}

WaterFriendlyTreeResp::WaterFriendlyTreeResp(const WaterFriendlyTreeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendlyTree.WaterFriendlyTreeResp)
}

void WaterFriendlyTreeResp::SharedCtor() {
  _cached_size_ = 0;
  statustreeinfo_ = NULL;
  curfriendlyvalue_ = 0u;
  basictreeinfo_ = NULL;
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaterFriendlyTreeResp::~WaterFriendlyTreeResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendlyTree.WaterFriendlyTreeResp)
  SharedDtor();
}

void WaterFriendlyTreeResp::SharedDtor() {
  if (this != default_instance_) {
    delete statustreeinfo_;
    delete basictreeinfo_;
  }
}

void WaterFriendlyTreeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaterFriendlyTreeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaterFriendlyTreeResp_descriptor_;
}

const WaterFriendlyTreeResp& WaterFriendlyTreeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  return *default_instance_;
}

WaterFriendlyTreeResp* WaterFriendlyTreeResp::default_instance_ = NULL;

WaterFriendlyTreeResp* WaterFriendlyTreeResp::New() const {
  return new WaterFriendlyTreeResp;
}

void WaterFriendlyTreeResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WaterFriendlyTreeResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(curfriendlyvalue_, code_);
    if (has_statustreeinfo()) {
      if (statustreeinfo_ != NULL) statustreeinfo_->::ProtoFriendlyTree::FriendlyTreeStatusCPP::Clear();
    }
    if (has_basictreeinfo()) {
      if (basictreeinfo_ != NULL) basictreeinfo_->::ProtoFriendlyTree::FriendlyTreeBasicCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaterFriendlyTreeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendlyTree.WaterFriendlyTreeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statustreeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curfriendlyvalue;
        break;
      }

      // optional uint32 curfriendlyvalue = 2;
      case 2: {
        if (tag == 16) {
         parse_curfriendlyvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curfriendlyvalue_)));
          set_has_curfriendlyvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_basictreeinfo;
        break;
      }

      // optional .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_basictreeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basictreeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // required uint32 code = 4;
      case 4: {
        if (tag == 32) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendlyTree.WaterFriendlyTreeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendlyTree.WaterFriendlyTreeResp)
  return false;
#undef DO_
}

void WaterFriendlyTreeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendlyTree.WaterFriendlyTreeResp)
  // optional .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 1;
  if (has_statustreeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statustreeinfo(), output);
  }

  // optional uint32 curfriendlyvalue = 2;
  if (has_curfriendlyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curfriendlyvalue(), output);
  }

  // optional .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 3;
  if (has_basictreeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basictreeinfo(), output);
  }

  // required uint32 code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendlyTree.WaterFriendlyTreeResp)
}

::google::protobuf::uint8* WaterFriendlyTreeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendlyTree.WaterFriendlyTreeResp)
  // optional .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 1;
  if (has_statustreeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statustreeinfo(), target);
  }

  // optional uint32 curfriendlyvalue = 2;
  if (has_curfriendlyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curfriendlyvalue(), target);
  }

  // optional .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 3;
  if (has_basictreeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basictreeinfo(), target);
  }

  // required uint32 code = 4;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendlyTree.WaterFriendlyTreeResp)
  return target;
}

int WaterFriendlyTreeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 1;
    if (has_statustreeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statustreeinfo());
    }

    // optional uint32 curfriendlyvalue = 2;
    if (has_curfriendlyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curfriendlyvalue());
    }

    // optional .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 3;
    if (has_basictreeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basictreeinfo());
    }

    // required uint32 code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaterFriendlyTreeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaterFriendlyTreeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaterFriendlyTreeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaterFriendlyTreeResp::MergeFrom(const WaterFriendlyTreeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statustreeinfo()) {
      mutable_statustreeinfo()->::ProtoFriendlyTree::FriendlyTreeStatusCPP::MergeFrom(from.statustreeinfo());
    }
    if (from.has_curfriendlyvalue()) {
      set_curfriendlyvalue(from.curfriendlyvalue());
    }
    if (from.has_basictreeinfo()) {
      mutable_basictreeinfo()->::ProtoFriendlyTree::FriendlyTreeBasicCPP::MergeFrom(from.basictreeinfo());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaterFriendlyTreeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaterFriendlyTreeResp::CopyFrom(const WaterFriendlyTreeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaterFriendlyTreeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_statustreeinfo()) {
    if (!this->statustreeinfo().IsInitialized()) return false;
  }
  if (has_basictreeinfo()) {
    if (!this->basictreeinfo().IsInitialized()) return false;
  }
  return true;
}

void WaterFriendlyTreeResp::Swap(WaterFriendlyTreeResp* other) {
  if (other != this) {
    std::swap(statustreeinfo_, other->statustreeinfo_);
    std::swap(curfriendlyvalue_, other->curfriendlyvalue_);
    std::swap(basictreeinfo_, other->basictreeinfo_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaterFriendlyTreeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaterFriendlyTreeResp_descriptor_;
  metadata.reflection = WaterFriendlyTreeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSWaterFriendlyTreeReq::kMyuidFieldNumber;
const int CSWaterFriendlyTreeReq::kMynameFieldNumber;
const int CSWaterFriendlyTreeReq::kMyheadFieldNumber;
const int CSWaterFriendlyTreeReq::kOthuidFieldNumber;
#endif  // !_MSC_VER

CSWaterFriendlyTreeReq::CSWaterFriendlyTreeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendlyTree.CSWaterFriendlyTreeReq)
}

void CSWaterFriendlyTreeReq::InitAsDefaultInstance() {
}

CSWaterFriendlyTreeReq::CSWaterFriendlyTreeReq(const CSWaterFriendlyTreeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendlyTree.CSWaterFriendlyTreeReq)
}

void CSWaterFriendlyTreeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  myuid_ = 0u;
  myname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  myhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  othuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWaterFriendlyTreeReq::~CSWaterFriendlyTreeReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendlyTree.CSWaterFriendlyTreeReq)
  SharedDtor();
}

void CSWaterFriendlyTreeReq::SharedDtor() {
  if (myname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete myname_;
  }
  if (myhead_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete myhead_;
  }
  if (this != default_instance_) {
  }
}

void CSWaterFriendlyTreeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWaterFriendlyTreeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWaterFriendlyTreeReq_descriptor_;
}

const CSWaterFriendlyTreeReq& CSWaterFriendlyTreeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  return *default_instance_;
}

CSWaterFriendlyTreeReq* CSWaterFriendlyTreeReq::default_instance_ = NULL;

CSWaterFriendlyTreeReq* CSWaterFriendlyTreeReq::New() const {
  return new CSWaterFriendlyTreeReq;
}

void CSWaterFriendlyTreeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSWaterFriendlyTreeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(myuid_, othuid_);
    if (has_myname()) {
      if (myname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        myname_->clear();
      }
    }
    if (has_myhead()) {
      if (myhead_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        myhead_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWaterFriendlyTreeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendlyTree.CSWaterFriendlyTreeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_myname;
        break;
      }

      // required bytes myname = 2;
      case 2: {
        if (tag == 18) {
         parse_myname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_myname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_myhead;
        break;
      }

      // required bytes myhead = 3;
      case 3: {
        if (tag == 26) {
         parse_myhead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_myhead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_othuid;
        break;
      }

      // required uint32 othuid = 4;
      case 4: {
        if (tag == 32) {
         parse_othuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendlyTree.CSWaterFriendlyTreeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendlyTree.CSWaterFriendlyTreeReq)
  return false;
#undef DO_
}

void CSWaterFriendlyTreeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendlyTree.CSWaterFriendlyTreeReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }

  // required bytes myname = 2;
  if (has_myname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->myname(), output);
  }

  // required bytes myhead = 3;
  if (has_myhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->myhead(), output);
  }

  // required uint32 othuid = 4;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->othuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendlyTree.CSWaterFriendlyTreeReq)
}

::google::protobuf::uint8* CSWaterFriendlyTreeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendlyTree.CSWaterFriendlyTreeReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }

  // required bytes myname = 2;
  if (has_myname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->myname(), target);
  }

  // required bytes myhead = 3;
  if (has_myhead()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->myhead(), target);
  }

  // required uint32 othuid = 4;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->othuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendlyTree.CSWaterFriendlyTreeReq)
  return target;
}

int CSWaterFriendlyTreeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myuid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // required bytes myname = 2;
    if (has_myname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->myname());
    }

    // required bytes myhead = 3;
    if (has_myhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->myhead());
    }

    // required uint32 othuid = 4;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWaterFriendlyTreeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWaterFriendlyTreeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWaterFriendlyTreeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWaterFriendlyTreeReq::MergeFrom(const CSWaterFriendlyTreeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_myname()) {
      set_myname(from.myname());
    }
    if (from.has_myhead()) {
      set_myhead(from.myhead());
    }
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWaterFriendlyTreeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWaterFriendlyTreeReq::CopyFrom(const CSWaterFriendlyTreeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWaterFriendlyTreeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSWaterFriendlyTreeReq::Swap(CSWaterFriendlyTreeReq* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(myname_, other->myname_);
    std::swap(myhead_, other->myhead_);
    std::swap(othuid_, other->othuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWaterFriendlyTreeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWaterFriendlyTreeReq_descriptor_;
  metadata.reflection = CSWaterFriendlyTreeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSWaterFriendlyTreeResp::kMyuidFieldNumber;
const int CSWaterFriendlyTreeResp::kStatustreeinfoFieldNumber;
const int CSWaterFriendlyTreeResp::kBasictreeinfoFieldNumber;
const int CSWaterFriendlyTreeResp::kCodeFieldNumber;
#endif  // !_MSC_VER

CSWaterFriendlyTreeResp::CSWaterFriendlyTreeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendlyTree.CSWaterFriendlyTreeResp)
}

void CSWaterFriendlyTreeResp::InitAsDefaultInstance() {
  statustreeinfo_ = const_cast< ::ProtoFriendlyTree::FriendlyTreeStatusCPP*>(&::ProtoFriendlyTree::FriendlyTreeStatusCPP::default_instance());
  basictreeinfo_ = const_cast< ::ProtoFriendlyTree::FriendlyTreeBasicCPP*>(&::ProtoFriendlyTree::FriendlyTreeBasicCPP::default_instance());
}

CSWaterFriendlyTreeResp::CSWaterFriendlyTreeResp(const CSWaterFriendlyTreeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendlyTree.CSWaterFriendlyTreeResp)
}

void CSWaterFriendlyTreeResp::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  statustreeinfo_ = NULL;
  basictreeinfo_ = NULL;
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWaterFriendlyTreeResp::~CSWaterFriendlyTreeResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendlyTree.CSWaterFriendlyTreeResp)
  SharedDtor();
}

void CSWaterFriendlyTreeResp::SharedDtor() {
  if (this != default_instance_) {
    delete statustreeinfo_;
    delete basictreeinfo_;
  }
}

void CSWaterFriendlyTreeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSWaterFriendlyTreeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSWaterFriendlyTreeResp_descriptor_;
}

const CSWaterFriendlyTreeResp& CSWaterFriendlyTreeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  return *default_instance_;
}

CSWaterFriendlyTreeResp* CSWaterFriendlyTreeResp::default_instance_ = NULL;

CSWaterFriendlyTreeResp* CSWaterFriendlyTreeResp::New() const {
  return new CSWaterFriendlyTreeResp;
}

void CSWaterFriendlyTreeResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSWaterFriendlyTreeResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(myuid_, code_);
    if (has_statustreeinfo()) {
      if (statustreeinfo_ != NULL) statustreeinfo_->::ProtoFriendlyTree::FriendlyTreeStatusCPP::Clear();
    }
    if (has_basictreeinfo()) {
      if (basictreeinfo_ != NULL) basictreeinfo_->::ProtoFriendlyTree::FriendlyTreeBasicCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSWaterFriendlyTreeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendlyTree.CSWaterFriendlyTreeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 myuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_statustreeinfo;
        break;
      }

      // optional .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_statustreeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statustreeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_basictreeinfo;
        break;
      }

      // optional .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_basictreeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basictreeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // required uint32 code = 4;
      case 4: {
        if (tag == 32) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendlyTree.CSWaterFriendlyTreeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendlyTree.CSWaterFriendlyTreeResp)
  return false;
#undef DO_
}

void CSWaterFriendlyTreeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendlyTree.CSWaterFriendlyTreeResp)
  // optional uint32 myuid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }

  // optional .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  if (has_statustreeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statustreeinfo(), output);
  }

  // optional .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 3;
  if (has_basictreeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basictreeinfo(), output);
  }

  // required uint32 code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendlyTree.CSWaterFriendlyTreeResp)
}

::google::protobuf::uint8* CSWaterFriendlyTreeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendlyTree.CSWaterFriendlyTreeResp)
  // optional uint32 myuid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }

  // optional .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  if (has_statustreeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->statustreeinfo(), target);
  }

  // optional .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 3;
  if (has_basictreeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basictreeinfo(), target);
  }

  // required uint32 code = 4;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendlyTree.CSWaterFriendlyTreeResp)
  return target;
}

int CSWaterFriendlyTreeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 myuid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // optional .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
    if (has_statustreeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statustreeinfo());
    }

    // optional .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 3;
    if (has_basictreeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basictreeinfo());
    }

    // required uint32 code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWaterFriendlyTreeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSWaterFriendlyTreeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSWaterFriendlyTreeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSWaterFriendlyTreeResp::MergeFrom(const CSWaterFriendlyTreeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_statustreeinfo()) {
      mutable_statustreeinfo()->::ProtoFriendlyTree::FriendlyTreeStatusCPP::MergeFrom(from.statustreeinfo());
    }
    if (from.has_basictreeinfo()) {
      mutable_basictreeinfo()->::ProtoFriendlyTree::FriendlyTreeBasicCPP::MergeFrom(from.basictreeinfo());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSWaterFriendlyTreeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSWaterFriendlyTreeResp::CopyFrom(const CSWaterFriendlyTreeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWaterFriendlyTreeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_statustreeinfo()) {
    if (!this->statustreeinfo().IsInitialized()) return false;
  }
  if (has_basictreeinfo()) {
    if (!this->basictreeinfo().IsInitialized()) return false;
  }
  return true;
}

void CSWaterFriendlyTreeResp::Swap(CSWaterFriendlyTreeResp* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(statustreeinfo_, other->statustreeinfo_);
    std::swap(basictreeinfo_, other->basictreeinfo_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSWaterFriendlyTreeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSWaterFriendlyTreeResp_descriptor_;
  metadata.reflection = CSWaterFriendlyTreeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RewardFriendlyTreeReq::RewardFriendlyTreeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendlyTree.RewardFriendlyTreeReq)
}

void RewardFriendlyTreeReq::InitAsDefaultInstance() {
}

RewardFriendlyTreeReq::RewardFriendlyTreeReq(const RewardFriendlyTreeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendlyTree.RewardFriendlyTreeReq)
}

void RewardFriendlyTreeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardFriendlyTreeReq::~RewardFriendlyTreeReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendlyTree.RewardFriendlyTreeReq)
  SharedDtor();
}

void RewardFriendlyTreeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardFriendlyTreeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardFriendlyTreeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardFriendlyTreeReq_descriptor_;
}

const RewardFriendlyTreeReq& RewardFriendlyTreeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  return *default_instance_;
}

RewardFriendlyTreeReq* RewardFriendlyTreeReq::default_instance_ = NULL;

RewardFriendlyTreeReq* RewardFriendlyTreeReq::New() const {
  return new RewardFriendlyTreeReq;
}

void RewardFriendlyTreeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardFriendlyTreeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendlyTree.RewardFriendlyTreeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendlyTree.RewardFriendlyTreeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendlyTree.RewardFriendlyTreeReq)
  return false;
#undef DO_
}

void RewardFriendlyTreeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendlyTree.RewardFriendlyTreeReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendlyTree.RewardFriendlyTreeReq)
}

::google::protobuf::uint8* RewardFriendlyTreeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendlyTree.RewardFriendlyTreeReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendlyTree.RewardFriendlyTreeReq)
  return target;
}

int RewardFriendlyTreeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardFriendlyTreeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardFriendlyTreeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardFriendlyTreeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardFriendlyTreeReq::MergeFrom(const RewardFriendlyTreeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardFriendlyTreeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardFriendlyTreeReq::CopyFrom(const RewardFriendlyTreeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardFriendlyTreeReq::IsInitialized() const {

  return true;
}

void RewardFriendlyTreeReq::Swap(RewardFriendlyTreeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardFriendlyTreeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardFriendlyTreeReq_descriptor_;
  metadata.reflection = RewardFriendlyTreeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardFriendlyTreeResp::kBasictreeinfoFieldNumber;
const int RewardFriendlyTreeResp::kStatustreeinfoFieldNumber;
const int RewardFriendlyTreeResp::kFriendlyValueFieldNumber;
#endif  // !_MSC_VER

RewardFriendlyTreeResp::RewardFriendlyTreeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendlyTree.RewardFriendlyTreeResp)
}

void RewardFriendlyTreeResp::InitAsDefaultInstance() {
  statustreeinfo_ = const_cast< ::ProtoFriendlyTree::FriendlyTreeStatusCPP*>(&::ProtoFriendlyTree::FriendlyTreeStatusCPP::default_instance());
}

RewardFriendlyTreeResp::RewardFriendlyTreeResp(const RewardFriendlyTreeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendlyTree.RewardFriendlyTreeResp)
}

void RewardFriendlyTreeResp::SharedCtor() {
  _cached_size_ = 0;
  statustreeinfo_ = NULL;
  friendlyvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardFriendlyTreeResp::~RewardFriendlyTreeResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendlyTree.RewardFriendlyTreeResp)
  SharedDtor();
}

void RewardFriendlyTreeResp::SharedDtor() {
  if (this != default_instance_) {
    delete statustreeinfo_;
  }
}

void RewardFriendlyTreeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardFriendlyTreeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardFriendlyTreeResp_descriptor_;
}

const RewardFriendlyTreeResp& RewardFriendlyTreeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  return *default_instance_;
}

RewardFriendlyTreeResp* RewardFriendlyTreeResp::default_instance_ = NULL;

RewardFriendlyTreeResp* RewardFriendlyTreeResp::New() const {
  return new RewardFriendlyTreeResp;
}

void RewardFriendlyTreeResp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_statustreeinfo()) {
      if (statustreeinfo_ != NULL) statustreeinfo_->::ProtoFriendlyTree::FriendlyTreeStatusCPP::Clear();
    }
    friendlyvalue_ = 0u;
  }
  basictreeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardFriendlyTreeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendlyTree.RewardFriendlyTreeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
      case 1: {
        if (tag == 10) {
         parse_basictreeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basictreeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_basictreeinfo;
        if (input->ExpectTag(18)) goto parse_statustreeinfo;
        break;
      }

      // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_statustreeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statustreeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_friendlyValue;
        break;
      }

      // required uint32 friendlyValue = 3;
      case 3: {
        if (tag == 24) {
         parse_friendlyValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendlyvalue_)));
          set_has_friendlyvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendlyTree.RewardFriendlyTreeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendlyTree.RewardFriendlyTreeResp)
  return false;
#undef DO_
}

void RewardFriendlyTreeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendlyTree.RewardFriendlyTreeResp)
  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basictreeinfo(i), output);
  }

  // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  if (has_statustreeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statustreeinfo(), output);
  }

  // required uint32 friendlyValue = 3;
  if (has_friendlyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->friendlyvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendlyTree.RewardFriendlyTreeResp)
}

::google::protobuf::uint8* RewardFriendlyTreeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendlyTree.RewardFriendlyTreeResp)
  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basictreeinfo(i), target);
  }

  // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  if (has_statustreeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->statustreeinfo(), target);
  }

  // required uint32 friendlyValue = 3;
  if (has_friendlyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->friendlyvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendlyTree.RewardFriendlyTreeResp)
  return target;
}

int RewardFriendlyTreeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
    if (has_statustreeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statustreeinfo());
    }

    // required uint32 friendlyValue = 3;
    if (has_friendlyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendlyvalue());
    }

  }
  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  total_size += 1 * this->basictreeinfo_size();
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basictreeinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardFriendlyTreeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardFriendlyTreeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardFriendlyTreeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardFriendlyTreeResp::MergeFrom(const RewardFriendlyTreeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  basictreeinfo_.MergeFrom(from.basictreeinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_statustreeinfo()) {
      mutable_statustreeinfo()->::ProtoFriendlyTree::FriendlyTreeStatusCPP::MergeFrom(from.statustreeinfo());
    }
    if (from.has_friendlyvalue()) {
      set_friendlyvalue(from.friendlyvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardFriendlyTreeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardFriendlyTreeResp::CopyFrom(const RewardFriendlyTreeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardFriendlyTreeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->basictreeinfo())) return false;
  if (has_statustreeinfo()) {
    if (!this->statustreeinfo().IsInitialized()) return false;
  }
  return true;
}

void RewardFriendlyTreeResp::Swap(RewardFriendlyTreeResp* other) {
  if (other != this) {
    basictreeinfo_.Swap(&other->basictreeinfo_);
    std::swap(statustreeinfo_, other->statustreeinfo_);
    std::swap(friendlyvalue_, other->friendlyvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardFriendlyTreeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardFriendlyTreeResp_descriptor_;
  metadata.reflection = RewardFriendlyTreeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushFriendlyTreeMsg::kBasictreeinfoFieldNumber;
const int PushFriendlyTreeMsg::kStatustreeinfoFieldNumber;
#endif  // !_MSC_VER

PushFriendlyTreeMsg::PushFriendlyTreeMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendlyTree.PushFriendlyTreeMsg)
}

void PushFriendlyTreeMsg::InitAsDefaultInstance() {
  statustreeinfo_ = const_cast< ::ProtoFriendlyTree::FriendlyTreeStatusCPP*>(&::ProtoFriendlyTree::FriendlyTreeStatusCPP::default_instance());
}

PushFriendlyTreeMsg::PushFriendlyTreeMsg(const PushFriendlyTreeMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendlyTree.PushFriendlyTreeMsg)
}

void PushFriendlyTreeMsg::SharedCtor() {
  _cached_size_ = 0;
  statustreeinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushFriendlyTreeMsg::~PushFriendlyTreeMsg() {
  // @@protoc_insertion_point(destructor:ProtoFriendlyTree.PushFriendlyTreeMsg)
  SharedDtor();
}

void PushFriendlyTreeMsg::SharedDtor() {
  if (this != default_instance_) {
    delete statustreeinfo_;
  }
}

void PushFriendlyTreeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushFriendlyTreeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushFriendlyTreeMsg_descriptor_;
}

const PushFriendlyTreeMsg& PushFriendlyTreeMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  return *default_instance_;
}

PushFriendlyTreeMsg* PushFriendlyTreeMsg::default_instance_ = NULL;

PushFriendlyTreeMsg* PushFriendlyTreeMsg::New() const {
  return new PushFriendlyTreeMsg;
}

void PushFriendlyTreeMsg::Clear() {
  if (has_statustreeinfo()) {
    if (statustreeinfo_ != NULL) statustreeinfo_->::ProtoFriendlyTree::FriendlyTreeStatusCPP::Clear();
  }
  basictreeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushFriendlyTreeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendlyTree.PushFriendlyTreeMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
      case 1: {
        if (tag == 10) {
         parse_basictreeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basictreeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_basictreeinfo;
        if (input->ExpectTag(18)) goto parse_statustreeinfo;
        break;
      }

      // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_statustreeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statustreeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendlyTree.PushFriendlyTreeMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendlyTree.PushFriendlyTreeMsg)
  return false;
#undef DO_
}

void PushFriendlyTreeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendlyTree.PushFriendlyTreeMsg)
  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basictreeinfo(i), output);
  }

  // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  if (has_statustreeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statustreeinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendlyTree.PushFriendlyTreeMsg)
}

::google::protobuf::uint8* PushFriendlyTreeMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendlyTree.PushFriendlyTreeMsg)
  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basictreeinfo(i), target);
  }

  // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  if (has_statustreeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->statustreeinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendlyTree.PushFriendlyTreeMsg)
  return target;
}

int PushFriendlyTreeMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
    if (has_statustreeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statustreeinfo());
    }

  }
  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  total_size += 1 * this->basictreeinfo_size();
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basictreeinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushFriendlyTreeMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushFriendlyTreeMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushFriendlyTreeMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushFriendlyTreeMsg::MergeFrom(const PushFriendlyTreeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  basictreeinfo_.MergeFrom(from.basictreeinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_statustreeinfo()) {
      mutable_statustreeinfo()->::ProtoFriendlyTree::FriendlyTreeStatusCPP::MergeFrom(from.statustreeinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushFriendlyTreeMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushFriendlyTreeMsg::CopyFrom(const PushFriendlyTreeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushFriendlyTreeMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->basictreeinfo())) return false;
  if (has_statustreeinfo()) {
    if (!this->statustreeinfo().IsInitialized()) return false;
  }
  return true;
}

void PushFriendlyTreeMsg::Swap(PushFriendlyTreeMsg* other) {
  if (other != this) {
    basictreeinfo_.Swap(&other->basictreeinfo_);
    std::swap(statustreeinfo_, other->statustreeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushFriendlyTreeMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushFriendlyTreeMsg_descriptor_;
  metadata.reflection = PushFriendlyTreeMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoFriendlyTree

// @@protoc_insertion_point(global_scope)
