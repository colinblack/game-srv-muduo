// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoPet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoPet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoPet {

namespace {

const ::google::protobuf::Descriptor* UnlockPetResidenceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockPetResidenceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockPetResidenceResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockPetResidenceResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockPetCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockPetCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUnlockPetInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUnlockPetInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUnlockPetInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUnlockPetInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockPetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockPetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockPetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockPetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedPetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedPetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedPetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedPetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeasePetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeasePetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeasePetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeasePetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePetNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePetNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePetNameResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePetNameResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushPetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushPetMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoPet_2eproto() {
  protobuf_AddDesc_ProtoPet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoPet.proto");
  GOOGLE_CHECK(file != NULL);
  UnlockPetResidenceReq_descriptor_ = file->message_type(0);
  static const int UnlockPetResidenceReq_offsets_[1] = {
  };
  UnlockPetResidenceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockPetResidenceReq_descriptor_,
      UnlockPetResidenceReq::default_instance_,
      UnlockPetResidenceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetResidenceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetResidenceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockPetResidenceReq));
  UnlockPetResidenceResp_descriptor_ = file->message_type(1);
  static const int UnlockPetResidenceResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetResidenceResp, common_),
  };
  UnlockPetResidenceResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockPetResidenceResp_descriptor_,
      UnlockPetResidenceResp::default_instance_,
      UnlockPetResidenceResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetResidenceResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetResidenceResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockPetResidenceResp));
  UnlockPetCPP_descriptor_ = file->message_type(2);
  static const int UnlockPetCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetCPP, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetCPP, teaseendts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetCPP, normalendts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetCPP, teaseflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetCPP, name_),
  };
  UnlockPetCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockPetCPP_descriptor_,
      UnlockPetCPP::default_instance_,
      UnlockPetCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockPetCPP));
  GetUnlockPetInfoReq_descriptor_ = file->message_type(3);
  static const int GetUnlockPetInfoReq_offsets_[1] = {
  };
  GetUnlockPetInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUnlockPetInfoReq_descriptor_,
      GetUnlockPetInfoReq::default_instance_,
      GetUnlockPetInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnlockPetInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnlockPetInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUnlockPetInfoReq));
  GetUnlockPetInfoResp_descriptor_ = file->message_type(4);
  static const int GetUnlockPetInfoResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnlockPetInfoResp, arraypet_),
  };
  GetUnlockPetInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUnlockPetInfoResp_descriptor_,
      GetUnlockPetInfoResp::default_instance_,
      GetUnlockPetInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnlockPetInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnlockPetInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUnlockPetInfoResp));
  UnlockPetReq_descriptor_ = file->message_type(5);
  static const int UnlockPetReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetReq, petid_),
  };
  UnlockPetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockPetReq_descriptor_,
      UnlockPetReq::default_instance_,
      UnlockPetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockPetReq));
  UnlockPetResp_descriptor_ = file->message_type(6);
  static const int UnlockPetResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetResp, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetResp, common_),
  };
  UnlockPetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockPetResp_descriptor_,
      UnlockPetResp::default_instance_,
      UnlockPetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockPetResp));
  FeedPetReq_descriptor_ = file->message_type(7);
  static const int FeedPetReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedPetReq, petid_),
  };
  FeedPetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedPetReq_descriptor_,
      FeedPetReq::default_instance_,
      FeedPetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedPetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedPetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedPetReq));
  FeedPetResp_descriptor_ = file->message_type(8);
  static const int FeedPetResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedPetResp, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedPetResp, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedPetResp, reward_),
  };
  FeedPetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedPetResp_descriptor_,
      FeedPetResp::default_instance_,
      FeedPetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedPetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedPetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedPetResp));
  TeasePetReq_descriptor_ = file->message_type(9);
  static const int TeasePetReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeasePetReq, petid_),
  };
  TeasePetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeasePetReq_descriptor_,
      TeasePetReq::default_instance_,
      TeasePetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeasePetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeasePetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeasePetReq));
  TeasePetResp_descriptor_ = file->message_type(10);
  static const int TeasePetResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeasePetResp, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeasePetResp, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeasePetResp, reward_),
  };
  TeasePetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeasePetResp_descriptor_,
      TeasePetResp::default_instance_,
      TeasePetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeasePetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeasePetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeasePetResp));
  ChangePetNameReq_descriptor_ = file->message_type(11);
  static const int ChangePetNameReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePetNameReq, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePetNameReq, name_),
  };
  ChangePetNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePetNameReq_descriptor_,
      ChangePetNameReq::default_instance_,
      ChangePetNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePetNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePetNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePetNameReq));
  ChangePetNameResp_descriptor_ = file->message_type(12);
  static const int ChangePetNameResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePetNameResp, pet_),
  };
  ChangePetNameResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePetNameResp_descriptor_,
      ChangePetNameResp::default_instance_,
      ChangePetNameResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePetNameResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePetNameResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePetNameResp));
  PushPetMsg_descriptor_ = file->message_type(13);
  static const int PushPetMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPetMsg, pet_),
  };
  PushPetMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushPetMsg_descriptor_,
      PushPetMsg::default_instance_,
      PushPetMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPetMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushPetMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushPetMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoPet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockPetResidenceReq_descriptor_, &UnlockPetResidenceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockPetResidenceResp_descriptor_, &UnlockPetResidenceResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockPetCPP_descriptor_, &UnlockPetCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUnlockPetInfoReq_descriptor_, &GetUnlockPetInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUnlockPetInfoResp_descriptor_, &GetUnlockPetInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockPetReq_descriptor_, &UnlockPetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockPetResp_descriptor_, &UnlockPetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedPetReq_descriptor_, &FeedPetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedPetResp_descriptor_, &FeedPetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeasePetReq_descriptor_, &TeasePetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeasePetResp_descriptor_, &TeasePetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePetNameReq_descriptor_, &ChangePetNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePetNameResp_descriptor_, &ChangePetNameResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushPetMsg_descriptor_, &PushPetMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoPet_2eproto() {
  delete UnlockPetResidenceReq::default_instance_;
  delete UnlockPetResidenceReq_reflection_;
  delete UnlockPetResidenceResp::default_instance_;
  delete UnlockPetResidenceResp_reflection_;
  delete UnlockPetCPP::default_instance_;
  delete UnlockPetCPP_reflection_;
  delete GetUnlockPetInfoReq::default_instance_;
  delete GetUnlockPetInfoReq_reflection_;
  delete GetUnlockPetInfoResp::default_instance_;
  delete GetUnlockPetInfoResp_reflection_;
  delete UnlockPetReq::default_instance_;
  delete UnlockPetReq_reflection_;
  delete UnlockPetResp::default_instance_;
  delete UnlockPetResp_reflection_;
  delete FeedPetReq::default_instance_;
  delete FeedPetReq_reflection_;
  delete FeedPetResp::default_instance_;
  delete FeedPetResp_reflection_;
  delete TeasePetReq::default_instance_;
  delete TeasePetReq_reflection_;
  delete TeasePetResp::default_instance_;
  delete TeasePetResp_reflection_;
  delete ChangePetNameReq::default_instance_;
  delete ChangePetNameReq_reflection_;
  delete ChangePetNameResp::default_instance_;
  delete ChangePetNameResp_reflection_;
  delete PushPetMsg::default_instance_;
  delete PushPetMsg_reflection_;
}

void protobuf_AddDesc_ProtoPet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ProtoPet.proto\022\010ProtoPet\032\020DataCommon.p"
    "roto\"\027\n\025UnlockPetResidenceReq\"D\n\026UnlockP"
    "etResidenceResp\022*\n\006common\030\001 \002(\0132\032.DataCo"
    "mmon.CommonItemsCPP\"g\n\014UnlockPetCPP\022\r\n\005p"
    "etid\030\001 \002(\r\022\022\n\nteaseEndts\030\002 \002(\r\022\023\n\013normal"
    "Endts\030\003 \002(\r\022\021\n\tteaseFlag\030\004 \001(\r\022\014\n\004name\030\005"
    " \001(\014\"\025\n\023GetUnlockPetInfoReq\"@\n\024GetUnlock"
    "PetInfoResp\022(\n\010arrayPet\030\001 \003(\0132\026.ProtoPet"
    ".UnlockPetCPP\"\035\n\014UnlockPetReq\022\r\n\005petid\030\001"
    " \002(\r\"`\n\rUnlockPetResp\022#\n\003pet\030\001 \002(\0132\026.Pro"
    "toPet.UnlockPetCPP\022*\n\006common\030\002 \002(\0132\032.Dat"
    "aCommon.CommonItemsCPP\"\033\n\nFeedPetReq\022\r\n\005"
    "petid\030\001 \002(\r\"\212\001\n\013FeedPetResp\022#\n\003pet\030\001 \002(\013"
    "2\026.ProtoPet.UnlockPetCPP\022*\n\006common\030\002 \002(\013"
    "2\032.DataCommon.CommonItemsCPP\022*\n\006reward\030\003"
    " \001(\0132\032.DataCommon.CommonItemsCPP\"\034\n\013Teas"
    "ePetReq\022\r\n\005petid\030\001 \002(\r\"\213\001\n\014TeasePetResp\022"
    "#\n\003pet\030\001 \002(\0132\026.ProtoPet.UnlockPetCPP\022*\n\006"
    "common\030\002 \002(\0132\032.DataCommon.CommonItemsCPP"
    "\022*\n\006reward\030\003 \001(\0132\032.DataCommon.CommonItem"
    "sCPP\"/\n\020ChangePetNameReq\022\r\n\005petid\030\001 \002(\r\022"
    "\014\n\004name\030\002 \002(\014\"8\n\021ChangePetNameResp\022#\n\003pe"
    "t\030\001 \002(\0132\026.ProtoPet.UnlockPetCPP\"1\n\nPushP"
    "etMsg\022#\n\003pet\030\001 \002(\0132\026.ProtoPet.UnlockPetC"
    "PP", 962);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoPet.proto", &protobuf_RegisterTypes);
  UnlockPetResidenceReq::default_instance_ = new UnlockPetResidenceReq();
  UnlockPetResidenceResp::default_instance_ = new UnlockPetResidenceResp();
  UnlockPetCPP::default_instance_ = new UnlockPetCPP();
  GetUnlockPetInfoReq::default_instance_ = new GetUnlockPetInfoReq();
  GetUnlockPetInfoResp::default_instance_ = new GetUnlockPetInfoResp();
  UnlockPetReq::default_instance_ = new UnlockPetReq();
  UnlockPetResp::default_instance_ = new UnlockPetResp();
  FeedPetReq::default_instance_ = new FeedPetReq();
  FeedPetResp::default_instance_ = new FeedPetResp();
  TeasePetReq::default_instance_ = new TeasePetReq();
  TeasePetResp::default_instance_ = new TeasePetResp();
  ChangePetNameReq::default_instance_ = new ChangePetNameReq();
  ChangePetNameResp::default_instance_ = new ChangePetNameResp();
  PushPetMsg::default_instance_ = new PushPetMsg();
  UnlockPetResidenceReq::default_instance_->InitAsDefaultInstance();
  UnlockPetResidenceResp::default_instance_->InitAsDefaultInstance();
  UnlockPetCPP::default_instance_->InitAsDefaultInstance();
  GetUnlockPetInfoReq::default_instance_->InitAsDefaultInstance();
  GetUnlockPetInfoResp::default_instance_->InitAsDefaultInstance();
  UnlockPetReq::default_instance_->InitAsDefaultInstance();
  UnlockPetResp::default_instance_->InitAsDefaultInstance();
  FeedPetReq::default_instance_->InitAsDefaultInstance();
  FeedPetResp::default_instance_->InitAsDefaultInstance();
  TeasePetReq::default_instance_->InitAsDefaultInstance();
  TeasePetResp::default_instance_->InitAsDefaultInstance();
  ChangePetNameReq::default_instance_->InitAsDefaultInstance();
  ChangePetNameResp::default_instance_->InitAsDefaultInstance();
  PushPetMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoPet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoPet_2eproto {
  StaticDescriptorInitializer_ProtoPet_2eproto() {
    protobuf_AddDesc_ProtoPet_2eproto();
  }
} static_descriptor_initializer_ProtoPet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UnlockPetResidenceReq::UnlockPetResidenceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPet.UnlockPetResidenceReq)
}

void UnlockPetResidenceReq::InitAsDefaultInstance() {
}

UnlockPetResidenceReq::UnlockPetResidenceReq(const UnlockPetResidenceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPet.UnlockPetResidenceReq)
}

void UnlockPetResidenceReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockPetResidenceReq::~UnlockPetResidenceReq() {
  // @@protoc_insertion_point(destructor:ProtoPet.UnlockPetResidenceReq)
  SharedDtor();
}

void UnlockPetResidenceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnlockPetResidenceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockPetResidenceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockPetResidenceReq_descriptor_;
}

const UnlockPetResidenceReq& UnlockPetResidenceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPet_2eproto();
  return *default_instance_;
}

UnlockPetResidenceReq* UnlockPetResidenceReq::default_instance_ = NULL;

UnlockPetResidenceReq* UnlockPetResidenceReq::New() const {
  return new UnlockPetResidenceReq;
}

void UnlockPetResidenceReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockPetResidenceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPet.UnlockPetResidenceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPet.UnlockPetResidenceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPet.UnlockPetResidenceReq)
  return false;
#undef DO_
}

void UnlockPetResidenceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPet.UnlockPetResidenceReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPet.UnlockPetResidenceReq)
}

::google::protobuf::uint8* UnlockPetResidenceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPet.UnlockPetResidenceReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPet.UnlockPetResidenceReq)
  return target;
}

int UnlockPetResidenceReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockPetResidenceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockPetResidenceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockPetResidenceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockPetResidenceReq::MergeFrom(const UnlockPetResidenceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockPetResidenceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockPetResidenceReq::CopyFrom(const UnlockPetResidenceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockPetResidenceReq::IsInitialized() const {

  return true;
}

void UnlockPetResidenceReq::Swap(UnlockPetResidenceReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockPetResidenceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockPetResidenceReq_descriptor_;
  metadata.reflection = UnlockPetResidenceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockPetResidenceResp::kCommonFieldNumber;
#endif  // !_MSC_VER

UnlockPetResidenceResp::UnlockPetResidenceResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPet.UnlockPetResidenceResp)
}

void UnlockPetResidenceResp::InitAsDefaultInstance() {
  common_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

UnlockPetResidenceResp::UnlockPetResidenceResp(const UnlockPetResidenceResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPet.UnlockPetResidenceResp)
}

void UnlockPetResidenceResp::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockPetResidenceResp::~UnlockPetResidenceResp() {
  // @@protoc_insertion_point(destructor:ProtoPet.UnlockPetResidenceResp)
  SharedDtor();
}

void UnlockPetResidenceResp::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void UnlockPetResidenceResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockPetResidenceResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockPetResidenceResp_descriptor_;
}

const UnlockPetResidenceResp& UnlockPetResidenceResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPet_2eproto();
  return *default_instance_;
}

UnlockPetResidenceResp* UnlockPetResidenceResp::default_instance_ = NULL;

UnlockPetResidenceResp* UnlockPetResidenceResp::New() const {
  return new UnlockPetResidenceResp;
}

void UnlockPetResidenceResp::Clear() {
  if (has_common()) {
    if (common_ != NULL) common_->::DataCommon::CommonItemsCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockPetResidenceResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPet.UnlockPetResidenceResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPet.UnlockPetResidenceResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPet.UnlockPetResidenceResp)
  return false;
#undef DO_
}

void UnlockPetResidenceResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPet.UnlockPetResidenceResp)
  // required .DataCommon.CommonItemsCPP common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPet.UnlockPetResidenceResp)
}

::google::protobuf::uint8* UnlockPetResidenceResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPet.UnlockPetResidenceResp)
  // required .DataCommon.CommonItemsCPP common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPet.UnlockPetResidenceResp)
  return target;
}

int UnlockPetResidenceResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockPetResidenceResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockPetResidenceResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockPetResidenceResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockPetResidenceResp::MergeFrom(const UnlockPetResidenceResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::DataCommon::CommonItemsCPP::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockPetResidenceResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockPetResidenceResp::CopyFrom(const UnlockPetResidenceResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockPetResidenceResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void UnlockPetResidenceResp::Swap(UnlockPetResidenceResp* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockPetResidenceResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockPetResidenceResp_descriptor_;
  metadata.reflection = UnlockPetResidenceResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockPetCPP::kPetidFieldNumber;
const int UnlockPetCPP::kTeaseEndtsFieldNumber;
const int UnlockPetCPP::kNormalEndtsFieldNumber;
const int UnlockPetCPP::kTeaseFlagFieldNumber;
const int UnlockPetCPP::kNameFieldNumber;
#endif  // !_MSC_VER

UnlockPetCPP::UnlockPetCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPet.UnlockPetCPP)
}

void UnlockPetCPP::InitAsDefaultInstance() {
}

UnlockPetCPP::UnlockPetCPP(const UnlockPetCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPet.UnlockPetCPP)
}

void UnlockPetCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  petid_ = 0u;
  teaseendts_ = 0u;
  normalendts_ = 0u;
  teaseflag_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockPetCPP::~UnlockPetCPP() {
  // @@protoc_insertion_point(destructor:ProtoPet.UnlockPetCPP)
  SharedDtor();
}

void UnlockPetCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UnlockPetCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockPetCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockPetCPP_descriptor_;
}

const UnlockPetCPP& UnlockPetCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPet_2eproto();
  return *default_instance_;
}

UnlockPetCPP* UnlockPetCPP::default_instance_ = NULL;

UnlockPetCPP* UnlockPetCPP::New() const {
  return new UnlockPetCPP;
}

void UnlockPetCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnlockPetCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(petid_, teaseflag_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockPetCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPet.UnlockPetCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teaseEndts;
        break;
      }

      // required uint32 teaseEndts = 2;
      case 2: {
        if (tag == 16) {
         parse_teaseEndts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teaseendts_)));
          set_has_teaseendts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_normalEndts;
        break;
      }

      // required uint32 normalEndts = 3;
      case 3: {
        if (tag == 24) {
         parse_normalEndts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normalendts_)));
          set_has_normalendts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teaseFlag;
        break;
      }

      // optional uint32 teaseFlag = 4;
      case 4: {
        if (tag == 32) {
         parse_teaseFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teaseflag_)));
          set_has_teaseflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional bytes name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPet.UnlockPetCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPet.UnlockPetCPP)
  return false;
#undef DO_
}

void UnlockPetCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPet.UnlockPetCPP)
  // required uint32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->petid(), output);
  }

  // required uint32 teaseEndts = 2;
  if (has_teaseendts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teaseendts(), output);
  }

  // required uint32 normalEndts = 3;
  if (has_normalendts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->normalendts(), output);
  }

  // optional uint32 teaseFlag = 4;
  if (has_teaseflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teaseflag(), output);
  }

  // optional bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPet.UnlockPetCPP)
}

::google::protobuf::uint8* UnlockPetCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPet.UnlockPetCPP)
  // required uint32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->petid(), target);
  }

  // required uint32 teaseEndts = 2;
  if (has_teaseendts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teaseendts(), target);
  }

  // required uint32 normalEndts = 3;
  if (has_normalendts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->normalendts(), target);
  }

  // optional uint32 teaseFlag = 4;
  if (has_teaseflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teaseflag(), target);
  }

  // optional bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPet.UnlockPetCPP)
  return target;
}

int UnlockPetCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // required uint32 teaseEndts = 2;
    if (has_teaseendts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teaseendts());
    }

    // required uint32 normalEndts = 3;
    if (has_normalendts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normalendts());
    }

    // optional uint32 teaseFlag = 4;
    if (has_teaseflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teaseflag());
    }

    // optional bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockPetCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockPetCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockPetCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockPetCPP::MergeFrom(const UnlockPetCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_teaseendts()) {
      set_teaseendts(from.teaseendts());
    }
    if (from.has_normalendts()) {
      set_normalendts(from.normalendts());
    }
    if (from.has_teaseflag()) {
      set_teaseflag(from.teaseflag());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockPetCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockPetCPP::CopyFrom(const UnlockPetCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockPetCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UnlockPetCPP::Swap(UnlockPetCPP* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(teaseendts_, other->teaseendts_);
    std::swap(normalendts_, other->normalendts_);
    std::swap(teaseflag_, other->teaseflag_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockPetCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockPetCPP_descriptor_;
  metadata.reflection = UnlockPetCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetUnlockPetInfoReq::GetUnlockPetInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPet.GetUnlockPetInfoReq)
}

void GetUnlockPetInfoReq::InitAsDefaultInstance() {
}

GetUnlockPetInfoReq::GetUnlockPetInfoReq(const GetUnlockPetInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPet.GetUnlockPetInfoReq)
}

void GetUnlockPetInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUnlockPetInfoReq::~GetUnlockPetInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoPet.GetUnlockPetInfoReq)
  SharedDtor();
}

void GetUnlockPetInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUnlockPetInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUnlockPetInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUnlockPetInfoReq_descriptor_;
}

const GetUnlockPetInfoReq& GetUnlockPetInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPet_2eproto();
  return *default_instance_;
}

GetUnlockPetInfoReq* GetUnlockPetInfoReq::default_instance_ = NULL;

GetUnlockPetInfoReq* GetUnlockPetInfoReq::New() const {
  return new GetUnlockPetInfoReq;
}

void GetUnlockPetInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUnlockPetInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPet.GetUnlockPetInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPet.GetUnlockPetInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPet.GetUnlockPetInfoReq)
  return false;
#undef DO_
}

void GetUnlockPetInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPet.GetUnlockPetInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPet.GetUnlockPetInfoReq)
}

::google::protobuf::uint8* GetUnlockPetInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPet.GetUnlockPetInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPet.GetUnlockPetInfoReq)
  return target;
}

int GetUnlockPetInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUnlockPetInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUnlockPetInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUnlockPetInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUnlockPetInfoReq::MergeFrom(const GetUnlockPetInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUnlockPetInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUnlockPetInfoReq::CopyFrom(const GetUnlockPetInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUnlockPetInfoReq::IsInitialized() const {

  return true;
}

void GetUnlockPetInfoReq::Swap(GetUnlockPetInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUnlockPetInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUnlockPetInfoReq_descriptor_;
  metadata.reflection = GetUnlockPetInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUnlockPetInfoResp::kArrayPetFieldNumber;
#endif  // !_MSC_VER

GetUnlockPetInfoResp::GetUnlockPetInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPet.GetUnlockPetInfoResp)
}

void GetUnlockPetInfoResp::InitAsDefaultInstance() {
}

GetUnlockPetInfoResp::GetUnlockPetInfoResp(const GetUnlockPetInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPet.GetUnlockPetInfoResp)
}

void GetUnlockPetInfoResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUnlockPetInfoResp::~GetUnlockPetInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoPet.GetUnlockPetInfoResp)
  SharedDtor();
}

void GetUnlockPetInfoResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUnlockPetInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUnlockPetInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUnlockPetInfoResp_descriptor_;
}

const GetUnlockPetInfoResp& GetUnlockPetInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPet_2eproto();
  return *default_instance_;
}

GetUnlockPetInfoResp* GetUnlockPetInfoResp::default_instance_ = NULL;

GetUnlockPetInfoResp* GetUnlockPetInfoResp::New() const {
  return new GetUnlockPetInfoResp;
}

void GetUnlockPetInfoResp::Clear() {
  arraypet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUnlockPetInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPet.GetUnlockPetInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoPet.UnlockPetCPP arrayPet = 1;
      case 1: {
        if (tag == 10) {
         parse_arrayPet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arraypet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_arrayPet;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPet.GetUnlockPetInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPet.GetUnlockPetInfoResp)
  return false;
#undef DO_
}

void GetUnlockPetInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPet.GetUnlockPetInfoResp)
  // repeated .ProtoPet.UnlockPetCPP arrayPet = 1;
  for (int i = 0; i < this->arraypet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arraypet(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPet.GetUnlockPetInfoResp)
}

::google::protobuf::uint8* GetUnlockPetInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPet.GetUnlockPetInfoResp)
  // repeated .ProtoPet.UnlockPetCPP arrayPet = 1;
  for (int i = 0; i < this->arraypet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arraypet(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPet.GetUnlockPetInfoResp)
  return target;
}

int GetUnlockPetInfoResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoPet.UnlockPetCPP arrayPet = 1;
  total_size += 1 * this->arraypet_size();
  for (int i = 0; i < this->arraypet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arraypet(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUnlockPetInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUnlockPetInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUnlockPetInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUnlockPetInfoResp::MergeFrom(const GetUnlockPetInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arraypet_.MergeFrom(from.arraypet_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUnlockPetInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUnlockPetInfoResp::CopyFrom(const GetUnlockPetInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUnlockPetInfoResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->arraypet())) return false;
  return true;
}

void GetUnlockPetInfoResp::Swap(GetUnlockPetInfoResp* other) {
  if (other != this) {
    arraypet_.Swap(&other->arraypet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUnlockPetInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUnlockPetInfoResp_descriptor_;
  metadata.reflection = GetUnlockPetInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockPetReq::kPetidFieldNumber;
#endif  // !_MSC_VER

UnlockPetReq::UnlockPetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPet.UnlockPetReq)
}

void UnlockPetReq::InitAsDefaultInstance() {
}

UnlockPetReq::UnlockPetReq(const UnlockPetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPet.UnlockPetReq)
}

void UnlockPetReq::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockPetReq::~UnlockPetReq() {
  // @@protoc_insertion_point(destructor:ProtoPet.UnlockPetReq)
  SharedDtor();
}

void UnlockPetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnlockPetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockPetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockPetReq_descriptor_;
}

const UnlockPetReq& UnlockPetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPet_2eproto();
  return *default_instance_;
}

UnlockPetReq* UnlockPetReq::default_instance_ = NULL;

UnlockPetReq* UnlockPetReq::New() const {
  return new UnlockPetReq;
}

void UnlockPetReq::Clear() {
  petid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockPetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPet.UnlockPetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPet.UnlockPetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPet.UnlockPetReq)
  return false;
#undef DO_
}

void UnlockPetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPet.UnlockPetReq)
  // required uint32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPet.UnlockPetReq)
}

::google::protobuf::uint8* UnlockPetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPet.UnlockPetReq)
  // required uint32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPet.UnlockPetReq)
  return target;
}

int UnlockPetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockPetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockPetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockPetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockPetReq::MergeFrom(const UnlockPetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockPetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockPetReq::CopyFrom(const UnlockPetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockPetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UnlockPetReq::Swap(UnlockPetReq* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockPetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockPetReq_descriptor_;
  metadata.reflection = UnlockPetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockPetResp::kPetFieldNumber;
const int UnlockPetResp::kCommonFieldNumber;
#endif  // !_MSC_VER

UnlockPetResp::UnlockPetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPet.UnlockPetResp)
}

void UnlockPetResp::InitAsDefaultInstance() {
  pet_ = const_cast< ::ProtoPet::UnlockPetCPP*>(&::ProtoPet::UnlockPetCPP::default_instance());
  common_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

UnlockPetResp::UnlockPetResp(const UnlockPetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPet.UnlockPetResp)
}

void UnlockPetResp::SharedCtor() {
  _cached_size_ = 0;
  pet_ = NULL;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockPetResp::~UnlockPetResp() {
  // @@protoc_insertion_point(destructor:ProtoPet.UnlockPetResp)
  SharedDtor();
}

void UnlockPetResp::SharedDtor() {
  if (this != default_instance_) {
    delete pet_;
    delete common_;
  }
}

void UnlockPetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockPetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockPetResp_descriptor_;
}

const UnlockPetResp& UnlockPetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPet_2eproto();
  return *default_instance_;
}

UnlockPetResp* UnlockPetResp::default_instance_ = NULL;

UnlockPetResp* UnlockPetResp::New() const {
  return new UnlockPetResp;
}

void UnlockPetResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_pet()) {
      if (pet_ != NULL) pet_->::ProtoPet::UnlockPetCPP::Clear();
    }
    if (has_common()) {
      if (common_ != NULL) common_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockPetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPet.UnlockPetResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoPet.UnlockPetCPP pet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_common;
        break;
      }

      // required .DataCommon.CommonItemsCPP common = 2;
      case 2: {
        if (tag == 18) {
         parse_common:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPet.UnlockPetResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPet.UnlockPetResp)
  return false;
#undef DO_
}

void UnlockPetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPet.UnlockPetResp)
  // required .ProtoPet.UnlockPetCPP pet = 1;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pet(), output);
  }

  // required .DataCommon.CommonItemsCPP common = 2;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->common(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPet.UnlockPetResp)
}

::google::protobuf::uint8* UnlockPetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPet.UnlockPetResp)
  // required .ProtoPet.UnlockPetCPP pet = 1;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pet(), target);
  }

  // required .DataCommon.CommonItemsCPP common = 2;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->common(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPet.UnlockPetResp)
  return target;
}

int UnlockPetResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoPet.UnlockPetCPP pet = 1;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

    // required .DataCommon.CommonItemsCPP common = 2;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockPetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockPetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockPetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockPetResp::MergeFrom(const UnlockPetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet()) {
      mutable_pet()->::ProtoPet::UnlockPetCPP::MergeFrom(from.pet());
    }
    if (from.has_common()) {
      mutable_common()->::DataCommon::CommonItemsCPP::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockPetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockPetResp::CopyFrom(const UnlockPetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockPetResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pet()) {
    if (!this->pet().IsInitialized()) return false;
  }
  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void UnlockPetResp::Swap(UnlockPetResp* other) {
  if (other != this) {
    std::swap(pet_, other->pet_);
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockPetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockPetResp_descriptor_;
  metadata.reflection = UnlockPetResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedPetReq::kPetidFieldNumber;
#endif  // !_MSC_VER

FeedPetReq::FeedPetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPet.FeedPetReq)
}

void FeedPetReq::InitAsDefaultInstance() {
}

FeedPetReq::FeedPetReq(const FeedPetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPet.FeedPetReq)
}

void FeedPetReq::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedPetReq::~FeedPetReq() {
  // @@protoc_insertion_point(destructor:ProtoPet.FeedPetReq)
  SharedDtor();
}

void FeedPetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeedPetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedPetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedPetReq_descriptor_;
}

const FeedPetReq& FeedPetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPet_2eproto();
  return *default_instance_;
}

FeedPetReq* FeedPetReq::default_instance_ = NULL;

FeedPetReq* FeedPetReq::New() const {
  return new FeedPetReq;
}

void FeedPetReq::Clear() {
  petid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedPetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPet.FeedPetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPet.FeedPetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPet.FeedPetReq)
  return false;
#undef DO_
}

void FeedPetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPet.FeedPetReq)
  // required uint32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPet.FeedPetReq)
}

::google::protobuf::uint8* FeedPetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPet.FeedPetReq)
  // required uint32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPet.FeedPetReq)
  return target;
}

int FeedPetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedPetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedPetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedPetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedPetReq::MergeFrom(const FeedPetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedPetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedPetReq::CopyFrom(const FeedPetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedPetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FeedPetReq::Swap(FeedPetReq* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedPetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedPetReq_descriptor_;
  metadata.reflection = FeedPetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedPetResp::kPetFieldNumber;
const int FeedPetResp::kCommonFieldNumber;
const int FeedPetResp::kRewardFieldNumber;
#endif  // !_MSC_VER

FeedPetResp::FeedPetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPet.FeedPetResp)
}

void FeedPetResp::InitAsDefaultInstance() {
  pet_ = const_cast< ::ProtoPet::UnlockPetCPP*>(&::ProtoPet::UnlockPetCPP::default_instance());
  common_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  reward_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

FeedPetResp::FeedPetResp(const FeedPetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPet.FeedPetResp)
}

void FeedPetResp::SharedCtor() {
  _cached_size_ = 0;
  pet_ = NULL;
  common_ = NULL;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedPetResp::~FeedPetResp() {
  // @@protoc_insertion_point(destructor:ProtoPet.FeedPetResp)
  SharedDtor();
}

void FeedPetResp::SharedDtor() {
  if (this != default_instance_) {
    delete pet_;
    delete common_;
    delete reward_;
  }
}

void FeedPetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedPetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedPetResp_descriptor_;
}

const FeedPetResp& FeedPetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPet_2eproto();
  return *default_instance_;
}

FeedPetResp* FeedPetResp::default_instance_ = NULL;

FeedPetResp* FeedPetResp::New() const {
  return new FeedPetResp;
}

void FeedPetResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_pet()) {
      if (pet_ != NULL) pet_->::ProtoPet::UnlockPetCPP::Clear();
    }
    if (has_common()) {
      if (common_ != NULL) common_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedPetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPet.FeedPetResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoPet.UnlockPetCPP pet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_common;
        break;
      }

      // required .DataCommon.CommonItemsCPP common = 2;
      case 2: {
        if (tag == 18) {
         parse_common:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // optional .DataCommon.CommonItemsCPP reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPet.FeedPetResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPet.FeedPetResp)
  return false;
#undef DO_
}

void FeedPetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPet.FeedPetResp)
  // required .ProtoPet.UnlockPetCPP pet = 1;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pet(), output);
  }

  // required .DataCommon.CommonItemsCPP common = 2;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->common(), output);
  }

  // optional .DataCommon.CommonItemsCPP reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPet.FeedPetResp)
}

::google::protobuf::uint8* FeedPetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPet.FeedPetResp)
  // required .ProtoPet.UnlockPetCPP pet = 1;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pet(), target);
  }

  // required .DataCommon.CommonItemsCPP common = 2;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->common(), target);
  }

  // optional .DataCommon.CommonItemsCPP reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPet.FeedPetResp)
  return target;
}

int FeedPetResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoPet.UnlockPetCPP pet = 1;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

    // required .DataCommon.CommonItemsCPP common = 2;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional .DataCommon.CommonItemsCPP reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedPetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedPetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedPetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedPetResp::MergeFrom(const FeedPetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet()) {
      mutable_pet()->::ProtoPet::UnlockPetCPP::MergeFrom(from.pet());
    }
    if (from.has_common()) {
      mutable_common()->::DataCommon::CommonItemsCPP::MergeFrom(from.common());
    }
    if (from.has_reward()) {
      mutable_reward()->::DataCommon::CommonItemsCPP::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedPetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedPetResp::CopyFrom(const FeedPetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedPetResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pet()) {
    if (!this->pet().IsInitialized()) return false;
  }
  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void FeedPetResp::Swap(FeedPetResp* other) {
  if (other != this) {
    std::swap(pet_, other->pet_);
    std::swap(common_, other->common_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedPetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedPetResp_descriptor_;
  metadata.reflection = FeedPetResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeasePetReq::kPetidFieldNumber;
#endif  // !_MSC_VER

TeasePetReq::TeasePetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPet.TeasePetReq)
}

void TeasePetReq::InitAsDefaultInstance() {
}

TeasePetReq::TeasePetReq(const TeasePetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPet.TeasePetReq)
}

void TeasePetReq::SharedCtor() {
  _cached_size_ = 0;
  petid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeasePetReq::~TeasePetReq() {
  // @@protoc_insertion_point(destructor:ProtoPet.TeasePetReq)
  SharedDtor();
}

void TeasePetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeasePetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeasePetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeasePetReq_descriptor_;
}

const TeasePetReq& TeasePetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPet_2eproto();
  return *default_instance_;
}

TeasePetReq* TeasePetReq::default_instance_ = NULL;

TeasePetReq* TeasePetReq::New() const {
  return new TeasePetReq;
}

void TeasePetReq::Clear() {
  petid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeasePetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPet.TeasePetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPet.TeasePetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPet.TeasePetReq)
  return false;
#undef DO_
}

void TeasePetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPet.TeasePetReq)
  // required uint32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPet.TeasePetReq)
}

::google::protobuf::uint8* TeasePetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPet.TeasePetReq)
  // required uint32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPet.TeasePetReq)
  return target;
}

int TeasePetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeasePetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeasePetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeasePetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeasePetReq::MergeFrom(const TeasePetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeasePetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeasePetReq::CopyFrom(const TeasePetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeasePetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TeasePetReq::Swap(TeasePetReq* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeasePetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeasePetReq_descriptor_;
  metadata.reflection = TeasePetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeasePetResp::kPetFieldNumber;
const int TeasePetResp::kCommonFieldNumber;
const int TeasePetResp::kRewardFieldNumber;
#endif  // !_MSC_VER

TeasePetResp::TeasePetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPet.TeasePetResp)
}

void TeasePetResp::InitAsDefaultInstance() {
  pet_ = const_cast< ::ProtoPet::UnlockPetCPP*>(&::ProtoPet::UnlockPetCPP::default_instance());
  common_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  reward_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

TeasePetResp::TeasePetResp(const TeasePetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPet.TeasePetResp)
}

void TeasePetResp::SharedCtor() {
  _cached_size_ = 0;
  pet_ = NULL;
  common_ = NULL;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeasePetResp::~TeasePetResp() {
  // @@protoc_insertion_point(destructor:ProtoPet.TeasePetResp)
  SharedDtor();
}

void TeasePetResp::SharedDtor() {
  if (this != default_instance_) {
    delete pet_;
    delete common_;
    delete reward_;
  }
}

void TeasePetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeasePetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeasePetResp_descriptor_;
}

const TeasePetResp& TeasePetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPet_2eproto();
  return *default_instance_;
}

TeasePetResp* TeasePetResp::default_instance_ = NULL;

TeasePetResp* TeasePetResp::New() const {
  return new TeasePetResp;
}

void TeasePetResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_pet()) {
      if (pet_ != NULL) pet_->::ProtoPet::UnlockPetCPP::Clear();
    }
    if (has_common()) {
      if (common_ != NULL) common_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeasePetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPet.TeasePetResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoPet.UnlockPetCPP pet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_common;
        break;
      }

      // required .DataCommon.CommonItemsCPP common = 2;
      case 2: {
        if (tag == 18) {
         parse_common:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // optional .DataCommon.CommonItemsCPP reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPet.TeasePetResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPet.TeasePetResp)
  return false;
#undef DO_
}

void TeasePetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPet.TeasePetResp)
  // required .ProtoPet.UnlockPetCPP pet = 1;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pet(), output);
  }

  // required .DataCommon.CommonItemsCPP common = 2;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->common(), output);
  }

  // optional .DataCommon.CommonItemsCPP reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPet.TeasePetResp)
}

::google::protobuf::uint8* TeasePetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPet.TeasePetResp)
  // required .ProtoPet.UnlockPetCPP pet = 1;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pet(), target);
  }

  // required .DataCommon.CommonItemsCPP common = 2;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->common(), target);
  }

  // optional .DataCommon.CommonItemsCPP reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPet.TeasePetResp)
  return target;
}

int TeasePetResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoPet.UnlockPetCPP pet = 1;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

    // required .DataCommon.CommonItemsCPP common = 2;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional .DataCommon.CommonItemsCPP reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeasePetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeasePetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeasePetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeasePetResp::MergeFrom(const TeasePetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet()) {
      mutable_pet()->::ProtoPet::UnlockPetCPP::MergeFrom(from.pet());
    }
    if (from.has_common()) {
      mutable_common()->::DataCommon::CommonItemsCPP::MergeFrom(from.common());
    }
    if (from.has_reward()) {
      mutable_reward()->::DataCommon::CommonItemsCPP::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeasePetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeasePetResp::CopyFrom(const TeasePetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeasePetResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pet()) {
    if (!this->pet().IsInitialized()) return false;
  }
  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void TeasePetResp::Swap(TeasePetResp* other) {
  if (other != this) {
    std::swap(pet_, other->pet_);
    std::swap(common_, other->common_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeasePetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeasePetResp_descriptor_;
  metadata.reflection = TeasePetResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePetNameReq::kPetidFieldNumber;
const int ChangePetNameReq::kNameFieldNumber;
#endif  // !_MSC_VER

ChangePetNameReq::ChangePetNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPet.ChangePetNameReq)
}

void ChangePetNameReq::InitAsDefaultInstance() {
}

ChangePetNameReq::ChangePetNameReq(const ChangePetNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPet.ChangePetNameReq)
}

void ChangePetNameReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  petid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePetNameReq::~ChangePetNameReq() {
  // @@protoc_insertion_point(destructor:ProtoPet.ChangePetNameReq)
  SharedDtor();
}

void ChangePetNameReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ChangePetNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePetNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePetNameReq_descriptor_;
}

const ChangePetNameReq& ChangePetNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPet_2eproto();
  return *default_instance_;
}

ChangePetNameReq* ChangePetNameReq::default_instance_ = NULL;

ChangePetNameReq* ChangePetNameReq::New() const {
  return new ChangePetNameReq;
}

void ChangePetNameReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    petid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePetNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPet.ChangePetNameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPet.ChangePetNameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPet.ChangePetNameReq)
  return false;
#undef DO_
}

void ChangePetNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPet.ChangePetNameReq)
  // required uint32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->petid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPet.ChangePetNameReq)
}

::google::protobuf::uint8* ChangePetNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPet.ChangePetNameReq)
  // required uint32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->petid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPet.ChangePetNameReq)
  return target;
}

int ChangePetNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePetNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePetNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePetNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePetNameReq::MergeFrom(const ChangePetNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePetNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePetNameReq::CopyFrom(const ChangePetNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePetNameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangePetNameReq::Swap(ChangePetNameReq* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePetNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePetNameReq_descriptor_;
  metadata.reflection = ChangePetNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePetNameResp::kPetFieldNumber;
#endif  // !_MSC_VER

ChangePetNameResp::ChangePetNameResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPet.ChangePetNameResp)
}

void ChangePetNameResp::InitAsDefaultInstance() {
  pet_ = const_cast< ::ProtoPet::UnlockPetCPP*>(&::ProtoPet::UnlockPetCPP::default_instance());
}

ChangePetNameResp::ChangePetNameResp(const ChangePetNameResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPet.ChangePetNameResp)
}

void ChangePetNameResp::SharedCtor() {
  _cached_size_ = 0;
  pet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePetNameResp::~ChangePetNameResp() {
  // @@protoc_insertion_point(destructor:ProtoPet.ChangePetNameResp)
  SharedDtor();
}

void ChangePetNameResp::SharedDtor() {
  if (this != default_instance_) {
    delete pet_;
  }
}

void ChangePetNameResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePetNameResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePetNameResp_descriptor_;
}

const ChangePetNameResp& ChangePetNameResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPet_2eproto();
  return *default_instance_;
}

ChangePetNameResp* ChangePetNameResp::default_instance_ = NULL;

ChangePetNameResp* ChangePetNameResp::New() const {
  return new ChangePetNameResp;
}

void ChangePetNameResp::Clear() {
  if (has_pet()) {
    if (pet_ != NULL) pet_->::ProtoPet::UnlockPetCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePetNameResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPet.ChangePetNameResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoPet.UnlockPetCPP pet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPet.ChangePetNameResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPet.ChangePetNameResp)
  return false;
#undef DO_
}

void ChangePetNameResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPet.ChangePetNameResp)
  // required .ProtoPet.UnlockPetCPP pet = 1;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPet.ChangePetNameResp)
}

::google::protobuf::uint8* ChangePetNameResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPet.ChangePetNameResp)
  // required .ProtoPet.UnlockPetCPP pet = 1;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPet.ChangePetNameResp)
  return target;
}

int ChangePetNameResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoPet.UnlockPetCPP pet = 1;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePetNameResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePetNameResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePetNameResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePetNameResp::MergeFrom(const ChangePetNameResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet()) {
      mutable_pet()->::ProtoPet::UnlockPetCPP::MergeFrom(from.pet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePetNameResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePetNameResp::CopyFrom(const ChangePetNameResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePetNameResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pet()) {
    if (!this->pet().IsInitialized()) return false;
  }
  return true;
}

void ChangePetNameResp::Swap(ChangePetNameResp* other) {
  if (other != this) {
    std::swap(pet_, other->pet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePetNameResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePetNameResp_descriptor_;
  metadata.reflection = ChangePetNameResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushPetMsg::kPetFieldNumber;
#endif  // !_MSC_VER

PushPetMsg::PushPetMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPet.PushPetMsg)
}

void PushPetMsg::InitAsDefaultInstance() {
  pet_ = const_cast< ::ProtoPet::UnlockPetCPP*>(&::ProtoPet::UnlockPetCPP::default_instance());
}

PushPetMsg::PushPetMsg(const PushPetMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPet.PushPetMsg)
}

void PushPetMsg::SharedCtor() {
  _cached_size_ = 0;
  pet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushPetMsg::~PushPetMsg() {
  // @@protoc_insertion_point(destructor:ProtoPet.PushPetMsg)
  SharedDtor();
}

void PushPetMsg::SharedDtor() {
  if (this != default_instance_) {
    delete pet_;
  }
}

void PushPetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushPetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushPetMsg_descriptor_;
}

const PushPetMsg& PushPetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPet_2eproto();
  return *default_instance_;
}

PushPetMsg* PushPetMsg::default_instance_ = NULL;

PushPetMsg* PushPetMsg::New() const {
  return new PushPetMsg;
}

void PushPetMsg::Clear() {
  if (has_pet()) {
    if (pet_ != NULL) pet_->::ProtoPet::UnlockPetCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushPetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPet.PushPetMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoPet.UnlockPetCPP pet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPet.PushPetMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPet.PushPetMsg)
  return false;
#undef DO_
}

void PushPetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPet.PushPetMsg)
  // required .ProtoPet.UnlockPetCPP pet = 1;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPet.PushPetMsg)
}

::google::protobuf::uint8* PushPetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPet.PushPetMsg)
  // required .ProtoPet.UnlockPetCPP pet = 1;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPet.PushPetMsg)
  return target;
}

int PushPetMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoPet.UnlockPetCPP pet = 1;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushPetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushPetMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushPetMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushPetMsg::MergeFrom(const PushPetMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pet()) {
      mutable_pet()->::ProtoPet::UnlockPetCPP::MergeFrom(from.pet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushPetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushPetMsg::CopyFrom(const PushPetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushPetMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pet()) {
    if (!this->pet().IsInitialized()) return false;
  }
  return true;
}

void PushPetMsg::Swap(PushPetMsg* other) {
  if (other != this) {
    std::swap(pet_, other->pet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushPetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushPetMsg_descriptor_;
  metadata.reflection = PushPetMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoPet

// @@protoc_insertion_point(global_scope)
