// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoProduce.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoProduce.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoProduce {

namespace {

const ::google::protobuf::Descriptor* CropLandCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CropLandCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlantCropReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlantCropReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlantCropResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlantCropResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReapCropReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReapCropReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReapCropResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReapCropResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProduceEquipCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProduceEquipCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpandQueueReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpandQueueReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpandQueueResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpandQueueResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinQueueReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinQueueReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinQueueResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinQueueResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchProductReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchProductReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchProductResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchProductResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnimalCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnimalCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdoptAnimalReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdoptAnimalReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdoptAnimalResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdoptAnimalResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedAnimalReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedAnimalReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedAnimalResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedAnimalResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObtainProductReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObtainProductReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObtainProductResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObtainProductResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushRandomRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushRandomRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FruitCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FruitCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushFruitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushFruitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReapFruitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReapFruitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReapFruitResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReapFruitResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeekHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeekHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeekHelpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeekHelpResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CutFruitTreeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CutFruitTreeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CutFruitTreeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CutFruitTreeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferHelpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferHelpResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOfferHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOfferHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOfferHelpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOfferHelpResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfirmHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfirmHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfirmHelpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfirmHelpResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProduceProductCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProduceProductCPP_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoProduce_2eproto() {
  protobuf_AddDesc_ProtoProduce_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoProduce.proto");
  GOOGLE_CHECK(file != NULL);
  CropLandCPP_descriptor_ = file->message_type(0);
  static const int CropLandCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, plant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, harvesttime_),
  };
  CropLandCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CropLandCPP_descriptor_,
      CropLandCPP::default_instance_,
      CropLandCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CropLandCPP));
  PlantCropReq_descriptor_ = file->message_type(1);
  static const int PlantCropReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropReq, uds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropReq, plant_),
  };
  PlantCropReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlantCropReq_descriptor_,
      PlantCropReq::default_instance_,
      PlantCropReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlantCropReq));
  PlantCropResp_descriptor_ = file->message_type(2);
  static const int PlantCropResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropResp, cropland_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropResp, commons_),
  };
  PlantCropResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlantCropResp_descriptor_,
      PlantCropResp::default_instance_,
      PlantCropResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlantCropResp));
  ReapCropReq_descriptor_ = file->message_type(3);
  static const int ReapCropReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropReq, uds_),
  };
  ReapCropReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReapCropReq_descriptor_,
      ReapCropReq::default_instance_,
      ReapCropReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReapCropReq));
  ReapCropResp_descriptor_ = file->message_type(4);
  static const int ReapCropResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropResp, cropland_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropResp, isfull_),
  };
  ReapCropResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReapCropResp_descriptor_,
      ReapCropResp::default_instance_,
      ReapCropResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReapCropResp));
  ProduceEquipCPP_descriptor_ = file->message_type(5);
  static const int ProduceEquipCPP_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, queuenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, queuedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, shelfdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, shelfsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, keeper_),
  };
  ProduceEquipCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProduceEquipCPP_descriptor_,
      ProduceEquipCPP::default_instance_,
      ProduceEquipCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProduceEquipCPP));
  ExpandQueueReq_descriptor_ = file->message_type(6);
  static const int ExpandQueueReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandQueueReq, equipud_),
  };
  ExpandQueueReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpandQueueReq_descriptor_,
      ExpandQueueReq::default_instance_,
      ExpandQueueReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandQueueReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandQueueReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpandQueueReq));
  ExpandQueueResp_descriptor_ = file->message_type(7);
  static const int ExpandQueueResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandQueueResp, equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandQueueResp, commons_),
  };
  ExpandQueueResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpandQueueResp_descriptor_,
      ExpandQueueResp::default_instance_,
      ExpandQueueResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandQueueResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandQueueResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpandQueueResp));
  JoinQueueReq_descriptor_ = file->message_type(8);
  static const int JoinQueueReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueReq, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueReq, equipud_),
  };
  JoinQueueReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinQueueReq_descriptor_,
      JoinQueueReq::default_instance_,
      JoinQueueReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinQueueReq));
  JoinQueueResp_descriptor_ = file->message_type(9);
  static const int JoinQueueResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueResp, equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueResp, commons_),
  };
  JoinQueueResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinQueueResp_descriptor_,
      JoinQueueResp::default_instance_,
      JoinQueueResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinQueueResp));
  FetchProductReq_descriptor_ = file->message_type(10);
  static const int FetchProductReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductReq, equipud_),
  };
  FetchProductReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchProductReq_descriptor_,
      FetchProductReq::default_instance_,
      FetchProductReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchProductReq));
  FetchProductResp_descriptor_ = file->message_type(11);
  static const int FetchProductResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductResp, equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductResp, isfull_),
  };
  FetchProductResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchProductResp_descriptor_,
      FetchProductResp::default_instance_,
      FetchProductResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchProductResp));
  AnimalCPP_descriptor_ = file->message_type(12);
  static const int AnimalCPP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, residenceud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, animalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, fulltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, keeper_),
  };
  AnimalCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnimalCPP_descriptor_,
      AnimalCPP::default_instance_,
      AnimalCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnimalCPP));
  AdoptAnimalReq_descriptor_ = file->message_type(13);
  static const int AdoptAnimalReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoptAnimalReq, buildud_),
  };
  AdoptAnimalReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdoptAnimalReq_descriptor_,
      AdoptAnimalReq::default_instance_,
      AdoptAnimalReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoptAnimalReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoptAnimalReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdoptAnimalReq));
  AdoptAnimalResp_descriptor_ = file->message_type(14);
  static const int AdoptAnimalResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoptAnimalResp, animal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoptAnimalResp, commons_),
  };
  AdoptAnimalResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdoptAnimalResp_descriptor_,
      AdoptAnimalResp::default_instance_,
      AdoptAnimalResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoptAnimalResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoptAnimalResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdoptAnimalResp));
  FeedAnimalReq_descriptor_ = file->message_type(15);
  static const int FeedAnimalReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalReq, animalud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalReq, fodderud_),
  };
  FeedAnimalReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedAnimalReq_descriptor_,
      FeedAnimalReq::default_instance_,
      FeedAnimalReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedAnimalReq));
  FeedAnimalResp_descriptor_ = file->message_type(16);
  static const int FeedAnimalResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalResp, animal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalResp, commons_),
  };
  FeedAnimalResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedAnimalResp_descriptor_,
      FeedAnimalResp::default_instance_,
      FeedAnimalResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedAnimalResp));
  ObtainProductReq_descriptor_ = file->message_type(17);
  static const int ObtainProductReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductReq, animalud_),
  };
  ObtainProductReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObtainProductReq_descriptor_,
      ObtainProductReq::default_instance_,
      ObtainProductReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObtainProductReq));
  ObtainProductResp_descriptor_ = file->message_type(18);
  static const int ObtainProductResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductResp, isfull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductResp, animal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductResp, commons_),
  };
  ObtainProductResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObtainProductResp_descriptor_,
      ObtainProductResp::default_instance_,
      ObtainProductResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObtainProductResp));
  PushRandomRewardReq_descriptor_ = file->message_type(19);
  static const int PushRandomRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushRandomRewardReq, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushRandomRewardReq, commons_),
  };
  PushRandomRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushRandomRewardReq_descriptor_,
      PushRandomRewardReq::default_instance_,
      PushRandomRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushRandomRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushRandomRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushRandomRewardReq));
  FruitCPP_descriptor_ = file->message_type(20);
  static const int FruitCPP_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, treeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, fruitleftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, harvesttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, helpuid_),
  };
  FruitCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FruitCPP_descriptor_,
      FruitCPP::default_instance_,
      FruitCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FruitCPP));
  PushFruitInfo_descriptor_ = file->message_type(21);
  static const int PushFruitInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFruitInfo, fruit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFruitInfo, uid_),
  };
  PushFruitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushFruitInfo_descriptor_,
      PushFruitInfo::default_instance_,
      PushFruitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFruitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFruitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushFruitInfo));
  ReapFruitReq_descriptor_ = file->message_type(22);
  static const int ReapFruitReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapFruitReq, treeud_),
  };
  ReapFruitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReapFruitReq_descriptor_,
      ReapFruitReq::default_instance_,
      ReapFruitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapFruitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapFruitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReapFruitReq));
  ReapFruitResp_descriptor_ = file->message_type(23);
  static const int ReapFruitResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapFruitResp, fruit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapFruitResp, commons_),
  };
  ReapFruitResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReapFruitResp_descriptor_,
      ReapFruitResp::default_instance_,
      ReapFruitResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapFruitResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapFruitResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReapFruitResp));
  SeekHelpReq_descriptor_ = file->message_type(24);
  static const int SeekHelpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekHelpReq, treeud_),
  };
  SeekHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeekHelpReq_descriptor_,
      SeekHelpReq::default_instance_,
      SeekHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeekHelpReq));
  SeekHelpResp_descriptor_ = file->message_type(25);
  static const int SeekHelpResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekHelpResp, fruit_),
  };
  SeekHelpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeekHelpResp_descriptor_,
      SeekHelpResp::default_instance_,
      SeekHelpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekHelpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekHelpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeekHelpResp));
  CutFruitTreeReq_descriptor_ = file->message_type(26);
  static const int CutFruitTreeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutFruitTreeReq, treeud_),
  };
  CutFruitTreeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CutFruitTreeReq_descriptor_,
      CutFruitTreeReq::default_instance_,
      CutFruitTreeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutFruitTreeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutFruitTreeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CutFruitTreeReq));
  CutFruitTreeResp_descriptor_ = file->message_type(27);
  static const int CutFruitTreeResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutFruitTreeResp, destroyud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutFruitTreeResp, commons_),
  };
  CutFruitTreeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CutFruitTreeResp_descriptor_,
      CutFruitTreeResp::default_instance_,
      CutFruitTreeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutFruitTreeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutFruitTreeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CutFruitTreeResp));
  OfferHelpReq_descriptor_ = file->message_type(28);
  static const int OfferHelpReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferHelpReq, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferHelpReq, treeud_),
  };
  OfferHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferHelpReq_descriptor_,
      OfferHelpReq::default_instance_,
      OfferHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferHelpReq));
  OfferHelpResp_descriptor_ = file->message_type(29);
  static const int OfferHelpResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferHelpResp, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferHelpResp, othfruit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferHelpResp, commons_),
  };
  OfferHelpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferHelpResp_descriptor_,
      OfferHelpResp::default_instance_,
      OfferHelpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferHelpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferHelpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferHelpResp));
  CSOfferHelpReq_descriptor_ = file->message_type(30);
  static const int CSOfferHelpReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferHelpReq, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferHelpReq, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferHelpReq, treeud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferHelpReq, allianceid_),
  };
  CSOfferHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOfferHelpReq_descriptor_,
      CSOfferHelpReq::default_instance_,
      CSOfferHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOfferHelpReq));
  CSOfferHelpResp_descriptor_ = file->message_type(31);
  static const int CSOfferHelpResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferHelpResp, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferHelpResp, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferHelpResp, othfruit_),
  };
  CSOfferHelpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOfferHelpResp_descriptor_,
      CSOfferHelpResp::default_instance_,
      CSOfferHelpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferHelpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferHelpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOfferHelpResp));
  ConfirmHelpReq_descriptor_ = file->message_type(32);
  static const int ConfirmHelpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmHelpReq, treeud_),
  };
  ConfirmHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfirmHelpReq_descriptor_,
      ConfirmHelpReq::default_instance_,
      ConfirmHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfirmHelpReq));
  ConfirmHelpResp_descriptor_ = file->message_type(33);
  static const int ConfirmHelpResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmHelpResp, fruit_),
  };
  ConfirmHelpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfirmHelpResp_descriptor_,
      ConfirmHelpResp::default_instance_,
      ConfirmHelpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmHelpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfirmHelpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfirmHelpResp));
  ProduceProductCPP_descriptor_ = file->message_type(34);
  static const int ProduceProductCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceProductCPP, cropland_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceProductCPP, equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceProductCPP, animal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceProductCPP, fruit_),
  };
  ProduceProductCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProduceProductCPP_descriptor_,
      ProduceProductCPP::default_instance_,
      ProduceProductCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceProductCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceProductCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProduceProductCPP));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoProduce_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CropLandCPP_descriptor_, &CropLandCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlantCropReq_descriptor_, &PlantCropReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlantCropResp_descriptor_, &PlantCropResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReapCropReq_descriptor_, &ReapCropReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReapCropResp_descriptor_, &ReapCropResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProduceEquipCPP_descriptor_, &ProduceEquipCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpandQueueReq_descriptor_, &ExpandQueueReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpandQueueResp_descriptor_, &ExpandQueueResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinQueueReq_descriptor_, &JoinQueueReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinQueueResp_descriptor_, &JoinQueueResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchProductReq_descriptor_, &FetchProductReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchProductResp_descriptor_, &FetchProductResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnimalCPP_descriptor_, &AnimalCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdoptAnimalReq_descriptor_, &AdoptAnimalReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdoptAnimalResp_descriptor_, &AdoptAnimalResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedAnimalReq_descriptor_, &FeedAnimalReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedAnimalResp_descriptor_, &FeedAnimalResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObtainProductReq_descriptor_, &ObtainProductReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObtainProductResp_descriptor_, &ObtainProductResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushRandomRewardReq_descriptor_, &PushRandomRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FruitCPP_descriptor_, &FruitCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushFruitInfo_descriptor_, &PushFruitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReapFruitReq_descriptor_, &ReapFruitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReapFruitResp_descriptor_, &ReapFruitResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeekHelpReq_descriptor_, &SeekHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeekHelpResp_descriptor_, &SeekHelpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CutFruitTreeReq_descriptor_, &CutFruitTreeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CutFruitTreeResp_descriptor_, &CutFruitTreeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferHelpReq_descriptor_, &OfferHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferHelpResp_descriptor_, &OfferHelpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOfferHelpReq_descriptor_, &CSOfferHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOfferHelpResp_descriptor_, &CSOfferHelpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfirmHelpReq_descriptor_, &ConfirmHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfirmHelpResp_descriptor_, &ConfirmHelpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProduceProductCPP_descriptor_, &ProduceProductCPP::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoProduce_2eproto() {
  delete CropLandCPP::default_instance_;
  delete CropLandCPP_reflection_;
  delete PlantCropReq::default_instance_;
  delete PlantCropReq_reflection_;
  delete PlantCropResp::default_instance_;
  delete PlantCropResp_reflection_;
  delete ReapCropReq::default_instance_;
  delete ReapCropReq_reflection_;
  delete ReapCropResp::default_instance_;
  delete ReapCropResp_reflection_;
  delete ProduceEquipCPP::default_instance_;
  delete ProduceEquipCPP_reflection_;
  delete ExpandQueueReq::default_instance_;
  delete ExpandQueueReq_reflection_;
  delete ExpandQueueResp::default_instance_;
  delete ExpandQueueResp_reflection_;
  delete JoinQueueReq::default_instance_;
  delete JoinQueueReq_reflection_;
  delete JoinQueueResp::default_instance_;
  delete JoinQueueResp_reflection_;
  delete FetchProductReq::default_instance_;
  delete FetchProductReq_reflection_;
  delete FetchProductResp::default_instance_;
  delete FetchProductResp_reflection_;
  delete AnimalCPP::default_instance_;
  delete AnimalCPP_reflection_;
  delete AdoptAnimalReq::default_instance_;
  delete AdoptAnimalReq_reflection_;
  delete AdoptAnimalResp::default_instance_;
  delete AdoptAnimalResp_reflection_;
  delete FeedAnimalReq::default_instance_;
  delete FeedAnimalReq_reflection_;
  delete FeedAnimalResp::default_instance_;
  delete FeedAnimalResp_reflection_;
  delete ObtainProductReq::default_instance_;
  delete ObtainProductReq_reflection_;
  delete ObtainProductResp::default_instance_;
  delete ObtainProductResp_reflection_;
  delete PushRandomRewardReq::default_instance_;
  delete PushRandomRewardReq_reflection_;
  delete FruitCPP::default_instance_;
  delete FruitCPP_reflection_;
  delete PushFruitInfo::default_instance_;
  delete PushFruitInfo_reflection_;
  delete ReapFruitReq::default_instance_;
  delete ReapFruitReq_reflection_;
  delete ReapFruitResp::default_instance_;
  delete ReapFruitResp_reflection_;
  delete SeekHelpReq::default_instance_;
  delete SeekHelpReq_reflection_;
  delete SeekHelpResp::default_instance_;
  delete SeekHelpResp_reflection_;
  delete CutFruitTreeReq::default_instance_;
  delete CutFruitTreeReq_reflection_;
  delete CutFruitTreeResp::default_instance_;
  delete CutFruitTreeResp_reflection_;
  delete OfferHelpReq::default_instance_;
  delete OfferHelpReq_reflection_;
  delete OfferHelpResp::default_instance_;
  delete OfferHelpResp_reflection_;
  delete CSOfferHelpReq::default_instance_;
  delete CSOfferHelpReq_reflection_;
  delete CSOfferHelpResp::default_instance_;
  delete CSOfferHelpResp_reflection_;
  delete ConfirmHelpReq::default_instance_;
  delete ConfirmHelpReq_reflection_;
  delete ConfirmHelpResp::default_instance_;
  delete ConfirmHelpResp_reflection_;
  delete ProduceProductCPP::default_instance_;
  delete ProduceProductCPP_reflection_;
}

void protobuf_AddDesc_ProtoProduce_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ProtoProduce.proto\022\014ProtoProduce\032\020Data"
    "Common.proto\"M\n\013CropLandCPP\022\n\n\002ud\030\001 \002(\r\022"
    "\r\n\005plant\030\002 \002(\r\022\016\n\006status\030\003 \002(\r\022\023\n\013harves"
    "tTime\030\004 \002(\r\"*\n\014PlantCropReq\022\013\n\003uds\030\001 \003(\r"
    "\022\r\n\005plant\030\002 \002(\r\"i\n\rPlantCropResp\022+\n\010crop"
    "land\030\001 \003(\0132\031.ProtoProduce.CropLandCPP\022+\n"
    "\007commons\030\002 \002(\0132\032.DataCommon.CommonItemsC"
    "PP\"\032\n\013ReapCropReq\022\013\n\003uds\030\001 \003(\r\"x\n\014ReapCr"
    "opResp\022+\n\010cropland\030\001 \003(\0132\031.ProtoProduce."
    "CropLandCPP\022+\n\007commons\030\002 \002(\0132\032.DataCommo"
    "n.CommonItemsCPP\022\016\n\006isfull\030\003 \002(\010\"\236\001\n\017Pro"
    "duceEquipCPP\022\n\n\002ud\030\001 \002(\r\022\016\n\006status\030\002 \002(\r"
    "\022\020\n\010queuenum\030\003 \002(\r\022\021\n\tqueuedata\030\004 \003(\r\022\021\n"
    "\tshelfdata\030\005 \003(\r\022\022\n\nfinishtime\030\006 \002(\r\022\023\n\013"
    "shelfsource\030\007 \003(\r\022\016\n\006keeper\030\010 \001(\r\"!\n\016Exp"
    "andQueueReq\022\017\n\007equipud\030\001 \002(\r\"p\n\017ExpandQu"
    "eueResp\0220\n\tequipment\030\001 \002(\0132\035.ProtoProduc"
    "e.ProduceEquipCPP\022+\n\007commons\030\002 \002(\0132\032.Dat"
    "aCommon.CommonItemsCPP\"0\n\014JoinQueueReq\022\017"
    "\n\007propsid\030\001 \002(\r\022\017\n\007equipud\030\002 \002(\r\"n\n\rJoin"
    "QueueResp\0220\n\tequipment\030\001 \002(\0132\035.ProtoProd"
    "uce.ProduceEquipCPP\022+\n\007commons\030\002 \002(\0132\032.D"
    "ataCommon.CommonItemsCPP\"/\n\017FetchProduct"
    "Req\022\013\n\003pos\030\001 \002(\r\022\017\n\007equipud\030\002 \002(\r\"\201\001\n\020Fe"
    "tchProductResp\0220\n\tequipment\030\001 \002(\0132\035.Prot"
    "oProduce.ProduceEquipCPP\022+\n\007commons\030\002 \001("
    "\0132\032.DataCommon.CommonItemsCPP\022\016\n\006isfull\030"
    "\003 \002(\010\"p\n\tAnimalCPP\022\n\n\002ud\030\001 \002(\r\022\023\n\013reside"
    "nceUd\030\002 \002(\r\022\020\n\010animalId\030\003 \002(\r\022\016\n\006status\030"
    "\004 \002(\r\022\020\n\010fullTime\030\005 \002(\r\022\016\n\006keeper\030\006 \001(\r\""
    "!\n\016AdoptAnimalReq\022\017\n\007buildud\030\001 \002(\r\"g\n\017Ad"
    "optAnimalResp\022\'\n\006animal\030\001 \002(\0132\027.ProtoPro"
    "duce.AnimalCPP\022+\n\007commons\030\002 \002(\0132\032.DataCo"
    "mmon.CommonItemsCPP\"3\n\rFeedAnimalReq\022\020\n\010"
    "animalud\030\001 \002(\r\022\020\n\010fodderud\030\002 \002(\r\"f\n\016Feed"
    "AnimalResp\022\'\n\006animal\030\001 \002(\0132\027.ProtoProduc"
    "e.AnimalCPP\022+\n\007commons\030\002 \002(\0132\032.DataCommo"
    "n.CommonItemsCPP\"$\n\020ObtainProductReq\022\020\n\010"
    "animalud\030\001 \002(\r\"y\n\021ObtainProductResp\022\016\n\006i"
    "sfull\030\001 \002(\010\022\'\n\006animal\030\002 \001(\0132\027.ProtoProdu"
    "ce.AnimalCPP\022+\n\007commons\030\003 \001(\0132\032.DataComm"
    "on.CommonItemsCPP\"S\n\023PushRandomRewardReq"
    "\022\017\n\007propsid\030\001 \002(\r\022+\n\007commons\030\002 \001(\0132\032.Dat"
    "aCommon.CommonItemsCPP\"\201\001\n\010FruitCPP\022\n\n\002u"
    "d\030\001 \002(\r\022\016\n\006treeid\030\002 \002(\r\022\016\n\006status\030\003 \002(\r\022"
    "\r\n\005stage\030\004 \002(\r\022\024\n\014fruitLeftNum\030\005 \002(\r\022\023\n\013"
    "harvestTime\030\006 \002(\r\022\017\n\007helpUid\030\007 \001(\r\"C\n\rPu"
    "shFruitInfo\022%\n\005fruit\030\001 \002(\0132\026.ProtoProduc"
    "e.FruitCPP\022\013\n\003uid\030\002 \002(\r\"\036\n\014ReapFruitReq\022"
    "\016\n\006treeud\030\001 \002(\r\"c\n\rReapFruitResp\022%\n\005frui"
    "t\030\001 \002(\0132\026.ProtoProduce.FruitCPP\022+\n\007commo"
    "ns\030\002 \002(\0132\032.DataCommon.CommonItemsCPP\"\035\n\013"
    "SeekHelpReq\022\016\n\006treeud\030\001 \002(\r\"5\n\014SeekHelpR"
    "esp\022%\n\005fruit\030\001 \002(\0132\026.ProtoProduce.FruitC"
    "PP\"!\n\017CutFruitTreeReq\022\016\n\006treeud\030\001 \002(\r\"R\n"
    "\020CutFruitTreeResp\022\021\n\tdestroyud\030\001 \002(\r\022+\n\007"
    "commons\030\002 \002(\0132\032.DataCommon.CommonItemsCP"
    "P\".\n\014OfferHelpReq\022\016\n\006othuid\030\001 \002(\r\022\016\n\006tre"
    "eud\030\002 \002(\r\"v\n\rOfferHelpResp\022\016\n\006othuid\030\001 \002"
    "(\r\022(\n\010othfruit\030\002 \002(\0132\026.ProtoProduce.Frui"
    "tCPP\022+\n\007commons\030\003 \002(\0132\032.DataCommon.Commo"
    "nItemsCPP\"S\n\016CSOfferHelpReq\022\r\n\005myuid\030\001 \002"
    "(\r\022\016\n\006othuid\030\002 \002(\r\022\016\n\006treeud\030\003 \002(\r\022\022\n\nal"
    "lianceid\030\004 \001(\r\"Z\n\017CSOfferHelpResp\022\r\n\005myu"
    "id\030\001 \002(\r\022\016\n\006othuid\030\002 \002(\r\022(\n\010othfruit\030\003 \002"
    "(\0132\026.ProtoProduce.FruitCPP\" \n\016ConfirmHel"
    "pReq\022\016\n\006treeud\030\001 \002(\r\"8\n\017ConfirmHelpResp\022"
    "%\n\005fruit\030\001 \002(\0132\026.ProtoProduce.FruitCPP\"\302"
    "\001\n\021ProduceProductCPP\022+\n\010cropland\030\001 \001(\0132\031"
    ".ProtoProduce.CropLandCPP\0220\n\tequipment\030\002"
    " \001(\0132\035.ProtoProduce.ProduceEquipCPP\022\'\n\006a"
    "nimal\030\003 \001(\0132\027.ProtoProduce.AnimalCPP\022%\n\005"
    "fruit\030\004 \001(\0132\026.ProtoProduce.FruitCPP", 2915);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoProduce.proto", &protobuf_RegisterTypes);
  CropLandCPP::default_instance_ = new CropLandCPP();
  PlantCropReq::default_instance_ = new PlantCropReq();
  PlantCropResp::default_instance_ = new PlantCropResp();
  ReapCropReq::default_instance_ = new ReapCropReq();
  ReapCropResp::default_instance_ = new ReapCropResp();
  ProduceEquipCPP::default_instance_ = new ProduceEquipCPP();
  ExpandQueueReq::default_instance_ = new ExpandQueueReq();
  ExpandQueueResp::default_instance_ = new ExpandQueueResp();
  JoinQueueReq::default_instance_ = new JoinQueueReq();
  JoinQueueResp::default_instance_ = new JoinQueueResp();
  FetchProductReq::default_instance_ = new FetchProductReq();
  FetchProductResp::default_instance_ = new FetchProductResp();
  AnimalCPP::default_instance_ = new AnimalCPP();
  AdoptAnimalReq::default_instance_ = new AdoptAnimalReq();
  AdoptAnimalResp::default_instance_ = new AdoptAnimalResp();
  FeedAnimalReq::default_instance_ = new FeedAnimalReq();
  FeedAnimalResp::default_instance_ = new FeedAnimalResp();
  ObtainProductReq::default_instance_ = new ObtainProductReq();
  ObtainProductResp::default_instance_ = new ObtainProductResp();
  PushRandomRewardReq::default_instance_ = new PushRandomRewardReq();
  FruitCPP::default_instance_ = new FruitCPP();
  PushFruitInfo::default_instance_ = new PushFruitInfo();
  ReapFruitReq::default_instance_ = new ReapFruitReq();
  ReapFruitResp::default_instance_ = new ReapFruitResp();
  SeekHelpReq::default_instance_ = new SeekHelpReq();
  SeekHelpResp::default_instance_ = new SeekHelpResp();
  CutFruitTreeReq::default_instance_ = new CutFruitTreeReq();
  CutFruitTreeResp::default_instance_ = new CutFruitTreeResp();
  OfferHelpReq::default_instance_ = new OfferHelpReq();
  OfferHelpResp::default_instance_ = new OfferHelpResp();
  CSOfferHelpReq::default_instance_ = new CSOfferHelpReq();
  CSOfferHelpResp::default_instance_ = new CSOfferHelpResp();
  ConfirmHelpReq::default_instance_ = new ConfirmHelpReq();
  ConfirmHelpResp::default_instance_ = new ConfirmHelpResp();
  ProduceProductCPP::default_instance_ = new ProduceProductCPP();
  CropLandCPP::default_instance_->InitAsDefaultInstance();
  PlantCropReq::default_instance_->InitAsDefaultInstance();
  PlantCropResp::default_instance_->InitAsDefaultInstance();
  ReapCropReq::default_instance_->InitAsDefaultInstance();
  ReapCropResp::default_instance_->InitAsDefaultInstance();
  ProduceEquipCPP::default_instance_->InitAsDefaultInstance();
  ExpandQueueReq::default_instance_->InitAsDefaultInstance();
  ExpandQueueResp::default_instance_->InitAsDefaultInstance();
  JoinQueueReq::default_instance_->InitAsDefaultInstance();
  JoinQueueResp::default_instance_->InitAsDefaultInstance();
  FetchProductReq::default_instance_->InitAsDefaultInstance();
  FetchProductResp::default_instance_->InitAsDefaultInstance();
  AnimalCPP::default_instance_->InitAsDefaultInstance();
  AdoptAnimalReq::default_instance_->InitAsDefaultInstance();
  AdoptAnimalResp::default_instance_->InitAsDefaultInstance();
  FeedAnimalReq::default_instance_->InitAsDefaultInstance();
  FeedAnimalResp::default_instance_->InitAsDefaultInstance();
  ObtainProductReq::default_instance_->InitAsDefaultInstance();
  ObtainProductResp::default_instance_->InitAsDefaultInstance();
  PushRandomRewardReq::default_instance_->InitAsDefaultInstance();
  FruitCPP::default_instance_->InitAsDefaultInstance();
  PushFruitInfo::default_instance_->InitAsDefaultInstance();
  ReapFruitReq::default_instance_->InitAsDefaultInstance();
  ReapFruitResp::default_instance_->InitAsDefaultInstance();
  SeekHelpReq::default_instance_->InitAsDefaultInstance();
  SeekHelpResp::default_instance_->InitAsDefaultInstance();
  CutFruitTreeReq::default_instance_->InitAsDefaultInstance();
  CutFruitTreeResp::default_instance_->InitAsDefaultInstance();
  OfferHelpReq::default_instance_->InitAsDefaultInstance();
  OfferHelpResp::default_instance_->InitAsDefaultInstance();
  CSOfferHelpReq::default_instance_->InitAsDefaultInstance();
  CSOfferHelpResp::default_instance_->InitAsDefaultInstance();
  ConfirmHelpReq::default_instance_->InitAsDefaultInstance();
  ConfirmHelpResp::default_instance_->InitAsDefaultInstance();
  ProduceProductCPP::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoProduce_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoProduce_2eproto {
  StaticDescriptorInitializer_ProtoProduce_2eproto() {
    protobuf_AddDesc_ProtoProduce_2eproto();
  }
} static_descriptor_initializer_ProtoProduce_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CropLandCPP::kUdFieldNumber;
const int CropLandCPP::kPlantFieldNumber;
const int CropLandCPP::kStatusFieldNumber;
const int CropLandCPP::kHarvestTimeFieldNumber;
#endif  // !_MSC_VER

CropLandCPP::CropLandCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.CropLandCPP)
}

void CropLandCPP::InitAsDefaultInstance() {
}

CropLandCPP::CropLandCPP(const CropLandCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.CropLandCPP)
}

void CropLandCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  plant_ = 0u;
  status_ = 0u;
  harvesttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CropLandCPP::~CropLandCPP() {
  // @@protoc_insertion_point(destructor:ProtoProduce.CropLandCPP)
  SharedDtor();
}

void CropLandCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CropLandCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CropLandCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CropLandCPP_descriptor_;
}

const CropLandCPP& CropLandCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

CropLandCPP* CropLandCPP::default_instance_ = NULL;

CropLandCPP* CropLandCPP::New() const {
  return new CropLandCPP;
}

void CropLandCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CropLandCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ud_, harvesttime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CropLandCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.CropLandCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plant;
        break;
      }

      // required uint32 plant = 2;
      case 2: {
        if (tag == 16) {
         parse_plant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plant_)));
          set_has_plant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required uint32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_harvestTime;
        break;
      }

      // required uint32 harvestTime = 4;
      case 4: {
        if (tag == 32) {
         parse_harvestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harvesttime_)));
          set_has_harvesttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.CropLandCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.CropLandCPP)
  return false;
#undef DO_
}

void CropLandCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.CropLandCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 plant = 2;
  if (has_plant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->plant(), output);
  }

  // required uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // required uint32 harvestTime = 4;
  if (has_harvesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->harvesttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.CropLandCPP)
}

::google::protobuf::uint8* CropLandCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.CropLandCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 plant = 2;
  if (has_plant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->plant(), target);
  }

  // required uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // required uint32 harvestTime = 4;
  if (has_harvesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->harvesttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.CropLandCPP)
  return target;
}

int CropLandCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 plant = 2;
    if (has_plant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plant());
    }

    // required uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 harvestTime = 4;
    if (has_harvesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harvesttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CropLandCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CropLandCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CropLandCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CropLandCPP::MergeFrom(const CropLandCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_plant()) {
      set_plant(from.plant());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_harvesttime()) {
      set_harvesttime(from.harvesttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CropLandCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CropLandCPP::CopyFrom(const CropLandCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropLandCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CropLandCPP::Swap(CropLandCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(plant_, other->plant_);
    std::swap(status_, other->status_);
    std::swap(harvesttime_, other->harvesttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CropLandCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CropLandCPP_descriptor_;
  metadata.reflection = CropLandCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlantCropReq::kUdsFieldNumber;
const int PlantCropReq::kPlantFieldNumber;
#endif  // !_MSC_VER

PlantCropReq::PlantCropReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.PlantCropReq)
}

void PlantCropReq::InitAsDefaultInstance() {
}

PlantCropReq::PlantCropReq(const PlantCropReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.PlantCropReq)
}

void PlantCropReq::SharedCtor() {
  _cached_size_ = 0;
  plant_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlantCropReq::~PlantCropReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.PlantCropReq)
  SharedDtor();
}

void PlantCropReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlantCropReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlantCropReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlantCropReq_descriptor_;
}

const PlantCropReq& PlantCropReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

PlantCropReq* PlantCropReq::default_instance_ = NULL;

PlantCropReq* PlantCropReq::New() const {
  return new PlantCropReq;
}

void PlantCropReq::Clear() {
  plant_ = 0u;
  uds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlantCropReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.PlantCropReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 uds = 1;
      case 1: {
        if (tag == 8) {
         parse_uds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_uds())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_uds;
        if (input->ExpectTag(16)) goto parse_plant;
        break;
      }

      // required uint32 plant = 2;
      case 2: {
        if (tag == 16) {
         parse_plant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plant_)));
          set_has_plant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.PlantCropReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.PlantCropReq)
  return false;
#undef DO_
}

void PlantCropReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.PlantCropReq)
  // repeated uint32 uds = 1;
  for (int i = 0; i < this->uds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->uds(i), output);
  }

  // required uint32 plant = 2;
  if (has_plant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->plant(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.PlantCropReq)
}

::google::protobuf::uint8* PlantCropReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.PlantCropReq)
  // repeated uint32 uds = 1;
  for (int i = 0; i < this->uds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->uds(i), target);
  }

  // required uint32 plant = 2;
  if (has_plant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->plant(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.PlantCropReq)
  return target;
}

int PlantCropReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 plant = 2;
    if (has_plant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plant());
    }

  }
  // repeated uint32 uds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uds(i));
    }
    total_size += 1 * this->uds_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlantCropReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlantCropReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlantCropReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlantCropReq::MergeFrom(const PlantCropReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  uds_.MergeFrom(from.uds_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_plant()) {
      set_plant(from.plant());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlantCropReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlantCropReq::CopyFrom(const PlantCropReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlantCropReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void PlantCropReq::Swap(PlantCropReq* other) {
  if (other != this) {
    uds_.Swap(&other->uds_);
    std::swap(plant_, other->plant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlantCropReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlantCropReq_descriptor_;
  metadata.reflection = PlantCropReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlantCropResp::kCroplandFieldNumber;
const int PlantCropResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

PlantCropResp::PlantCropResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.PlantCropResp)
}

void PlantCropResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

PlantCropResp::PlantCropResp(const PlantCropResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.PlantCropResp)
}

void PlantCropResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlantCropResp::~PlantCropResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.PlantCropResp)
  SharedDtor();
}

void PlantCropResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void PlantCropResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlantCropResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlantCropResp_descriptor_;
}

const PlantCropResp& PlantCropResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

PlantCropResp* PlantCropResp::default_instance_ = NULL;

PlantCropResp* PlantCropResp::New() const {
  return new PlantCropResp;
}

void PlantCropResp::Clear() {
  if (has_commons()) {
    if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  }
  cropland_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlantCropResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.PlantCropResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoProduce.CropLandCPP cropland = 1;
      case 1: {
        if (tag == 10) {
         parse_cropland:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cropland()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cropland;
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.PlantCropResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.PlantCropResp)
  return false;
#undef DO_
}

void PlantCropResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.PlantCropResp)
  // repeated .ProtoProduce.CropLandCPP cropland = 1;
  for (int i = 0; i < this->cropland_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cropland(i), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.PlantCropResp)
}

::google::protobuf::uint8* PlantCropResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.PlantCropResp)
  // repeated .ProtoProduce.CropLandCPP cropland = 1;
  for (int i = 0; i < this->cropland_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cropland(i), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.PlantCropResp)
  return target;
}

int PlantCropResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  // repeated .ProtoProduce.CropLandCPP cropland = 1;
  total_size += 1 * this->cropland_size();
  for (int i = 0; i < this->cropland_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cropland(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlantCropResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlantCropResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlantCropResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlantCropResp::MergeFrom(const PlantCropResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cropland_.MergeFrom(from.cropland_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlantCropResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlantCropResp::CopyFrom(const PlantCropResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlantCropResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cropland())) return false;
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void PlantCropResp::Swap(PlantCropResp* other) {
  if (other != this) {
    cropland_.Swap(&other->cropland_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlantCropResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlantCropResp_descriptor_;
  metadata.reflection = PlantCropResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReapCropReq::kUdsFieldNumber;
#endif  // !_MSC_VER

ReapCropReq::ReapCropReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ReapCropReq)
}

void ReapCropReq::InitAsDefaultInstance() {
}

ReapCropReq::ReapCropReq(const ReapCropReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ReapCropReq)
}

void ReapCropReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReapCropReq::~ReapCropReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ReapCropReq)
  SharedDtor();
}

void ReapCropReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReapCropReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReapCropReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReapCropReq_descriptor_;
}

const ReapCropReq& ReapCropReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ReapCropReq* ReapCropReq::default_instance_ = NULL;

ReapCropReq* ReapCropReq::New() const {
  return new ReapCropReq;
}

void ReapCropReq::Clear() {
  uds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReapCropReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ReapCropReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 uds = 1;
      case 1: {
        if (tag == 8) {
         parse_uds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_uds())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_uds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ReapCropReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ReapCropReq)
  return false;
#undef DO_
}

void ReapCropReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ReapCropReq)
  // repeated uint32 uds = 1;
  for (int i = 0; i < this->uds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->uds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ReapCropReq)
}

::google::protobuf::uint8* ReapCropReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ReapCropReq)
  // repeated uint32 uds = 1;
  for (int i = 0; i < this->uds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->uds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ReapCropReq)
  return target;
}

int ReapCropReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 uds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uds(i));
    }
    total_size += 1 * this->uds_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReapCropReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReapCropReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReapCropReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReapCropReq::MergeFrom(const ReapCropReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  uds_.MergeFrom(from.uds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReapCropReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReapCropReq::CopyFrom(const ReapCropReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReapCropReq::IsInitialized() const {

  return true;
}

void ReapCropReq::Swap(ReapCropReq* other) {
  if (other != this) {
    uds_.Swap(&other->uds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReapCropReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReapCropReq_descriptor_;
  metadata.reflection = ReapCropReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReapCropResp::kCroplandFieldNumber;
const int ReapCropResp::kCommonsFieldNumber;
const int ReapCropResp::kIsfullFieldNumber;
#endif  // !_MSC_VER

ReapCropResp::ReapCropResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ReapCropResp)
}

void ReapCropResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ReapCropResp::ReapCropResp(const ReapCropResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ReapCropResp)
}

void ReapCropResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  isfull_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReapCropResp::~ReapCropResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ReapCropResp)
  SharedDtor();
}

void ReapCropResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void ReapCropResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReapCropResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReapCropResp_descriptor_;
}

const ReapCropResp& ReapCropResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ReapCropResp* ReapCropResp::default_instance_ = NULL;

ReapCropResp* ReapCropResp::New() const {
  return new ReapCropResp;
}

void ReapCropResp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    isfull_ = false;
  }
  cropland_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReapCropResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ReapCropResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoProduce.CropLandCPP cropland = 1;
      case 1: {
        if (tag == 10) {
         parse_cropland:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cropland()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cropland;
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isfull;
        break;
      }

      // required bool isfull = 3;
      case 3: {
        if (tag == 24) {
         parse_isfull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfull_)));
          set_has_isfull();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ReapCropResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ReapCropResp)
  return false;
#undef DO_
}

void ReapCropResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ReapCropResp)
  // repeated .ProtoProduce.CropLandCPP cropland = 1;
  for (int i = 0; i < this->cropland_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cropland(i), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  // required bool isfull = 3;
  if (has_isfull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isfull(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ReapCropResp)
}

::google::protobuf::uint8* ReapCropResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ReapCropResp)
  // repeated .ProtoProduce.CropLandCPP cropland = 1;
  for (int i = 0; i < this->cropland_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cropland(i), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  // required bool isfull = 3;
  if (has_isfull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isfull(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ReapCropResp)
  return target;
}

int ReapCropResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required bool isfull = 3;
    if (has_isfull()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ProtoProduce.CropLandCPP cropland = 1;
  total_size += 1 * this->cropland_size();
  for (int i = 0; i < this->cropland_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cropland(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReapCropResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReapCropResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReapCropResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReapCropResp::MergeFrom(const ReapCropResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cropland_.MergeFrom(from.cropland_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_isfull()) {
      set_isfull(from.isfull());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReapCropResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReapCropResp::CopyFrom(const ReapCropResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReapCropResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cropland())) return false;
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ReapCropResp::Swap(ReapCropResp* other) {
  if (other != this) {
    cropland_.Swap(&other->cropland_);
    std::swap(commons_, other->commons_);
    std::swap(isfull_, other->isfull_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReapCropResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReapCropResp_descriptor_;
  metadata.reflection = ReapCropResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProduceEquipCPP::kUdFieldNumber;
const int ProduceEquipCPP::kStatusFieldNumber;
const int ProduceEquipCPP::kQueuenumFieldNumber;
const int ProduceEquipCPP::kQueuedataFieldNumber;
const int ProduceEquipCPP::kShelfdataFieldNumber;
const int ProduceEquipCPP::kFinishtimeFieldNumber;
const int ProduceEquipCPP::kShelfsourceFieldNumber;
const int ProduceEquipCPP::kKeeperFieldNumber;
#endif  // !_MSC_VER

ProduceEquipCPP::ProduceEquipCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ProduceEquipCPP)
}

void ProduceEquipCPP::InitAsDefaultInstance() {
}

ProduceEquipCPP::ProduceEquipCPP(const ProduceEquipCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ProduceEquipCPP)
}

void ProduceEquipCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  status_ = 0u;
  queuenum_ = 0u;
  finishtime_ = 0u;
  keeper_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProduceEquipCPP::~ProduceEquipCPP() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ProduceEquipCPP)
  SharedDtor();
}

void ProduceEquipCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProduceEquipCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProduceEquipCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProduceEquipCPP_descriptor_;
}

const ProduceEquipCPP& ProduceEquipCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ProduceEquipCPP* ProduceEquipCPP::default_instance_ = NULL;

ProduceEquipCPP* ProduceEquipCPP::New() const {
  return new ProduceEquipCPP;
}

void ProduceEquipCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProduceEquipCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 167) {
    ZR_(ud_, status_);
    ZR_(queuenum_, finishtime_);
    keeper_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  queuedata_.Clear();
  shelfdata_.Clear();
  shelfsource_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProduceEquipCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ProduceEquipCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_queuenum;
        break;
      }

      // required uint32 queuenum = 3;
      case 3: {
        if (tag == 24) {
         parse_queuenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queuenum_)));
          set_has_queuenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_queuedata;
        break;
      }

      // repeated uint32 queuedata = 4;
      case 4: {
        if (tag == 32) {
         parse_queuedata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_queuedata())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_queuedata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_queuedata;
        if (input->ExpectTag(40)) goto parse_shelfdata;
        break;
      }

      // repeated uint32 shelfdata = 5;
      case 5: {
        if (tag == 40) {
         parse_shelfdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_shelfdata())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shelfdata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_shelfdata;
        if (input->ExpectTag(48)) goto parse_finishtime;
        break;
      }

      // required uint32 finishtime = 6;
      case 6: {
        if (tag == 48) {
         parse_finishtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_shelfsource;
        break;
      }

      // repeated uint32 shelfsource = 7;
      case 7: {
        if (tag == 56) {
         parse_shelfsource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_shelfsource())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shelfsource())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_shelfsource;
        if (input->ExpectTag(64)) goto parse_keeper;
        break;
      }

      // optional uint32 keeper = 8;
      case 8: {
        if (tag == 64) {
         parse_keeper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keeper_)));
          set_has_keeper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ProduceEquipCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ProduceEquipCPP)
  return false;
#undef DO_
}

void ProduceEquipCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ProduceEquipCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // required uint32 queuenum = 3;
  if (has_queuenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->queuenum(), output);
  }

  // repeated uint32 queuedata = 4;
  for (int i = 0; i < this->queuedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->queuedata(i), output);
  }

  // repeated uint32 shelfdata = 5;
  for (int i = 0; i < this->shelfdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->shelfdata(i), output);
  }

  // required uint32 finishtime = 6;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->finishtime(), output);
  }

  // repeated uint32 shelfsource = 7;
  for (int i = 0; i < this->shelfsource_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->shelfsource(i), output);
  }

  // optional uint32 keeper = 8;
  if (has_keeper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->keeper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ProduceEquipCPP)
}

::google::protobuf::uint8* ProduceEquipCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ProduceEquipCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // required uint32 queuenum = 3;
  if (has_queuenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->queuenum(), target);
  }

  // repeated uint32 queuedata = 4;
  for (int i = 0; i < this->queuedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->queuedata(i), target);
  }

  // repeated uint32 shelfdata = 5;
  for (int i = 0; i < this->shelfdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->shelfdata(i), target);
  }

  // required uint32 finishtime = 6;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->finishtime(), target);
  }

  // repeated uint32 shelfsource = 7;
  for (int i = 0; i < this->shelfsource_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->shelfsource(i), target);
  }

  // optional uint32 keeper = 8;
  if (has_keeper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->keeper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ProduceEquipCPP)
  return target;
}

int ProduceEquipCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 queuenum = 3;
    if (has_queuenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queuenum());
    }

    // required uint32 finishtime = 6;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishtime());
    }

    // optional uint32 keeper = 8;
    if (has_keeper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keeper());
    }

  }
  // repeated uint32 queuedata = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->queuedata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->queuedata(i));
    }
    total_size += 1 * this->queuedata_size() + data_size;
  }

  // repeated uint32 shelfdata = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->shelfdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shelfdata(i));
    }
    total_size += 1 * this->shelfdata_size() + data_size;
  }

  // repeated uint32 shelfsource = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->shelfsource_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shelfsource(i));
    }
    total_size += 1 * this->shelfsource_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProduceEquipCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProduceEquipCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProduceEquipCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProduceEquipCPP::MergeFrom(const ProduceEquipCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  queuedata_.MergeFrom(from.queuedata_);
  shelfdata_.MergeFrom(from.shelfdata_);
  shelfsource_.MergeFrom(from.shelfsource_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_queuenum()) {
      set_queuenum(from.queuenum());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_keeper()) {
      set_keeper(from.keeper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProduceEquipCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProduceEquipCPP::CopyFrom(const ProduceEquipCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProduceEquipCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  return true;
}

void ProduceEquipCPP::Swap(ProduceEquipCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(status_, other->status_);
    std::swap(queuenum_, other->queuenum_);
    queuedata_.Swap(&other->queuedata_);
    shelfdata_.Swap(&other->shelfdata_);
    std::swap(finishtime_, other->finishtime_);
    shelfsource_.Swap(&other->shelfsource_);
    std::swap(keeper_, other->keeper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProduceEquipCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProduceEquipCPP_descriptor_;
  metadata.reflection = ProduceEquipCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpandQueueReq::kEquipudFieldNumber;
#endif  // !_MSC_VER

ExpandQueueReq::ExpandQueueReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ExpandQueueReq)
}

void ExpandQueueReq::InitAsDefaultInstance() {
}

ExpandQueueReq::ExpandQueueReq(const ExpandQueueReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ExpandQueueReq)
}

void ExpandQueueReq::SharedCtor() {
  _cached_size_ = 0;
  equipud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpandQueueReq::~ExpandQueueReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ExpandQueueReq)
  SharedDtor();
}

void ExpandQueueReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpandQueueReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpandQueueReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpandQueueReq_descriptor_;
}

const ExpandQueueReq& ExpandQueueReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ExpandQueueReq* ExpandQueueReq::default_instance_ = NULL;

ExpandQueueReq* ExpandQueueReq::New() const {
  return new ExpandQueueReq;
}

void ExpandQueueReq::Clear() {
  equipud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpandQueueReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ExpandQueueReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equipud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipud_)));
          set_has_equipud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ExpandQueueReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ExpandQueueReq)
  return false;
#undef DO_
}

void ExpandQueueReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ExpandQueueReq)
  // required uint32 equipud = 1;
  if (has_equipud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equipud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ExpandQueueReq)
}

::google::protobuf::uint8* ExpandQueueReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ExpandQueueReq)
  // required uint32 equipud = 1;
  if (has_equipud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equipud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ExpandQueueReq)
  return target;
}

int ExpandQueueReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equipud = 1;
    if (has_equipud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpandQueueReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpandQueueReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpandQueueReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpandQueueReq::MergeFrom(const ExpandQueueReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipud()) {
      set_equipud(from.equipud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpandQueueReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpandQueueReq::CopyFrom(const ExpandQueueReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandQueueReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ExpandQueueReq::Swap(ExpandQueueReq* other) {
  if (other != this) {
    std::swap(equipud_, other->equipud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpandQueueReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpandQueueReq_descriptor_;
  metadata.reflection = ExpandQueueReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpandQueueResp::kEquipmentFieldNumber;
const int ExpandQueueResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ExpandQueueResp::ExpandQueueResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ExpandQueueResp)
}

void ExpandQueueResp::InitAsDefaultInstance() {
  equipment_ = const_cast< ::ProtoProduce::ProduceEquipCPP*>(&::ProtoProduce::ProduceEquipCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ExpandQueueResp::ExpandQueueResp(const ExpandQueueResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ExpandQueueResp)
}

void ExpandQueueResp::SharedCtor() {
  _cached_size_ = 0;
  equipment_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpandQueueResp::~ExpandQueueResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ExpandQueueResp)
  SharedDtor();
}

void ExpandQueueResp::SharedDtor() {
  if (this != default_instance_) {
    delete equipment_;
    delete commons_;
  }
}

void ExpandQueueResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpandQueueResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpandQueueResp_descriptor_;
}

const ExpandQueueResp& ExpandQueueResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ExpandQueueResp* ExpandQueueResp::default_instance_ = NULL;

ExpandQueueResp* ExpandQueueResp::New() const {
  return new ExpandQueueResp;
}

void ExpandQueueResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_equipment()) {
      if (equipment_ != NULL) equipment_->::ProtoProduce::ProduceEquipCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpandQueueResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ExpandQueueResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.ProduceEquipCPP equipment = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ExpandQueueResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ExpandQueueResp)
  return false;
#undef DO_
}

void ExpandQueueResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ExpandQueueResp)
  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipment(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ExpandQueueResp)
}

::google::protobuf::uint8* ExpandQueueResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ExpandQueueResp)
  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  if (has_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipment(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ExpandQueueResp)
  return target;
}

int ExpandQueueResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.ProduceEquipCPP equipment = 1;
    if (has_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipment());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpandQueueResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpandQueueResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpandQueueResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpandQueueResp::MergeFrom(const ExpandQueueResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipment()) {
      mutable_equipment()->::ProtoProduce::ProduceEquipCPP::MergeFrom(from.equipment());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpandQueueResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpandQueueResp::CopyFrom(const ExpandQueueResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandQueueResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_equipment()) {
    if (!this->equipment().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ExpandQueueResp::Swap(ExpandQueueResp* other) {
  if (other != this) {
    std::swap(equipment_, other->equipment_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpandQueueResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpandQueueResp_descriptor_;
  metadata.reflection = ExpandQueueResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinQueueReq::kPropsidFieldNumber;
const int JoinQueueReq::kEquipudFieldNumber;
#endif  // !_MSC_VER

JoinQueueReq::JoinQueueReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.JoinQueueReq)
}

void JoinQueueReq::InitAsDefaultInstance() {
}

JoinQueueReq::JoinQueueReq(const JoinQueueReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.JoinQueueReq)
}

void JoinQueueReq::SharedCtor() {
  _cached_size_ = 0;
  propsid_ = 0u;
  equipud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinQueueReq::~JoinQueueReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.JoinQueueReq)
  SharedDtor();
}

void JoinQueueReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinQueueReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinQueueReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinQueueReq_descriptor_;
}

const JoinQueueReq& JoinQueueReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

JoinQueueReq* JoinQueueReq::default_instance_ = NULL;

JoinQueueReq* JoinQueueReq::New() const {
  return new JoinQueueReq;
}

void JoinQueueReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinQueueReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(propsid_, equipud_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinQueueReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.JoinQueueReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 propsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equipud;
        break;
      }

      // required uint32 equipud = 2;
      case 2: {
        if (tag == 16) {
         parse_equipud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipud_)));
          set_has_equipud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.JoinQueueReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.JoinQueueReq)
  return false;
#undef DO_
}

void JoinQueueReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.JoinQueueReq)
  // required uint32 propsid = 1;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  // required uint32 equipud = 2;
  if (has_equipud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equipud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.JoinQueueReq)
}

::google::protobuf::uint8* JoinQueueReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.JoinQueueReq)
  // required uint32 propsid = 1;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  // required uint32 equipud = 2;
  if (has_equipud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equipud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.JoinQueueReq)
  return target;
}

int JoinQueueReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 propsid = 1;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 equipud = 2;
    if (has_equipud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinQueueReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinQueueReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinQueueReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinQueueReq::MergeFrom(const JoinQueueReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_equipud()) {
      set_equipud(from.equipud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinQueueReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinQueueReq::CopyFrom(const JoinQueueReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinQueueReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void JoinQueueReq::Swap(JoinQueueReq* other) {
  if (other != this) {
    std::swap(propsid_, other->propsid_);
    std::swap(equipud_, other->equipud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinQueueReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinQueueReq_descriptor_;
  metadata.reflection = JoinQueueReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinQueueResp::kEquipmentFieldNumber;
const int JoinQueueResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

JoinQueueResp::JoinQueueResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.JoinQueueResp)
}

void JoinQueueResp::InitAsDefaultInstance() {
  equipment_ = const_cast< ::ProtoProduce::ProduceEquipCPP*>(&::ProtoProduce::ProduceEquipCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

JoinQueueResp::JoinQueueResp(const JoinQueueResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.JoinQueueResp)
}

void JoinQueueResp::SharedCtor() {
  _cached_size_ = 0;
  equipment_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinQueueResp::~JoinQueueResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.JoinQueueResp)
  SharedDtor();
}

void JoinQueueResp::SharedDtor() {
  if (this != default_instance_) {
    delete equipment_;
    delete commons_;
  }
}

void JoinQueueResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinQueueResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinQueueResp_descriptor_;
}

const JoinQueueResp& JoinQueueResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

JoinQueueResp* JoinQueueResp::default_instance_ = NULL;

JoinQueueResp* JoinQueueResp::New() const {
  return new JoinQueueResp;
}

void JoinQueueResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_equipment()) {
      if (equipment_ != NULL) equipment_->::ProtoProduce::ProduceEquipCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinQueueResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.JoinQueueResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.ProduceEquipCPP equipment = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.JoinQueueResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.JoinQueueResp)
  return false;
#undef DO_
}

void JoinQueueResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.JoinQueueResp)
  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipment(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.JoinQueueResp)
}

::google::protobuf::uint8* JoinQueueResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.JoinQueueResp)
  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  if (has_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipment(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.JoinQueueResp)
  return target;
}

int JoinQueueResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.ProduceEquipCPP equipment = 1;
    if (has_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipment());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinQueueResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinQueueResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinQueueResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinQueueResp::MergeFrom(const JoinQueueResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipment()) {
      mutable_equipment()->::ProtoProduce::ProduceEquipCPP::MergeFrom(from.equipment());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinQueueResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinQueueResp::CopyFrom(const JoinQueueResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinQueueResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_equipment()) {
    if (!this->equipment().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void JoinQueueResp::Swap(JoinQueueResp* other) {
  if (other != this) {
    std::swap(equipment_, other->equipment_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinQueueResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinQueueResp_descriptor_;
  metadata.reflection = JoinQueueResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchProductReq::kPosFieldNumber;
const int FetchProductReq::kEquipudFieldNumber;
#endif  // !_MSC_VER

FetchProductReq::FetchProductReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.FetchProductReq)
}

void FetchProductReq::InitAsDefaultInstance() {
}

FetchProductReq::FetchProductReq(const FetchProductReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.FetchProductReq)
}

void FetchProductReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  equipud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchProductReq::~FetchProductReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.FetchProductReq)
  SharedDtor();
}

void FetchProductReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FetchProductReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchProductReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchProductReq_descriptor_;
}

const FetchProductReq& FetchProductReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

FetchProductReq* FetchProductReq::default_instance_ = NULL;

FetchProductReq* FetchProductReq::New() const {
  return new FetchProductReq;
}

void FetchProductReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FetchProductReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pos_, equipud_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchProductReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.FetchProductReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equipud;
        break;
      }

      // required uint32 equipud = 2;
      case 2: {
        if (tag == 16) {
         parse_equipud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipud_)));
          set_has_equipud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.FetchProductReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.FetchProductReq)
  return false;
#undef DO_
}

void FetchProductReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.FetchProductReq)
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required uint32 equipud = 2;
  if (has_equipud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equipud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.FetchProductReq)
}

::google::protobuf::uint8* FetchProductReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.FetchProductReq)
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required uint32 equipud = 2;
  if (has_equipud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equipud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.FetchProductReq)
  return target;
}

int FetchProductReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 equipud = 2;
    if (has_equipud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchProductReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchProductReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchProductReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchProductReq::MergeFrom(const FetchProductReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_equipud()) {
      set_equipud(from.equipud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchProductReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchProductReq::CopyFrom(const FetchProductReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchProductReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FetchProductReq::Swap(FetchProductReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(equipud_, other->equipud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchProductReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchProductReq_descriptor_;
  metadata.reflection = FetchProductReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchProductResp::kEquipmentFieldNumber;
const int FetchProductResp::kCommonsFieldNumber;
const int FetchProductResp::kIsfullFieldNumber;
#endif  // !_MSC_VER

FetchProductResp::FetchProductResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.FetchProductResp)
}

void FetchProductResp::InitAsDefaultInstance() {
  equipment_ = const_cast< ::ProtoProduce::ProduceEquipCPP*>(&::ProtoProduce::ProduceEquipCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

FetchProductResp::FetchProductResp(const FetchProductResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.FetchProductResp)
}

void FetchProductResp::SharedCtor() {
  _cached_size_ = 0;
  equipment_ = NULL;
  commons_ = NULL;
  isfull_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchProductResp::~FetchProductResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.FetchProductResp)
  SharedDtor();
}

void FetchProductResp::SharedDtor() {
  if (this != default_instance_) {
    delete equipment_;
    delete commons_;
  }
}

void FetchProductResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchProductResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchProductResp_descriptor_;
}

const FetchProductResp& FetchProductResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

FetchProductResp* FetchProductResp::default_instance_ = NULL;

FetchProductResp* FetchProductResp::New() const {
  return new FetchProductResp;
}

void FetchProductResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_equipment()) {
      if (equipment_ != NULL) equipment_->::ProtoProduce::ProduceEquipCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    isfull_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchProductResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.FetchProductResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.ProduceEquipCPP equipment = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isfull;
        break;
      }

      // required bool isfull = 3;
      case 3: {
        if (tag == 24) {
         parse_isfull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfull_)));
          set_has_isfull();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.FetchProductResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.FetchProductResp)
  return false;
#undef DO_
}

void FetchProductResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.FetchProductResp)
  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipment(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  // required bool isfull = 3;
  if (has_isfull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isfull(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.FetchProductResp)
}

::google::protobuf::uint8* FetchProductResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.FetchProductResp)
  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  if (has_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipment(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  // required bool isfull = 3;
  if (has_isfull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isfull(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.FetchProductResp)
  return target;
}

int FetchProductResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.ProduceEquipCPP equipment = 1;
    if (has_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipment());
    }

    // optional .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required bool isfull = 3;
    if (has_isfull()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchProductResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchProductResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchProductResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchProductResp::MergeFrom(const FetchProductResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipment()) {
      mutable_equipment()->::ProtoProduce::ProduceEquipCPP::MergeFrom(from.equipment());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_isfull()) {
      set_isfull(from.isfull());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchProductResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchProductResp::CopyFrom(const FetchProductResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchProductResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_equipment()) {
    if (!this->equipment().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void FetchProductResp::Swap(FetchProductResp* other) {
  if (other != this) {
    std::swap(equipment_, other->equipment_);
    std::swap(commons_, other->commons_);
    std::swap(isfull_, other->isfull_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchProductResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchProductResp_descriptor_;
  metadata.reflection = FetchProductResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnimalCPP::kUdFieldNumber;
const int AnimalCPP::kResidenceUdFieldNumber;
const int AnimalCPP::kAnimalIdFieldNumber;
const int AnimalCPP::kStatusFieldNumber;
const int AnimalCPP::kFullTimeFieldNumber;
const int AnimalCPP::kKeeperFieldNumber;
#endif  // !_MSC_VER

AnimalCPP::AnimalCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.AnimalCPP)
}

void AnimalCPP::InitAsDefaultInstance() {
}

AnimalCPP::AnimalCPP(const AnimalCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.AnimalCPP)
}

void AnimalCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  residenceud_ = 0u;
  animalid_ = 0u;
  status_ = 0u;
  fulltime_ = 0u;
  keeper_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnimalCPP::~AnimalCPP() {
  // @@protoc_insertion_point(destructor:ProtoProduce.AnimalCPP)
  SharedDtor();
}

void AnimalCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnimalCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnimalCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnimalCPP_descriptor_;
}

const AnimalCPP& AnimalCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

AnimalCPP* AnimalCPP::default_instance_ = NULL;

AnimalCPP* AnimalCPP::New() const {
  return new AnimalCPP;
}

void AnimalCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AnimalCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ud_, keeper_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnimalCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.AnimalCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_residenceUd;
        break;
      }

      // required uint32 residenceUd = 2;
      case 2: {
        if (tag == 16) {
         parse_residenceUd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &residenceud_)));
          set_has_residenceud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_animalId;
        break;
      }

      // required uint32 animalId = 3;
      case 3: {
        if (tag == 24) {
         parse_animalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &animalid_)));
          set_has_animalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required uint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fullTime;
        break;
      }

      // required uint32 fullTime = 5;
      case 5: {
        if (tag == 40) {
         parse_fullTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fulltime_)));
          set_has_fulltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_keeper;
        break;
      }

      // optional uint32 keeper = 6;
      case 6: {
        if (tag == 48) {
         parse_keeper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keeper_)));
          set_has_keeper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.AnimalCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.AnimalCPP)
  return false;
#undef DO_
}

void AnimalCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.AnimalCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 residenceUd = 2;
  if (has_residenceud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->residenceud(), output);
  }

  // required uint32 animalId = 3;
  if (has_animalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->animalid(), output);
  }

  // required uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // required uint32 fullTime = 5;
  if (has_fulltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fulltime(), output);
  }

  // optional uint32 keeper = 6;
  if (has_keeper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->keeper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.AnimalCPP)
}

::google::protobuf::uint8* AnimalCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.AnimalCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 residenceUd = 2;
  if (has_residenceud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->residenceud(), target);
  }

  // required uint32 animalId = 3;
  if (has_animalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->animalid(), target);
  }

  // required uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // required uint32 fullTime = 5;
  if (has_fulltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fulltime(), target);
  }

  // optional uint32 keeper = 6;
  if (has_keeper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->keeper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.AnimalCPP)
  return target;
}

int AnimalCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 residenceUd = 2;
    if (has_residenceud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->residenceud());
    }

    // required uint32 animalId = 3;
    if (has_animalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->animalid());
    }

    // required uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 fullTime = 5;
    if (has_fulltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fulltime());
    }

    // optional uint32 keeper = 6;
    if (has_keeper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keeper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnimalCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnimalCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnimalCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnimalCPP::MergeFrom(const AnimalCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_residenceud()) {
      set_residenceud(from.residenceud());
    }
    if (from.has_animalid()) {
      set_animalid(from.animalid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_fulltime()) {
      set_fulltime(from.fulltime());
    }
    if (from.has_keeper()) {
      set_keeper(from.keeper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnimalCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimalCPP::CopyFrom(const AnimalCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimalCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AnimalCPP::Swap(AnimalCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(residenceud_, other->residenceud_);
    std::swap(animalid_, other->animalid_);
    std::swap(status_, other->status_);
    std::swap(fulltime_, other->fulltime_);
    std::swap(keeper_, other->keeper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnimalCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnimalCPP_descriptor_;
  metadata.reflection = AnimalCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdoptAnimalReq::kBuildudFieldNumber;
#endif  // !_MSC_VER

AdoptAnimalReq::AdoptAnimalReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.AdoptAnimalReq)
}

void AdoptAnimalReq::InitAsDefaultInstance() {
}

AdoptAnimalReq::AdoptAnimalReq(const AdoptAnimalReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.AdoptAnimalReq)
}

void AdoptAnimalReq::SharedCtor() {
  _cached_size_ = 0;
  buildud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdoptAnimalReq::~AdoptAnimalReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.AdoptAnimalReq)
  SharedDtor();
}

void AdoptAnimalReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdoptAnimalReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdoptAnimalReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdoptAnimalReq_descriptor_;
}

const AdoptAnimalReq& AdoptAnimalReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

AdoptAnimalReq* AdoptAnimalReq::default_instance_ = NULL;

AdoptAnimalReq* AdoptAnimalReq::New() const {
  return new AdoptAnimalReq;
}

void AdoptAnimalReq::Clear() {
  buildud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdoptAnimalReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.AdoptAnimalReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 buildud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildud_)));
          set_has_buildud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.AdoptAnimalReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.AdoptAnimalReq)
  return false;
#undef DO_
}

void AdoptAnimalReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.AdoptAnimalReq)
  // required uint32 buildud = 1;
  if (has_buildud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.AdoptAnimalReq)
}

::google::protobuf::uint8* AdoptAnimalReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.AdoptAnimalReq)
  // required uint32 buildud = 1;
  if (has_buildud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.AdoptAnimalReq)
  return target;
}

int AdoptAnimalReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 buildud = 1;
    if (has_buildud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdoptAnimalReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdoptAnimalReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdoptAnimalReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdoptAnimalReq::MergeFrom(const AdoptAnimalReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildud()) {
      set_buildud(from.buildud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdoptAnimalReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdoptAnimalReq::CopyFrom(const AdoptAnimalReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdoptAnimalReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AdoptAnimalReq::Swap(AdoptAnimalReq* other) {
  if (other != this) {
    std::swap(buildud_, other->buildud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdoptAnimalReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdoptAnimalReq_descriptor_;
  metadata.reflection = AdoptAnimalReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdoptAnimalResp::kAnimalFieldNumber;
const int AdoptAnimalResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

AdoptAnimalResp::AdoptAnimalResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.AdoptAnimalResp)
}

void AdoptAnimalResp::InitAsDefaultInstance() {
  animal_ = const_cast< ::ProtoProduce::AnimalCPP*>(&::ProtoProduce::AnimalCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

AdoptAnimalResp::AdoptAnimalResp(const AdoptAnimalResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.AdoptAnimalResp)
}

void AdoptAnimalResp::SharedCtor() {
  _cached_size_ = 0;
  animal_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdoptAnimalResp::~AdoptAnimalResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.AdoptAnimalResp)
  SharedDtor();
}

void AdoptAnimalResp::SharedDtor() {
  if (this != default_instance_) {
    delete animal_;
    delete commons_;
  }
}

void AdoptAnimalResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdoptAnimalResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdoptAnimalResp_descriptor_;
}

const AdoptAnimalResp& AdoptAnimalResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

AdoptAnimalResp* AdoptAnimalResp::default_instance_ = NULL;

AdoptAnimalResp* AdoptAnimalResp::New() const {
  return new AdoptAnimalResp;
}

void AdoptAnimalResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_animal()) {
      if (animal_ != NULL) animal_->::ProtoProduce::AnimalCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdoptAnimalResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.AdoptAnimalResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.AnimalCPP animal = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.AdoptAnimalResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.AdoptAnimalResp)
  return false;
#undef DO_
}

void AdoptAnimalResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.AdoptAnimalResp)
  // required .ProtoProduce.AnimalCPP animal = 1;
  if (has_animal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->animal(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.AdoptAnimalResp)
}

::google::protobuf::uint8* AdoptAnimalResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.AdoptAnimalResp)
  // required .ProtoProduce.AnimalCPP animal = 1;
  if (has_animal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->animal(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.AdoptAnimalResp)
  return target;
}

int AdoptAnimalResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.AnimalCPP animal = 1;
    if (has_animal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->animal());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdoptAnimalResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdoptAnimalResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdoptAnimalResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdoptAnimalResp::MergeFrom(const AdoptAnimalResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animal()) {
      mutable_animal()->::ProtoProduce::AnimalCPP::MergeFrom(from.animal());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdoptAnimalResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdoptAnimalResp::CopyFrom(const AdoptAnimalResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdoptAnimalResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_animal()) {
    if (!this->animal().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void AdoptAnimalResp::Swap(AdoptAnimalResp* other) {
  if (other != this) {
    std::swap(animal_, other->animal_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdoptAnimalResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdoptAnimalResp_descriptor_;
  metadata.reflection = AdoptAnimalResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedAnimalReq::kAnimaludFieldNumber;
const int FeedAnimalReq::kFodderudFieldNumber;
#endif  // !_MSC_VER

FeedAnimalReq::FeedAnimalReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.FeedAnimalReq)
}

void FeedAnimalReq::InitAsDefaultInstance() {
}

FeedAnimalReq::FeedAnimalReq(const FeedAnimalReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.FeedAnimalReq)
}

void FeedAnimalReq::SharedCtor() {
  _cached_size_ = 0;
  animalud_ = 0u;
  fodderud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedAnimalReq::~FeedAnimalReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.FeedAnimalReq)
  SharedDtor();
}

void FeedAnimalReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeedAnimalReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedAnimalReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedAnimalReq_descriptor_;
}

const FeedAnimalReq& FeedAnimalReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

FeedAnimalReq* FeedAnimalReq::default_instance_ = NULL;

FeedAnimalReq* FeedAnimalReq::New() const {
  return new FeedAnimalReq;
}

void FeedAnimalReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FeedAnimalReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(animalud_, fodderud_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedAnimalReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.FeedAnimalReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 animalud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &animalud_)));
          set_has_animalud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fodderud;
        break;
      }

      // required uint32 fodderud = 2;
      case 2: {
        if (tag == 16) {
         parse_fodderud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fodderud_)));
          set_has_fodderud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.FeedAnimalReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.FeedAnimalReq)
  return false;
#undef DO_
}

void FeedAnimalReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.FeedAnimalReq)
  // required uint32 animalud = 1;
  if (has_animalud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->animalud(), output);
  }

  // required uint32 fodderud = 2;
  if (has_fodderud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fodderud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.FeedAnimalReq)
}

::google::protobuf::uint8* FeedAnimalReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.FeedAnimalReq)
  // required uint32 animalud = 1;
  if (has_animalud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->animalud(), target);
  }

  // required uint32 fodderud = 2;
  if (has_fodderud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fodderud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.FeedAnimalReq)
  return target;
}

int FeedAnimalReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 animalud = 1;
    if (has_animalud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->animalud());
    }

    // required uint32 fodderud = 2;
    if (has_fodderud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fodderud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedAnimalReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedAnimalReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedAnimalReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedAnimalReq::MergeFrom(const FeedAnimalReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animalud()) {
      set_animalud(from.animalud());
    }
    if (from.has_fodderud()) {
      set_fodderud(from.fodderud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedAnimalReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedAnimalReq::CopyFrom(const FeedAnimalReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedAnimalReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FeedAnimalReq::Swap(FeedAnimalReq* other) {
  if (other != this) {
    std::swap(animalud_, other->animalud_);
    std::swap(fodderud_, other->fodderud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedAnimalReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedAnimalReq_descriptor_;
  metadata.reflection = FeedAnimalReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedAnimalResp::kAnimalFieldNumber;
const int FeedAnimalResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

FeedAnimalResp::FeedAnimalResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.FeedAnimalResp)
}

void FeedAnimalResp::InitAsDefaultInstance() {
  animal_ = const_cast< ::ProtoProduce::AnimalCPP*>(&::ProtoProduce::AnimalCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

FeedAnimalResp::FeedAnimalResp(const FeedAnimalResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.FeedAnimalResp)
}

void FeedAnimalResp::SharedCtor() {
  _cached_size_ = 0;
  animal_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedAnimalResp::~FeedAnimalResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.FeedAnimalResp)
  SharedDtor();
}

void FeedAnimalResp::SharedDtor() {
  if (this != default_instance_) {
    delete animal_;
    delete commons_;
  }
}

void FeedAnimalResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedAnimalResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedAnimalResp_descriptor_;
}

const FeedAnimalResp& FeedAnimalResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

FeedAnimalResp* FeedAnimalResp::default_instance_ = NULL;

FeedAnimalResp* FeedAnimalResp::New() const {
  return new FeedAnimalResp;
}

void FeedAnimalResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_animal()) {
      if (animal_ != NULL) animal_->::ProtoProduce::AnimalCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedAnimalResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.FeedAnimalResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.AnimalCPP animal = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.FeedAnimalResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.FeedAnimalResp)
  return false;
#undef DO_
}

void FeedAnimalResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.FeedAnimalResp)
  // required .ProtoProduce.AnimalCPP animal = 1;
  if (has_animal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->animal(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.FeedAnimalResp)
}

::google::protobuf::uint8* FeedAnimalResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.FeedAnimalResp)
  // required .ProtoProduce.AnimalCPP animal = 1;
  if (has_animal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->animal(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.FeedAnimalResp)
  return target;
}

int FeedAnimalResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.AnimalCPP animal = 1;
    if (has_animal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->animal());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedAnimalResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedAnimalResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedAnimalResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedAnimalResp::MergeFrom(const FeedAnimalResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animal()) {
      mutable_animal()->::ProtoProduce::AnimalCPP::MergeFrom(from.animal());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedAnimalResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedAnimalResp::CopyFrom(const FeedAnimalResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedAnimalResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_animal()) {
    if (!this->animal().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void FeedAnimalResp::Swap(FeedAnimalResp* other) {
  if (other != this) {
    std::swap(animal_, other->animal_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedAnimalResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedAnimalResp_descriptor_;
  metadata.reflection = FeedAnimalResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObtainProductReq::kAnimaludFieldNumber;
#endif  // !_MSC_VER

ObtainProductReq::ObtainProductReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ObtainProductReq)
}

void ObtainProductReq::InitAsDefaultInstance() {
}

ObtainProductReq::ObtainProductReq(const ObtainProductReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ObtainProductReq)
}

void ObtainProductReq::SharedCtor() {
  _cached_size_ = 0;
  animalud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObtainProductReq::~ObtainProductReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ObtainProductReq)
  SharedDtor();
}

void ObtainProductReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObtainProductReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObtainProductReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObtainProductReq_descriptor_;
}

const ObtainProductReq& ObtainProductReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ObtainProductReq* ObtainProductReq::default_instance_ = NULL;

ObtainProductReq* ObtainProductReq::New() const {
  return new ObtainProductReq;
}

void ObtainProductReq::Clear() {
  animalud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObtainProductReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ObtainProductReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 animalud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &animalud_)));
          set_has_animalud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ObtainProductReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ObtainProductReq)
  return false;
#undef DO_
}

void ObtainProductReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ObtainProductReq)
  // required uint32 animalud = 1;
  if (has_animalud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->animalud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ObtainProductReq)
}

::google::protobuf::uint8* ObtainProductReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ObtainProductReq)
  // required uint32 animalud = 1;
  if (has_animalud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->animalud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ObtainProductReq)
  return target;
}

int ObtainProductReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 animalud = 1;
    if (has_animalud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->animalud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObtainProductReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObtainProductReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObtainProductReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObtainProductReq::MergeFrom(const ObtainProductReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animalud()) {
      set_animalud(from.animalud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObtainProductReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObtainProductReq::CopyFrom(const ObtainProductReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObtainProductReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ObtainProductReq::Swap(ObtainProductReq* other) {
  if (other != this) {
    std::swap(animalud_, other->animalud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObtainProductReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObtainProductReq_descriptor_;
  metadata.reflection = ObtainProductReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObtainProductResp::kIsfullFieldNumber;
const int ObtainProductResp::kAnimalFieldNumber;
const int ObtainProductResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ObtainProductResp::ObtainProductResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ObtainProductResp)
}

void ObtainProductResp::InitAsDefaultInstance() {
  animal_ = const_cast< ::ProtoProduce::AnimalCPP*>(&::ProtoProduce::AnimalCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ObtainProductResp::ObtainProductResp(const ObtainProductResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ObtainProductResp)
}

void ObtainProductResp::SharedCtor() {
  _cached_size_ = 0;
  isfull_ = false;
  animal_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObtainProductResp::~ObtainProductResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ObtainProductResp)
  SharedDtor();
}

void ObtainProductResp::SharedDtor() {
  if (this != default_instance_) {
    delete animal_;
    delete commons_;
  }
}

void ObtainProductResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObtainProductResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObtainProductResp_descriptor_;
}

const ObtainProductResp& ObtainProductResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ObtainProductResp* ObtainProductResp::default_instance_ = NULL;

ObtainProductResp* ObtainProductResp::New() const {
  return new ObtainProductResp;
}

void ObtainProductResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    isfull_ = false;
    if (has_animal()) {
      if (animal_ != NULL) animal_->::ProtoProduce::AnimalCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObtainProductResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ObtainProductResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isfull = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfull_)));
          set_has_isfull();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_animal;
        break;
      }

      // optional .ProtoProduce.AnimalCPP animal = 2;
      case 2: {
        if (tag == 18) {
         parse_animal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ObtainProductResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ObtainProductResp)
  return false;
#undef DO_
}

void ObtainProductResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ObtainProductResp)
  // required bool isfull = 1;
  if (has_isfull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfull(), output);
  }

  // optional .ProtoProduce.AnimalCPP animal = 2;
  if (has_animal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->animal(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ObtainProductResp)
}

::google::protobuf::uint8* ObtainProductResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ObtainProductResp)
  // required bool isfull = 1;
  if (has_isfull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfull(), target);
  }

  // optional .ProtoProduce.AnimalCPP animal = 2;
  if (has_animal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->animal(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ObtainProductResp)
  return target;
}

int ObtainProductResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isfull = 1;
    if (has_isfull()) {
      total_size += 1 + 1;
    }

    // optional .ProtoProduce.AnimalCPP animal = 2;
    if (has_animal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->animal());
    }

    // optional .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObtainProductResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObtainProductResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObtainProductResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObtainProductResp::MergeFrom(const ObtainProductResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfull()) {
      set_isfull(from.isfull());
    }
    if (from.has_animal()) {
      mutable_animal()->::ProtoProduce::AnimalCPP::MergeFrom(from.animal());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObtainProductResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObtainProductResp::CopyFrom(const ObtainProductResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObtainProductResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_animal()) {
    if (!this->animal().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ObtainProductResp::Swap(ObtainProductResp* other) {
  if (other != this) {
    std::swap(isfull_, other->isfull_);
    std::swap(animal_, other->animal_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObtainProductResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObtainProductResp_descriptor_;
  metadata.reflection = ObtainProductResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushRandomRewardReq::kPropsidFieldNumber;
const int PushRandomRewardReq::kCommonsFieldNumber;
#endif  // !_MSC_VER

PushRandomRewardReq::PushRandomRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.PushRandomRewardReq)
}

void PushRandomRewardReq::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

PushRandomRewardReq::PushRandomRewardReq(const PushRandomRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.PushRandomRewardReq)
}

void PushRandomRewardReq::SharedCtor() {
  _cached_size_ = 0;
  propsid_ = 0u;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushRandomRewardReq::~PushRandomRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.PushRandomRewardReq)
  SharedDtor();
}

void PushRandomRewardReq::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void PushRandomRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushRandomRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushRandomRewardReq_descriptor_;
}

const PushRandomRewardReq& PushRandomRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

PushRandomRewardReq* PushRandomRewardReq::default_instance_ = NULL;

PushRandomRewardReq* PushRandomRewardReq::New() const {
  return new PushRandomRewardReq;
}

void PushRandomRewardReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    propsid_ = 0u;
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushRandomRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.PushRandomRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 propsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.PushRandomRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.PushRandomRewardReq)
  return false;
#undef DO_
}

void PushRandomRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.PushRandomRewardReq)
  // required uint32 propsid = 1;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.PushRandomRewardReq)
}

::google::protobuf::uint8* PushRandomRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.PushRandomRewardReq)
  // required uint32 propsid = 1;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.PushRandomRewardReq)
  return target;
}

int PushRandomRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 propsid = 1;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // optional .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushRandomRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushRandomRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushRandomRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushRandomRewardReq::MergeFrom(const PushRandomRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushRandomRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushRandomRewardReq::CopyFrom(const PushRandomRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRandomRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void PushRandomRewardReq::Swap(PushRandomRewardReq* other) {
  if (other != this) {
    std::swap(propsid_, other->propsid_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushRandomRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushRandomRewardReq_descriptor_;
  metadata.reflection = PushRandomRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FruitCPP::kUdFieldNumber;
const int FruitCPP::kTreeidFieldNumber;
const int FruitCPP::kStatusFieldNumber;
const int FruitCPP::kStageFieldNumber;
const int FruitCPP::kFruitLeftNumFieldNumber;
const int FruitCPP::kHarvestTimeFieldNumber;
const int FruitCPP::kHelpUidFieldNumber;
#endif  // !_MSC_VER

FruitCPP::FruitCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.FruitCPP)
}

void FruitCPP::InitAsDefaultInstance() {
}

FruitCPP::FruitCPP(const FruitCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.FruitCPP)
}

void FruitCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  treeid_ = 0u;
  status_ = 0u;
  stage_ = 0u;
  fruitleftnum_ = 0u;
  harvesttime_ = 0u;
  helpuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FruitCPP::~FruitCPP() {
  // @@protoc_insertion_point(destructor:ProtoProduce.FruitCPP)
  SharedDtor();
}

void FruitCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FruitCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FruitCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FruitCPP_descriptor_;
}

const FruitCPP& FruitCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

FruitCPP* FruitCPP::default_instance_ = NULL;

FruitCPP* FruitCPP::New() const {
  return new FruitCPP;
}

void FruitCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FruitCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(ud_, helpuid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FruitCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.FruitCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_treeid;
        break;
      }

      // required uint32 treeid = 2;
      case 2: {
        if (tag == 16) {
         parse_treeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treeid_)));
          set_has_treeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required uint32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stage;
        break;
      }

      // required uint32 stage = 4;
      case 4: {
        if (tag == 32) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fruitLeftNum;
        break;
      }

      // required uint32 fruitLeftNum = 5;
      case 5: {
        if (tag == 40) {
         parse_fruitLeftNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fruitleftnum_)));
          set_has_fruitleftnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_harvestTime;
        break;
      }

      // required uint32 harvestTime = 6;
      case 6: {
        if (tag == 48) {
         parse_harvestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harvesttime_)));
          set_has_harvesttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_helpUid;
        break;
      }

      // optional uint32 helpUid = 7;
      case 7: {
        if (tag == 56) {
         parse_helpUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &helpuid_)));
          set_has_helpuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.FruitCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.FruitCPP)
  return false;
#undef DO_
}

void FruitCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.FruitCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 treeid = 2;
  if (has_treeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->treeid(), output);
  }

  // required uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // required uint32 stage = 4;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stage(), output);
  }

  // required uint32 fruitLeftNum = 5;
  if (has_fruitleftnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fruitleftnum(), output);
  }

  // required uint32 harvestTime = 6;
  if (has_harvesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->harvesttime(), output);
  }

  // optional uint32 helpUid = 7;
  if (has_helpuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->helpuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.FruitCPP)
}

::google::protobuf::uint8* FruitCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.FruitCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 treeid = 2;
  if (has_treeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->treeid(), target);
  }

  // required uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // required uint32 stage = 4;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stage(), target);
  }

  // required uint32 fruitLeftNum = 5;
  if (has_fruitleftnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fruitleftnum(), target);
  }

  // required uint32 harvestTime = 6;
  if (has_harvesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->harvesttime(), target);
  }

  // optional uint32 helpUid = 7;
  if (has_helpuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->helpuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.FruitCPP)
  return target;
}

int FruitCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 treeid = 2;
    if (has_treeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treeid());
    }

    // required uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 stage = 4;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

    // required uint32 fruitLeftNum = 5;
    if (has_fruitleftnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fruitleftnum());
    }

    // required uint32 harvestTime = 6;
    if (has_harvesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harvesttime());
    }

    // optional uint32 helpUid = 7;
    if (has_helpuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->helpuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FruitCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FruitCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FruitCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FruitCPP::MergeFrom(const FruitCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_treeid()) {
      set_treeid(from.treeid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_fruitleftnum()) {
      set_fruitleftnum(from.fruitleftnum());
    }
    if (from.has_harvesttime()) {
      set_harvesttime(from.harvesttime());
    }
    if (from.has_helpuid()) {
      set_helpuid(from.helpuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FruitCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FruitCPP::CopyFrom(const FruitCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FruitCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FruitCPP::Swap(FruitCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(treeid_, other->treeid_);
    std::swap(status_, other->status_);
    std::swap(stage_, other->stage_);
    std::swap(fruitleftnum_, other->fruitleftnum_);
    std::swap(harvesttime_, other->harvesttime_);
    std::swap(helpuid_, other->helpuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FruitCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FruitCPP_descriptor_;
  metadata.reflection = FruitCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushFruitInfo::kFruitFieldNumber;
const int PushFruitInfo::kUidFieldNumber;
#endif  // !_MSC_VER

PushFruitInfo::PushFruitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.PushFruitInfo)
}

void PushFruitInfo::InitAsDefaultInstance() {
  fruit_ = const_cast< ::ProtoProduce::FruitCPP*>(&::ProtoProduce::FruitCPP::default_instance());
}

PushFruitInfo::PushFruitInfo(const PushFruitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.PushFruitInfo)
}

void PushFruitInfo::SharedCtor() {
  _cached_size_ = 0;
  fruit_ = NULL;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushFruitInfo::~PushFruitInfo() {
  // @@protoc_insertion_point(destructor:ProtoProduce.PushFruitInfo)
  SharedDtor();
}

void PushFruitInfo::SharedDtor() {
  if (this != default_instance_) {
    delete fruit_;
  }
}

void PushFruitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushFruitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushFruitInfo_descriptor_;
}

const PushFruitInfo& PushFruitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

PushFruitInfo* PushFruitInfo::default_instance_ = NULL;

PushFruitInfo* PushFruitInfo::New() const {
  return new PushFruitInfo;
}

void PushFruitInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_fruit()) {
      if (fruit_ != NULL) fruit_->::ProtoProduce::FruitCPP::Clear();
    }
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushFruitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.PushFruitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.FruitCPP fruit = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fruit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.PushFruitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.PushFruitInfo)
  return false;
#undef DO_
}

void PushFruitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.PushFruitInfo)
  // required .ProtoProduce.FruitCPP fruit = 1;
  if (has_fruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fruit(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.PushFruitInfo)
}

::google::protobuf::uint8* PushFruitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.PushFruitInfo)
  // required .ProtoProduce.FruitCPP fruit = 1;
  if (has_fruit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fruit(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.PushFruitInfo)
  return target;
}

int PushFruitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.FruitCPP fruit = 1;
    if (has_fruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fruit());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushFruitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushFruitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushFruitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushFruitInfo::MergeFrom(const PushFruitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fruit()) {
      mutable_fruit()->::ProtoProduce::FruitCPP::MergeFrom(from.fruit());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushFruitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushFruitInfo::CopyFrom(const PushFruitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushFruitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_fruit()) {
    if (!this->fruit().IsInitialized()) return false;
  }
  return true;
}

void PushFruitInfo::Swap(PushFruitInfo* other) {
  if (other != this) {
    std::swap(fruit_, other->fruit_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushFruitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushFruitInfo_descriptor_;
  metadata.reflection = PushFruitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReapFruitReq::kTreeudFieldNumber;
#endif  // !_MSC_VER

ReapFruitReq::ReapFruitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ReapFruitReq)
}

void ReapFruitReq::InitAsDefaultInstance() {
}

ReapFruitReq::ReapFruitReq(const ReapFruitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ReapFruitReq)
}

void ReapFruitReq::SharedCtor() {
  _cached_size_ = 0;
  treeud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReapFruitReq::~ReapFruitReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ReapFruitReq)
  SharedDtor();
}

void ReapFruitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReapFruitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReapFruitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReapFruitReq_descriptor_;
}

const ReapFruitReq& ReapFruitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ReapFruitReq* ReapFruitReq::default_instance_ = NULL;

ReapFruitReq* ReapFruitReq::New() const {
  return new ReapFruitReq;
}

void ReapFruitReq::Clear() {
  treeud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReapFruitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ReapFruitReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 treeud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treeud_)));
          set_has_treeud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ReapFruitReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ReapFruitReq)
  return false;
#undef DO_
}

void ReapFruitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ReapFruitReq)
  // required uint32 treeud = 1;
  if (has_treeud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->treeud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ReapFruitReq)
}

::google::protobuf::uint8* ReapFruitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ReapFruitReq)
  // required uint32 treeud = 1;
  if (has_treeud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->treeud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ReapFruitReq)
  return target;
}

int ReapFruitReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 treeud = 1;
    if (has_treeud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treeud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReapFruitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReapFruitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReapFruitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReapFruitReq::MergeFrom(const ReapFruitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_treeud()) {
      set_treeud(from.treeud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReapFruitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReapFruitReq::CopyFrom(const ReapFruitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReapFruitReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReapFruitReq::Swap(ReapFruitReq* other) {
  if (other != this) {
    std::swap(treeud_, other->treeud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReapFruitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReapFruitReq_descriptor_;
  metadata.reflection = ReapFruitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReapFruitResp::kFruitFieldNumber;
const int ReapFruitResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ReapFruitResp::ReapFruitResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ReapFruitResp)
}

void ReapFruitResp::InitAsDefaultInstance() {
  fruit_ = const_cast< ::ProtoProduce::FruitCPP*>(&::ProtoProduce::FruitCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ReapFruitResp::ReapFruitResp(const ReapFruitResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ReapFruitResp)
}

void ReapFruitResp::SharedCtor() {
  _cached_size_ = 0;
  fruit_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReapFruitResp::~ReapFruitResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ReapFruitResp)
  SharedDtor();
}

void ReapFruitResp::SharedDtor() {
  if (this != default_instance_) {
    delete fruit_;
    delete commons_;
  }
}

void ReapFruitResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReapFruitResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReapFruitResp_descriptor_;
}

const ReapFruitResp& ReapFruitResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ReapFruitResp* ReapFruitResp::default_instance_ = NULL;

ReapFruitResp* ReapFruitResp::New() const {
  return new ReapFruitResp;
}

void ReapFruitResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_fruit()) {
      if (fruit_ != NULL) fruit_->::ProtoProduce::FruitCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReapFruitResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ReapFruitResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.FruitCPP fruit = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fruit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ReapFruitResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ReapFruitResp)
  return false;
#undef DO_
}

void ReapFruitResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ReapFruitResp)
  // required .ProtoProduce.FruitCPP fruit = 1;
  if (has_fruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fruit(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ReapFruitResp)
}

::google::protobuf::uint8* ReapFruitResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ReapFruitResp)
  // required .ProtoProduce.FruitCPP fruit = 1;
  if (has_fruit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fruit(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ReapFruitResp)
  return target;
}

int ReapFruitResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.FruitCPP fruit = 1;
    if (has_fruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fruit());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReapFruitResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReapFruitResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReapFruitResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReapFruitResp::MergeFrom(const ReapFruitResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fruit()) {
      mutable_fruit()->::ProtoProduce::FruitCPP::MergeFrom(from.fruit());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReapFruitResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReapFruitResp::CopyFrom(const ReapFruitResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReapFruitResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_fruit()) {
    if (!this->fruit().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ReapFruitResp::Swap(ReapFruitResp* other) {
  if (other != this) {
    std::swap(fruit_, other->fruit_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReapFruitResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReapFruitResp_descriptor_;
  metadata.reflection = ReapFruitResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeekHelpReq::kTreeudFieldNumber;
#endif  // !_MSC_VER

SeekHelpReq::SeekHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.SeekHelpReq)
}

void SeekHelpReq::InitAsDefaultInstance() {
}

SeekHelpReq::SeekHelpReq(const SeekHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.SeekHelpReq)
}

void SeekHelpReq::SharedCtor() {
  _cached_size_ = 0;
  treeud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeekHelpReq::~SeekHelpReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.SeekHelpReq)
  SharedDtor();
}

void SeekHelpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeekHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeekHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeekHelpReq_descriptor_;
}

const SeekHelpReq& SeekHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

SeekHelpReq* SeekHelpReq::default_instance_ = NULL;

SeekHelpReq* SeekHelpReq::New() const {
  return new SeekHelpReq;
}

void SeekHelpReq::Clear() {
  treeud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeekHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.SeekHelpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 treeud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treeud_)));
          set_has_treeud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.SeekHelpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.SeekHelpReq)
  return false;
#undef DO_
}

void SeekHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.SeekHelpReq)
  // required uint32 treeud = 1;
  if (has_treeud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->treeud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.SeekHelpReq)
}

::google::protobuf::uint8* SeekHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.SeekHelpReq)
  // required uint32 treeud = 1;
  if (has_treeud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->treeud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.SeekHelpReq)
  return target;
}

int SeekHelpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 treeud = 1;
    if (has_treeud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treeud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeekHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeekHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeekHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeekHelpReq::MergeFrom(const SeekHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_treeud()) {
      set_treeud(from.treeud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeekHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeekHelpReq::CopyFrom(const SeekHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekHelpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SeekHelpReq::Swap(SeekHelpReq* other) {
  if (other != this) {
    std::swap(treeud_, other->treeud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeekHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeekHelpReq_descriptor_;
  metadata.reflection = SeekHelpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeekHelpResp::kFruitFieldNumber;
#endif  // !_MSC_VER

SeekHelpResp::SeekHelpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.SeekHelpResp)
}

void SeekHelpResp::InitAsDefaultInstance() {
  fruit_ = const_cast< ::ProtoProduce::FruitCPP*>(&::ProtoProduce::FruitCPP::default_instance());
}

SeekHelpResp::SeekHelpResp(const SeekHelpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.SeekHelpResp)
}

void SeekHelpResp::SharedCtor() {
  _cached_size_ = 0;
  fruit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeekHelpResp::~SeekHelpResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.SeekHelpResp)
  SharedDtor();
}

void SeekHelpResp::SharedDtor() {
  if (this != default_instance_) {
    delete fruit_;
  }
}

void SeekHelpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeekHelpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeekHelpResp_descriptor_;
}

const SeekHelpResp& SeekHelpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

SeekHelpResp* SeekHelpResp::default_instance_ = NULL;

SeekHelpResp* SeekHelpResp::New() const {
  return new SeekHelpResp;
}

void SeekHelpResp::Clear() {
  if (has_fruit()) {
    if (fruit_ != NULL) fruit_->::ProtoProduce::FruitCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeekHelpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.SeekHelpResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.FruitCPP fruit = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fruit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.SeekHelpResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.SeekHelpResp)
  return false;
#undef DO_
}

void SeekHelpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.SeekHelpResp)
  // required .ProtoProduce.FruitCPP fruit = 1;
  if (has_fruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fruit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.SeekHelpResp)
}

::google::protobuf::uint8* SeekHelpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.SeekHelpResp)
  // required .ProtoProduce.FruitCPP fruit = 1;
  if (has_fruit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fruit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.SeekHelpResp)
  return target;
}

int SeekHelpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.FruitCPP fruit = 1;
    if (has_fruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fruit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeekHelpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeekHelpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeekHelpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeekHelpResp::MergeFrom(const SeekHelpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fruit()) {
      mutable_fruit()->::ProtoProduce::FruitCPP::MergeFrom(from.fruit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeekHelpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeekHelpResp::CopyFrom(const SeekHelpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekHelpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fruit()) {
    if (!this->fruit().IsInitialized()) return false;
  }
  return true;
}

void SeekHelpResp::Swap(SeekHelpResp* other) {
  if (other != this) {
    std::swap(fruit_, other->fruit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeekHelpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeekHelpResp_descriptor_;
  metadata.reflection = SeekHelpResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CutFruitTreeReq::kTreeudFieldNumber;
#endif  // !_MSC_VER

CutFruitTreeReq::CutFruitTreeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.CutFruitTreeReq)
}

void CutFruitTreeReq::InitAsDefaultInstance() {
}

CutFruitTreeReq::CutFruitTreeReq(const CutFruitTreeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.CutFruitTreeReq)
}

void CutFruitTreeReq::SharedCtor() {
  _cached_size_ = 0;
  treeud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CutFruitTreeReq::~CutFruitTreeReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.CutFruitTreeReq)
  SharedDtor();
}

void CutFruitTreeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CutFruitTreeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CutFruitTreeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CutFruitTreeReq_descriptor_;
}

const CutFruitTreeReq& CutFruitTreeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

CutFruitTreeReq* CutFruitTreeReq::default_instance_ = NULL;

CutFruitTreeReq* CutFruitTreeReq::New() const {
  return new CutFruitTreeReq;
}

void CutFruitTreeReq::Clear() {
  treeud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CutFruitTreeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.CutFruitTreeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 treeud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treeud_)));
          set_has_treeud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.CutFruitTreeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.CutFruitTreeReq)
  return false;
#undef DO_
}

void CutFruitTreeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.CutFruitTreeReq)
  // required uint32 treeud = 1;
  if (has_treeud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->treeud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.CutFruitTreeReq)
}

::google::protobuf::uint8* CutFruitTreeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.CutFruitTreeReq)
  // required uint32 treeud = 1;
  if (has_treeud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->treeud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.CutFruitTreeReq)
  return target;
}

int CutFruitTreeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 treeud = 1;
    if (has_treeud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treeud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CutFruitTreeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CutFruitTreeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CutFruitTreeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CutFruitTreeReq::MergeFrom(const CutFruitTreeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_treeud()) {
      set_treeud(from.treeud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CutFruitTreeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CutFruitTreeReq::CopyFrom(const CutFruitTreeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CutFruitTreeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CutFruitTreeReq::Swap(CutFruitTreeReq* other) {
  if (other != this) {
    std::swap(treeud_, other->treeud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CutFruitTreeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CutFruitTreeReq_descriptor_;
  metadata.reflection = CutFruitTreeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CutFruitTreeResp::kDestroyudFieldNumber;
const int CutFruitTreeResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

CutFruitTreeResp::CutFruitTreeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.CutFruitTreeResp)
}

void CutFruitTreeResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

CutFruitTreeResp::CutFruitTreeResp(const CutFruitTreeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.CutFruitTreeResp)
}

void CutFruitTreeResp::SharedCtor() {
  _cached_size_ = 0;
  destroyud_ = 0u;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CutFruitTreeResp::~CutFruitTreeResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.CutFruitTreeResp)
  SharedDtor();
}

void CutFruitTreeResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void CutFruitTreeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CutFruitTreeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CutFruitTreeResp_descriptor_;
}

const CutFruitTreeResp& CutFruitTreeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

CutFruitTreeResp* CutFruitTreeResp::default_instance_ = NULL;

CutFruitTreeResp* CutFruitTreeResp::New() const {
  return new CutFruitTreeResp;
}

void CutFruitTreeResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    destroyud_ = 0u;
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CutFruitTreeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.CutFruitTreeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 destroyud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destroyud_)));
          set_has_destroyud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.CutFruitTreeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.CutFruitTreeResp)
  return false;
#undef DO_
}

void CutFruitTreeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.CutFruitTreeResp)
  // required uint32 destroyud = 1;
  if (has_destroyud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->destroyud(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.CutFruitTreeResp)
}

::google::protobuf::uint8* CutFruitTreeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.CutFruitTreeResp)
  // required uint32 destroyud = 1;
  if (has_destroyud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->destroyud(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.CutFruitTreeResp)
  return target;
}

int CutFruitTreeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 destroyud = 1;
    if (has_destroyud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destroyud());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CutFruitTreeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CutFruitTreeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CutFruitTreeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CutFruitTreeResp::MergeFrom(const CutFruitTreeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destroyud()) {
      set_destroyud(from.destroyud());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CutFruitTreeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CutFruitTreeResp::CopyFrom(const CutFruitTreeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CutFruitTreeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void CutFruitTreeResp::Swap(CutFruitTreeResp* other) {
  if (other != this) {
    std::swap(destroyud_, other->destroyud_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CutFruitTreeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CutFruitTreeResp_descriptor_;
  metadata.reflection = CutFruitTreeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferHelpReq::kOthuidFieldNumber;
const int OfferHelpReq::kTreeudFieldNumber;
#endif  // !_MSC_VER

OfferHelpReq::OfferHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.OfferHelpReq)
}

void OfferHelpReq::InitAsDefaultInstance() {
}

OfferHelpReq::OfferHelpReq(const OfferHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.OfferHelpReq)
}

void OfferHelpReq::SharedCtor() {
  _cached_size_ = 0;
  othuid_ = 0u;
  treeud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferHelpReq::~OfferHelpReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.OfferHelpReq)
  SharedDtor();
}

void OfferHelpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfferHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferHelpReq_descriptor_;
}

const OfferHelpReq& OfferHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

OfferHelpReq* OfferHelpReq::default_instance_ = NULL;

OfferHelpReq* OfferHelpReq::New() const {
  return new OfferHelpReq;
}

void OfferHelpReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OfferHelpReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(othuid_, treeud_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.OfferHelpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 othuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_treeud;
        break;
      }

      // required uint32 treeud = 2;
      case 2: {
        if (tag == 16) {
         parse_treeud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treeud_)));
          set_has_treeud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.OfferHelpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.OfferHelpReq)
  return false;
#undef DO_
}

void OfferHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.OfferHelpReq)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->othuid(), output);
  }

  // required uint32 treeud = 2;
  if (has_treeud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->treeud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.OfferHelpReq)
}

::google::protobuf::uint8* OfferHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.OfferHelpReq)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->othuid(), target);
  }

  // required uint32 treeud = 2;
  if (has_treeud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->treeud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.OfferHelpReq)
  return target;
}

int OfferHelpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 othuid = 1;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

    // required uint32 treeud = 2;
    if (has_treeud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treeud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferHelpReq::MergeFrom(const OfferHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_treeud()) {
      set_treeud(from.treeud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferHelpReq::CopyFrom(const OfferHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferHelpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OfferHelpReq::Swap(OfferHelpReq* other) {
  if (other != this) {
    std::swap(othuid_, other->othuid_);
    std::swap(treeud_, other->treeud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferHelpReq_descriptor_;
  metadata.reflection = OfferHelpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferHelpResp::kOthuidFieldNumber;
const int OfferHelpResp::kOthfruitFieldNumber;
const int OfferHelpResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

OfferHelpResp::OfferHelpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.OfferHelpResp)
}

void OfferHelpResp::InitAsDefaultInstance() {
  othfruit_ = const_cast< ::ProtoProduce::FruitCPP*>(&::ProtoProduce::FruitCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

OfferHelpResp::OfferHelpResp(const OfferHelpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.OfferHelpResp)
}

void OfferHelpResp::SharedCtor() {
  _cached_size_ = 0;
  othuid_ = 0u;
  othfruit_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferHelpResp::~OfferHelpResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.OfferHelpResp)
  SharedDtor();
}

void OfferHelpResp::SharedDtor() {
  if (this != default_instance_) {
    delete othfruit_;
    delete commons_;
  }
}

void OfferHelpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferHelpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferHelpResp_descriptor_;
}

const OfferHelpResp& OfferHelpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

OfferHelpResp* OfferHelpResp::default_instance_ = NULL;

OfferHelpResp* OfferHelpResp::New() const {
  return new OfferHelpResp;
}

void OfferHelpResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    othuid_ = 0u;
    if (has_othfruit()) {
      if (othfruit_ != NULL) othfruit_->::ProtoProduce::FruitCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferHelpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.OfferHelpResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 othuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_othfruit;
        break;
      }

      // required .ProtoProduce.FruitCPP othfruit = 2;
      case 2: {
        if (tag == 18) {
         parse_othfruit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_othfruit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.OfferHelpResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.OfferHelpResp)
  return false;
#undef DO_
}

void OfferHelpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.OfferHelpResp)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->othuid(), output);
  }

  // required .ProtoProduce.FruitCPP othfruit = 2;
  if (has_othfruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->othfruit(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.OfferHelpResp)
}

::google::protobuf::uint8* OfferHelpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.OfferHelpResp)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->othuid(), target);
  }

  // required .ProtoProduce.FruitCPP othfruit = 2;
  if (has_othfruit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->othfruit(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.OfferHelpResp)
  return target;
}

int OfferHelpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 othuid = 1;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

    // required .ProtoProduce.FruitCPP othfruit = 2;
    if (has_othfruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->othfruit());
    }

    // required .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferHelpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferHelpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferHelpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferHelpResp::MergeFrom(const OfferHelpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_othfruit()) {
      mutable_othfruit()->::ProtoProduce::FruitCPP::MergeFrom(from.othfruit());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferHelpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferHelpResp::CopyFrom(const OfferHelpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferHelpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_othfruit()) {
    if (!this->othfruit().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void OfferHelpResp::Swap(OfferHelpResp* other) {
  if (other != this) {
    std::swap(othuid_, other->othuid_);
    std::swap(othfruit_, other->othfruit_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferHelpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferHelpResp_descriptor_;
  metadata.reflection = OfferHelpResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOfferHelpReq::kMyuidFieldNumber;
const int CSOfferHelpReq::kOthuidFieldNumber;
const int CSOfferHelpReq::kTreeudFieldNumber;
const int CSOfferHelpReq::kAllianceidFieldNumber;
#endif  // !_MSC_VER

CSOfferHelpReq::CSOfferHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.CSOfferHelpReq)
}

void CSOfferHelpReq::InitAsDefaultInstance() {
}

CSOfferHelpReq::CSOfferHelpReq(const CSOfferHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.CSOfferHelpReq)
}

void CSOfferHelpReq::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  othuid_ = 0u;
  treeud_ = 0u;
  allianceid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOfferHelpReq::~CSOfferHelpReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.CSOfferHelpReq)
  SharedDtor();
}

void CSOfferHelpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOfferHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOfferHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOfferHelpReq_descriptor_;
}

const CSOfferHelpReq& CSOfferHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

CSOfferHelpReq* CSOfferHelpReq::default_instance_ = NULL;

CSOfferHelpReq* CSOfferHelpReq::New() const {
  return new CSOfferHelpReq;
}

void CSOfferHelpReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSOfferHelpReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(myuid_, allianceid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOfferHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.CSOfferHelpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_othuid;
        break;
      }

      // required uint32 othuid = 2;
      case 2: {
        if (tag == 16) {
         parse_othuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_treeud;
        break;
      }

      // required uint32 treeud = 3;
      case 3: {
        if (tag == 24) {
         parse_treeud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treeud_)));
          set_has_treeud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_allianceid;
        break;
      }

      // optional uint32 allianceid = 4;
      case 4: {
        if (tag == 32) {
         parse_allianceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.CSOfferHelpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.CSOfferHelpReq)
  return false;
#undef DO_
}

void CSOfferHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.CSOfferHelpReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->othuid(), output);
  }

  // required uint32 treeud = 3;
  if (has_treeud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->treeud(), output);
  }

  // optional uint32 allianceid = 4;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->allianceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.CSOfferHelpReq)
}

::google::protobuf::uint8* CSOfferHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.CSOfferHelpReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->othuid(), target);
  }

  // required uint32 treeud = 3;
  if (has_treeud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->treeud(), target);
  }

  // optional uint32 allianceid = 4;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->allianceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.CSOfferHelpReq)
  return target;
}

int CSOfferHelpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myuid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // required uint32 othuid = 2;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

    // required uint32 treeud = 3;
    if (has_treeud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treeud());
    }

    // optional uint32 allianceid = 4;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOfferHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOfferHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOfferHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOfferHelpReq::MergeFrom(const CSOfferHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_treeud()) {
      set_treeud(from.treeud());
    }
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOfferHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOfferHelpReq::CopyFrom(const CSOfferHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOfferHelpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSOfferHelpReq::Swap(CSOfferHelpReq* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(othuid_, other->othuid_);
    std::swap(treeud_, other->treeud_);
    std::swap(allianceid_, other->allianceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOfferHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOfferHelpReq_descriptor_;
  metadata.reflection = CSOfferHelpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOfferHelpResp::kMyuidFieldNumber;
const int CSOfferHelpResp::kOthuidFieldNumber;
const int CSOfferHelpResp::kOthfruitFieldNumber;
#endif  // !_MSC_VER

CSOfferHelpResp::CSOfferHelpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.CSOfferHelpResp)
}

void CSOfferHelpResp::InitAsDefaultInstance() {
  othfruit_ = const_cast< ::ProtoProduce::FruitCPP*>(&::ProtoProduce::FruitCPP::default_instance());
}

CSOfferHelpResp::CSOfferHelpResp(const CSOfferHelpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.CSOfferHelpResp)
}

void CSOfferHelpResp::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  othuid_ = 0u;
  othfruit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOfferHelpResp::~CSOfferHelpResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.CSOfferHelpResp)
  SharedDtor();
}

void CSOfferHelpResp::SharedDtor() {
  if (this != default_instance_) {
    delete othfruit_;
  }
}

void CSOfferHelpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOfferHelpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOfferHelpResp_descriptor_;
}

const CSOfferHelpResp& CSOfferHelpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

CSOfferHelpResp* CSOfferHelpResp::default_instance_ = NULL;

CSOfferHelpResp* CSOfferHelpResp::New() const {
  return new CSOfferHelpResp;
}

void CSOfferHelpResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSOfferHelpResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(myuid_, othuid_);
    if (has_othfruit()) {
      if (othfruit_ != NULL) othfruit_->::ProtoProduce::FruitCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOfferHelpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.CSOfferHelpResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_othuid;
        break;
      }

      // required uint32 othuid = 2;
      case 2: {
        if (tag == 16) {
         parse_othuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_othfruit;
        break;
      }

      // required .ProtoProduce.FruitCPP othfruit = 3;
      case 3: {
        if (tag == 26) {
         parse_othfruit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_othfruit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.CSOfferHelpResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.CSOfferHelpResp)
  return false;
#undef DO_
}

void CSOfferHelpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.CSOfferHelpResp)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->othuid(), output);
  }

  // required .ProtoProduce.FruitCPP othfruit = 3;
  if (has_othfruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->othfruit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.CSOfferHelpResp)
}

::google::protobuf::uint8* CSOfferHelpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.CSOfferHelpResp)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->othuid(), target);
  }

  // required .ProtoProduce.FruitCPP othfruit = 3;
  if (has_othfruit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->othfruit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.CSOfferHelpResp)
  return target;
}

int CSOfferHelpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myuid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // required uint32 othuid = 2;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

    // required .ProtoProduce.FruitCPP othfruit = 3;
    if (has_othfruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->othfruit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOfferHelpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOfferHelpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOfferHelpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOfferHelpResp::MergeFrom(const CSOfferHelpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_othfruit()) {
      mutable_othfruit()->::ProtoProduce::FruitCPP::MergeFrom(from.othfruit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOfferHelpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOfferHelpResp::CopyFrom(const CSOfferHelpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOfferHelpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_othfruit()) {
    if (!this->othfruit().IsInitialized()) return false;
  }
  return true;
}

void CSOfferHelpResp::Swap(CSOfferHelpResp* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(othuid_, other->othuid_);
    std::swap(othfruit_, other->othfruit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOfferHelpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOfferHelpResp_descriptor_;
  metadata.reflection = CSOfferHelpResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfirmHelpReq::kTreeudFieldNumber;
#endif  // !_MSC_VER

ConfirmHelpReq::ConfirmHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ConfirmHelpReq)
}

void ConfirmHelpReq::InitAsDefaultInstance() {
}

ConfirmHelpReq::ConfirmHelpReq(const ConfirmHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ConfirmHelpReq)
}

void ConfirmHelpReq::SharedCtor() {
  _cached_size_ = 0;
  treeud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfirmHelpReq::~ConfirmHelpReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ConfirmHelpReq)
  SharedDtor();
}

void ConfirmHelpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfirmHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfirmHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfirmHelpReq_descriptor_;
}

const ConfirmHelpReq& ConfirmHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ConfirmHelpReq* ConfirmHelpReq::default_instance_ = NULL;

ConfirmHelpReq* ConfirmHelpReq::New() const {
  return new ConfirmHelpReq;
}

void ConfirmHelpReq::Clear() {
  treeud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfirmHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ConfirmHelpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 treeud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treeud_)));
          set_has_treeud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ConfirmHelpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ConfirmHelpReq)
  return false;
#undef DO_
}

void ConfirmHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ConfirmHelpReq)
  // required uint32 treeud = 1;
  if (has_treeud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->treeud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ConfirmHelpReq)
}

::google::protobuf::uint8* ConfirmHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ConfirmHelpReq)
  // required uint32 treeud = 1;
  if (has_treeud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->treeud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ConfirmHelpReq)
  return target;
}

int ConfirmHelpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 treeud = 1;
    if (has_treeud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treeud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfirmHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfirmHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfirmHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfirmHelpReq::MergeFrom(const ConfirmHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_treeud()) {
      set_treeud(from.treeud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfirmHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfirmHelpReq::CopyFrom(const ConfirmHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmHelpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConfirmHelpReq::Swap(ConfirmHelpReq* other) {
  if (other != this) {
    std::swap(treeud_, other->treeud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfirmHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfirmHelpReq_descriptor_;
  metadata.reflection = ConfirmHelpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfirmHelpResp::kFruitFieldNumber;
#endif  // !_MSC_VER

ConfirmHelpResp::ConfirmHelpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ConfirmHelpResp)
}

void ConfirmHelpResp::InitAsDefaultInstance() {
  fruit_ = const_cast< ::ProtoProduce::FruitCPP*>(&::ProtoProduce::FruitCPP::default_instance());
}

ConfirmHelpResp::ConfirmHelpResp(const ConfirmHelpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ConfirmHelpResp)
}

void ConfirmHelpResp::SharedCtor() {
  _cached_size_ = 0;
  fruit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfirmHelpResp::~ConfirmHelpResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ConfirmHelpResp)
  SharedDtor();
}

void ConfirmHelpResp::SharedDtor() {
  if (this != default_instance_) {
    delete fruit_;
  }
}

void ConfirmHelpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfirmHelpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfirmHelpResp_descriptor_;
}

const ConfirmHelpResp& ConfirmHelpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ConfirmHelpResp* ConfirmHelpResp::default_instance_ = NULL;

ConfirmHelpResp* ConfirmHelpResp::New() const {
  return new ConfirmHelpResp;
}

void ConfirmHelpResp::Clear() {
  if (has_fruit()) {
    if (fruit_ != NULL) fruit_->::ProtoProduce::FruitCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfirmHelpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ConfirmHelpResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.FruitCPP fruit = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fruit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ConfirmHelpResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ConfirmHelpResp)
  return false;
#undef DO_
}

void ConfirmHelpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ConfirmHelpResp)
  // required .ProtoProduce.FruitCPP fruit = 1;
  if (has_fruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fruit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ConfirmHelpResp)
}

::google::protobuf::uint8* ConfirmHelpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ConfirmHelpResp)
  // required .ProtoProduce.FruitCPP fruit = 1;
  if (has_fruit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fruit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ConfirmHelpResp)
  return target;
}

int ConfirmHelpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.FruitCPP fruit = 1;
    if (has_fruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fruit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfirmHelpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfirmHelpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfirmHelpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfirmHelpResp::MergeFrom(const ConfirmHelpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fruit()) {
      mutable_fruit()->::ProtoProduce::FruitCPP::MergeFrom(from.fruit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfirmHelpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfirmHelpResp::CopyFrom(const ConfirmHelpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmHelpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fruit()) {
    if (!this->fruit().IsInitialized()) return false;
  }
  return true;
}

void ConfirmHelpResp::Swap(ConfirmHelpResp* other) {
  if (other != this) {
    std::swap(fruit_, other->fruit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfirmHelpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfirmHelpResp_descriptor_;
  metadata.reflection = ConfirmHelpResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProduceProductCPP::kCroplandFieldNumber;
const int ProduceProductCPP::kEquipmentFieldNumber;
const int ProduceProductCPP::kAnimalFieldNumber;
const int ProduceProductCPP::kFruitFieldNumber;
#endif  // !_MSC_VER

ProduceProductCPP::ProduceProductCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ProduceProductCPP)
}

void ProduceProductCPP::InitAsDefaultInstance() {
  cropland_ = const_cast< ::ProtoProduce::CropLandCPP*>(&::ProtoProduce::CropLandCPP::default_instance());
  equipment_ = const_cast< ::ProtoProduce::ProduceEquipCPP*>(&::ProtoProduce::ProduceEquipCPP::default_instance());
  animal_ = const_cast< ::ProtoProduce::AnimalCPP*>(&::ProtoProduce::AnimalCPP::default_instance());
  fruit_ = const_cast< ::ProtoProduce::FruitCPP*>(&::ProtoProduce::FruitCPP::default_instance());
}

ProduceProductCPP::ProduceProductCPP(const ProduceProductCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ProduceProductCPP)
}

void ProduceProductCPP::SharedCtor() {
  _cached_size_ = 0;
  cropland_ = NULL;
  equipment_ = NULL;
  animal_ = NULL;
  fruit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProduceProductCPP::~ProduceProductCPP() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ProduceProductCPP)
  SharedDtor();
}

void ProduceProductCPP::SharedDtor() {
  if (this != default_instance_) {
    delete cropland_;
    delete equipment_;
    delete animal_;
    delete fruit_;
  }
}

void ProduceProductCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProduceProductCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProduceProductCPP_descriptor_;
}

const ProduceProductCPP& ProduceProductCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ProduceProductCPP* ProduceProductCPP::default_instance_ = NULL;

ProduceProductCPP* ProduceProductCPP::New() const {
  return new ProduceProductCPP;
}

void ProduceProductCPP::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_cropland()) {
      if (cropland_ != NULL) cropland_->::ProtoProduce::CropLandCPP::Clear();
    }
    if (has_equipment()) {
      if (equipment_ != NULL) equipment_->::ProtoProduce::ProduceEquipCPP::Clear();
    }
    if (has_animal()) {
      if (animal_ != NULL) animal_->::ProtoProduce::AnimalCPP::Clear();
    }
    if (has_fruit()) {
      if (fruit_ != NULL) fruit_->::ProtoProduce::FruitCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProduceProductCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ProduceProductCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoProduce.CropLandCPP cropland = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cropland()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipment;
        break;
      }

      // optional .ProtoProduce.ProduceEquipCPP equipment = 2;
      case 2: {
        if (tag == 18) {
         parse_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_animal;
        break;
      }

      // optional .ProtoProduce.AnimalCPP animal = 3;
      case 3: {
        if (tag == 26) {
         parse_animal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fruit;
        break;
      }

      // optional .ProtoProduce.FruitCPP fruit = 4;
      case 4: {
        if (tag == 34) {
         parse_fruit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fruit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ProduceProductCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ProduceProductCPP)
  return false;
#undef DO_
}

void ProduceProductCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ProduceProductCPP)
  // optional .ProtoProduce.CropLandCPP cropland = 1;
  if (has_cropland()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cropland(), output);
  }

  // optional .ProtoProduce.ProduceEquipCPP equipment = 2;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipment(), output);
  }

  // optional .ProtoProduce.AnimalCPP animal = 3;
  if (has_animal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->animal(), output);
  }

  // optional .ProtoProduce.FruitCPP fruit = 4;
  if (has_fruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fruit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ProduceProductCPP)
}

::google::protobuf::uint8* ProduceProductCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ProduceProductCPP)
  // optional .ProtoProduce.CropLandCPP cropland = 1;
  if (has_cropland()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cropland(), target);
  }

  // optional .ProtoProduce.ProduceEquipCPP equipment = 2;
  if (has_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipment(), target);
  }

  // optional .ProtoProduce.AnimalCPP animal = 3;
  if (has_animal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->animal(), target);
  }

  // optional .ProtoProduce.FruitCPP fruit = 4;
  if (has_fruit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fruit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ProduceProductCPP)
  return target;
}

int ProduceProductCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoProduce.CropLandCPP cropland = 1;
    if (has_cropland()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cropland());
    }

    // optional .ProtoProduce.ProduceEquipCPP equipment = 2;
    if (has_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipment());
    }

    // optional .ProtoProduce.AnimalCPP animal = 3;
    if (has_animal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->animal());
    }

    // optional .ProtoProduce.FruitCPP fruit = 4;
    if (has_fruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fruit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProduceProductCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProduceProductCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProduceProductCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProduceProductCPP::MergeFrom(const ProduceProductCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cropland()) {
      mutable_cropland()->::ProtoProduce::CropLandCPP::MergeFrom(from.cropland());
    }
    if (from.has_equipment()) {
      mutable_equipment()->::ProtoProduce::ProduceEquipCPP::MergeFrom(from.equipment());
    }
    if (from.has_animal()) {
      mutable_animal()->::ProtoProduce::AnimalCPP::MergeFrom(from.animal());
    }
    if (from.has_fruit()) {
      mutable_fruit()->::ProtoProduce::FruitCPP::MergeFrom(from.fruit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProduceProductCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProduceProductCPP::CopyFrom(const ProduceProductCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProduceProductCPP::IsInitialized() const {

  if (has_cropland()) {
    if (!this->cropland().IsInitialized()) return false;
  }
  if (has_equipment()) {
    if (!this->equipment().IsInitialized()) return false;
  }
  if (has_animal()) {
    if (!this->animal().IsInitialized()) return false;
  }
  if (has_fruit()) {
    if (!this->fruit().IsInitialized()) return false;
  }
  return true;
}

void ProduceProductCPP::Swap(ProduceProductCPP* other) {
  if (other != this) {
    std::swap(cropland_, other->cropland_);
    std::swap(equipment_, other->equipment_);
    std::swap(animal_, other->animal_);
    std::swap(fruit_, other->fruit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProduceProductCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProduceProductCPP_descriptor_;
  metadata.reflection = ProduceProductCPP_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoProduce

// @@protoc_insertion_point(global_scope)
