// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoRotaryTable.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoRotaryTable.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoRotaryTable {

namespace {

const ::google::protobuf::Descriptor* RotaryTableCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotaryTableCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawCntCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawCntCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRotaryTableInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRotaryTableInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRotaryTableInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRotaryTableInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawRotaryTableReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawRotaryTableReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawRotaryTableResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawRotaryTableResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShareReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShareResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShareResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoRotaryTable_2eproto() {
  protobuf_AddDesc_ProtoRotaryTable_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoRotaryTable.proto");
  GOOGLE_CHECK(file != NULL);
  RotaryTableCPP_descriptor_ = file->message_type(0);
  static const int RotaryTableCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCPP, gridid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCPP, griditemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCPP, griditemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCPP, griditemcnt_),
  };
  RotaryTableCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotaryTableCPP_descriptor_,
      RotaryTableCPP::default_instance_,
      RotaryTableCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotaryTableCPP));
  DrawCntCPP_descriptor_ = file->message_type(1);
  static const int DrawCntCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCntCPP, freedrawcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCntCPP, usedfreedrawcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCntCPP, usedfriendlydrawcnt_),
  };
  DrawCntCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawCntCPP_descriptor_,
      DrawCntCPP::default_instance_,
      DrawCntCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCntCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCntCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawCntCPP));
  GetRotaryTableInfoReq_descriptor_ = file->message_type(2);
  static const int GetRotaryTableInfoReq_offsets_[1] = {
  };
  GetRotaryTableInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRotaryTableInfoReq_descriptor_,
      GetRotaryTableInfoReq::default_instance_,
      GetRotaryTableInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRotaryTableInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRotaryTableInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRotaryTableInfoReq));
  GetRotaryTableInfoResp_descriptor_ = file->message_type(3);
  static const int GetRotaryTableInfoResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRotaryTableInfoResp, rotarytable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRotaryTableInfoResp, drawinfo_),
  };
  GetRotaryTableInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRotaryTableInfoResp_descriptor_,
      GetRotaryTableInfoResp::default_instance_,
      GetRotaryTableInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRotaryTableInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRotaryTableInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRotaryTableInfoResp));
  DrawRotaryTableReq_descriptor_ = file->message_type(4);
  static const int DrawRotaryTableReq_offsets_[1] = {
  };
  DrawRotaryTableReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawRotaryTableReq_descriptor_,
      DrawRotaryTableReq::default_instance_,
      DrawRotaryTableReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawRotaryTableReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawRotaryTableReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawRotaryTableReq));
  DrawRotaryTableResp_descriptor_ = file->message_type(5);
  static const int DrawRotaryTableResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawRotaryTableResp, gridid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawRotaryTableResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawRotaryTableResp, drawinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawRotaryTableResp, curfriendlyvalue_),
  };
  DrawRotaryTableResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawRotaryTableResp_descriptor_,
      DrawRotaryTableResp::default_instance_,
      DrawRotaryTableResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawRotaryTableResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawRotaryTableResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawRotaryTableResp));
  ShareReq_descriptor_ = file->message_type(6);
  static const int ShareReq_offsets_[1] = {
  };
  ShareReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareReq_descriptor_,
      ShareReq::default_instance_,
      ShareReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareReq));
  ShareResp_descriptor_ = file->message_type(7);
  static const int ShareResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareResp, drawinfo_),
  };
  ShareResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShareResp_descriptor_,
      ShareResp::default_instance_,
      ShareResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShareResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShareResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoRotaryTable_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotaryTableCPP_descriptor_, &RotaryTableCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawCntCPP_descriptor_, &DrawCntCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRotaryTableInfoReq_descriptor_, &GetRotaryTableInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRotaryTableInfoResp_descriptor_, &GetRotaryTableInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawRotaryTableReq_descriptor_, &DrawRotaryTableReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawRotaryTableResp_descriptor_, &DrawRotaryTableResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareReq_descriptor_, &ShareReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShareResp_descriptor_, &ShareResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoRotaryTable_2eproto() {
  delete RotaryTableCPP::default_instance_;
  delete RotaryTableCPP_reflection_;
  delete DrawCntCPP::default_instance_;
  delete DrawCntCPP_reflection_;
  delete GetRotaryTableInfoReq::default_instance_;
  delete GetRotaryTableInfoReq_reflection_;
  delete GetRotaryTableInfoResp::default_instance_;
  delete GetRotaryTableInfoResp_reflection_;
  delete DrawRotaryTableReq::default_instance_;
  delete DrawRotaryTableReq_reflection_;
  delete DrawRotaryTableResp::default_instance_;
  delete DrawRotaryTableResp_reflection_;
  delete ShareReq::default_instance_;
  delete ShareReq_reflection_;
  delete ShareResp::default_instance_;
  delete ShareResp_reflection_;
}

void protobuf_AddDesc_ProtoRotaryTable_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ProtoRotaryTable.proto\022\020ProtoRotaryTab"
    "le\032\020DataCommon.proto\"_\n\016RotaryTableCPP\022\016"
    "\n\006gridid\030\001 \002(\r\022\024\n\014griditemtype\030\002 \002(\r\022\022\n\n"
    "griditemid\030\003 \001(\r\022\023\n\013griditemcnt\030\004 \002(\r\"W\n"
    "\nDrawCntCPP\022\023\n\013freeDrawCnt\030\001 \002(\r\022\027\n\017used"
    "FreeDrawCnt\030\002 \002(\r\022\033\n\023usedFriendlyDrawCnt"
    "\030\003 \002(\r\"\027\n\025GetRotaryTableInfoReq\"\177\n\026GetRo"
    "taryTableInfoResp\0225\n\013rotarytable\030\001 \003(\0132 "
    ".ProtoRotaryTable.RotaryTableCPP\022.\n\010draw"
    "info\030\002 \002(\0132\034.ProtoRotaryTable.DrawCntCPP"
    "\"\024\n\022DrawRotaryTableReq\"\234\001\n\023DrawRotaryTab"
    "leResp\022\016\n\006gridid\030\001 \002(\r\022+\n\007commons\030\002 \002(\0132"
    "\032.DataCommon.CommonItemsCPP\022.\n\010drawinfo\030"
    "\003 \002(\0132\034.ProtoRotaryTable.DrawCntCPP\022\030\n\020c"
    "urfriendlyvalue\030\004 \002(\r\"\n\n\010ShareReq\";\n\tSha"
    "reResp\022.\n\010drawinfo\030\001 \002(\0132\034.ProtoRotaryTa"
    "ble.DrawCntCPP", 654);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoRotaryTable.proto", &protobuf_RegisterTypes);
  RotaryTableCPP::default_instance_ = new RotaryTableCPP();
  DrawCntCPP::default_instance_ = new DrawCntCPP();
  GetRotaryTableInfoReq::default_instance_ = new GetRotaryTableInfoReq();
  GetRotaryTableInfoResp::default_instance_ = new GetRotaryTableInfoResp();
  DrawRotaryTableReq::default_instance_ = new DrawRotaryTableReq();
  DrawRotaryTableResp::default_instance_ = new DrawRotaryTableResp();
  ShareReq::default_instance_ = new ShareReq();
  ShareResp::default_instance_ = new ShareResp();
  RotaryTableCPP::default_instance_->InitAsDefaultInstance();
  DrawCntCPP::default_instance_->InitAsDefaultInstance();
  GetRotaryTableInfoReq::default_instance_->InitAsDefaultInstance();
  GetRotaryTableInfoResp::default_instance_->InitAsDefaultInstance();
  DrawRotaryTableReq::default_instance_->InitAsDefaultInstance();
  DrawRotaryTableResp::default_instance_->InitAsDefaultInstance();
  ShareReq::default_instance_->InitAsDefaultInstance();
  ShareResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoRotaryTable_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoRotaryTable_2eproto {
  StaticDescriptorInitializer_ProtoRotaryTable_2eproto() {
    protobuf_AddDesc_ProtoRotaryTable_2eproto();
  }
} static_descriptor_initializer_ProtoRotaryTable_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RotaryTableCPP::kGrididFieldNumber;
const int RotaryTableCPP::kGriditemtypeFieldNumber;
const int RotaryTableCPP::kGriditemidFieldNumber;
const int RotaryTableCPP::kGriditemcntFieldNumber;
#endif  // !_MSC_VER

RotaryTableCPP::RotaryTableCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRotaryTable.RotaryTableCPP)
}

void RotaryTableCPP::InitAsDefaultInstance() {
}

RotaryTableCPP::RotaryTableCPP(const RotaryTableCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRotaryTable.RotaryTableCPP)
}

void RotaryTableCPP::SharedCtor() {
  _cached_size_ = 0;
  gridid_ = 0u;
  griditemtype_ = 0u;
  griditemid_ = 0u;
  griditemcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotaryTableCPP::~RotaryTableCPP() {
  // @@protoc_insertion_point(destructor:ProtoRotaryTable.RotaryTableCPP)
  SharedDtor();
}

void RotaryTableCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RotaryTableCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotaryTableCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotaryTableCPP_descriptor_;
}

const RotaryTableCPP& RotaryTableCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoRotaryTable_2eproto();
  return *default_instance_;
}

RotaryTableCPP* RotaryTableCPP::default_instance_ = NULL;

RotaryTableCPP* RotaryTableCPP::New() const {
  return new RotaryTableCPP;
}

void RotaryTableCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RotaryTableCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gridid_, griditemcnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotaryTableCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRotaryTable.RotaryTableCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gridid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridid_)));
          set_has_gridid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_griditemtype;
        break;
      }

      // required uint32 griditemtype = 2;
      case 2: {
        if (tag == 16) {
         parse_griditemtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &griditemtype_)));
          set_has_griditemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_griditemid;
        break;
      }

      // optional uint32 griditemid = 3;
      case 3: {
        if (tag == 24) {
         parse_griditemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &griditemid_)));
          set_has_griditemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_griditemcnt;
        break;
      }

      // required uint32 griditemcnt = 4;
      case 4: {
        if (tag == 32) {
         parse_griditemcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &griditemcnt_)));
          set_has_griditemcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRotaryTable.RotaryTableCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRotaryTable.RotaryTableCPP)
  return false;
#undef DO_
}

void RotaryTableCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRotaryTable.RotaryTableCPP)
  // required uint32 gridid = 1;
  if (has_gridid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gridid(), output);
  }

  // required uint32 griditemtype = 2;
  if (has_griditemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->griditemtype(), output);
  }

  // optional uint32 griditemid = 3;
  if (has_griditemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->griditemid(), output);
  }

  // required uint32 griditemcnt = 4;
  if (has_griditemcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->griditemcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRotaryTable.RotaryTableCPP)
}

::google::protobuf::uint8* RotaryTableCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRotaryTable.RotaryTableCPP)
  // required uint32 gridid = 1;
  if (has_gridid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gridid(), target);
  }

  // required uint32 griditemtype = 2;
  if (has_griditemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->griditemtype(), target);
  }

  // optional uint32 griditemid = 3;
  if (has_griditemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->griditemid(), target);
  }

  // required uint32 griditemcnt = 4;
  if (has_griditemcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->griditemcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRotaryTable.RotaryTableCPP)
  return target;
}

int RotaryTableCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gridid = 1;
    if (has_gridid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridid());
    }

    // required uint32 griditemtype = 2;
    if (has_griditemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->griditemtype());
    }

    // optional uint32 griditemid = 3;
    if (has_griditemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->griditemid());
    }

    // required uint32 griditemcnt = 4;
    if (has_griditemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->griditemcnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotaryTableCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotaryTableCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotaryTableCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotaryTableCPP::MergeFrom(const RotaryTableCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gridid()) {
      set_gridid(from.gridid());
    }
    if (from.has_griditemtype()) {
      set_griditemtype(from.griditemtype());
    }
    if (from.has_griditemid()) {
      set_griditemid(from.griditemid());
    }
    if (from.has_griditemcnt()) {
      set_griditemcnt(from.griditemcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotaryTableCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotaryTableCPP::CopyFrom(const RotaryTableCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotaryTableCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void RotaryTableCPP::Swap(RotaryTableCPP* other) {
  if (other != this) {
    std::swap(gridid_, other->gridid_);
    std::swap(griditemtype_, other->griditemtype_);
    std::swap(griditemid_, other->griditemid_);
    std::swap(griditemcnt_, other->griditemcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotaryTableCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotaryTableCPP_descriptor_;
  metadata.reflection = RotaryTableCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawCntCPP::kFreeDrawCntFieldNumber;
const int DrawCntCPP::kUsedFreeDrawCntFieldNumber;
const int DrawCntCPP::kUsedFriendlyDrawCntFieldNumber;
#endif  // !_MSC_VER

DrawCntCPP::DrawCntCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRotaryTable.DrawCntCPP)
}

void DrawCntCPP::InitAsDefaultInstance() {
}

DrawCntCPP::DrawCntCPP(const DrawCntCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRotaryTable.DrawCntCPP)
}

void DrawCntCPP::SharedCtor() {
  _cached_size_ = 0;
  freedrawcnt_ = 0u;
  usedfreedrawcnt_ = 0u;
  usedfriendlydrawcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawCntCPP::~DrawCntCPP() {
  // @@protoc_insertion_point(destructor:ProtoRotaryTable.DrawCntCPP)
  SharedDtor();
}

void DrawCntCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DrawCntCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawCntCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawCntCPP_descriptor_;
}

const DrawCntCPP& DrawCntCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoRotaryTable_2eproto();
  return *default_instance_;
}

DrawCntCPP* DrawCntCPP::default_instance_ = NULL;

DrawCntCPP* DrawCntCPP::New() const {
  return new DrawCntCPP;
}

void DrawCntCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DrawCntCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(freedrawcnt_, usedfriendlydrawcnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawCntCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRotaryTable.DrawCntCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 freeDrawCnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freedrawcnt_)));
          set_has_freedrawcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_usedFreeDrawCnt;
        break;
      }

      // required uint32 usedFreeDrawCnt = 2;
      case 2: {
        if (tag == 16) {
         parse_usedFreeDrawCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedfreedrawcnt_)));
          set_has_usedfreedrawcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_usedFriendlyDrawCnt;
        break;
      }

      // required uint32 usedFriendlyDrawCnt = 3;
      case 3: {
        if (tag == 24) {
         parse_usedFriendlyDrawCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedfriendlydrawcnt_)));
          set_has_usedfriendlydrawcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRotaryTable.DrawCntCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRotaryTable.DrawCntCPP)
  return false;
#undef DO_
}

void DrawCntCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRotaryTable.DrawCntCPP)
  // required uint32 freeDrawCnt = 1;
  if (has_freedrawcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->freedrawcnt(), output);
  }

  // required uint32 usedFreeDrawCnt = 2;
  if (has_usedfreedrawcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usedfreedrawcnt(), output);
  }

  // required uint32 usedFriendlyDrawCnt = 3;
  if (has_usedfriendlydrawcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usedfriendlydrawcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRotaryTable.DrawCntCPP)
}

::google::protobuf::uint8* DrawCntCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRotaryTable.DrawCntCPP)
  // required uint32 freeDrawCnt = 1;
  if (has_freedrawcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->freedrawcnt(), target);
  }

  // required uint32 usedFreeDrawCnt = 2;
  if (has_usedfreedrawcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usedfreedrawcnt(), target);
  }

  // required uint32 usedFriendlyDrawCnt = 3;
  if (has_usedfriendlydrawcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usedfriendlydrawcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRotaryTable.DrawCntCPP)
  return target;
}

int DrawCntCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 freeDrawCnt = 1;
    if (has_freedrawcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freedrawcnt());
    }

    // required uint32 usedFreeDrawCnt = 2;
    if (has_usedfreedrawcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedfreedrawcnt());
    }

    // required uint32 usedFriendlyDrawCnt = 3;
    if (has_usedfriendlydrawcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedfriendlydrawcnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawCntCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawCntCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawCntCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawCntCPP::MergeFrom(const DrawCntCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freedrawcnt()) {
      set_freedrawcnt(from.freedrawcnt());
    }
    if (from.has_usedfreedrawcnt()) {
      set_usedfreedrawcnt(from.usedfreedrawcnt());
    }
    if (from.has_usedfriendlydrawcnt()) {
      set_usedfriendlydrawcnt(from.usedfriendlydrawcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawCntCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawCntCPP::CopyFrom(const DrawCntCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawCntCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DrawCntCPP::Swap(DrawCntCPP* other) {
  if (other != this) {
    std::swap(freedrawcnt_, other->freedrawcnt_);
    std::swap(usedfreedrawcnt_, other->usedfreedrawcnt_);
    std::swap(usedfriendlydrawcnt_, other->usedfriendlydrawcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawCntCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawCntCPP_descriptor_;
  metadata.reflection = DrawCntCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetRotaryTableInfoReq::GetRotaryTableInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRotaryTable.GetRotaryTableInfoReq)
}

void GetRotaryTableInfoReq::InitAsDefaultInstance() {
}

GetRotaryTableInfoReq::GetRotaryTableInfoReq(const GetRotaryTableInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRotaryTable.GetRotaryTableInfoReq)
}

void GetRotaryTableInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRotaryTableInfoReq::~GetRotaryTableInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoRotaryTable.GetRotaryTableInfoReq)
  SharedDtor();
}

void GetRotaryTableInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRotaryTableInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRotaryTableInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRotaryTableInfoReq_descriptor_;
}

const GetRotaryTableInfoReq& GetRotaryTableInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoRotaryTable_2eproto();
  return *default_instance_;
}

GetRotaryTableInfoReq* GetRotaryTableInfoReq::default_instance_ = NULL;

GetRotaryTableInfoReq* GetRotaryTableInfoReq::New() const {
  return new GetRotaryTableInfoReq;
}

void GetRotaryTableInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRotaryTableInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRotaryTable.GetRotaryTableInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRotaryTable.GetRotaryTableInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRotaryTable.GetRotaryTableInfoReq)
  return false;
#undef DO_
}

void GetRotaryTableInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRotaryTable.GetRotaryTableInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRotaryTable.GetRotaryTableInfoReq)
}

::google::protobuf::uint8* GetRotaryTableInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRotaryTable.GetRotaryTableInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRotaryTable.GetRotaryTableInfoReq)
  return target;
}

int GetRotaryTableInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRotaryTableInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRotaryTableInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRotaryTableInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRotaryTableInfoReq::MergeFrom(const GetRotaryTableInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRotaryTableInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRotaryTableInfoReq::CopyFrom(const GetRotaryTableInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRotaryTableInfoReq::IsInitialized() const {

  return true;
}

void GetRotaryTableInfoReq::Swap(GetRotaryTableInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRotaryTableInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRotaryTableInfoReq_descriptor_;
  metadata.reflection = GetRotaryTableInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRotaryTableInfoResp::kRotarytableFieldNumber;
const int GetRotaryTableInfoResp::kDrawinfoFieldNumber;
#endif  // !_MSC_VER

GetRotaryTableInfoResp::GetRotaryTableInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRotaryTable.GetRotaryTableInfoResp)
}

void GetRotaryTableInfoResp::InitAsDefaultInstance() {
  drawinfo_ = const_cast< ::ProtoRotaryTable::DrawCntCPP*>(&::ProtoRotaryTable::DrawCntCPP::default_instance());
}

GetRotaryTableInfoResp::GetRotaryTableInfoResp(const GetRotaryTableInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRotaryTable.GetRotaryTableInfoResp)
}

void GetRotaryTableInfoResp::SharedCtor() {
  _cached_size_ = 0;
  drawinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRotaryTableInfoResp::~GetRotaryTableInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoRotaryTable.GetRotaryTableInfoResp)
  SharedDtor();
}

void GetRotaryTableInfoResp::SharedDtor() {
  if (this != default_instance_) {
    delete drawinfo_;
  }
}

void GetRotaryTableInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRotaryTableInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRotaryTableInfoResp_descriptor_;
}

const GetRotaryTableInfoResp& GetRotaryTableInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoRotaryTable_2eproto();
  return *default_instance_;
}

GetRotaryTableInfoResp* GetRotaryTableInfoResp::default_instance_ = NULL;

GetRotaryTableInfoResp* GetRotaryTableInfoResp::New() const {
  return new GetRotaryTableInfoResp;
}

void GetRotaryTableInfoResp::Clear() {
  if (has_drawinfo()) {
    if (drawinfo_ != NULL) drawinfo_->::ProtoRotaryTable::DrawCntCPP::Clear();
  }
  rotarytable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRotaryTableInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRotaryTable.GetRotaryTableInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoRotaryTable.RotaryTableCPP rotarytable = 1;
      case 1: {
        if (tag == 10) {
         parse_rotarytable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rotarytable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rotarytable;
        if (input->ExpectTag(18)) goto parse_drawinfo;
        break;
      }

      // required .ProtoRotaryTable.DrawCntCPP drawinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_drawinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRotaryTable.GetRotaryTableInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRotaryTable.GetRotaryTableInfoResp)
  return false;
#undef DO_
}

void GetRotaryTableInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRotaryTable.GetRotaryTableInfoResp)
  // repeated .ProtoRotaryTable.RotaryTableCPP rotarytable = 1;
  for (int i = 0; i < this->rotarytable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rotarytable(i), output);
  }

  // required .ProtoRotaryTable.DrawCntCPP drawinfo = 2;
  if (has_drawinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->drawinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRotaryTable.GetRotaryTableInfoResp)
}

::google::protobuf::uint8* GetRotaryTableInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRotaryTable.GetRotaryTableInfoResp)
  // repeated .ProtoRotaryTable.RotaryTableCPP rotarytable = 1;
  for (int i = 0; i < this->rotarytable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rotarytable(i), target);
  }

  // required .ProtoRotaryTable.DrawCntCPP drawinfo = 2;
  if (has_drawinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->drawinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRotaryTable.GetRotaryTableInfoResp)
  return target;
}

int GetRotaryTableInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ProtoRotaryTable.DrawCntCPP drawinfo = 2;
    if (has_drawinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawinfo());
    }

  }
  // repeated .ProtoRotaryTable.RotaryTableCPP rotarytable = 1;
  total_size += 1 * this->rotarytable_size();
  for (int i = 0; i < this->rotarytable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rotarytable(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRotaryTableInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRotaryTableInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRotaryTableInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRotaryTableInfoResp::MergeFrom(const GetRotaryTableInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rotarytable_.MergeFrom(from.rotarytable_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_drawinfo()) {
      mutable_drawinfo()->::ProtoRotaryTable::DrawCntCPP::MergeFrom(from.drawinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRotaryTableInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRotaryTableInfoResp::CopyFrom(const GetRotaryTableInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRotaryTableInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rotarytable())) return false;
  if (has_drawinfo()) {
    if (!this->drawinfo().IsInitialized()) return false;
  }
  return true;
}

void GetRotaryTableInfoResp::Swap(GetRotaryTableInfoResp* other) {
  if (other != this) {
    rotarytable_.Swap(&other->rotarytable_);
    std::swap(drawinfo_, other->drawinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRotaryTableInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRotaryTableInfoResp_descriptor_;
  metadata.reflection = GetRotaryTableInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DrawRotaryTableReq::DrawRotaryTableReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRotaryTable.DrawRotaryTableReq)
}

void DrawRotaryTableReq::InitAsDefaultInstance() {
}

DrawRotaryTableReq::DrawRotaryTableReq(const DrawRotaryTableReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRotaryTable.DrawRotaryTableReq)
}

void DrawRotaryTableReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawRotaryTableReq::~DrawRotaryTableReq() {
  // @@protoc_insertion_point(destructor:ProtoRotaryTable.DrawRotaryTableReq)
  SharedDtor();
}

void DrawRotaryTableReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DrawRotaryTableReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawRotaryTableReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawRotaryTableReq_descriptor_;
}

const DrawRotaryTableReq& DrawRotaryTableReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoRotaryTable_2eproto();
  return *default_instance_;
}

DrawRotaryTableReq* DrawRotaryTableReq::default_instance_ = NULL;

DrawRotaryTableReq* DrawRotaryTableReq::New() const {
  return new DrawRotaryTableReq;
}

void DrawRotaryTableReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawRotaryTableReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRotaryTable.DrawRotaryTableReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRotaryTable.DrawRotaryTableReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRotaryTable.DrawRotaryTableReq)
  return false;
#undef DO_
}

void DrawRotaryTableReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRotaryTable.DrawRotaryTableReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRotaryTable.DrawRotaryTableReq)
}

::google::protobuf::uint8* DrawRotaryTableReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRotaryTable.DrawRotaryTableReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRotaryTable.DrawRotaryTableReq)
  return target;
}

int DrawRotaryTableReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawRotaryTableReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawRotaryTableReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawRotaryTableReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawRotaryTableReq::MergeFrom(const DrawRotaryTableReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawRotaryTableReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawRotaryTableReq::CopyFrom(const DrawRotaryTableReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawRotaryTableReq::IsInitialized() const {

  return true;
}

void DrawRotaryTableReq::Swap(DrawRotaryTableReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawRotaryTableReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawRotaryTableReq_descriptor_;
  metadata.reflection = DrawRotaryTableReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawRotaryTableResp::kGrididFieldNumber;
const int DrawRotaryTableResp::kCommonsFieldNumber;
const int DrawRotaryTableResp::kDrawinfoFieldNumber;
const int DrawRotaryTableResp::kCurfriendlyvalueFieldNumber;
#endif  // !_MSC_VER

DrawRotaryTableResp::DrawRotaryTableResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRotaryTable.DrawRotaryTableResp)
}

void DrawRotaryTableResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  drawinfo_ = const_cast< ::ProtoRotaryTable::DrawCntCPP*>(&::ProtoRotaryTable::DrawCntCPP::default_instance());
}

DrawRotaryTableResp::DrawRotaryTableResp(const DrawRotaryTableResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRotaryTable.DrawRotaryTableResp)
}

void DrawRotaryTableResp::SharedCtor() {
  _cached_size_ = 0;
  gridid_ = 0u;
  commons_ = NULL;
  drawinfo_ = NULL;
  curfriendlyvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawRotaryTableResp::~DrawRotaryTableResp() {
  // @@protoc_insertion_point(destructor:ProtoRotaryTable.DrawRotaryTableResp)
  SharedDtor();
}

void DrawRotaryTableResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete drawinfo_;
  }
}

void DrawRotaryTableResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawRotaryTableResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawRotaryTableResp_descriptor_;
}

const DrawRotaryTableResp& DrawRotaryTableResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoRotaryTable_2eproto();
  return *default_instance_;
}

DrawRotaryTableResp* DrawRotaryTableResp::default_instance_ = NULL;

DrawRotaryTableResp* DrawRotaryTableResp::New() const {
  return new DrawRotaryTableResp;
}

void DrawRotaryTableResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DrawRotaryTableResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(gridid_, curfriendlyvalue_);
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_drawinfo()) {
      if (drawinfo_ != NULL) drawinfo_->::ProtoRotaryTable::DrawCntCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawRotaryTableResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRotaryTable.DrawRotaryTableResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gridid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridid_)));
          set_has_gridid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_drawinfo;
        break;
      }

      // required .ProtoRotaryTable.DrawCntCPP drawinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_drawinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curfriendlyvalue;
        break;
      }

      // required uint32 curfriendlyvalue = 4;
      case 4: {
        if (tag == 32) {
         parse_curfriendlyvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curfriendlyvalue_)));
          set_has_curfriendlyvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRotaryTable.DrawRotaryTableResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRotaryTable.DrawRotaryTableResp)
  return false;
#undef DO_
}

void DrawRotaryTableResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRotaryTable.DrawRotaryTableResp)
  // required uint32 gridid = 1;
  if (has_gridid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gridid(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  // required .ProtoRotaryTable.DrawCntCPP drawinfo = 3;
  if (has_drawinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->drawinfo(), output);
  }

  // required uint32 curfriendlyvalue = 4;
  if (has_curfriendlyvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curfriendlyvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRotaryTable.DrawRotaryTableResp)
}

::google::protobuf::uint8* DrawRotaryTableResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRotaryTable.DrawRotaryTableResp)
  // required uint32 gridid = 1;
  if (has_gridid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gridid(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  // required .ProtoRotaryTable.DrawCntCPP drawinfo = 3;
  if (has_drawinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->drawinfo(), target);
  }

  // required uint32 curfriendlyvalue = 4;
  if (has_curfriendlyvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curfriendlyvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRotaryTable.DrawRotaryTableResp)
  return target;
}

int DrawRotaryTableResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gridid = 1;
    if (has_gridid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridid());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required .ProtoRotaryTable.DrawCntCPP drawinfo = 3;
    if (has_drawinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawinfo());
    }

    // required uint32 curfriendlyvalue = 4;
    if (has_curfriendlyvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curfriendlyvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawRotaryTableResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawRotaryTableResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawRotaryTableResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawRotaryTableResp::MergeFrom(const DrawRotaryTableResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gridid()) {
      set_gridid(from.gridid());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_drawinfo()) {
      mutable_drawinfo()->::ProtoRotaryTable::DrawCntCPP::MergeFrom(from.drawinfo());
    }
    if (from.has_curfriendlyvalue()) {
      set_curfriendlyvalue(from.curfriendlyvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawRotaryTableResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawRotaryTableResp::CopyFrom(const DrawRotaryTableResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawRotaryTableResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_drawinfo()) {
    if (!this->drawinfo().IsInitialized()) return false;
  }
  return true;
}

void DrawRotaryTableResp::Swap(DrawRotaryTableResp* other) {
  if (other != this) {
    std::swap(gridid_, other->gridid_);
    std::swap(commons_, other->commons_);
    std::swap(drawinfo_, other->drawinfo_);
    std::swap(curfriendlyvalue_, other->curfriendlyvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawRotaryTableResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawRotaryTableResp_descriptor_;
  metadata.reflection = DrawRotaryTableResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShareReq::ShareReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRotaryTable.ShareReq)
}

void ShareReq::InitAsDefaultInstance() {
}

ShareReq::ShareReq(const ShareReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRotaryTable.ShareReq)
}

void ShareReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareReq::~ShareReq() {
  // @@protoc_insertion_point(destructor:ProtoRotaryTable.ShareReq)
  SharedDtor();
}

void ShareReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShareReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareReq_descriptor_;
}

const ShareReq& ShareReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoRotaryTable_2eproto();
  return *default_instance_;
}

ShareReq* ShareReq::default_instance_ = NULL;

ShareReq* ShareReq::New() const {
  return new ShareReq;
}

void ShareReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRotaryTable.ShareReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRotaryTable.ShareReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRotaryTable.ShareReq)
  return false;
#undef DO_
}

void ShareReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRotaryTable.ShareReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRotaryTable.ShareReq)
}

::google::protobuf::uint8* ShareReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRotaryTable.ShareReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRotaryTable.ShareReq)
  return target;
}

int ShareReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareReq::MergeFrom(const ShareReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareReq::CopyFrom(const ShareReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareReq::IsInitialized() const {

  return true;
}

void ShareReq::Swap(ShareReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareReq_descriptor_;
  metadata.reflection = ShareReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShareResp::kDrawinfoFieldNumber;
#endif  // !_MSC_VER

ShareResp::ShareResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRotaryTable.ShareResp)
}

void ShareResp::InitAsDefaultInstance() {
  drawinfo_ = const_cast< ::ProtoRotaryTable::DrawCntCPP*>(&::ProtoRotaryTable::DrawCntCPP::default_instance());
}

ShareResp::ShareResp(const ShareResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRotaryTable.ShareResp)
}

void ShareResp::SharedCtor() {
  _cached_size_ = 0;
  drawinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShareResp::~ShareResp() {
  // @@protoc_insertion_point(destructor:ProtoRotaryTable.ShareResp)
  SharedDtor();
}

void ShareResp::SharedDtor() {
  if (this != default_instance_) {
    delete drawinfo_;
  }
}

void ShareResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShareResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShareResp_descriptor_;
}

const ShareResp& ShareResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoRotaryTable_2eproto();
  return *default_instance_;
}

ShareResp* ShareResp::default_instance_ = NULL;

ShareResp* ShareResp::New() const {
  return new ShareResp;
}

void ShareResp::Clear() {
  if (has_drawinfo()) {
    if (drawinfo_ != NULL) drawinfo_->::ProtoRotaryTable::DrawCntCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShareResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRotaryTable.ShareResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoRotaryTable.DrawCntCPP drawinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRotaryTable.ShareResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRotaryTable.ShareResp)
  return false;
#undef DO_
}

void ShareResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRotaryTable.ShareResp)
  // required .ProtoRotaryTable.DrawCntCPP drawinfo = 1;
  if (has_drawinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drawinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRotaryTable.ShareResp)
}

::google::protobuf::uint8* ShareResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRotaryTable.ShareResp)
  // required .ProtoRotaryTable.DrawCntCPP drawinfo = 1;
  if (has_drawinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drawinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRotaryTable.ShareResp)
  return target;
}

int ShareResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoRotaryTable.DrawCntCPP drawinfo = 1;
    if (has_drawinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShareResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShareResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShareResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShareResp::MergeFrom(const ShareResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drawinfo()) {
      mutable_drawinfo()->::ProtoRotaryTable::DrawCntCPP::MergeFrom(from.drawinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShareResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShareResp::CopyFrom(const ShareResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_drawinfo()) {
    if (!this->drawinfo().IsInitialized()) return false;
  }
  return true;
}

void ShareResp::Swap(ShareResp* other) {
  if (other != this) {
    std::swap(drawinfo_, other->drawinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShareResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShareResp_descriptor_;
  metadata.reflection = ShareResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoRotaryTable

// @@protoc_insertion_point(global_scope)
