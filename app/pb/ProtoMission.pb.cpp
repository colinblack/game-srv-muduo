// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoMission.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoMission.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoMission {

namespace {

const ::google::protobuf::Descriptor* MissionCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCurMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCurMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCurMissionResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCurMissionResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardMissionResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardMissionResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushMission_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoMission_2eproto() {
  protobuf_AddDesc_ProtoMission_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoMission.proto");
  GOOGLE_CHECK(file != NULL);
  MissionCPP_descriptor_ = file->message_type(0);
  static const int MissionCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, value_),
  };
  MissionCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionCPP_descriptor_,
      MissionCPP::default_instance_,
      MissionCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionCPP));
  GetCurMissionReq_descriptor_ = file->message_type(1);
  static const int GetCurMissionReq_offsets_[1] = {
  };
  GetCurMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCurMissionReq_descriptor_,
      GetCurMissionReq::default_instance_,
      GetCurMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCurMissionReq));
  GetCurMissionResp_descriptor_ = file->message_type(2);
  static const int GetCurMissionResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurMissionResp, misssion_),
  };
  GetCurMissionResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCurMissionResp_descriptor_,
      GetCurMissionResp::default_instance_,
      GetCurMissionResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurMissionResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurMissionResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCurMissionResp));
  RewardMissionReq_descriptor_ = file->message_type(3);
  static const int RewardMissionReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMissionReq, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMissionReq, type_),
  };
  RewardMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardMissionReq_descriptor_,
      RewardMissionReq::default_instance_,
      RewardMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardMissionReq));
  RewardMissionResp_descriptor_ = file->message_type(4);
  static const int RewardMissionResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMissionResp, missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMissionResp, commons_),
  };
  RewardMissionResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardMissionResp_descriptor_,
      RewardMissionResp::default_instance_,
      RewardMissionResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMissionResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMissionResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardMissionResp));
  PushMission_descriptor_ = file->message_type(5);
  static const int PushMission_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMission, mission_),
  };
  PushMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushMission_descriptor_,
      PushMission::default_instance_,
      PushMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushMission));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoMission_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionCPP_descriptor_, &MissionCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCurMissionReq_descriptor_, &GetCurMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCurMissionResp_descriptor_, &GetCurMissionResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardMissionReq_descriptor_, &RewardMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardMissionResp_descriptor_, &RewardMissionResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushMission_descriptor_, &PushMission::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoMission_2eproto() {
  delete MissionCPP::default_instance_;
  delete MissionCPP_reflection_;
  delete GetCurMissionReq::default_instance_;
  delete GetCurMissionReq_reflection_;
  delete GetCurMissionResp::default_instance_;
  delete GetCurMissionResp_reflection_;
  delete RewardMissionReq::default_instance_;
  delete RewardMissionReq_reflection_;
  delete RewardMissionResp::default_instance_;
  delete RewardMissionResp_reflection_;
  delete PushMission::default_instance_;
  delete PushMission_reflection_;
}

void protobuf_AddDesc_ProtoMission_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ProtoMission.proto\022\014ProtoMission\032\020Data"
    "Common.proto\"\'\n\nMissionCPP\022\n\n\002id\030\001 \002(\r\022\r"
    "\n\005value\030\002 \002(\r\"\022\n\020GetCurMissionReq\"\?\n\021Get"
    "CurMissionResp\022*\n\010misssion\030\001 \003(\0132\030.Proto"
    "Mission.MissionCPP\",\n\020RewardMissionReq\022\n"
    "\n\002ud\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\"l\n\021RewardMissio"
    "nResp\022*\n\010missions\030\001 \003(\0132\030.ProtoMission.M"
    "issionCPP\022+\n\007commons\030\002 \002(\0132\032.DataCommon."
    "CommonItemsCPP\"8\n\013PushMission\022)\n\007mission"
    "\030\001 \002(\0132\030.ProtoMission.MissionCPP", 392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoMission.proto", &protobuf_RegisterTypes);
  MissionCPP::default_instance_ = new MissionCPP();
  GetCurMissionReq::default_instance_ = new GetCurMissionReq();
  GetCurMissionResp::default_instance_ = new GetCurMissionResp();
  RewardMissionReq::default_instance_ = new RewardMissionReq();
  RewardMissionResp::default_instance_ = new RewardMissionResp();
  PushMission::default_instance_ = new PushMission();
  MissionCPP::default_instance_->InitAsDefaultInstance();
  GetCurMissionReq::default_instance_->InitAsDefaultInstance();
  GetCurMissionResp::default_instance_->InitAsDefaultInstance();
  RewardMissionReq::default_instance_->InitAsDefaultInstance();
  RewardMissionResp::default_instance_->InitAsDefaultInstance();
  PushMission::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoMission_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoMission_2eproto {
  StaticDescriptorInitializer_ProtoMission_2eproto() {
    protobuf_AddDesc_ProtoMission_2eproto();
  }
} static_descriptor_initializer_ProtoMission_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MissionCPP::kIdFieldNumber;
const int MissionCPP::kValueFieldNumber;
#endif  // !_MSC_VER

MissionCPP::MissionCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMission.MissionCPP)
}

void MissionCPP::InitAsDefaultInstance() {
}

MissionCPP::MissionCPP(const MissionCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMission.MissionCPP)
}

void MissionCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionCPP::~MissionCPP() {
  // @@protoc_insertion_point(destructor:ProtoMission.MissionCPP)
  SharedDtor();
}

void MissionCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionCPP_descriptor_;
}

const MissionCPP& MissionCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMission_2eproto();
  return *default_instance_;
}

MissionCPP* MissionCPP::default_instance_ = NULL;

MissionCPP* MissionCPP::New() const {
  return new MissionCPP;
}

void MissionCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MissionCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMission.MissionCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMission.MissionCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMission.MissionCPP)
  return false;
#undef DO_
}

void MissionCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMission.MissionCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMission.MissionCPP)
}

::google::protobuf::uint8* MissionCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMission.MissionCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMission.MissionCPP)
  return target;
}

int MissionCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionCPP::MergeFrom(const MissionCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionCPP::CopyFrom(const MissionCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MissionCPP::Swap(MissionCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionCPP_descriptor_;
  metadata.reflection = MissionCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetCurMissionReq::GetCurMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMission.GetCurMissionReq)
}

void GetCurMissionReq::InitAsDefaultInstance() {
}

GetCurMissionReq::GetCurMissionReq(const GetCurMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMission.GetCurMissionReq)
}

void GetCurMissionReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCurMissionReq::~GetCurMissionReq() {
  // @@protoc_insertion_point(destructor:ProtoMission.GetCurMissionReq)
  SharedDtor();
}

void GetCurMissionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCurMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCurMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCurMissionReq_descriptor_;
}

const GetCurMissionReq& GetCurMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMission_2eproto();
  return *default_instance_;
}

GetCurMissionReq* GetCurMissionReq::default_instance_ = NULL;

GetCurMissionReq* GetCurMissionReq::New() const {
  return new GetCurMissionReq;
}

void GetCurMissionReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCurMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMission.GetCurMissionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMission.GetCurMissionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMission.GetCurMissionReq)
  return false;
#undef DO_
}

void GetCurMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMission.GetCurMissionReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMission.GetCurMissionReq)
}

::google::protobuf::uint8* GetCurMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMission.GetCurMissionReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMission.GetCurMissionReq)
  return target;
}

int GetCurMissionReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCurMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCurMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCurMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCurMissionReq::MergeFrom(const GetCurMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCurMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCurMissionReq::CopyFrom(const GetCurMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurMissionReq::IsInitialized() const {

  return true;
}

void GetCurMissionReq::Swap(GetCurMissionReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCurMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCurMissionReq_descriptor_;
  metadata.reflection = GetCurMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCurMissionResp::kMisssionFieldNumber;
#endif  // !_MSC_VER

GetCurMissionResp::GetCurMissionResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMission.GetCurMissionResp)
}

void GetCurMissionResp::InitAsDefaultInstance() {
}

GetCurMissionResp::GetCurMissionResp(const GetCurMissionResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMission.GetCurMissionResp)
}

void GetCurMissionResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCurMissionResp::~GetCurMissionResp() {
  // @@protoc_insertion_point(destructor:ProtoMission.GetCurMissionResp)
  SharedDtor();
}

void GetCurMissionResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCurMissionResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCurMissionResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCurMissionResp_descriptor_;
}

const GetCurMissionResp& GetCurMissionResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMission_2eproto();
  return *default_instance_;
}

GetCurMissionResp* GetCurMissionResp::default_instance_ = NULL;

GetCurMissionResp* GetCurMissionResp::New() const {
  return new GetCurMissionResp;
}

void GetCurMissionResp::Clear() {
  misssion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCurMissionResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMission.GetCurMissionResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoMission.MissionCPP misssion = 1;
      case 1: {
        if (tag == 10) {
         parse_misssion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_misssion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_misssion;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMission.GetCurMissionResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMission.GetCurMissionResp)
  return false;
#undef DO_
}

void GetCurMissionResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMission.GetCurMissionResp)
  // repeated .ProtoMission.MissionCPP misssion = 1;
  for (int i = 0; i < this->misssion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->misssion(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMission.GetCurMissionResp)
}

::google::protobuf::uint8* GetCurMissionResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMission.GetCurMissionResp)
  // repeated .ProtoMission.MissionCPP misssion = 1;
  for (int i = 0; i < this->misssion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->misssion(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMission.GetCurMissionResp)
  return target;
}

int GetCurMissionResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoMission.MissionCPP misssion = 1;
  total_size += 1 * this->misssion_size();
  for (int i = 0; i < this->misssion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->misssion(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCurMissionResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCurMissionResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCurMissionResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCurMissionResp::MergeFrom(const GetCurMissionResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  misssion_.MergeFrom(from.misssion_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCurMissionResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCurMissionResp::CopyFrom(const GetCurMissionResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurMissionResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->misssion())) return false;
  return true;
}

void GetCurMissionResp::Swap(GetCurMissionResp* other) {
  if (other != this) {
    misssion_.Swap(&other->misssion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCurMissionResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCurMissionResp_descriptor_;
  metadata.reflection = GetCurMissionResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardMissionReq::kUdFieldNumber;
const int RewardMissionReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RewardMissionReq::RewardMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMission.RewardMissionReq)
}

void RewardMissionReq::InitAsDefaultInstance() {
}

RewardMissionReq::RewardMissionReq(const RewardMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMission.RewardMissionReq)
}

void RewardMissionReq::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardMissionReq::~RewardMissionReq() {
  // @@protoc_insertion_point(destructor:ProtoMission.RewardMissionReq)
  SharedDtor();
}

void RewardMissionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardMissionReq_descriptor_;
}

const RewardMissionReq& RewardMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMission_2eproto();
  return *default_instance_;
}

RewardMissionReq* RewardMissionReq::default_instance_ = NULL;

RewardMissionReq* RewardMissionReq::New() const {
  return new RewardMissionReq;
}

void RewardMissionReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RewardMissionReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ud_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMission.RewardMissionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMission.RewardMissionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMission.RewardMissionReq)
  return false;
#undef DO_
}

void RewardMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMission.RewardMissionReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMission.RewardMissionReq)
}

::google::protobuf::uint8* RewardMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMission.RewardMissionReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMission.RewardMissionReq)
  return target;
}

int RewardMissionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardMissionReq::MergeFrom(const RewardMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardMissionReq::CopyFrom(const RewardMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardMissionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RewardMissionReq::Swap(RewardMissionReq* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardMissionReq_descriptor_;
  metadata.reflection = RewardMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardMissionResp::kMissionsFieldNumber;
const int RewardMissionResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

RewardMissionResp::RewardMissionResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMission.RewardMissionResp)
}

void RewardMissionResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

RewardMissionResp::RewardMissionResp(const RewardMissionResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMission.RewardMissionResp)
}

void RewardMissionResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardMissionResp::~RewardMissionResp() {
  // @@protoc_insertion_point(destructor:ProtoMission.RewardMissionResp)
  SharedDtor();
}

void RewardMissionResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void RewardMissionResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardMissionResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardMissionResp_descriptor_;
}

const RewardMissionResp& RewardMissionResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMission_2eproto();
  return *default_instance_;
}

RewardMissionResp* RewardMissionResp::default_instance_ = NULL;

RewardMissionResp* RewardMissionResp::New() const {
  return new RewardMissionResp;
}

void RewardMissionResp::Clear() {
  if (has_commons()) {
    if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  }
  missions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardMissionResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMission.RewardMissionResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoMission.MissionCPP missions = 1;
      case 1: {
        if (tag == 10) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_missions;
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMission.RewardMissionResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMission.RewardMissionResp)
  return false;
#undef DO_
}

void RewardMissionResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMission.RewardMissionResp)
  // repeated .ProtoMission.MissionCPP missions = 1;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->missions(i), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMission.RewardMissionResp)
}

::google::protobuf::uint8* RewardMissionResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMission.RewardMissionResp)
  // repeated .ProtoMission.MissionCPP missions = 1;
  for (int i = 0; i < this->missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->missions(i), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMission.RewardMissionResp)
  return target;
}

int RewardMissionResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  // repeated .ProtoMission.MissionCPP missions = 1;
  total_size += 1 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardMissionResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardMissionResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardMissionResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardMissionResp::MergeFrom(const RewardMissionResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  missions_.MergeFrom(from.missions_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardMissionResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardMissionResp::CopyFrom(const RewardMissionResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardMissionResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->missions())) return false;
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void RewardMissionResp::Swap(RewardMissionResp* other) {
  if (other != this) {
    missions_.Swap(&other->missions_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardMissionResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardMissionResp_descriptor_;
  metadata.reflection = RewardMissionResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushMission::kMissionFieldNumber;
#endif  // !_MSC_VER

PushMission::PushMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoMission.PushMission)
}

void PushMission::InitAsDefaultInstance() {
  mission_ = const_cast< ::ProtoMission::MissionCPP*>(&::ProtoMission::MissionCPP::default_instance());
}

PushMission::PushMission(const PushMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoMission.PushMission)
}

void PushMission::SharedCtor() {
  _cached_size_ = 0;
  mission_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMission::~PushMission() {
  // @@protoc_insertion_point(destructor:ProtoMission.PushMission)
  SharedDtor();
}

void PushMission::SharedDtor() {
  if (this != default_instance_) {
    delete mission_;
  }
}

void PushMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushMission_descriptor_;
}

const PushMission& PushMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoMission_2eproto();
  return *default_instance_;
}

PushMission* PushMission::default_instance_ = NULL;

PushMission* PushMission::New() const {
  return new PushMission;
}

void PushMission::Clear() {
  if (has_mission()) {
    if (mission_ != NULL) mission_->::ProtoMission::MissionCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoMission.PushMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoMission.MissionCPP mission = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoMission.PushMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoMission.PushMission)
  return false;
#undef DO_
}

void PushMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoMission.PushMission)
  // required .ProtoMission.MissionCPP mission = 1;
  if (has_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoMission.PushMission)
}

::google::protobuf::uint8* PushMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoMission.PushMission)
  // required .ProtoMission.MissionCPP mission = 1;
  if (has_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mission(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoMission.PushMission)
  return target;
}

int PushMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoMission.MissionCPP mission = 1;
    if (has_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushMission::MergeFrom(const PushMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission()) {
      mutable_mission()->::ProtoMission::MissionCPP::MergeFrom(from.mission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushMission::CopyFrom(const PushMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_mission()) {
    if (!this->mission().IsInitialized()) return false;
  }
  return true;
}

void PushMission::Swap(PushMission* other) {
  if (other != this) {
    std::swap(mission_, other->mission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushMission_descriptor_;
  metadata.reflection = PushMission_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMission

// @@protoc_insertion_point(global_scope)
