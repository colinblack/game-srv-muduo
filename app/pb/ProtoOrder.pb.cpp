// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoOrder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoOrder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoOrder {

namespace {

const ::google::protobuf::Descriptor* NeedCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NeedCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* TruckCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TruckCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderQueryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderQueryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TruckQueryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TruckQueryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TruckResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TruckResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartOrderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartOrderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartOrderResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartOrderResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteOrderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteOrderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteOrderResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteOrderResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardOrderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardOrderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardOrderResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardOrderResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderADBonusCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderADBonusCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderDiamondBonusCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderDiamondBonusCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderVIPBonusCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderVIPBonusCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOrderBonusInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOrderBonusInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOrderBonusInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOrderBonusInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewAdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewAdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewAdResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewAdResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyOrderBonusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyOrderBonusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyOrderBonusResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyOrderBonusResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoOrder_2eproto() {
  protobuf_AddDesc_ProtoOrder_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoOrder.proto");
  GOOGLE_CHECK(file != NULL);
  NeedCost_descriptor_ = file->message_type(0);
  static const int NeedCost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeedCost, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeedCost, count_),
  };
  NeedCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NeedCost_descriptor_,
      NeedCost::default_instance_,
      NeedCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeedCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeedCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NeedCost));
  OrderCPP_descriptor_ = file->message_type(1);
  static const int OrderCPP_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, end_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, needcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, discardcdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, storageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, orderid_),
  };
  OrderCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderCPP_descriptor_,
      OrderCPP::default_instance_,
      OrderCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderCPP));
  TruckCPP_descriptor_ = file->message_type(2);
  static const int TruckCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckCPP, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckCPP, end_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckCPP, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckCPP, exp_),
  };
  TruckCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TruckCPP_descriptor_,
      TruckCPP::default_instance_,
      TruckCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TruckCPP));
  OrderQueryReq_descriptor_ = file->message_type(3);
  static const int OrderQueryReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderQueryReq, uid_),
  };
  OrderQueryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderQueryReq_descriptor_,
      OrderQueryReq::default_instance_,
      OrderQueryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderQueryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderQueryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderQueryReq));
  OrderResp_descriptor_ = file->message_type(4);
  static const int OrderResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderResp, order_),
  };
  OrderResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderResp_descriptor_,
      OrderResp::default_instance_,
      OrderResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderResp));
  TruckQueryReq_descriptor_ = file->message_type(5);
  static const int TruckQueryReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckQueryReq, uid_),
  };
  TruckQueryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TruckQueryReq_descriptor_,
      TruckQueryReq::default_instance_,
      TruckQueryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckQueryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckQueryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TruckQueryReq));
  TruckResp_descriptor_ = file->message_type(6);
  static const int TruckResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckResp, truck_),
  };
  TruckResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TruckResp_descriptor_,
      TruckResp::default_instance_,
      TruckResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TruckResp));
  StartOrderReq_descriptor_ = file->message_type(7);
  static const int StartOrderReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOrderReq, slot_),
  };
  StartOrderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartOrderReq_descriptor_,
      StartOrderReq::default_instance_,
      StartOrderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOrderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOrderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartOrderReq));
  StartOrderResp_descriptor_ = file->message_type(8);
  static const int StartOrderResp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOrderResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOrderResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOrderResp, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOrderResp, truck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOrderResp, adbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOrderResp, diamondbounus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOrderResp, vipbonus_),
  };
  StartOrderResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartOrderResp_descriptor_,
      StartOrderResp::default_instance_,
      StartOrderResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOrderResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOrderResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartOrderResp));
  DeleteOrderReq_descriptor_ = file->message_type(9);
  static const int DeleteOrderReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteOrderReq, slot_),
  };
  DeleteOrderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteOrderReq_descriptor_,
      DeleteOrderReq::default_instance_,
      DeleteOrderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteOrderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteOrderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteOrderReq));
  DeleteOrderResp_descriptor_ = file->message_type(10);
  static const int DeleteOrderResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteOrderResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteOrderResp, order_),
  };
  DeleteOrderResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteOrderResp_descriptor_,
      DeleteOrderResp::default_instance_,
      DeleteOrderResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteOrderResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteOrderResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteOrderResp));
  RewardOrderReq_descriptor_ = file->message_type(11);
  static const int RewardOrderReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardOrderReq, uid_),
  };
  RewardOrderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardOrderReq_descriptor_,
      RewardOrderReq::default_instance_,
      RewardOrderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardOrderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardOrderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardOrderReq));
  RewardOrderResp_descriptor_ = file->message_type(12);
  static const int RewardOrderResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardOrderResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardOrderResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardOrderResp, truck_),
  };
  RewardOrderResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardOrderResp_descriptor_,
      RewardOrderResp::default_instance_,
      RewardOrderResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardOrderResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardOrderResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardOrderResp));
  OrderADBonusCPP_descriptor_ = file->message_type(13);
  static const int OrderADBonusCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderADBonusCPP, viewedadcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderADBonusCPP, remianadbonuscnt_),
  };
  OrderADBonusCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderADBonusCPP_descriptor_,
      OrderADBonusCPP::default_instance_,
      OrderADBonusCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderADBonusCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderADBonusCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderADBonusCPP));
  OrderDiamondBonusCPP_descriptor_ = file->message_type(14);
  static const int OrderDiamondBonusCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDiamondBonusCPP, remaindiamondbonuscnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDiamondBonusCPP, diamondbonusendts_),
  };
  OrderDiamondBonusCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderDiamondBonusCPP_descriptor_,
      OrderDiamondBonusCPP::default_instance_,
      OrderDiamondBonusCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDiamondBonusCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderDiamondBonusCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderDiamondBonusCPP));
  OrderVIPBonusCPP_descriptor_ = file->message_type(15);
  static const int OrderVIPBonusCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderVIPBonusCPP, remainvipbonuscnt_),
  };
  OrderVIPBonusCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderVIPBonusCPP_descriptor_,
      OrderVIPBonusCPP::default_instance_,
      OrderVIPBonusCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderVIPBonusCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderVIPBonusCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderVIPBonusCPP));
  GetOrderBonusInfoReq_descriptor_ = file->message_type(16);
  static const int GetOrderBonusInfoReq_offsets_[1] = {
  };
  GetOrderBonusInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOrderBonusInfoReq_descriptor_,
      GetOrderBonusInfoReq::default_instance_,
      GetOrderBonusInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderBonusInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderBonusInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOrderBonusInfoReq));
  GetOrderBonusInfoResp_descriptor_ = file->message_type(17);
  static const int GetOrderBonusInfoResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderBonusInfoResp, adbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderBonusInfoResp, diamondbounus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderBonusInfoResp, vipbonus_),
  };
  GetOrderBonusInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOrderBonusInfoResp_descriptor_,
      GetOrderBonusInfoResp::default_instance_,
      GetOrderBonusInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderBonusInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderBonusInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOrderBonusInfoResp));
  ViewAdReq_descriptor_ = file->message_type(18);
  static const int ViewAdReq_offsets_[1] = {
  };
  ViewAdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViewAdReq_descriptor_,
      ViewAdReq::default_instance_,
      ViewAdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewAdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewAdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViewAdReq));
  ViewAdResp_descriptor_ = file->message_type(19);
  static const int ViewAdResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewAdResp, adbonus_),
  };
  ViewAdResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViewAdResp_descriptor_,
      ViewAdResp::default_instance_,
      ViewAdResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewAdResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewAdResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViewAdResp));
  BuyOrderBonusReq_descriptor_ = file->message_type(20);
  static const int BuyOrderBonusReq_offsets_[1] = {
  };
  BuyOrderBonusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyOrderBonusReq_descriptor_,
      BuyOrderBonusReq::default_instance_,
      BuyOrderBonusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyOrderBonusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyOrderBonusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyOrderBonusReq));
  BuyOrderBonusResp_descriptor_ = file->message_type(21);
  static const int BuyOrderBonusResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyOrderBonusResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyOrderBonusResp, diamondbounus_),
  };
  BuyOrderBonusResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyOrderBonusResp_descriptor_,
      BuyOrderBonusResp::default_instance_,
      BuyOrderBonusResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyOrderBonusResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyOrderBonusResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyOrderBonusResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoOrder_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NeedCost_descriptor_, &NeedCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderCPP_descriptor_, &OrderCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TruckCPP_descriptor_, &TruckCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderQueryReq_descriptor_, &OrderQueryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderResp_descriptor_, &OrderResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TruckQueryReq_descriptor_, &TruckQueryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TruckResp_descriptor_, &TruckResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartOrderReq_descriptor_, &StartOrderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartOrderResp_descriptor_, &StartOrderResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteOrderReq_descriptor_, &DeleteOrderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteOrderResp_descriptor_, &DeleteOrderResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardOrderReq_descriptor_, &RewardOrderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardOrderResp_descriptor_, &RewardOrderResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderADBonusCPP_descriptor_, &OrderADBonusCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderDiamondBonusCPP_descriptor_, &OrderDiamondBonusCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderVIPBonusCPP_descriptor_, &OrderVIPBonusCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOrderBonusInfoReq_descriptor_, &GetOrderBonusInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOrderBonusInfoResp_descriptor_, &GetOrderBonusInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViewAdReq_descriptor_, &ViewAdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViewAdResp_descriptor_, &ViewAdResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyOrderBonusReq_descriptor_, &BuyOrderBonusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyOrderBonusResp_descriptor_, &BuyOrderBonusResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoOrder_2eproto() {
  delete NeedCost::default_instance_;
  delete NeedCost_reflection_;
  delete OrderCPP::default_instance_;
  delete OrderCPP_reflection_;
  delete TruckCPP::default_instance_;
  delete TruckCPP_reflection_;
  delete OrderQueryReq::default_instance_;
  delete OrderQueryReq_reflection_;
  delete OrderResp::default_instance_;
  delete OrderResp_reflection_;
  delete TruckQueryReq::default_instance_;
  delete TruckQueryReq_reflection_;
  delete TruckResp::default_instance_;
  delete TruckResp_reflection_;
  delete StartOrderReq::default_instance_;
  delete StartOrderReq_reflection_;
  delete StartOrderResp::default_instance_;
  delete StartOrderResp_reflection_;
  delete DeleteOrderReq::default_instance_;
  delete DeleteOrderReq_reflection_;
  delete DeleteOrderResp::default_instance_;
  delete DeleteOrderResp_reflection_;
  delete RewardOrderReq::default_instance_;
  delete RewardOrderReq_reflection_;
  delete RewardOrderResp::default_instance_;
  delete RewardOrderResp_reflection_;
  delete OrderADBonusCPP::default_instance_;
  delete OrderADBonusCPP_reflection_;
  delete OrderDiamondBonusCPP::default_instance_;
  delete OrderDiamondBonusCPP_reflection_;
  delete OrderVIPBonusCPP::default_instance_;
  delete OrderVIPBonusCPP_reflection_;
  delete GetOrderBonusInfoReq::default_instance_;
  delete GetOrderBonusInfoReq_reflection_;
  delete GetOrderBonusInfoResp::default_instance_;
  delete GetOrderBonusInfoResp_reflection_;
  delete ViewAdReq::default_instance_;
  delete ViewAdReq_reflection_;
  delete ViewAdResp::default_instance_;
  delete ViewAdResp_reflection_;
  delete BuyOrderBonusReq::default_instance_;
  delete BuyOrderBonusReq_reflection_;
  delete BuyOrderBonusResp::default_instance_;
  delete BuyOrderBonusResp_reflection_;
}

void protobuf_AddDesc_ProtoOrder_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ProtoOrder.proto\022\nProtoOrder\032\020DataComm"
    "on.proto\"%\n\010NeedCost\022\n\n\002id\030\001 \002(\r\022\r\n\005coun"
    "t\030\002 \002(\r\"\267\001\n\010OrderCPP\022\014\n\004slot\030\001 \002(\r\022\014\n\004co"
    "in\030\002 \002(\r\022\013\n\003exp\030\003 \002(\r\022\016\n\006end_ts\030\004 \002(\r\022&\n"
    "\010needcost\030\005 \003(\0132\024.ProtoOrder.NeedCost\022\025\n"
    "\rdiscardcdtime\030\006 \002(\r\022\021\n\tstorageid\030\007 \002(\r\022"
    "\017\n\007levelid\030\010 \002(\r\022\017\n\007orderid\030\t \002(\014\"D\n\010Tru"
    "ckCPP\022\r\n\005state\030\001 \002(\r\022\016\n\006end_ts\030\002 \002(\r\022\014\n\004"
    "coin\030\003 \002(\r\022\013\n\003exp\030\004 \002(\r\"\034\n\rOrderQueryReq"
    "\022\013\n\003uid\030\001 \002(\r\"0\n\tOrderResp\022#\n\005order\030\001 \003("
    "\0132\024.ProtoOrder.OrderCPP\"\034\n\rTruckQueryReq"
    "\022\013\n\003uid\030\001 \002(\r\"0\n\tTruckResp\022#\n\005truck\030\001 \002("
    "\0132\024.ProtoOrder.TruckCPP\"\035\n\rStartOrderReq"
    "\022\014\n\004slot\030\001 \002(\r\"\256\002\n\016StartOrderResp\022\016\n\006res"
    "ult\030\001 \002(\010\022+\n\007commons\030\002 \002(\0132\032.DataCommon."
    "CommonItemsCPP\022#\n\005order\030\003 \002(\0132\024.ProtoOrd"
    "er.OrderCPP\022#\n\005truck\030\004 \002(\0132\024.ProtoOrder."
    "TruckCPP\022,\n\007adBonus\030\005 \001(\0132\033.ProtoOrder.O"
    "rderADBonusCPP\0227\n\rdiamondBounus\030\006 \001(\0132 ."
    "ProtoOrder.OrderDiamondBonusCPP\022.\n\010vipBo"
    "nus\030\007 \001(\0132\034.ProtoOrder.OrderVIPBonusCPP\""
    "\036\n\016DeleteOrderReq\022\014\n\004slot\030\001 \002(\r\"F\n\017Delet"
    "eOrderResp\022\016\n\006result\030\001 \002(\010\022#\n\005order\030\002 \002("
    "\0132\024.ProtoOrder.OrderCPP\"\035\n\016RewardOrderRe"
    "q\022\013\n\003uid\030\001 \002(\r\"s\n\017RewardOrderResp\022\016\n\006res"
    "ult\030\001 \002(\010\022+\n\007commons\030\002 \002(\0132\032.DataCommon."
    "CommonItemsCPP\022#\n\005truck\030\003 \002(\0132\024.ProtoOrd"
    "er.TruckCPP\"@\n\017OrderADBonusCPP\022\023\n\013viewed"
    "AdCnt\030\001 \002(\r\022\030\n\020remianAdBonusCnt\030\002 \002(\r\"P\n"
    "\024OrderDiamondBonusCPP\022\035\n\025remainDiamondBo"
    "nusCnt\030\001 \002(\r\022\031\n\021diamondBonusEndTs\030\002 \002(\r\""
    "-\n\020OrderVIPBonusCPP\022\031\n\021remainVipBonusCnt"
    "\030\001 \002(\r\"\026\n\024GetOrderBonusInfoReq\"\256\001\n\025GetOr"
    "derBonusInfoResp\022,\n\007adBonus\030\001 \002(\0132\033.Prot"
    "oOrder.OrderADBonusCPP\0227\n\rdiamondBounus\030"
    "\002 \002(\0132 .ProtoOrder.OrderDiamondBonusCPP\022"
    ".\n\010vipBonus\030\003 \001(\0132\034.ProtoOrder.OrderVIPB"
    "onusCPP\"\013\n\tViewAdReq\":\n\nViewAdResp\022,\n\007ad"
    "Bonus\030\001 \002(\0132\033.ProtoOrder.OrderADBonusCPP"
    "\"\022\n\020BuyOrderBonusReq\"y\n\021BuyOrderBonusRes"
    "p\022+\n\007commons\030\001 \002(\0132\032.DataCommon.CommonIt"
    "emsCPP\0227\n\rdiamondBounus\030\002 \002(\0132 .ProtoOrd"
    "er.OrderDiamondBonusCPP", 1703);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoOrder.proto", &protobuf_RegisterTypes);
  NeedCost::default_instance_ = new NeedCost();
  OrderCPP::default_instance_ = new OrderCPP();
  TruckCPP::default_instance_ = new TruckCPP();
  OrderQueryReq::default_instance_ = new OrderQueryReq();
  OrderResp::default_instance_ = new OrderResp();
  TruckQueryReq::default_instance_ = new TruckQueryReq();
  TruckResp::default_instance_ = new TruckResp();
  StartOrderReq::default_instance_ = new StartOrderReq();
  StartOrderResp::default_instance_ = new StartOrderResp();
  DeleteOrderReq::default_instance_ = new DeleteOrderReq();
  DeleteOrderResp::default_instance_ = new DeleteOrderResp();
  RewardOrderReq::default_instance_ = new RewardOrderReq();
  RewardOrderResp::default_instance_ = new RewardOrderResp();
  OrderADBonusCPP::default_instance_ = new OrderADBonusCPP();
  OrderDiamondBonusCPP::default_instance_ = new OrderDiamondBonusCPP();
  OrderVIPBonusCPP::default_instance_ = new OrderVIPBonusCPP();
  GetOrderBonusInfoReq::default_instance_ = new GetOrderBonusInfoReq();
  GetOrderBonusInfoResp::default_instance_ = new GetOrderBonusInfoResp();
  ViewAdReq::default_instance_ = new ViewAdReq();
  ViewAdResp::default_instance_ = new ViewAdResp();
  BuyOrderBonusReq::default_instance_ = new BuyOrderBonusReq();
  BuyOrderBonusResp::default_instance_ = new BuyOrderBonusResp();
  NeedCost::default_instance_->InitAsDefaultInstance();
  OrderCPP::default_instance_->InitAsDefaultInstance();
  TruckCPP::default_instance_->InitAsDefaultInstance();
  OrderQueryReq::default_instance_->InitAsDefaultInstance();
  OrderResp::default_instance_->InitAsDefaultInstance();
  TruckQueryReq::default_instance_->InitAsDefaultInstance();
  TruckResp::default_instance_->InitAsDefaultInstance();
  StartOrderReq::default_instance_->InitAsDefaultInstance();
  StartOrderResp::default_instance_->InitAsDefaultInstance();
  DeleteOrderReq::default_instance_->InitAsDefaultInstance();
  DeleteOrderResp::default_instance_->InitAsDefaultInstance();
  RewardOrderReq::default_instance_->InitAsDefaultInstance();
  RewardOrderResp::default_instance_->InitAsDefaultInstance();
  OrderADBonusCPP::default_instance_->InitAsDefaultInstance();
  OrderDiamondBonusCPP::default_instance_->InitAsDefaultInstance();
  OrderVIPBonusCPP::default_instance_->InitAsDefaultInstance();
  GetOrderBonusInfoReq::default_instance_->InitAsDefaultInstance();
  GetOrderBonusInfoResp::default_instance_->InitAsDefaultInstance();
  ViewAdReq::default_instance_->InitAsDefaultInstance();
  ViewAdResp::default_instance_->InitAsDefaultInstance();
  BuyOrderBonusReq::default_instance_->InitAsDefaultInstance();
  BuyOrderBonusResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoOrder_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoOrder_2eproto {
  StaticDescriptorInitializer_ProtoOrder_2eproto() {
    protobuf_AddDesc_ProtoOrder_2eproto();
  }
} static_descriptor_initializer_ProtoOrder_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NeedCost::kIdFieldNumber;
const int NeedCost::kCountFieldNumber;
#endif  // !_MSC_VER

NeedCost::NeedCost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.NeedCost)
}

void NeedCost::InitAsDefaultInstance() {
}

NeedCost::NeedCost(const NeedCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.NeedCost)
}

void NeedCost::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NeedCost::~NeedCost() {
  // @@protoc_insertion_point(destructor:ProtoOrder.NeedCost)
  SharedDtor();
}

void NeedCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NeedCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeedCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NeedCost_descriptor_;
}

const NeedCost& NeedCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

NeedCost* NeedCost::default_instance_ = NULL;

NeedCost* NeedCost::New() const {
  return new NeedCost;
}

void NeedCost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NeedCost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NeedCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.NeedCost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.NeedCost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.NeedCost)
  return false;
#undef DO_
}

void NeedCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.NeedCost)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.NeedCost)
}

::google::protobuf::uint8* NeedCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.NeedCost)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.NeedCost)
  return target;
}

int NeedCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeedCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NeedCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NeedCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NeedCost::MergeFrom(const NeedCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NeedCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeedCost::CopyFrom(const NeedCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeedCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NeedCost::Swap(NeedCost* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NeedCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NeedCost_descriptor_;
  metadata.reflection = NeedCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderCPP::kSlotFieldNumber;
const int OrderCPP::kCoinFieldNumber;
const int OrderCPP::kExpFieldNumber;
const int OrderCPP::kEndTsFieldNumber;
const int OrderCPP::kNeedcostFieldNumber;
const int OrderCPP::kDiscardcdtimeFieldNumber;
const int OrderCPP::kStorageidFieldNumber;
const int OrderCPP::kLevelidFieldNumber;
const int OrderCPP::kOrderidFieldNumber;
#endif  // !_MSC_VER

OrderCPP::OrderCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.OrderCPP)
}

void OrderCPP::InitAsDefaultInstance() {
}

OrderCPP::OrderCPP(const OrderCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.OrderCPP)
}

void OrderCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  slot_ = 0u;
  coin_ = 0u;
  exp_ = 0u;
  end_ts_ = 0u;
  discardcdtime_ = 0u;
  storageid_ = 0u;
  levelid_ = 0u;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderCPP::~OrderCPP() {
  // @@protoc_insertion_point(destructor:ProtoOrder.OrderCPP)
  SharedDtor();
}

void OrderCPP::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orderid_;
  }
  if (this != default_instance_) {
  }
}

void OrderCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderCPP_descriptor_;
}

const OrderCPP& OrderCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

OrderCPP* OrderCPP::default_instance_ = NULL;

OrderCPP* OrderCPP::New() const {
  return new OrderCPP;
}

void OrderCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(slot_, end_ts_);
    ZR_(discardcdtime_, storageid_);
    levelid_ = 0u;
  }
  if (has_orderid()) {
    if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      orderid_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  needcost_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.OrderCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // required uint32 coin = 2;
      case 2: {
        if (tag == 16) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // required uint32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_ts;
        break;
      }

      // required uint32 end_ts = 4;
      case 4: {
        if (tag == 32) {
         parse_end_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_ts_)));
          set_has_end_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_needcost;
        break;
      }

      // repeated .ProtoOrder.NeedCost needcost = 5;
      case 5: {
        if (tag == 42) {
         parse_needcost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_needcost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_needcost;
        if (input->ExpectTag(48)) goto parse_discardcdtime;
        break;
      }

      // required uint32 discardcdtime = 6;
      case 6: {
        if (tag == 48) {
         parse_discardcdtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discardcdtime_)));
          set_has_discardcdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_storageid;
        break;
      }

      // required uint32 storageid = 7;
      case 7: {
        if (tag == 56) {
         parse_storageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storageid_)));
          set_has_storageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_levelid;
        break;
      }

      // required uint32 levelid = 8;
      case 8: {
        if (tag == 64) {
         parse_levelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_orderid;
        break;
      }

      // required bytes orderid = 9;
      case 9: {
        if (tag == 74) {
         parse_orderid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_orderid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.OrderCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.OrderCPP)
  return false;
#undef DO_
}

void OrderCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.OrderCPP)
  // required uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin(), output);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // required uint32 end_ts = 4;
  if (has_end_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_ts(), output);
  }

  // repeated .ProtoOrder.NeedCost needcost = 5;
  for (int i = 0; i < this->needcost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->needcost(i), output);
  }

  // required uint32 discardcdtime = 6;
  if (has_discardcdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->discardcdtime(), output);
  }

  // required uint32 storageid = 7;
  if (has_storageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->storageid(), output);
  }

  // required uint32 levelid = 8;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->levelid(), output);
  }

  // required bytes orderid = 9;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->orderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.OrderCPP)
}

::google::protobuf::uint8* OrderCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.OrderCPP)
  // required uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin(), target);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // required uint32 end_ts = 4;
  if (has_end_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_ts(), target);
  }

  // repeated .ProtoOrder.NeedCost needcost = 5;
  for (int i = 0; i < this->needcost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->needcost(i), target);
  }

  // required uint32 discardcdtime = 6;
  if (has_discardcdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->discardcdtime(), target);
  }

  // required uint32 storageid = 7;
  if (has_storageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->storageid(), target);
  }

  // required uint32 levelid = 8;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->levelid(), target);
  }

  // required bytes orderid = 9;
  if (has_orderid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->orderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.OrderCPP)
  return target;
}

int OrderCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // required uint32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 end_ts = 4;
    if (has_end_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_ts());
    }

    // required uint32 discardcdtime = 6;
    if (has_discardcdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discardcdtime());
    }

    // required uint32 storageid = 7;
    if (has_storageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storageid());
    }

    // required uint32 levelid = 8;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes orderid = 9;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->orderid());
    }

  }
  // repeated .ProtoOrder.NeedCost needcost = 5;
  total_size += 1 * this->needcost_size();
  for (int i = 0; i < this->needcost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->needcost(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderCPP::MergeFrom(const OrderCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  needcost_.MergeFrom(from.needcost_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_end_ts()) {
      set_end_ts(from.end_ts());
    }
    if (from.has_discardcdtime()) {
      set_discardcdtime(from.discardcdtime());
    }
    if (from.has_storageid()) {
      set_storageid(from.storageid());
    }
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCPP::CopyFrom(const OrderCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ef) != 0x000001ef) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->needcost())) return false;
  return true;
}

void OrderCPP::Swap(OrderCPP* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(end_ts_, other->end_ts_);
    needcost_.Swap(&other->needcost_);
    std::swap(discardcdtime_, other->discardcdtime_);
    std::swap(storageid_, other->storageid_);
    std::swap(levelid_, other->levelid_);
    std::swap(orderid_, other->orderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderCPP_descriptor_;
  metadata.reflection = OrderCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TruckCPP::kStateFieldNumber;
const int TruckCPP::kEndTsFieldNumber;
const int TruckCPP::kCoinFieldNumber;
const int TruckCPP::kExpFieldNumber;
#endif  // !_MSC_VER

TruckCPP::TruckCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.TruckCPP)
}

void TruckCPP::InitAsDefaultInstance() {
}

TruckCPP::TruckCPP(const TruckCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.TruckCPP)
}

void TruckCPP::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  end_ts_ = 0u;
  coin_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TruckCPP::~TruckCPP() {
  // @@protoc_insertion_point(destructor:ProtoOrder.TruckCPP)
  SharedDtor();
}

void TruckCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TruckCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruckCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruckCPP_descriptor_;
}

const TruckCPP& TruckCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

TruckCPP* TruckCPP::default_instance_ = NULL;

TruckCPP* TruckCPP::New() const {
  return new TruckCPP;
}

void TruckCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TruckCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, exp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TruckCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.TruckCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_ts;
        break;
      }

      // required uint32 end_ts = 2;
      case 2: {
        if (tag == 16) {
         parse_end_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_ts_)));
          set_has_end_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // required uint32 coin = 3;
      case 3: {
        if (tag == 24) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint32 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.TruckCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.TruckCPP)
  return false;
#undef DO_
}

void TruckCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.TruckCPP)
  // required uint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  // required uint32 end_ts = 2;
  if (has_end_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end_ts(), output);
  }

  // required uint32 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coin(), output);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.TruckCPP)
}

::google::protobuf::uint8* TruckCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.TruckCPP)
  // required uint32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  // required uint32 end_ts = 2;
  if (has_end_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end_ts(), target);
  }

  // required uint32 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coin(), target);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.TruckCPP)
  return target;
}

int TruckCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required uint32 end_ts = 2;
    if (has_end_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_ts());
    }

    // required uint32 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruckCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TruckCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TruckCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TruckCPP::MergeFrom(const TruckCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_end_ts()) {
      set_end_ts(from.end_ts());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TruckCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruckCPP::CopyFrom(const TruckCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruckCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TruckCPP::Swap(TruckCPP* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(end_ts_, other->end_ts_);
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TruckCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TruckCPP_descriptor_;
  metadata.reflection = TruckCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderQueryReq::kUidFieldNumber;
#endif  // !_MSC_VER

OrderQueryReq::OrderQueryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.OrderQueryReq)
}

void OrderQueryReq::InitAsDefaultInstance() {
}

OrderQueryReq::OrderQueryReq(const OrderQueryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.OrderQueryReq)
}

void OrderQueryReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderQueryReq::~OrderQueryReq() {
  // @@protoc_insertion_point(destructor:ProtoOrder.OrderQueryReq)
  SharedDtor();
}

void OrderQueryReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderQueryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderQueryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderQueryReq_descriptor_;
}

const OrderQueryReq& OrderQueryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

OrderQueryReq* OrderQueryReq::default_instance_ = NULL;

OrderQueryReq* OrderQueryReq::New() const {
  return new OrderQueryReq;
}

void OrderQueryReq::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderQueryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.OrderQueryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.OrderQueryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.OrderQueryReq)
  return false;
#undef DO_
}

void OrderQueryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.OrderQueryReq)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.OrderQueryReq)
}

::google::protobuf::uint8* OrderQueryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.OrderQueryReq)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.OrderQueryReq)
  return target;
}

int OrderQueryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderQueryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderQueryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderQueryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderQueryReq::MergeFrom(const OrderQueryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderQueryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderQueryReq::CopyFrom(const OrderQueryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderQueryReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OrderQueryReq::Swap(OrderQueryReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderQueryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderQueryReq_descriptor_;
  metadata.reflection = OrderQueryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderResp::kOrderFieldNumber;
#endif  // !_MSC_VER

OrderResp::OrderResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.OrderResp)
}

void OrderResp::InitAsDefaultInstance() {
}

OrderResp::OrderResp(const OrderResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.OrderResp)
}

void OrderResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderResp::~OrderResp() {
  // @@protoc_insertion_point(destructor:ProtoOrder.OrderResp)
  SharedDtor();
}

void OrderResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderResp_descriptor_;
}

const OrderResp& OrderResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

OrderResp* OrderResp::default_instance_ = NULL;

OrderResp* OrderResp::New() const {
  return new OrderResp;
}

void OrderResp::Clear() {
  order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.OrderResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoOrder.OrderCPP order = 1;
      case 1: {
        if (tag == 10) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_order;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.OrderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.OrderResp)
  return false;
#undef DO_
}

void OrderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.OrderResp)
  // repeated .ProtoOrder.OrderCPP order = 1;
  for (int i = 0; i < this->order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->order(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.OrderResp)
}

::google::protobuf::uint8* OrderResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.OrderResp)
  // repeated .ProtoOrder.OrderCPP order = 1;
  for (int i = 0; i < this->order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->order(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.OrderResp)
  return target;
}

int OrderResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoOrder.OrderCPP order = 1;
  total_size += 1 * this->order_size();
  for (int i = 0; i < this->order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->order(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderResp::MergeFrom(const OrderResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  order_.MergeFrom(from.order_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderResp::CopyFrom(const OrderResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->order())) return false;
  return true;
}

void OrderResp::Swap(OrderResp* other) {
  if (other != this) {
    order_.Swap(&other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderResp_descriptor_;
  metadata.reflection = OrderResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TruckQueryReq::kUidFieldNumber;
#endif  // !_MSC_VER

TruckQueryReq::TruckQueryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.TruckQueryReq)
}

void TruckQueryReq::InitAsDefaultInstance() {
}

TruckQueryReq::TruckQueryReq(const TruckQueryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.TruckQueryReq)
}

void TruckQueryReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TruckQueryReq::~TruckQueryReq() {
  // @@protoc_insertion_point(destructor:ProtoOrder.TruckQueryReq)
  SharedDtor();
}

void TruckQueryReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TruckQueryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruckQueryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruckQueryReq_descriptor_;
}

const TruckQueryReq& TruckQueryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

TruckQueryReq* TruckQueryReq::default_instance_ = NULL;

TruckQueryReq* TruckQueryReq::New() const {
  return new TruckQueryReq;
}

void TruckQueryReq::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TruckQueryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.TruckQueryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.TruckQueryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.TruckQueryReq)
  return false;
#undef DO_
}

void TruckQueryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.TruckQueryReq)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.TruckQueryReq)
}

::google::protobuf::uint8* TruckQueryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.TruckQueryReq)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.TruckQueryReq)
  return target;
}

int TruckQueryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruckQueryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TruckQueryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TruckQueryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TruckQueryReq::MergeFrom(const TruckQueryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TruckQueryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruckQueryReq::CopyFrom(const TruckQueryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruckQueryReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TruckQueryReq::Swap(TruckQueryReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TruckQueryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TruckQueryReq_descriptor_;
  metadata.reflection = TruckQueryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TruckResp::kTruckFieldNumber;
#endif  // !_MSC_VER

TruckResp::TruckResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.TruckResp)
}

void TruckResp::InitAsDefaultInstance() {
  truck_ = const_cast< ::ProtoOrder::TruckCPP*>(&::ProtoOrder::TruckCPP::default_instance());
}

TruckResp::TruckResp(const TruckResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.TruckResp)
}

void TruckResp::SharedCtor() {
  _cached_size_ = 0;
  truck_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TruckResp::~TruckResp() {
  // @@protoc_insertion_point(destructor:ProtoOrder.TruckResp)
  SharedDtor();
}

void TruckResp::SharedDtor() {
  if (this != default_instance_) {
    delete truck_;
  }
}

void TruckResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruckResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruckResp_descriptor_;
}

const TruckResp& TruckResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

TruckResp* TruckResp::default_instance_ = NULL;

TruckResp* TruckResp::New() const {
  return new TruckResp;
}

void TruckResp::Clear() {
  if (has_truck()) {
    if (truck_ != NULL) truck_->::ProtoOrder::TruckCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TruckResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.TruckResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOrder.TruckCPP truck = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truck()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.TruckResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.TruckResp)
  return false;
#undef DO_
}

void TruckResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.TruckResp)
  // required .ProtoOrder.TruckCPP truck = 1;
  if (has_truck()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->truck(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.TruckResp)
}

::google::protobuf::uint8* TruckResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.TruckResp)
  // required .ProtoOrder.TruckCPP truck = 1;
  if (has_truck()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->truck(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.TruckResp)
  return target;
}

int TruckResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOrder.TruckCPP truck = 1;
    if (has_truck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->truck());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruckResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TruckResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TruckResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TruckResp::MergeFrom(const TruckResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_truck()) {
      mutable_truck()->::ProtoOrder::TruckCPP::MergeFrom(from.truck());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TruckResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruckResp::CopyFrom(const TruckResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruckResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_truck()) {
    if (!this->truck().IsInitialized()) return false;
  }
  return true;
}

void TruckResp::Swap(TruckResp* other) {
  if (other != this) {
    std::swap(truck_, other->truck_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TruckResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TruckResp_descriptor_;
  metadata.reflection = TruckResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartOrderReq::kSlotFieldNumber;
#endif  // !_MSC_VER

StartOrderReq::StartOrderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.StartOrderReq)
}

void StartOrderReq::InitAsDefaultInstance() {
}

StartOrderReq::StartOrderReq(const StartOrderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.StartOrderReq)
}

void StartOrderReq::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartOrderReq::~StartOrderReq() {
  // @@protoc_insertion_point(destructor:ProtoOrder.StartOrderReq)
  SharedDtor();
}

void StartOrderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartOrderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartOrderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartOrderReq_descriptor_;
}

const StartOrderReq& StartOrderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

StartOrderReq* StartOrderReq::default_instance_ = NULL;

StartOrderReq* StartOrderReq::New() const {
  return new StartOrderReq;
}

void StartOrderReq::Clear() {
  slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartOrderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.StartOrderReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.StartOrderReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.StartOrderReq)
  return false;
#undef DO_
}

void StartOrderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.StartOrderReq)
  // required uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.StartOrderReq)
}

::google::protobuf::uint8* StartOrderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.StartOrderReq)
  // required uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.StartOrderReq)
  return target;
}

int StartOrderReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartOrderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartOrderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartOrderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartOrderReq::MergeFrom(const StartOrderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartOrderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartOrderReq::CopyFrom(const StartOrderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartOrderReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StartOrderReq::Swap(StartOrderReq* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartOrderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartOrderReq_descriptor_;
  metadata.reflection = StartOrderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartOrderResp::kResultFieldNumber;
const int StartOrderResp::kCommonsFieldNumber;
const int StartOrderResp::kOrderFieldNumber;
const int StartOrderResp::kTruckFieldNumber;
const int StartOrderResp::kAdBonusFieldNumber;
const int StartOrderResp::kDiamondBounusFieldNumber;
const int StartOrderResp::kVipBonusFieldNumber;
#endif  // !_MSC_VER

StartOrderResp::StartOrderResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.StartOrderResp)
}

void StartOrderResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  order_ = const_cast< ::ProtoOrder::OrderCPP*>(&::ProtoOrder::OrderCPP::default_instance());
  truck_ = const_cast< ::ProtoOrder::TruckCPP*>(&::ProtoOrder::TruckCPP::default_instance());
  adbonus_ = const_cast< ::ProtoOrder::OrderADBonusCPP*>(&::ProtoOrder::OrderADBonusCPP::default_instance());
  diamondbounus_ = const_cast< ::ProtoOrder::OrderDiamondBonusCPP*>(&::ProtoOrder::OrderDiamondBonusCPP::default_instance());
  vipbonus_ = const_cast< ::ProtoOrder::OrderVIPBonusCPP*>(&::ProtoOrder::OrderVIPBonusCPP::default_instance());
}

StartOrderResp::StartOrderResp(const StartOrderResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.StartOrderResp)
}

void StartOrderResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  commons_ = NULL;
  order_ = NULL;
  truck_ = NULL;
  adbonus_ = NULL;
  diamondbounus_ = NULL;
  vipbonus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartOrderResp::~StartOrderResp() {
  // @@protoc_insertion_point(destructor:ProtoOrder.StartOrderResp)
  SharedDtor();
}

void StartOrderResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete order_;
    delete truck_;
    delete adbonus_;
    delete diamondbounus_;
    delete vipbonus_;
  }
}

void StartOrderResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartOrderResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartOrderResp_descriptor_;
}

const StartOrderResp& StartOrderResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

StartOrderResp* StartOrderResp::default_instance_ = NULL;

StartOrderResp* StartOrderResp::New() const {
  return new StartOrderResp;
}

void StartOrderResp::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    result_ = false;
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_order()) {
      if (order_ != NULL) order_->::ProtoOrder::OrderCPP::Clear();
    }
    if (has_truck()) {
      if (truck_ != NULL) truck_->::ProtoOrder::TruckCPP::Clear();
    }
    if (has_adbonus()) {
      if (adbonus_ != NULL) adbonus_->::ProtoOrder::OrderADBonusCPP::Clear();
    }
    if (has_diamondbounus()) {
      if (diamondbounus_ != NULL) diamondbounus_->::ProtoOrder::OrderDiamondBonusCPP::Clear();
    }
    if (has_vipbonus()) {
      if (vipbonus_ != NULL) vipbonus_->::ProtoOrder::OrderVIPBonusCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartOrderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.StartOrderResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_order;
        break;
      }

      // required .ProtoOrder.OrderCPP order = 3;
      case 3: {
        if (tag == 26) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_truck;
        break;
      }

      // required .ProtoOrder.TruckCPP truck = 4;
      case 4: {
        if (tag == 34) {
         parse_truck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truck()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_adBonus;
        break;
      }

      // optional .ProtoOrder.OrderADBonusCPP adBonus = 5;
      case 5: {
        if (tag == 42) {
         parse_adBonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adbonus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_diamondBounus;
        break;
      }

      // optional .ProtoOrder.OrderDiamondBonusCPP diamondBounus = 6;
      case 6: {
        if (tag == 50) {
         parse_diamondBounus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diamondbounus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_vipBonus;
        break;
      }

      // optional .ProtoOrder.OrderVIPBonusCPP vipBonus = 7;
      case 7: {
        if (tag == 58) {
         parse_vipBonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipbonus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.StartOrderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.StartOrderResp)
  return false;
#undef DO_
}

void StartOrderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.StartOrderResp)
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  // required .ProtoOrder.OrderCPP order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->order(), output);
  }

  // required .ProtoOrder.TruckCPP truck = 4;
  if (has_truck()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->truck(), output);
  }

  // optional .ProtoOrder.OrderADBonusCPP adBonus = 5;
  if (has_adbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->adbonus(), output);
  }

  // optional .ProtoOrder.OrderDiamondBonusCPP diamondBounus = 6;
  if (has_diamondbounus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->diamondbounus(), output);
  }

  // optional .ProtoOrder.OrderVIPBonusCPP vipBonus = 7;
  if (has_vipbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->vipbonus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.StartOrderResp)
}

::google::protobuf::uint8* StartOrderResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.StartOrderResp)
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  // required .ProtoOrder.OrderCPP order = 3;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->order(), target);
  }

  // required .ProtoOrder.TruckCPP truck = 4;
  if (has_truck()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->truck(), target);
  }

  // optional .ProtoOrder.OrderADBonusCPP adBonus = 5;
  if (has_adbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->adbonus(), target);
  }

  // optional .ProtoOrder.OrderDiamondBonusCPP diamondBounus = 6;
  if (has_diamondbounus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->diamondbounus(), target);
  }

  // optional .ProtoOrder.OrderVIPBonusCPP vipBonus = 7;
  if (has_vipbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->vipbonus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.StartOrderResp)
  return target;
}

int StartOrderResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required .ProtoOrder.OrderCPP order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order());
    }

    // required .ProtoOrder.TruckCPP truck = 4;
    if (has_truck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->truck());
    }

    // optional .ProtoOrder.OrderADBonusCPP adBonus = 5;
    if (has_adbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adbonus());
    }

    // optional .ProtoOrder.OrderDiamondBonusCPP diamondBounus = 6;
    if (has_diamondbounus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diamondbounus());
    }

    // optional .ProtoOrder.OrderVIPBonusCPP vipBonus = 7;
    if (has_vipbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipbonus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartOrderResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartOrderResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartOrderResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartOrderResp::MergeFrom(const StartOrderResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_order()) {
      mutable_order()->::ProtoOrder::OrderCPP::MergeFrom(from.order());
    }
    if (from.has_truck()) {
      mutable_truck()->::ProtoOrder::TruckCPP::MergeFrom(from.truck());
    }
    if (from.has_adbonus()) {
      mutable_adbonus()->::ProtoOrder::OrderADBonusCPP::MergeFrom(from.adbonus());
    }
    if (from.has_diamondbounus()) {
      mutable_diamondbounus()->::ProtoOrder::OrderDiamondBonusCPP::MergeFrom(from.diamondbounus());
    }
    if (from.has_vipbonus()) {
      mutable_vipbonus()->::ProtoOrder::OrderVIPBonusCPP::MergeFrom(from.vipbonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartOrderResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartOrderResp::CopyFrom(const StartOrderResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartOrderResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_order()) {
    if (!this->order().IsInitialized()) return false;
  }
  if (has_truck()) {
    if (!this->truck().IsInitialized()) return false;
  }
  if (has_adbonus()) {
    if (!this->adbonus().IsInitialized()) return false;
  }
  if (has_diamondbounus()) {
    if (!this->diamondbounus().IsInitialized()) return false;
  }
  if (has_vipbonus()) {
    if (!this->vipbonus().IsInitialized()) return false;
  }
  return true;
}

void StartOrderResp::Swap(StartOrderResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(commons_, other->commons_);
    std::swap(order_, other->order_);
    std::swap(truck_, other->truck_);
    std::swap(adbonus_, other->adbonus_);
    std::swap(diamondbounus_, other->diamondbounus_);
    std::swap(vipbonus_, other->vipbonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartOrderResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartOrderResp_descriptor_;
  metadata.reflection = StartOrderResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteOrderReq::kSlotFieldNumber;
#endif  // !_MSC_VER

DeleteOrderReq::DeleteOrderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.DeleteOrderReq)
}

void DeleteOrderReq::InitAsDefaultInstance() {
}

DeleteOrderReq::DeleteOrderReq(const DeleteOrderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.DeleteOrderReq)
}

void DeleteOrderReq::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteOrderReq::~DeleteOrderReq() {
  // @@protoc_insertion_point(destructor:ProtoOrder.DeleteOrderReq)
  SharedDtor();
}

void DeleteOrderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteOrderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteOrderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteOrderReq_descriptor_;
}

const DeleteOrderReq& DeleteOrderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

DeleteOrderReq* DeleteOrderReq::default_instance_ = NULL;

DeleteOrderReq* DeleteOrderReq::New() const {
  return new DeleteOrderReq;
}

void DeleteOrderReq::Clear() {
  slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteOrderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.DeleteOrderReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.DeleteOrderReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.DeleteOrderReq)
  return false;
#undef DO_
}

void DeleteOrderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.DeleteOrderReq)
  // required uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.DeleteOrderReq)
}

::google::protobuf::uint8* DeleteOrderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.DeleteOrderReq)
  // required uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.DeleteOrderReq)
  return target;
}

int DeleteOrderReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteOrderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteOrderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteOrderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteOrderReq::MergeFrom(const DeleteOrderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteOrderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteOrderReq::CopyFrom(const DeleteOrderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteOrderReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteOrderReq::Swap(DeleteOrderReq* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteOrderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteOrderReq_descriptor_;
  metadata.reflection = DeleteOrderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteOrderResp::kResultFieldNumber;
const int DeleteOrderResp::kOrderFieldNumber;
#endif  // !_MSC_VER

DeleteOrderResp::DeleteOrderResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.DeleteOrderResp)
}

void DeleteOrderResp::InitAsDefaultInstance() {
  order_ = const_cast< ::ProtoOrder::OrderCPP*>(&::ProtoOrder::OrderCPP::default_instance());
}

DeleteOrderResp::DeleteOrderResp(const DeleteOrderResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.DeleteOrderResp)
}

void DeleteOrderResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  order_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteOrderResp::~DeleteOrderResp() {
  // @@protoc_insertion_point(destructor:ProtoOrder.DeleteOrderResp)
  SharedDtor();
}

void DeleteOrderResp::SharedDtor() {
  if (this != default_instance_) {
    delete order_;
  }
}

void DeleteOrderResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteOrderResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteOrderResp_descriptor_;
}

const DeleteOrderResp& DeleteOrderResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

DeleteOrderResp* DeleteOrderResp::default_instance_ = NULL;

DeleteOrderResp* DeleteOrderResp::New() const {
  return new DeleteOrderResp;
}

void DeleteOrderResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = false;
    if (has_order()) {
      if (order_ != NULL) order_->::ProtoOrder::OrderCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteOrderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.DeleteOrderResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_order;
        break;
      }

      // required .ProtoOrder.OrderCPP order = 2;
      case 2: {
        if (tag == 18) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.DeleteOrderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.DeleteOrderResp)
  return false;
#undef DO_
}

void DeleteOrderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.DeleteOrderResp)
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // required .ProtoOrder.OrderCPP order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.DeleteOrderResp)
}

::google::protobuf::uint8* DeleteOrderResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.DeleteOrderResp)
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // required .ProtoOrder.OrderCPP order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.DeleteOrderResp)
  return target;
}

int DeleteOrderResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required .ProtoOrder.OrderCPP order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteOrderResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteOrderResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteOrderResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteOrderResp::MergeFrom(const DeleteOrderResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_order()) {
      mutable_order()->::ProtoOrder::OrderCPP::MergeFrom(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteOrderResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteOrderResp::CopyFrom(const DeleteOrderResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteOrderResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_order()) {
    if (!this->order().IsInitialized()) return false;
  }
  return true;
}

void DeleteOrderResp::Swap(DeleteOrderResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteOrderResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteOrderResp_descriptor_;
  metadata.reflection = DeleteOrderResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardOrderReq::kUidFieldNumber;
#endif  // !_MSC_VER

RewardOrderReq::RewardOrderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.RewardOrderReq)
}

void RewardOrderReq::InitAsDefaultInstance() {
}

RewardOrderReq::RewardOrderReq(const RewardOrderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.RewardOrderReq)
}

void RewardOrderReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardOrderReq::~RewardOrderReq() {
  // @@protoc_insertion_point(destructor:ProtoOrder.RewardOrderReq)
  SharedDtor();
}

void RewardOrderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardOrderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardOrderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardOrderReq_descriptor_;
}

const RewardOrderReq& RewardOrderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

RewardOrderReq* RewardOrderReq::default_instance_ = NULL;

RewardOrderReq* RewardOrderReq::New() const {
  return new RewardOrderReq;
}

void RewardOrderReq::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardOrderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.RewardOrderReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.RewardOrderReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.RewardOrderReq)
  return false;
#undef DO_
}

void RewardOrderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.RewardOrderReq)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.RewardOrderReq)
}

::google::protobuf::uint8* RewardOrderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.RewardOrderReq)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.RewardOrderReq)
  return target;
}

int RewardOrderReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardOrderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardOrderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardOrderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardOrderReq::MergeFrom(const RewardOrderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardOrderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardOrderReq::CopyFrom(const RewardOrderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardOrderReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RewardOrderReq::Swap(RewardOrderReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardOrderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardOrderReq_descriptor_;
  metadata.reflection = RewardOrderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardOrderResp::kResultFieldNumber;
const int RewardOrderResp::kCommonsFieldNumber;
const int RewardOrderResp::kTruckFieldNumber;
#endif  // !_MSC_VER

RewardOrderResp::RewardOrderResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.RewardOrderResp)
}

void RewardOrderResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  truck_ = const_cast< ::ProtoOrder::TruckCPP*>(&::ProtoOrder::TruckCPP::default_instance());
}

RewardOrderResp::RewardOrderResp(const RewardOrderResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.RewardOrderResp)
}

void RewardOrderResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  commons_ = NULL;
  truck_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardOrderResp::~RewardOrderResp() {
  // @@protoc_insertion_point(destructor:ProtoOrder.RewardOrderResp)
  SharedDtor();
}

void RewardOrderResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete truck_;
  }
}

void RewardOrderResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardOrderResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardOrderResp_descriptor_;
}

const RewardOrderResp& RewardOrderResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

RewardOrderResp* RewardOrderResp::default_instance_ = NULL;

RewardOrderResp* RewardOrderResp::New() const {
  return new RewardOrderResp;
}

void RewardOrderResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = false;
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_truck()) {
      if (truck_ != NULL) truck_->::ProtoOrder::TruckCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardOrderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.RewardOrderResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_truck;
        break;
      }

      // required .ProtoOrder.TruckCPP truck = 3;
      case 3: {
        if (tag == 26) {
         parse_truck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truck()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.RewardOrderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.RewardOrderResp)
  return false;
#undef DO_
}

void RewardOrderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.RewardOrderResp)
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  // required .ProtoOrder.TruckCPP truck = 3;
  if (has_truck()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->truck(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.RewardOrderResp)
}

::google::protobuf::uint8* RewardOrderResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.RewardOrderResp)
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  // required .ProtoOrder.TruckCPP truck = 3;
  if (has_truck()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->truck(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.RewardOrderResp)
  return target;
}

int RewardOrderResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required .ProtoOrder.TruckCPP truck = 3;
    if (has_truck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->truck());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardOrderResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardOrderResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardOrderResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardOrderResp::MergeFrom(const RewardOrderResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_truck()) {
      mutable_truck()->::ProtoOrder::TruckCPP::MergeFrom(from.truck());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardOrderResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardOrderResp::CopyFrom(const RewardOrderResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardOrderResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_truck()) {
    if (!this->truck().IsInitialized()) return false;
  }
  return true;
}

void RewardOrderResp::Swap(RewardOrderResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(commons_, other->commons_);
    std::swap(truck_, other->truck_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardOrderResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardOrderResp_descriptor_;
  metadata.reflection = RewardOrderResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderADBonusCPP::kViewedAdCntFieldNumber;
const int OrderADBonusCPP::kRemianAdBonusCntFieldNumber;
#endif  // !_MSC_VER

OrderADBonusCPP::OrderADBonusCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.OrderADBonusCPP)
}

void OrderADBonusCPP::InitAsDefaultInstance() {
}

OrderADBonusCPP::OrderADBonusCPP(const OrderADBonusCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.OrderADBonusCPP)
}

void OrderADBonusCPP::SharedCtor() {
  _cached_size_ = 0;
  viewedadcnt_ = 0u;
  remianadbonuscnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderADBonusCPP::~OrderADBonusCPP() {
  // @@protoc_insertion_point(destructor:ProtoOrder.OrderADBonusCPP)
  SharedDtor();
}

void OrderADBonusCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderADBonusCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderADBonusCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderADBonusCPP_descriptor_;
}

const OrderADBonusCPP& OrderADBonusCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

OrderADBonusCPP* OrderADBonusCPP::default_instance_ = NULL;

OrderADBonusCPP* OrderADBonusCPP::New() const {
  return new OrderADBonusCPP;
}

void OrderADBonusCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderADBonusCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(viewedadcnt_, remianadbonuscnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderADBonusCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.OrderADBonusCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 viewedAdCnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewedadcnt_)));
          set_has_viewedadcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_remianAdBonusCnt;
        break;
      }

      // required uint32 remianAdBonusCnt = 2;
      case 2: {
        if (tag == 16) {
         parse_remianAdBonusCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remianadbonuscnt_)));
          set_has_remianadbonuscnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.OrderADBonusCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.OrderADBonusCPP)
  return false;
#undef DO_
}

void OrderADBonusCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.OrderADBonusCPP)
  // required uint32 viewedAdCnt = 1;
  if (has_viewedadcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->viewedadcnt(), output);
  }

  // required uint32 remianAdBonusCnt = 2;
  if (has_remianadbonuscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remianadbonuscnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.OrderADBonusCPP)
}

::google::protobuf::uint8* OrderADBonusCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.OrderADBonusCPP)
  // required uint32 viewedAdCnt = 1;
  if (has_viewedadcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->viewedadcnt(), target);
  }

  // required uint32 remianAdBonusCnt = 2;
  if (has_remianadbonuscnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remianadbonuscnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.OrderADBonusCPP)
  return target;
}

int OrderADBonusCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 viewedAdCnt = 1;
    if (has_viewedadcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewedadcnt());
    }

    // required uint32 remianAdBonusCnt = 2;
    if (has_remianadbonuscnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remianadbonuscnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderADBonusCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderADBonusCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderADBonusCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderADBonusCPP::MergeFrom(const OrderADBonusCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viewedadcnt()) {
      set_viewedadcnt(from.viewedadcnt());
    }
    if (from.has_remianadbonuscnt()) {
      set_remianadbonuscnt(from.remianadbonuscnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderADBonusCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderADBonusCPP::CopyFrom(const OrderADBonusCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderADBonusCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OrderADBonusCPP::Swap(OrderADBonusCPP* other) {
  if (other != this) {
    std::swap(viewedadcnt_, other->viewedadcnt_);
    std::swap(remianadbonuscnt_, other->remianadbonuscnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderADBonusCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderADBonusCPP_descriptor_;
  metadata.reflection = OrderADBonusCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderDiamondBonusCPP::kRemainDiamondBonusCntFieldNumber;
const int OrderDiamondBonusCPP::kDiamondBonusEndTsFieldNumber;
#endif  // !_MSC_VER

OrderDiamondBonusCPP::OrderDiamondBonusCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.OrderDiamondBonusCPP)
}

void OrderDiamondBonusCPP::InitAsDefaultInstance() {
}

OrderDiamondBonusCPP::OrderDiamondBonusCPP(const OrderDiamondBonusCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.OrderDiamondBonusCPP)
}

void OrderDiamondBonusCPP::SharedCtor() {
  _cached_size_ = 0;
  remaindiamondbonuscnt_ = 0u;
  diamondbonusendts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderDiamondBonusCPP::~OrderDiamondBonusCPP() {
  // @@protoc_insertion_point(destructor:ProtoOrder.OrderDiamondBonusCPP)
  SharedDtor();
}

void OrderDiamondBonusCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderDiamondBonusCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderDiamondBonusCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderDiamondBonusCPP_descriptor_;
}

const OrderDiamondBonusCPP& OrderDiamondBonusCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

OrderDiamondBonusCPP* OrderDiamondBonusCPP::default_instance_ = NULL;

OrderDiamondBonusCPP* OrderDiamondBonusCPP::New() const {
  return new OrderDiamondBonusCPP;
}

void OrderDiamondBonusCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderDiamondBonusCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(remaindiamondbonuscnt_, diamondbonusendts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderDiamondBonusCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.OrderDiamondBonusCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 remainDiamondBonusCnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaindiamondbonuscnt_)));
          set_has_remaindiamondbonuscnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_diamondBonusEndTs;
        break;
      }

      // required uint32 diamondBonusEndTs = 2;
      case 2: {
        if (tag == 16) {
         parse_diamondBonusEndTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamondbonusendts_)));
          set_has_diamondbonusendts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.OrderDiamondBonusCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.OrderDiamondBonusCPP)
  return false;
#undef DO_
}

void OrderDiamondBonusCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.OrderDiamondBonusCPP)
  // required uint32 remainDiamondBonusCnt = 1;
  if (has_remaindiamondbonuscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remaindiamondbonuscnt(), output);
  }

  // required uint32 diamondBonusEndTs = 2;
  if (has_diamondbonusendts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->diamondbonusendts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.OrderDiamondBonusCPP)
}

::google::protobuf::uint8* OrderDiamondBonusCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.OrderDiamondBonusCPP)
  // required uint32 remainDiamondBonusCnt = 1;
  if (has_remaindiamondbonuscnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remaindiamondbonuscnt(), target);
  }

  // required uint32 diamondBonusEndTs = 2;
  if (has_diamondbonusendts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->diamondbonusendts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.OrderDiamondBonusCPP)
  return target;
}

int OrderDiamondBonusCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 remainDiamondBonusCnt = 1;
    if (has_remaindiamondbonuscnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaindiamondbonuscnt());
    }

    // required uint32 diamondBonusEndTs = 2;
    if (has_diamondbonusendts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamondbonusendts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderDiamondBonusCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderDiamondBonusCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderDiamondBonusCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderDiamondBonusCPP::MergeFrom(const OrderDiamondBonusCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remaindiamondbonuscnt()) {
      set_remaindiamondbonuscnt(from.remaindiamondbonuscnt());
    }
    if (from.has_diamondbonusendts()) {
      set_diamondbonusendts(from.diamondbonusendts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderDiamondBonusCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderDiamondBonusCPP::CopyFrom(const OrderDiamondBonusCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderDiamondBonusCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OrderDiamondBonusCPP::Swap(OrderDiamondBonusCPP* other) {
  if (other != this) {
    std::swap(remaindiamondbonuscnt_, other->remaindiamondbonuscnt_);
    std::swap(diamondbonusendts_, other->diamondbonusendts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderDiamondBonusCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderDiamondBonusCPP_descriptor_;
  metadata.reflection = OrderDiamondBonusCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderVIPBonusCPP::kRemainVipBonusCntFieldNumber;
#endif  // !_MSC_VER

OrderVIPBonusCPP::OrderVIPBonusCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.OrderVIPBonusCPP)
}

void OrderVIPBonusCPP::InitAsDefaultInstance() {
}

OrderVIPBonusCPP::OrderVIPBonusCPP(const OrderVIPBonusCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.OrderVIPBonusCPP)
}

void OrderVIPBonusCPP::SharedCtor() {
  _cached_size_ = 0;
  remainvipbonuscnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderVIPBonusCPP::~OrderVIPBonusCPP() {
  // @@protoc_insertion_point(destructor:ProtoOrder.OrderVIPBonusCPP)
  SharedDtor();
}

void OrderVIPBonusCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderVIPBonusCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderVIPBonusCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderVIPBonusCPP_descriptor_;
}

const OrderVIPBonusCPP& OrderVIPBonusCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

OrderVIPBonusCPP* OrderVIPBonusCPP::default_instance_ = NULL;

OrderVIPBonusCPP* OrderVIPBonusCPP::New() const {
  return new OrderVIPBonusCPP;
}

void OrderVIPBonusCPP::Clear() {
  remainvipbonuscnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderVIPBonusCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.OrderVIPBonusCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 remainVipBonusCnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainvipbonuscnt_)));
          set_has_remainvipbonuscnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.OrderVIPBonusCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.OrderVIPBonusCPP)
  return false;
#undef DO_
}

void OrderVIPBonusCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.OrderVIPBonusCPP)
  // required uint32 remainVipBonusCnt = 1;
  if (has_remainvipbonuscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remainvipbonuscnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.OrderVIPBonusCPP)
}

::google::protobuf::uint8* OrderVIPBonusCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.OrderVIPBonusCPP)
  // required uint32 remainVipBonusCnt = 1;
  if (has_remainvipbonuscnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remainvipbonuscnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.OrderVIPBonusCPP)
  return target;
}

int OrderVIPBonusCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 remainVipBonusCnt = 1;
    if (has_remainvipbonuscnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remainvipbonuscnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderVIPBonusCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderVIPBonusCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderVIPBonusCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderVIPBonusCPP::MergeFrom(const OrderVIPBonusCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remainvipbonuscnt()) {
      set_remainvipbonuscnt(from.remainvipbonuscnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderVIPBonusCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderVIPBonusCPP::CopyFrom(const OrderVIPBonusCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderVIPBonusCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OrderVIPBonusCPP::Swap(OrderVIPBonusCPP* other) {
  if (other != this) {
    std::swap(remainvipbonuscnt_, other->remainvipbonuscnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderVIPBonusCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderVIPBonusCPP_descriptor_;
  metadata.reflection = OrderVIPBonusCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetOrderBonusInfoReq::GetOrderBonusInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.GetOrderBonusInfoReq)
}

void GetOrderBonusInfoReq::InitAsDefaultInstance() {
}

GetOrderBonusInfoReq::GetOrderBonusInfoReq(const GetOrderBonusInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.GetOrderBonusInfoReq)
}

void GetOrderBonusInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOrderBonusInfoReq::~GetOrderBonusInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoOrder.GetOrderBonusInfoReq)
  SharedDtor();
}

void GetOrderBonusInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOrderBonusInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOrderBonusInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOrderBonusInfoReq_descriptor_;
}

const GetOrderBonusInfoReq& GetOrderBonusInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

GetOrderBonusInfoReq* GetOrderBonusInfoReq::default_instance_ = NULL;

GetOrderBonusInfoReq* GetOrderBonusInfoReq::New() const {
  return new GetOrderBonusInfoReq;
}

void GetOrderBonusInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOrderBonusInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.GetOrderBonusInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.GetOrderBonusInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.GetOrderBonusInfoReq)
  return false;
#undef DO_
}

void GetOrderBonusInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.GetOrderBonusInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.GetOrderBonusInfoReq)
}

::google::protobuf::uint8* GetOrderBonusInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.GetOrderBonusInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.GetOrderBonusInfoReq)
  return target;
}

int GetOrderBonusInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOrderBonusInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOrderBonusInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOrderBonusInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOrderBonusInfoReq::MergeFrom(const GetOrderBonusInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOrderBonusInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOrderBonusInfoReq::CopyFrom(const GetOrderBonusInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderBonusInfoReq::IsInitialized() const {

  return true;
}

void GetOrderBonusInfoReq::Swap(GetOrderBonusInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOrderBonusInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOrderBonusInfoReq_descriptor_;
  metadata.reflection = GetOrderBonusInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOrderBonusInfoResp::kAdBonusFieldNumber;
const int GetOrderBonusInfoResp::kDiamondBounusFieldNumber;
const int GetOrderBonusInfoResp::kVipBonusFieldNumber;
#endif  // !_MSC_VER

GetOrderBonusInfoResp::GetOrderBonusInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.GetOrderBonusInfoResp)
}

void GetOrderBonusInfoResp::InitAsDefaultInstance() {
  adbonus_ = const_cast< ::ProtoOrder::OrderADBonusCPP*>(&::ProtoOrder::OrderADBonusCPP::default_instance());
  diamondbounus_ = const_cast< ::ProtoOrder::OrderDiamondBonusCPP*>(&::ProtoOrder::OrderDiamondBonusCPP::default_instance());
  vipbonus_ = const_cast< ::ProtoOrder::OrderVIPBonusCPP*>(&::ProtoOrder::OrderVIPBonusCPP::default_instance());
}

GetOrderBonusInfoResp::GetOrderBonusInfoResp(const GetOrderBonusInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.GetOrderBonusInfoResp)
}

void GetOrderBonusInfoResp::SharedCtor() {
  _cached_size_ = 0;
  adbonus_ = NULL;
  diamondbounus_ = NULL;
  vipbonus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOrderBonusInfoResp::~GetOrderBonusInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoOrder.GetOrderBonusInfoResp)
  SharedDtor();
}

void GetOrderBonusInfoResp::SharedDtor() {
  if (this != default_instance_) {
    delete adbonus_;
    delete diamondbounus_;
    delete vipbonus_;
  }
}

void GetOrderBonusInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOrderBonusInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOrderBonusInfoResp_descriptor_;
}

const GetOrderBonusInfoResp& GetOrderBonusInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

GetOrderBonusInfoResp* GetOrderBonusInfoResp::default_instance_ = NULL;

GetOrderBonusInfoResp* GetOrderBonusInfoResp::New() const {
  return new GetOrderBonusInfoResp;
}

void GetOrderBonusInfoResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_adbonus()) {
      if (adbonus_ != NULL) adbonus_->::ProtoOrder::OrderADBonusCPP::Clear();
    }
    if (has_diamondbounus()) {
      if (diamondbounus_ != NULL) diamondbounus_->::ProtoOrder::OrderDiamondBonusCPP::Clear();
    }
    if (has_vipbonus()) {
      if (vipbonus_ != NULL) vipbonus_->::ProtoOrder::OrderVIPBonusCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOrderBonusInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.GetOrderBonusInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOrder.OrderADBonusCPP adBonus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adbonus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_diamondBounus;
        break;
      }

      // required .ProtoOrder.OrderDiamondBonusCPP diamondBounus = 2;
      case 2: {
        if (tag == 18) {
         parse_diamondBounus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diamondbounus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vipBonus;
        break;
      }

      // optional .ProtoOrder.OrderVIPBonusCPP vipBonus = 3;
      case 3: {
        if (tag == 26) {
         parse_vipBonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipbonus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.GetOrderBonusInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.GetOrderBonusInfoResp)
  return false;
#undef DO_
}

void GetOrderBonusInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.GetOrderBonusInfoResp)
  // required .ProtoOrder.OrderADBonusCPP adBonus = 1;
  if (has_adbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->adbonus(), output);
  }

  // required .ProtoOrder.OrderDiamondBonusCPP diamondBounus = 2;
  if (has_diamondbounus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->diamondbounus(), output);
  }

  // optional .ProtoOrder.OrderVIPBonusCPP vipBonus = 3;
  if (has_vipbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vipbonus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.GetOrderBonusInfoResp)
}

::google::protobuf::uint8* GetOrderBonusInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.GetOrderBonusInfoResp)
  // required .ProtoOrder.OrderADBonusCPP adBonus = 1;
  if (has_adbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->adbonus(), target);
  }

  // required .ProtoOrder.OrderDiamondBonusCPP diamondBounus = 2;
  if (has_diamondbounus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->diamondbounus(), target);
  }

  // optional .ProtoOrder.OrderVIPBonusCPP vipBonus = 3;
  if (has_vipbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vipbonus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.GetOrderBonusInfoResp)
  return target;
}

int GetOrderBonusInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOrder.OrderADBonusCPP adBonus = 1;
    if (has_adbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adbonus());
    }

    // required .ProtoOrder.OrderDiamondBonusCPP diamondBounus = 2;
    if (has_diamondbounus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diamondbounus());
    }

    // optional .ProtoOrder.OrderVIPBonusCPP vipBonus = 3;
    if (has_vipbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipbonus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOrderBonusInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOrderBonusInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOrderBonusInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOrderBonusInfoResp::MergeFrom(const GetOrderBonusInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adbonus()) {
      mutable_adbonus()->::ProtoOrder::OrderADBonusCPP::MergeFrom(from.adbonus());
    }
    if (from.has_diamondbounus()) {
      mutable_diamondbounus()->::ProtoOrder::OrderDiamondBonusCPP::MergeFrom(from.diamondbounus());
    }
    if (from.has_vipbonus()) {
      mutable_vipbonus()->::ProtoOrder::OrderVIPBonusCPP::MergeFrom(from.vipbonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOrderBonusInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOrderBonusInfoResp::CopyFrom(const GetOrderBonusInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderBonusInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_adbonus()) {
    if (!this->adbonus().IsInitialized()) return false;
  }
  if (has_diamondbounus()) {
    if (!this->diamondbounus().IsInitialized()) return false;
  }
  if (has_vipbonus()) {
    if (!this->vipbonus().IsInitialized()) return false;
  }
  return true;
}

void GetOrderBonusInfoResp::Swap(GetOrderBonusInfoResp* other) {
  if (other != this) {
    std::swap(adbonus_, other->adbonus_);
    std::swap(diamondbounus_, other->diamondbounus_);
    std::swap(vipbonus_, other->vipbonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOrderBonusInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOrderBonusInfoResp_descriptor_;
  metadata.reflection = GetOrderBonusInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ViewAdReq::ViewAdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.ViewAdReq)
}

void ViewAdReq::InitAsDefaultInstance() {
}

ViewAdReq::ViewAdReq(const ViewAdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.ViewAdReq)
}

void ViewAdReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewAdReq::~ViewAdReq() {
  // @@protoc_insertion_point(destructor:ProtoOrder.ViewAdReq)
  SharedDtor();
}

void ViewAdReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ViewAdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewAdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewAdReq_descriptor_;
}

const ViewAdReq& ViewAdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

ViewAdReq* ViewAdReq::default_instance_ = NULL;

ViewAdReq* ViewAdReq::New() const {
  return new ViewAdReq;
}

void ViewAdReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ViewAdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.ViewAdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.ViewAdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.ViewAdReq)
  return false;
#undef DO_
}

void ViewAdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.ViewAdReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.ViewAdReq)
}

::google::protobuf::uint8* ViewAdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.ViewAdReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.ViewAdReq)
  return target;
}

int ViewAdReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewAdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ViewAdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ViewAdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ViewAdReq::MergeFrom(const ViewAdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ViewAdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewAdReq::CopyFrom(const ViewAdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewAdReq::IsInitialized() const {

  return true;
}

void ViewAdReq::Swap(ViewAdReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ViewAdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewAdReq_descriptor_;
  metadata.reflection = ViewAdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ViewAdResp::kAdBonusFieldNumber;
#endif  // !_MSC_VER

ViewAdResp::ViewAdResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.ViewAdResp)
}

void ViewAdResp::InitAsDefaultInstance() {
  adbonus_ = const_cast< ::ProtoOrder::OrderADBonusCPP*>(&::ProtoOrder::OrderADBonusCPP::default_instance());
}

ViewAdResp::ViewAdResp(const ViewAdResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.ViewAdResp)
}

void ViewAdResp::SharedCtor() {
  _cached_size_ = 0;
  adbonus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewAdResp::~ViewAdResp() {
  // @@protoc_insertion_point(destructor:ProtoOrder.ViewAdResp)
  SharedDtor();
}

void ViewAdResp::SharedDtor() {
  if (this != default_instance_) {
    delete adbonus_;
  }
}

void ViewAdResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewAdResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewAdResp_descriptor_;
}

const ViewAdResp& ViewAdResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

ViewAdResp* ViewAdResp::default_instance_ = NULL;

ViewAdResp* ViewAdResp::New() const {
  return new ViewAdResp;
}

void ViewAdResp::Clear() {
  if (has_adbonus()) {
    if (adbonus_ != NULL) adbonus_->::ProtoOrder::OrderADBonusCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ViewAdResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.ViewAdResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOrder.OrderADBonusCPP adBonus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adbonus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.ViewAdResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.ViewAdResp)
  return false;
#undef DO_
}

void ViewAdResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.ViewAdResp)
  // required .ProtoOrder.OrderADBonusCPP adBonus = 1;
  if (has_adbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->adbonus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.ViewAdResp)
}

::google::protobuf::uint8* ViewAdResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.ViewAdResp)
  // required .ProtoOrder.OrderADBonusCPP adBonus = 1;
  if (has_adbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->adbonus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.ViewAdResp)
  return target;
}

int ViewAdResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOrder.OrderADBonusCPP adBonus = 1;
    if (has_adbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adbonus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewAdResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ViewAdResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ViewAdResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ViewAdResp::MergeFrom(const ViewAdResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adbonus()) {
      mutable_adbonus()->::ProtoOrder::OrderADBonusCPP::MergeFrom(from.adbonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ViewAdResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewAdResp::CopyFrom(const ViewAdResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewAdResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_adbonus()) {
    if (!this->adbonus().IsInitialized()) return false;
  }
  return true;
}

void ViewAdResp::Swap(ViewAdResp* other) {
  if (other != this) {
    std::swap(adbonus_, other->adbonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ViewAdResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewAdResp_descriptor_;
  metadata.reflection = ViewAdResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BuyOrderBonusReq::BuyOrderBonusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.BuyOrderBonusReq)
}

void BuyOrderBonusReq::InitAsDefaultInstance() {
}

BuyOrderBonusReq::BuyOrderBonusReq(const BuyOrderBonusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.BuyOrderBonusReq)
}

void BuyOrderBonusReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyOrderBonusReq::~BuyOrderBonusReq() {
  // @@protoc_insertion_point(destructor:ProtoOrder.BuyOrderBonusReq)
  SharedDtor();
}

void BuyOrderBonusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyOrderBonusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyOrderBonusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyOrderBonusReq_descriptor_;
}

const BuyOrderBonusReq& BuyOrderBonusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

BuyOrderBonusReq* BuyOrderBonusReq::default_instance_ = NULL;

BuyOrderBonusReq* BuyOrderBonusReq::New() const {
  return new BuyOrderBonusReq;
}

void BuyOrderBonusReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyOrderBonusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.BuyOrderBonusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.BuyOrderBonusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.BuyOrderBonusReq)
  return false;
#undef DO_
}

void BuyOrderBonusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.BuyOrderBonusReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.BuyOrderBonusReq)
}

::google::protobuf::uint8* BuyOrderBonusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.BuyOrderBonusReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.BuyOrderBonusReq)
  return target;
}

int BuyOrderBonusReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyOrderBonusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyOrderBonusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyOrderBonusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyOrderBonusReq::MergeFrom(const BuyOrderBonusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyOrderBonusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyOrderBonusReq::CopyFrom(const BuyOrderBonusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyOrderBonusReq::IsInitialized() const {

  return true;
}

void BuyOrderBonusReq::Swap(BuyOrderBonusReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyOrderBonusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyOrderBonusReq_descriptor_;
  metadata.reflection = BuyOrderBonusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyOrderBonusResp::kCommonsFieldNumber;
const int BuyOrderBonusResp::kDiamondBounusFieldNumber;
#endif  // !_MSC_VER

BuyOrderBonusResp::BuyOrderBonusResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOrder.BuyOrderBonusResp)
}

void BuyOrderBonusResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  diamondbounus_ = const_cast< ::ProtoOrder::OrderDiamondBonusCPP*>(&::ProtoOrder::OrderDiamondBonusCPP::default_instance());
}

BuyOrderBonusResp::BuyOrderBonusResp(const BuyOrderBonusResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOrder.BuyOrderBonusResp)
}

void BuyOrderBonusResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  diamondbounus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyOrderBonusResp::~BuyOrderBonusResp() {
  // @@protoc_insertion_point(destructor:ProtoOrder.BuyOrderBonusResp)
  SharedDtor();
}

void BuyOrderBonusResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete diamondbounus_;
  }
}

void BuyOrderBonusResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyOrderBonusResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyOrderBonusResp_descriptor_;
}

const BuyOrderBonusResp& BuyOrderBonusResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOrder_2eproto();
  return *default_instance_;
}

BuyOrderBonusResp* BuyOrderBonusResp::default_instance_ = NULL;

BuyOrderBonusResp* BuyOrderBonusResp::New() const {
  return new BuyOrderBonusResp;
}

void BuyOrderBonusResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_diamondbounus()) {
      if (diamondbounus_ != NULL) diamondbounus_->::ProtoOrder::OrderDiamondBonusCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyOrderBonusResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOrder.BuyOrderBonusResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_diamondBounus;
        break;
      }

      // required .ProtoOrder.OrderDiamondBonusCPP diamondBounus = 2;
      case 2: {
        if (tag == 18) {
         parse_diamondBounus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diamondbounus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOrder.BuyOrderBonusResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOrder.BuyOrderBonusResp)
  return false;
#undef DO_
}

void BuyOrderBonusResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOrder.BuyOrderBonusResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  // required .ProtoOrder.OrderDiamondBonusCPP diamondBounus = 2;
  if (has_diamondbounus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->diamondbounus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOrder.BuyOrderBonusResp)
}

::google::protobuf::uint8* BuyOrderBonusResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOrder.BuyOrderBonusResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  // required .ProtoOrder.OrderDiamondBonusCPP diamondBounus = 2;
  if (has_diamondbounus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->diamondbounus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOrder.BuyOrderBonusResp)
  return target;
}

int BuyOrderBonusResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required .ProtoOrder.OrderDiamondBonusCPP diamondBounus = 2;
    if (has_diamondbounus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diamondbounus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyOrderBonusResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyOrderBonusResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyOrderBonusResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyOrderBonusResp::MergeFrom(const BuyOrderBonusResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_diamondbounus()) {
      mutable_diamondbounus()->::ProtoOrder::OrderDiamondBonusCPP::MergeFrom(from.diamondbounus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyOrderBonusResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyOrderBonusResp::CopyFrom(const BuyOrderBonusResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyOrderBonusResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_diamondbounus()) {
    if (!this->diamondbounus().IsInitialized()) return false;
  }
  return true;
}

void BuyOrderBonusResp::Swap(BuyOrderBonusResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(diamondbounus_, other->diamondbounus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyOrderBonusResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyOrderBonusResp_descriptor_;
  metadata.reflection = BuyOrderBonusResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoOrder

// @@protoc_insertion_point(global_scope)
