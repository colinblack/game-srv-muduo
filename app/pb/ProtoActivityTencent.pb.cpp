// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoActivityTencent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoActivityTencent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoActivityTencent {

namespace {

const ::google::protobuf::Descriptor* RewardStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardStatusResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardStatusResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBlueDailyAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBlueDailyAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBlueGrowAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBlueGrowAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQQgamePrivilegeDailyAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQQgamePrivilegeDailyAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQQgamePrivilegeGrowAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQQgamePrivilegeGrowAward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoActivityTencent_2eproto() {
  protobuf_AddDesc_ProtoActivityTencent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoActivityTencent.proto");
  GOOGLE_CHECK(file != NULL);
  RewardStatusReq_descriptor_ = file->message_type(0);
  static const int RewardStatusReq_offsets_[1] = {
  };
  RewardStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardStatusReq_descriptor_,
      RewardStatusReq::default_instance_,
      RewardStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardStatusReq));
  RewardStatusResp_descriptor_ = file->message_type(1);
  static const int RewardStatusResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardStatusResp, bluedaily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardStatusResp, bluegrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardStatusResp, qqgameprivilegedaily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardStatusResp, qqgameprivilegegrow_),
  };
  RewardStatusResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardStatusResp_descriptor_,
      RewardStatusResp::default_instance_,
      RewardStatusResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardStatusResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardStatusResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardStatusResp));
  GetRewardResp_descriptor_ = file->message_type(2);
  static const int GetRewardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardResp, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardResp, reward_),
  };
  GetRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRewardResp_descriptor_,
      GetRewardResp::default_instance_,
      GetRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRewardResp));
  GetBlueDailyAward_descriptor_ = file->message_type(3);
  static const int GetBlueDailyAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlueDailyAward, type_),
  };
  GetBlueDailyAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBlueDailyAward_descriptor_,
      GetBlueDailyAward::default_instance_,
      GetBlueDailyAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlueDailyAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlueDailyAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBlueDailyAward));
  GetBlueGrowAward_descriptor_ = file->message_type(4);
  static const int GetBlueGrowAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlueGrowAward, id_),
  };
  GetBlueGrowAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBlueGrowAward_descriptor_,
      GetBlueGrowAward::default_instance_,
      GetBlueGrowAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlueGrowAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlueGrowAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBlueGrowAward));
  GetQQgamePrivilegeDailyAward_descriptor_ = file->message_type(5);
  static const int GetQQgamePrivilegeDailyAward_offsets_[1] = {
  };
  GetQQgamePrivilegeDailyAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQQgamePrivilegeDailyAward_descriptor_,
      GetQQgamePrivilegeDailyAward::default_instance_,
      GetQQgamePrivilegeDailyAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQQgamePrivilegeDailyAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQQgamePrivilegeDailyAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQQgamePrivilegeDailyAward));
  GetQQgamePrivilegeGrowAward_descriptor_ = file->message_type(6);
  static const int GetQQgamePrivilegeGrowAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQQgamePrivilegeGrowAward, id_),
  };
  GetQQgamePrivilegeGrowAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQQgamePrivilegeGrowAward_descriptor_,
      GetQQgamePrivilegeGrowAward::default_instance_,
      GetQQgamePrivilegeGrowAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQQgamePrivilegeGrowAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQQgamePrivilegeGrowAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQQgamePrivilegeGrowAward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoActivityTencent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardStatusReq_descriptor_, &RewardStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardStatusResp_descriptor_, &RewardStatusResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRewardResp_descriptor_, &GetRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBlueDailyAward_descriptor_, &GetBlueDailyAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBlueGrowAward_descriptor_, &GetBlueGrowAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQQgamePrivilegeDailyAward_descriptor_, &GetQQgamePrivilegeDailyAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQQgamePrivilegeGrowAward_descriptor_, &GetQQgamePrivilegeGrowAward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoActivityTencent_2eproto() {
  delete RewardStatusReq::default_instance_;
  delete RewardStatusReq_reflection_;
  delete RewardStatusResp::default_instance_;
  delete RewardStatusResp_reflection_;
  delete GetRewardResp::default_instance_;
  delete GetRewardResp_reflection_;
  delete GetBlueDailyAward::default_instance_;
  delete GetBlueDailyAward_reflection_;
  delete GetBlueGrowAward::default_instance_;
  delete GetBlueGrowAward_reflection_;
  delete GetQQgamePrivilegeDailyAward::default_instance_;
  delete GetQQgamePrivilegeDailyAward_reflection_;
  delete GetQQgamePrivilegeGrowAward::default_instance_;
  delete GetQQgamePrivilegeGrowAward_reflection_;
}

void protobuf_AddDesc_ProtoActivityTencent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoReward::protobuf_AddDesc_ProtoReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032ProtoActivityTencent.proto\022\024ProtoActiv"
    "ityTencent\032\021ProtoReward.proto\"\021\n\017RewardS"
    "tatusReq\"r\n\020RewardStatusResp\022\021\n\tblueDail"
    "y\030\001 \001(\r\022\020\n\010blueGrow\030\002 \001(\r\022\034\n\024qqgamePrivi"
    "legeDaily\030\003 \001(\r\022\033\n\023qqgamePrivilegeGrow\030\004"
    " \001(\r\"p\n\rGetRewardResp\0226\n\006status\030\001 \001(\0132&."
    "ProtoActivityTencent.RewardStatusResp\022\'\n"
    "\006reward\030\002 \001(\0132\027.ProtoReward.RewardInfo\"!"
    "\n\021GetBlueDailyAward\022\014\n\004type\030\001 \002(\r\"\036\n\020Get"
    "BlueGrowAward\022\n\n\002id\030\001 \002(\r\"\036\n\034GetQQgamePr"
    "ivilegeDailyAward\")\n\033GetQQgamePrivilegeG"
    "rowAward\022\n\n\002id\030\001 \002(\r", 460);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoActivityTencent.proto", &protobuf_RegisterTypes);
  RewardStatusReq::default_instance_ = new RewardStatusReq();
  RewardStatusResp::default_instance_ = new RewardStatusResp();
  GetRewardResp::default_instance_ = new GetRewardResp();
  GetBlueDailyAward::default_instance_ = new GetBlueDailyAward();
  GetBlueGrowAward::default_instance_ = new GetBlueGrowAward();
  GetQQgamePrivilegeDailyAward::default_instance_ = new GetQQgamePrivilegeDailyAward();
  GetQQgamePrivilegeGrowAward::default_instance_ = new GetQQgamePrivilegeGrowAward();
  RewardStatusReq::default_instance_->InitAsDefaultInstance();
  RewardStatusResp::default_instance_->InitAsDefaultInstance();
  GetRewardResp::default_instance_->InitAsDefaultInstance();
  GetBlueDailyAward::default_instance_->InitAsDefaultInstance();
  GetBlueGrowAward::default_instance_->InitAsDefaultInstance();
  GetQQgamePrivilegeDailyAward::default_instance_->InitAsDefaultInstance();
  GetQQgamePrivilegeGrowAward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoActivityTencent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoActivityTencent_2eproto {
  StaticDescriptorInitializer_ProtoActivityTencent_2eproto() {
    protobuf_AddDesc_ProtoActivityTencent_2eproto();
  }
} static_descriptor_initializer_ProtoActivityTencent_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RewardStatusReq::RewardStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivityTencent.RewardStatusReq)
}

void RewardStatusReq::InitAsDefaultInstance() {
}

RewardStatusReq::RewardStatusReq(const RewardStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivityTencent.RewardStatusReq)
}

void RewardStatusReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardStatusReq::~RewardStatusReq() {
  // @@protoc_insertion_point(destructor:ProtoActivityTencent.RewardStatusReq)
  SharedDtor();
}

void RewardStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardStatusReq_descriptor_;
}

const RewardStatusReq& RewardStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivityTencent_2eproto();
  return *default_instance_;
}

RewardStatusReq* RewardStatusReq::default_instance_ = NULL;

RewardStatusReq* RewardStatusReq::New() const {
  return new RewardStatusReq;
}

void RewardStatusReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivityTencent.RewardStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivityTencent.RewardStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivityTencent.RewardStatusReq)
  return false;
#undef DO_
}

void RewardStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivityTencent.RewardStatusReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivityTencent.RewardStatusReq)
}

::google::protobuf::uint8* RewardStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivityTencent.RewardStatusReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivityTencent.RewardStatusReq)
  return target;
}

int RewardStatusReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardStatusReq::MergeFrom(const RewardStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardStatusReq::CopyFrom(const RewardStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardStatusReq::IsInitialized() const {

  return true;
}

void RewardStatusReq::Swap(RewardStatusReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardStatusReq_descriptor_;
  metadata.reflection = RewardStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardStatusResp::kBlueDailyFieldNumber;
const int RewardStatusResp::kBlueGrowFieldNumber;
const int RewardStatusResp::kQqgamePrivilegeDailyFieldNumber;
const int RewardStatusResp::kQqgamePrivilegeGrowFieldNumber;
#endif  // !_MSC_VER

RewardStatusResp::RewardStatusResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivityTencent.RewardStatusResp)
}

void RewardStatusResp::InitAsDefaultInstance() {
}

RewardStatusResp::RewardStatusResp(const RewardStatusResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivityTencent.RewardStatusResp)
}

void RewardStatusResp::SharedCtor() {
  _cached_size_ = 0;
  bluedaily_ = 0u;
  bluegrow_ = 0u;
  qqgameprivilegedaily_ = 0u;
  qqgameprivilegegrow_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardStatusResp::~RewardStatusResp() {
  // @@protoc_insertion_point(destructor:ProtoActivityTencent.RewardStatusResp)
  SharedDtor();
}

void RewardStatusResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardStatusResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardStatusResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardStatusResp_descriptor_;
}

const RewardStatusResp& RewardStatusResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivityTencent_2eproto();
  return *default_instance_;
}

RewardStatusResp* RewardStatusResp::default_instance_ = NULL;

RewardStatusResp* RewardStatusResp::New() const {
  return new RewardStatusResp;
}

void RewardStatusResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RewardStatusResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bluedaily_, qqgameprivilegegrow_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardStatusResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivityTencent.RewardStatusResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 blueDaily = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bluedaily_)));
          set_has_bluedaily();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_blueGrow;
        break;
      }

      // optional uint32 blueGrow = 2;
      case 2: {
        if (tag == 16) {
         parse_blueGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bluegrow_)));
          set_has_bluegrow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_qqgamePrivilegeDaily;
        break;
      }

      // optional uint32 qqgamePrivilegeDaily = 3;
      case 3: {
        if (tag == 24) {
         parse_qqgamePrivilegeDaily:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qqgameprivilegedaily_)));
          set_has_qqgameprivilegedaily();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_qqgamePrivilegeGrow;
        break;
      }

      // optional uint32 qqgamePrivilegeGrow = 4;
      case 4: {
        if (tag == 32) {
         parse_qqgamePrivilegeGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qqgameprivilegegrow_)));
          set_has_qqgameprivilegegrow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivityTencent.RewardStatusResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivityTencent.RewardStatusResp)
  return false;
#undef DO_
}

void RewardStatusResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivityTencent.RewardStatusResp)
  // optional uint32 blueDaily = 1;
  if (has_bluedaily()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bluedaily(), output);
  }

  // optional uint32 blueGrow = 2;
  if (has_bluegrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bluegrow(), output);
  }

  // optional uint32 qqgamePrivilegeDaily = 3;
  if (has_qqgameprivilegedaily()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->qqgameprivilegedaily(), output);
  }

  // optional uint32 qqgamePrivilegeGrow = 4;
  if (has_qqgameprivilegegrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->qqgameprivilegegrow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivityTencent.RewardStatusResp)
}

::google::protobuf::uint8* RewardStatusResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivityTencent.RewardStatusResp)
  // optional uint32 blueDaily = 1;
  if (has_bluedaily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bluedaily(), target);
  }

  // optional uint32 blueGrow = 2;
  if (has_bluegrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bluegrow(), target);
  }

  // optional uint32 qqgamePrivilegeDaily = 3;
  if (has_qqgameprivilegedaily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->qqgameprivilegedaily(), target);
  }

  // optional uint32 qqgamePrivilegeGrow = 4;
  if (has_qqgameprivilegegrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->qqgameprivilegegrow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivityTencent.RewardStatusResp)
  return target;
}

int RewardStatusResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 blueDaily = 1;
    if (has_bluedaily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bluedaily());
    }

    // optional uint32 blueGrow = 2;
    if (has_bluegrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bluegrow());
    }

    // optional uint32 qqgamePrivilegeDaily = 3;
    if (has_qqgameprivilegedaily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qqgameprivilegedaily());
    }

    // optional uint32 qqgamePrivilegeGrow = 4;
    if (has_qqgameprivilegegrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qqgameprivilegegrow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardStatusResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardStatusResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardStatusResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardStatusResp::MergeFrom(const RewardStatusResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bluedaily()) {
      set_bluedaily(from.bluedaily());
    }
    if (from.has_bluegrow()) {
      set_bluegrow(from.bluegrow());
    }
    if (from.has_qqgameprivilegedaily()) {
      set_qqgameprivilegedaily(from.qqgameprivilegedaily());
    }
    if (from.has_qqgameprivilegegrow()) {
      set_qqgameprivilegegrow(from.qqgameprivilegegrow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardStatusResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardStatusResp::CopyFrom(const RewardStatusResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardStatusResp::IsInitialized() const {

  return true;
}

void RewardStatusResp::Swap(RewardStatusResp* other) {
  if (other != this) {
    std::swap(bluedaily_, other->bluedaily_);
    std::swap(bluegrow_, other->bluegrow_);
    std::swap(qqgameprivilegedaily_, other->qqgameprivilegedaily_);
    std::swap(qqgameprivilegegrow_, other->qqgameprivilegegrow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardStatusResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardStatusResp_descriptor_;
  metadata.reflection = RewardStatusResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRewardResp::kStatusFieldNumber;
const int GetRewardResp::kRewardFieldNumber;
#endif  // !_MSC_VER

GetRewardResp::GetRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivityTencent.GetRewardResp)
}

void GetRewardResp::InitAsDefaultInstance() {
  status_ = const_cast< ::ProtoActivityTencent::RewardStatusResp*>(&::ProtoActivityTencent::RewardStatusResp::default_instance());
  reward_ = const_cast< ::ProtoReward::RewardInfo*>(&::ProtoReward::RewardInfo::default_instance());
}

GetRewardResp::GetRewardResp(const GetRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivityTencent.GetRewardResp)
}

void GetRewardResp::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRewardResp::~GetRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoActivityTencent.GetRewardResp)
  SharedDtor();
}

void GetRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
    delete reward_;
  }
}

void GetRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRewardResp_descriptor_;
}

const GetRewardResp& GetRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivityTencent_2eproto();
  return *default_instance_;
}

GetRewardResp* GetRewardResp::default_instance_ = NULL;

GetRewardResp* GetRewardResp::New() const {
  return new GetRewardResp;
}

void GetRewardResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_status()) {
      if (status_ != NULL) status_->::ProtoActivityTencent::RewardStatusResp::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::ProtoReward::RewardInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivityTencent.GetRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoActivityTencent.RewardStatusResp status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // optional .ProtoReward.RewardInfo reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivityTencent.GetRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivityTencent.GetRewardResp)
  return false;
#undef DO_
}

void GetRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivityTencent.GetRewardResp)
  // optional .ProtoActivityTencent.RewardStatusResp status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  // optional .ProtoReward.RewardInfo reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivityTencent.GetRewardResp)
}

::google::protobuf::uint8* GetRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivityTencent.GetRewardResp)
  // optional .ProtoActivityTencent.RewardStatusResp status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  // optional .ProtoReward.RewardInfo reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivityTencent.GetRewardResp)
  return target;
}

int GetRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoActivityTencent.RewardStatusResp status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // optional .ProtoReward.RewardInfo reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRewardResp::MergeFrom(const GetRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::ProtoActivityTencent::RewardStatusResp::MergeFrom(from.status());
    }
    if (from.has_reward()) {
      mutable_reward()->::ProtoReward::RewardInfo::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRewardResp::CopyFrom(const GetRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRewardResp::IsInitialized() const {

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void GetRewardResp::Swap(GetRewardResp* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRewardResp_descriptor_;
  metadata.reflection = GetRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBlueDailyAward::kTypeFieldNumber;
#endif  // !_MSC_VER

GetBlueDailyAward::GetBlueDailyAward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivityTencent.GetBlueDailyAward)
}

void GetBlueDailyAward::InitAsDefaultInstance() {
}

GetBlueDailyAward::GetBlueDailyAward(const GetBlueDailyAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivityTencent.GetBlueDailyAward)
}

void GetBlueDailyAward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBlueDailyAward::~GetBlueDailyAward() {
  // @@protoc_insertion_point(destructor:ProtoActivityTencent.GetBlueDailyAward)
  SharedDtor();
}

void GetBlueDailyAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBlueDailyAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBlueDailyAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBlueDailyAward_descriptor_;
}

const GetBlueDailyAward& GetBlueDailyAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivityTencent_2eproto();
  return *default_instance_;
}

GetBlueDailyAward* GetBlueDailyAward::default_instance_ = NULL;

GetBlueDailyAward* GetBlueDailyAward::New() const {
  return new GetBlueDailyAward;
}

void GetBlueDailyAward::Clear() {
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBlueDailyAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivityTencent.GetBlueDailyAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivityTencent.GetBlueDailyAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivityTencent.GetBlueDailyAward)
  return false;
#undef DO_
}

void GetBlueDailyAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivityTencent.GetBlueDailyAward)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivityTencent.GetBlueDailyAward)
}

::google::protobuf::uint8* GetBlueDailyAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivityTencent.GetBlueDailyAward)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivityTencent.GetBlueDailyAward)
  return target;
}

int GetBlueDailyAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBlueDailyAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBlueDailyAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBlueDailyAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBlueDailyAward::MergeFrom(const GetBlueDailyAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBlueDailyAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlueDailyAward::CopyFrom(const GetBlueDailyAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlueDailyAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetBlueDailyAward::Swap(GetBlueDailyAward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBlueDailyAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBlueDailyAward_descriptor_;
  metadata.reflection = GetBlueDailyAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBlueGrowAward::kIdFieldNumber;
#endif  // !_MSC_VER

GetBlueGrowAward::GetBlueGrowAward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivityTencent.GetBlueGrowAward)
}

void GetBlueGrowAward::InitAsDefaultInstance() {
}

GetBlueGrowAward::GetBlueGrowAward(const GetBlueGrowAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivityTencent.GetBlueGrowAward)
}

void GetBlueGrowAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBlueGrowAward::~GetBlueGrowAward() {
  // @@protoc_insertion_point(destructor:ProtoActivityTencent.GetBlueGrowAward)
  SharedDtor();
}

void GetBlueGrowAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBlueGrowAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBlueGrowAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBlueGrowAward_descriptor_;
}

const GetBlueGrowAward& GetBlueGrowAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivityTencent_2eproto();
  return *default_instance_;
}

GetBlueGrowAward* GetBlueGrowAward::default_instance_ = NULL;

GetBlueGrowAward* GetBlueGrowAward::New() const {
  return new GetBlueGrowAward;
}

void GetBlueGrowAward::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBlueGrowAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivityTencent.GetBlueGrowAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivityTencent.GetBlueGrowAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivityTencent.GetBlueGrowAward)
  return false;
#undef DO_
}

void GetBlueGrowAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivityTencent.GetBlueGrowAward)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivityTencent.GetBlueGrowAward)
}

::google::protobuf::uint8* GetBlueGrowAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivityTencent.GetBlueGrowAward)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivityTencent.GetBlueGrowAward)
  return target;
}

int GetBlueGrowAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBlueGrowAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBlueGrowAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBlueGrowAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBlueGrowAward::MergeFrom(const GetBlueGrowAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBlueGrowAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlueGrowAward::CopyFrom(const GetBlueGrowAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlueGrowAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetBlueGrowAward::Swap(GetBlueGrowAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBlueGrowAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBlueGrowAward_descriptor_;
  metadata.reflection = GetBlueGrowAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetQQgamePrivilegeDailyAward::GetQQgamePrivilegeDailyAward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivityTencent.GetQQgamePrivilegeDailyAward)
}

void GetQQgamePrivilegeDailyAward::InitAsDefaultInstance() {
}

GetQQgamePrivilegeDailyAward::GetQQgamePrivilegeDailyAward(const GetQQgamePrivilegeDailyAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivityTencent.GetQQgamePrivilegeDailyAward)
}

void GetQQgamePrivilegeDailyAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQQgamePrivilegeDailyAward::~GetQQgamePrivilegeDailyAward() {
  // @@protoc_insertion_point(destructor:ProtoActivityTencent.GetQQgamePrivilegeDailyAward)
  SharedDtor();
}

void GetQQgamePrivilegeDailyAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetQQgamePrivilegeDailyAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQQgamePrivilegeDailyAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQQgamePrivilegeDailyAward_descriptor_;
}

const GetQQgamePrivilegeDailyAward& GetQQgamePrivilegeDailyAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivityTencent_2eproto();
  return *default_instance_;
}

GetQQgamePrivilegeDailyAward* GetQQgamePrivilegeDailyAward::default_instance_ = NULL;

GetQQgamePrivilegeDailyAward* GetQQgamePrivilegeDailyAward::New() const {
  return new GetQQgamePrivilegeDailyAward;
}

void GetQQgamePrivilegeDailyAward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQQgamePrivilegeDailyAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivityTencent.GetQQgamePrivilegeDailyAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivityTencent.GetQQgamePrivilegeDailyAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivityTencent.GetQQgamePrivilegeDailyAward)
  return false;
#undef DO_
}

void GetQQgamePrivilegeDailyAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivityTencent.GetQQgamePrivilegeDailyAward)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivityTencent.GetQQgamePrivilegeDailyAward)
}

::google::protobuf::uint8* GetQQgamePrivilegeDailyAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivityTencent.GetQQgamePrivilegeDailyAward)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivityTencent.GetQQgamePrivilegeDailyAward)
  return target;
}

int GetQQgamePrivilegeDailyAward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQQgamePrivilegeDailyAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQQgamePrivilegeDailyAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQQgamePrivilegeDailyAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQQgamePrivilegeDailyAward::MergeFrom(const GetQQgamePrivilegeDailyAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQQgamePrivilegeDailyAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQQgamePrivilegeDailyAward::CopyFrom(const GetQQgamePrivilegeDailyAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQQgamePrivilegeDailyAward::IsInitialized() const {

  return true;
}

void GetQQgamePrivilegeDailyAward::Swap(GetQQgamePrivilegeDailyAward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQQgamePrivilegeDailyAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQQgamePrivilegeDailyAward_descriptor_;
  metadata.reflection = GetQQgamePrivilegeDailyAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQQgamePrivilegeGrowAward::kIdFieldNumber;
#endif  // !_MSC_VER

GetQQgamePrivilegeGrowAward::GetQQgamePrivilegeGrowAward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoActivityTencent.GetQQgamePrivilegeGrowAward)
}

void GetQQgamePrivilegeGrowAward::InitAsDefaultInstance() {
}

GetQQgamePrivilegeGrowAward::GetQQgamePrivilegeGrowAward(const GetQQgamePrivilegeGrowAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoActivityTencent.GetQQgamePrivilegeGrowAward)
}

void GetQQgamePrivilegeGrowAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQQgamePrivilegeGrowAward::~GetQQgamePrivilegeGrowAward() {
  // @@protoc_insertion_point(destructor:ProtoActivityTencent.GetQQgamePrivilegeGrowAward)
  SharedDtor();
}

void GetQQgamePrivilegeGrowAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetQQgamePrivilegeGrowAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQQgamePrivilegeGrowAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQQgamePrivilegeGrowAward_descriptor_;
}

const GetQQgamePrivilegeGrowAward& GetQQgamePrivilegeGrowAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivityTencent_2eproto();
  return *default_instance_;
}

GetQQgamePrivilegeGrowAward* GetQQgamePrivilegeGrowAward::default_instance_ = NULL;

GetQQgamePrivilegeGrowAward* GetQQgamePrivilegeGrowAward::New() const {
  return new GetQQgamePrivilegeGrowAward;
}

void GetQQgamePrivilegeGrowAward::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQQgamePrivilegeGrowAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoActivityTencent.GetQQgamePrivilegeGrowAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoActivityTencent.GetQQgamePrivilegeGrowAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoActivityTencent.GetQQgamePrivilegeGrowAward)
  return false;
#undef DO_
}

void GetQQgamePrivilegeGrowAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoActivityTencent.GetQQgamePrivilegeGrowAward)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoActivityTencent.GetQQgamePrivilegeGrowAward)
}

::google::protobuf::uint8* GetQQgamePrivilegeGrowAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoActivityTencent.GetQQgamePrivilegeGrowAward)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoActivityTencent.GetQQgamePrivilegeGrowAward)
  return target;
}

int GetQQgamePrivilegeGrowAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQQgamePrivilegeGrowAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQQgamePrivilegeGrowAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQQgamePrivilegeGrowAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQQgamePrivilegeGrowAward::MergeFrom(const GetQQgamePrivilegeGrowAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQQgamePrivilegeGrowAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQQgamePrivilegeGrowAward::CopyFrom(const GetQQgamePrivilegeGrowAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQQgamePrivilegeGrowAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetQQgamePrivilegeGrowAward::Swap(GetQQgamePrivilegeGrowAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQQgamePrivilegeGrowAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQQgamePrivilegeGrowAward_descriptor_;
  metadata.reflection = GetQQgamePrivilegeGrowAward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoActivityTencent

// @@protoc_insertion_point(global_scope)
