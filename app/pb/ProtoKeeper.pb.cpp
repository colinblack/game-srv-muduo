// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoKeeper.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoKeeper.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoKeeper {

namespace {

const ::google::protobuf::Descriptor* KeeperTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeeperInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeeperInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeeperBuyTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperBuyTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeeperWatchAds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperWatchAds_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeeperUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeeperTaskItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperTaskItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeeperSetTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperSetTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeeperSetAutoFeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperSetAutoFeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeeperSetAutoFeedResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeeperSetAutoFeedResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoKeeper_2eproto() {
  protobuf_AddDesc_ProtoKeeper_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoKeeper.proto");
  GOOGLE_CHECK(file != NULL);
  KeeperTask_descriptor_ = file->message_type(0);
  static const int KeeperTask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTask, need_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTask, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTask, status_),
  };
  KeeperTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperTask_descriptor_,
      KeeperTask::default_instance_,
      KeeperTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperTask));
  KeeperInfoReq_descriptor_ = file->message_type(1);
  static const int KeeperInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfoReq, id_),
  };
  KeeperInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperInfoReq_descriptor_,
      KeeperInfoReq::default_instance_,
      KeeperInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperInfoReq));
  KeeperInfoResp_descriptor_ = file->message_type(2);
  static const int KeeperInfoResp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfoResp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfoResp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfoResp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfoResp, overts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfoResp, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfoResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfoResp, task_),
  };
  KeeperInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperInfoResp_descriptor_,
      KeeperInfoResp::default_instance_,
      KeeperInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperInfoResp));
  KeeperBuyTime_descriptor_ = file->message_type(3);
  static const int KeeperBuyTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperBuyTime, id_),
  };
  KeeperBuyTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperBuyTime_descriptor_,
      KeeperBuyTime::default_instance_,
      KeeperBuyTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperBuyTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperBuyTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperBuyTime));
  KeeperWatchAds_descriptor_ = file->message_type(4);
  static const int KeeperWatchAds_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperWatchAds, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperWatchAds, iscostdimaond_),
  };
  KeeperWatchAds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperWatchAds_descriptor_,
      KeeperWatchAds::default_instance_,
      KeeperWatchAds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperWatchAds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperWatchAds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperWatchAds));
  KeeperUpgrade_descriptor_ = file->message_type(5);
  static const int KeeperUpgrade_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperUpgrade, id_),
  };
  KeeperUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperUpgrade_descriptor_,
      KeeperUpgrade::default_instance_,
      KeeperUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperUpgrade));
  KeeperTaskItem_descriptor_ = file->message_type(6);
  static const int KeeperTaskItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTaskItem, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTaskItem, need_),
  };
  KeeperTaskItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperTaskItem_descriptor_,
      KeeperTaskItem::default_instance_,
      KeeperTaskItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTaskItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperTaskItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperTaskItem));
  KeeperSetTask_descriptor_ = file->message_type(7);
  static const int KeeperSetTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperSetTask, keeperid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperSetTask, task_),
  };
  KeeperSetTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperSetTask_descriptor_,
      KeeperSetTask::default_instance_,
      KeeperSetTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperSetTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperSetTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperSetTask));
  KeeperSetAutoFeed_descriptor_ = file->message_type(8);
  static const int KeeperSetAutoFeed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperSetAutoFeed, autofeed_),
  };
  KeeperSetAutoFeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperSetAutoFeed_descriptor_,
      KeeperSetAutoFeed::default_instance_,
      KeeperSetAutoFeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperSetAutoFeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperSetAutoFeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperSetAutoFeed));
  KeeperSetAutoFeedResp_descriptor_ = file->message_type(9);
  static const int KeeperSetAutoFeedResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperSetAutoFeedResp, ret_),
  };
  KeeperSetAutoFeedResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeeperSetAutoFeedResp_descriptor_,
      KeeperSetAutoFeedResp::default_instance_,
      KeeperSetAutoFeedResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperSetAutoFeedResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeeperSetAutoFeedResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeeperSetAutoFeedResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoKeeper_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperTask_descriptor_, &KeeperTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperInfoReq_descriptor_, &KeeperInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperInfoResp_descriptor_, &KeeperInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperBuyTime_descriptor_, &KeeperBuyTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperWatchAds_descriptor_, &KeeperWatchAds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperUpgrade_descriptor_, &KeeperUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperTaskItem_descriptor_, &KeeperTaskItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperSetTask_descriptor_, &KeeperSetTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperSetAutoFeed_descriptor_, &KeeperSetAutoFeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeeperSetAutoFeedResp_descriptor_, &KeeperSetAutoFeedResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoKeeper_2eproto() {
  delete KeeperTask::default_instance_;
  delete KeeperTask_reflection_;
  delete KeeperInfoReq::default_instance_;
  delete KeeperInfoReq_reflection_;
  delete KeeperInfoResp::default_instance_;
  delete KeeperInfoResp_reflection_;
  delete KeeperBuyTime::default_instance_;
  delete KeeperBuyTime_reflection_;
  delete KeeperWatchAds::default_instance_;
  delete KeeperWatchAds_reflection_;
  delete KeeperUpgrade::default_instance_;
  delete KeeperUpgrade_reflection_;
  delete KeeperTaskItem::default_instance_;
  delete KeeperTaskItem_reflection_;
  delete KeeperSetTask::default_instance_;
  delete KeeperSetTask_reflection_;
  delete KeeperSetAutoFeed::default_instance_;
  delete KeeperSetAutoFeed_reflection_;
  delete KeeperSetAutoFeedResp::default_instance_;
  delete KeeperSetAutoFeedResp_reflection_;
}

void protobuf_AddDesc_ProtoKeeper_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ProtoKeeper.proto\022\013ProtoKeeper\032\020DataCo"
    "mmon.proto\"F\n\nKeeperTask\022\n\n\002id\030\001 \002(\r\022\014\n\004"
    "need\030\002 \002(\r\022\016\n\006finish\030\003 \002(\r\022\016\n\006status\030\004 \002"
    "(\r\"\033\n\rKeeperInfoReq\022\n\n\002id\030\001 \002(\r\"\252\001\n\016Keep"
    "erInfoResp\022\n\n\002id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\013\n"
    "\003exp\030\003 \002(\r\022\016\n\006overTs\030\004 \002(\r\022\014\n\004flag\030\005 \002(\r"
    "\022+\n\007commons\030\006 \001(\0132\032.DataCommon.CommonIte"
    "msCPP\022%\n\004task\030\007 \003(\0132\027.ProtoKeeper.Keeper"
    "Task\"\033\n\rKeeperBuyTime\022\n\n\002id\030\001 \002(\r\"3\n\016Kee"
    "perWatchAds\022\n\n\002id\030\001 \002(\r\022\025\n\risCostDimaond"
    "\030\002 \001(\r\"\033\n\rKeeperUpgrade\022\n\n\002id\030\001 \002(\r\".\n\016K"
    "eeperTaskItem\022\016\n\006taskId\030\001 \002(\r\022\014\n\004need\030\002 "
    "\002(\r\"L\n\rKeeperSetTask\022\020\n\010keeperId\030\001 \002(\r\022)"
    "\n\004task\030\002 \003(\0132\033.ProtoKeeper.KeeperTaskIte"
    "m\"%\n\021KeeperSetAutoFeed\022\020\n\010autoFeed\030\001 \002(\r"
    "\"$\n\025KeeperSetAutoFeedResp\022\013\n\003ret\030\001 \002(\r", 638);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoKeeper.proto", &protobuf_RegisterTypes);
  KeeperTask::default_instance_ = new KeeperTask();
  KeeperInfoReq::default_instance_ = new KeeperInfoReq();
  KeeperInfoResp::default_instance_ = new KeeperInfoResp();
  KeeperBuyTime::default_instance_ = new KeeperBuyTime();
  KeeperWatchAds::default_instance_ = new KeeperWatchAds();
  KeeperUpgrade::default_instance_ = new KeeperUpgrade();
  KeeperTaskItem::default_instance_ = new KeeperTaskItem();
  KeeperSetTask::default_instance_ = new KeeperSetTask();
  KeeperSetAutoFeed::default_instance_ = new KeeperSetAutoFeed();
  KeeperSetAutoFeedResp::default_instance_ = new KeeperSetAutoFeedResp();
  KeeperTask::default_instance_->InitAsDefaultInstance();
  KeeperInfoReq::default_instance_->InitAsDefaultInstance();
  KeeperInfoResp::default_instance_->InitAsDefaultInstance();
  KeeperBuyTime::default_instance_->InitAsDefaultInstance();
  KeeperWatchAds::default_instance_->InitAsDefaultInstance();
  KeeperUpgrade::default_instance_->InitAsDefaultInstance();
  KeeperTaskItem::default_instance_->InitAsDefaultInstance();
  KeeperSetTask::default_instance_->InitAsDefaultInstance();
  KeeperSetAutoFeed::default_instance_->InitAsDefaultInstance();
  KeeperSetAutoFeedResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoKeeper_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoKeeper_2eproto {
  StaticDescriptorInitializer_ProtoKeeper_2eproto() {
    protobuf_AddDesc_ProtoKeeper_2eproto();
  }
} static_descriptor_initializer_ProtoKeeper_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int KeeperTask::kIdFieldNumber;
const int KeeperTask::kNeedFieldNumber;
const int KeeperTask::kFinishFieldNumber;
const int KeeperTask::kStatusFieldNumber;
#endif  // !_MSC_VER

KeeperTask::KeeperTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoKeeper.KeeperTask)
}

void KeeperTask::InitAsDefaultInstance() {
}

KeeperTask::KeeperTask(const KeeperTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoKeeper.KeeperTask)
}

void KeeperTask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  need_ = 0u;
  finish_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperTask::~KeeperTask() {
  // @@protoc_insertion_point(destructor:ProtoKeeper.KeeperTask)
  SharedDtor();
}

void KeeperTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeeperTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperTask_descriptor_;
}

const KeeperTask& KeeperTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoKeeper_2eproto();
  return *default_instance_;
}

KeeperTask* KeeperTask::default_instance_ = NULL;

KeeperTask* KeeperTask::New() const {
  return new KeeperTask;
}

void KeeperTask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KeeperTask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoKeeper.KeeperTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_need;
        break;
      }

      // required uint32 need = 2;
      case 2: {
        if (tag == 16) {
         parse_need:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_)));
          set_has_need();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_finish;
        break;
      }

      // required uint32 finish = 3;
      case 3: {
        if (tag == 24) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required uint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoKeeper.KeeperTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoKeeper.KeeperTask)
  return false;
#undef DO_
}

void KeeperTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoKeeper.KeeperTask)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 need = 2;
  if (has_need()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->need(), output);
  }

  // required uint32 finish = 3;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finish(), output);
  }

  // required uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoKeeper.KeeperTask)
}

::google::protobuf::uint8* KeeperTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoKeeper.KeeperTask)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 need = 2;
  if (has_need()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->need(), target);
  }

  // required uint32 finish = 3;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finish(), target);
  }

  // required uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoKeeper.KeeperTask)
  return target;
}

int KeeperTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 need = 2;
    if (has_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need());
    }

    // required uint32 finish = 3;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finish());
    }

    // required uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperTask::MergeFrom(const KeeperTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_need()) {
      set_need(from.need());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperTask::CopyFrom(const KeeperTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void KeeperTask::Swap(KeeperTask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(need_, other->need_);
    std::swap(finish_, other->finish_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperTask_descriptor_;
  metadata.reflection = KeeperTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeeperInfoReq::kIdFieldNumber;
#endif  // !_MSC_VER

KeeperInfoReq::KeeperInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoKeeper.KeeperInfoReq)
}

void KeeperInfoReq::InitAsDefaultInstance() {
}

KeeperInfoReq::KeeperInfoReq(const KeeperInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoKeeper.KeeperInfoReq)
}

void KeeperInfoReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperInfoReq::~KeeperInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoKeeper.KeeperInfoReq)
  SharedDtor();
}

void KeeperInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeeperInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperInfoReq_descriptor_;
}

const KeeperInfoReq& KeeperInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoKeeper_2eproto();
  return *default_instance_;
}

KeeperInfoReq* KeeperInfoReq::default_instance_ = NULL;

KeeperInfoReq* KeeperInfoReq::New() const {
  return new KeeperInfoReq;
}

void KeeperInfoReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoKeeper.KeeperInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoKeeper.KeeperInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoKeeper.KeeperInfoReq)
  return false;
#undef DO_
}

void KeeperInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoKeeper.KeeperInfoReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoKeeper.KeeperInfoReq)
}

::google::protobuf::uint8* KeeperInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoKeeper.KeeperInfoReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoKeeper.KeeperInfoReq)
  return target;
}

int KeeperInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperInfoReq::MergeFrom(const KeeperInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperInfoReq::CopyFrom(const KeeperInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeeperInfoReq::Swap(KeeperInfoReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperInfoReq_descriptor_;
  metadata.reflection = KeeperInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeeperInfoResp::kIdFieldNumber;
const int KeeperInfoResp::kLevelFieldNumber;
const int KeeperInfoResp::kExpFieldNumber;
const int KeeperInfoResp::kOverTsFieldNumber;
const int KeeperInfoResp::kFlagFieldNumber;
const int KeeperInfoResp::kCommonsFieldNumber;
const int KeeperInfoResp::kTaskFieldNumber;
#endif  // !_MSC_VER

KeeperInfoResp::KeeperInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoKeeper.KeeperInfoResp)
}

void KeeperInfoResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

KeeperInfoResp::KeeperInfoResp(const KeeperInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoKeeper.KeeperInfoResp)
}

void KeeperInfoResp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  overts_ = 0u;
  flag_ = 0u;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperInfoResp::~KeeperInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoKeeper.KeeperInfoResp)
  SharedDtor();
}

void KeeperInfoResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void KeeperInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperInfoResp_descriptor_;
}

const KeeperInfoResp& KeeperInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoKeeper_2eproto();
  return *default_instance_;
}

KeeperInfoResp* KeeperInfoResp::default_instance_ = NULL;

KeeperInfoResp* KeeperInfoResp::New() const {
  return new KeeperInfoResp;
}

void KeeperInfoResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KeeperInfoResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, overts_);
    flag_ = 0u;
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoKeeper.KeeperInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // required uint32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_overTs;
        break;
      }

      // required uint32 overTs = 4;
      case 4: {
        if (tag == 32) {
         parse_overTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overts_)));
          set_has_overts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flag;
        break;
      }

      // required uint32 flag = 5;
      case 5: {
        if (tag == 40) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 6;
      case 6: {
        if (tag == 50) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_task;
        break;
      }

      // repeated .ProtoKeeper.KeeperTask task = 7;
      case 7: {
        if (tag == 58) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_task;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoKeeper.KeeperInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoKeeper.KeeperInfoResp)
  return false;
#undef DO_
}

void KeeperInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoKeeper.KeeperInfoResp)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // required uint32 overTs = 4;
  if (has_overts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->overts(), output);
  }

  // required uint32 flag = 5;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flag(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 6;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->commons(), output);
  }

  // repeated .ProtoKeeper.KeeperTask task = 7;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->task(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoKeeper.KeeperInfoResp)
}

::google::protobuf::uint8* KeeperInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoKeeper.KeeperInfoResp)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // required uint32 overTs = 4;
  if (has_overts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->overts(), target);
  }

  // required uint32 flag = 5;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flag(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 6;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->commons(), target);
  }

  // repeated .ProtoKeeper.KeeperTask task = 7;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->task(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoKeeper.KeeperInfoResp)
  return target;
}

int KeeperInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 overTs = 4;
    if (has_overts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->overts());
    }

    // required uint32 flag = 5;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional .DataCommon.CommonItemsCPP commons = 6;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  // repeated .ProtoKeeper.KeeperTask task = 7;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperInfoResp::MergeFrom(const KeeperInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_overts()) {
      set_overts(from.overts());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperInfoResp::CopyFrom(const KeeperInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->task())) return false;
  return true;
}

void KeeperInfoResp::Swap(KeeperInfoResp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(overts_, other->overts_);
    std::swap(flag_, other->flag_);
    std::swap(commons_, other->commons_);
    task_.Swap(&other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperInfoResp_descriptor_;
  metadata.reflection = KeeperInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeeperBuyTime::kIdFieldNumber;
#endif  // !_MSC_VER

KeeperBuyTime::KeeperBuyTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoKeeper.KeeperBuyTime)
}

void KeeperBuyTime::InitAsDefaultInstance() {
}

KeeperBuyTime::KeeperBuyTime(const KeeperBuyTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoKeeper.KeeperBuyTime)
}

void KeeperBuyTime::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperBuyTime::~KeeperBuyTime() {
  // @@protoc_insertion_point(destructor:ProtoKeeper.KeeperBuyTime)
  SharedDtor();
}

void KeeperBuyTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeeperBuyTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperBuyTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperBuyTime_descriptor_;
}

const KeeperBuyTime& KeeperBuyTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoKeeper_2eproto();
  return *default_instance_;
}

KeeperBuyTime* KeeperBuyTime::default_instance_ = NULL;

KeeperBuyTime* KeeperBuyTime::New() const {
  return new KeeperBuyTime;
}

void KeeperBuyTime::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperBuyTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoKeeper.KeeperBuyTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoKeeper.KeeperBuyTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoKeeper.KeeperBuyTime)
  return false;
#undef DO_
}

void KeeperBuyTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoKeeper.KeeperBuyTime)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoKeeper.KeeperBuyTime)
}

::google::protobuf::uint8* KeeperBuyTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoKeeper.KeeperBuyTime)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoKeeper.KeeperBuyTime)
  return target;
}

int KeeperBuyTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperBuyTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperBuyTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperBuyTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperBuyTime::MergeFrom(const KeeperBuyTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperBuyTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperBuyTime::CopyFrom(const KeeperBuyTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperBuyTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeeperBuyTime::Swap(KeeperBuyTime* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperBuyTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperBuyTime_descriptor_;
  metadata.reflection = KeeperBuyTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeeperWatchAds::kIdFieldNumber;
const int KeeperWatchAds::kIsCostDimaondFieldNumber;
#endif  // !_MSC_VER

KeeperWatchAds::KeeperWatchAds()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoKeeper.KeeperWatchAds)
}

void KeeperWatchAds::InitAsDefaultInstance() {
}

KeeperWatchAds::KeeperWatchAds(const KeeperWatchAds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoKeeper.KeeperWatchAds)
}

void KeeperWatchAds::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  iscostdimaond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperWatchAds::~KeeperWatchAds() {
  // @@protoc_insertion_point(destructor:ProtoKeeper.KeeperWatchAds)
  SharedDtor();
}

void KeeperWatchAds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeeperWatchAds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperWatchAds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperWatchAds_descriptor_;
}

const KeeperWatchAds& KeeperWatchAds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoKeeper_2eproto();
  return *default_instance_;
}

KeeperWatchAds* KeeperWatchAds::default_instance_ = NULL;

KeeperWatchAds* KeeperWatchAds::New() const {
  return new KeeperWatchAds;
}

void KeeperWatchAds::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KeeperWatchAds*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, iscostdimaond_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperWatchAds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoKeeper.KeeperWatchAds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isCostDimaond;
        break;
      }

      // optional uint32 isCostDimaond = 2;
      case 2: {
        if (tag == 16) {
         parse_isCostDimaond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iscostdimaond_)));
          set_has_iscostdimaond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoKeeper.KeeperWatchAds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoKeeper.KeeperWatchAds)
  return false;
#undef DO_
}

void KeeperWatchAds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoKeeper.KeeperWatchAds)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 isCostDimaond = 2;
  if (has_iscostdimaond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->iscostdimaond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoKeeper.KeeperWatchAds)
}

::google::protobuf::uint8* KeeperWatchAds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoKeeper.KeeperWatchAds)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 isCostDimaond = 2;
  if (has_iscostdimaond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->iscostdimaond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoKeeper.KeeperWatchAds)
  return target;
}

int KeeperWatchAds::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 isCostDimaond = 2;
    if (has_iscostdimaond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iscostdimaond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperWatchAds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperWatchAds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperWatchAds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperWatchAds::MergeFrom(const KeeperWatchAds& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_iscostdimaond()) {
      set_iscostdimaond(from.iscostdimaond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperWatchAds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperWatchAds::CopyFrom(const KeeperWatchAds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperWatchAds::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeeperWatchAds::Swap(KeeperWatchAds* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(iscostdimaond_, other->iscostdimaond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperWatchAds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperWatchAds_descriptor_;
  metadata.reflection = KeeperWatchAds_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeeperUpgrade::kIdFieldNumber;
#endif  // !_MSC_VER

KeeperUpgrade::KeeperUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoKeeper.KeeperUpgrade)
}

void KeeperUpgrade::InitAsDefaultInstance() {
}

KeeperUpgrade::KeeperUpgrade(const KeeperUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoKeeper.KeeperUpgrade)
}

void KeeperUpgrade::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperUpgrade::~KeeperUpgrade() {
  // @@protoc_insertion_point(destructor:ProtoKeeper.KeeperUpgrade)
  SharedDtor();
}

void KeeperUpgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeeperUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperUpgrade_descriptor_;
}

const KeeperUpgrade& KeeperUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoKeeper_2eproto();
  return *default_instance_;
}

KeeperUpgrade* KeeperUpgrade::default_instance_ = NULL;

KeeperUpgrade* KeeperUpgrade::New() const {
  return new KeeperUpgrade;
}

void KeeperUpgrade::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoKeeper.KeeperUpgrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoKeeper.KeeperUpgrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoKeeper.KeeperUpgrade)
  return false;
#undef DO_
}

void KeeperUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoKeeper.KeeperUpgrade)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoKeeper.KeeperUpgrade)
}

::google::protobuf::uint8* KeeperUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoKeeper.KeeperUpgrade)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoKeeper.KeeperUpgrade)
  return target;
}

int KeeperUpgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperUpgrade::MergeFrom(const KeeperUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperUpgrade::CopyFrom(const KeeperUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperUpgrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeeperUpgrade::Swap(KeeperUpgrade* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperUpgrade_descriptor_;
  metadata.reflection = KeeperUpgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeeperTaskItem::kTaskIdFieldNumber;
const int KeeperTaskItem::kNeedFieldNumber;
#endif  // !_MSC_VER

KeeperTaskItem::KeeperTaskItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoKeeper.KeeperTaskItem)
}

void KeeperTaskItem::InitAsDefaultInstance() {
}

KeeperTaskItem::KeeperTaskItem(const KeeperTaskItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoKeeper.KeeperTaskItem)
}

void KeeperTaskItem::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  need_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperTaskItem::~KeeperTaskItem() {
  // @@protoc_insertion_point(destructor:ProtoKeeper.KeeperTaskItem)
  SharedDtor();
}

void KeeperTaskItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeeperTaskItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperTaskItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperTaskItem_descriptor_;
}

const KeeperTaskItem& KeeperTaskItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoKeeper_2eproto();
  return *default_instance_;
}

KeeperTaskItem* KeeperTaskItem::default_instance_ = NULL;

KeeperTaskItem* KeeperTaskItem::New() const {
  return new KeeperTaskItem;
}

void KeeperTaskItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KeeperTaskItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(taskid_, need_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperTaskItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoKeeper.KeeperTaskItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 taskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_need;
        break;
      }

      // required uint32 need = 2;
      case 2: {
        if (tag == 16) {
         parse_need:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_)));
          set_has_need();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoKeeper.KeeperTaskItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoKeeper.KeeperTaskItem)
  return false;
#undef DO_
}

void KeeperTaskItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoKeeper.KeeperTaskItem)
  // required uint32 taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // required uint32 need = 2;
  if (has_need()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->need(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoKeeper.KeeperTaskItem)
}

::google::protobuf::uint8* KeeperTaskItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoKeeper.KeeperTaskItem)
  // required uint32 taskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // required uint32 need = 2;
  if (has_need()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->need(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoKeeper.KeeperTaskItem)
  return target;
}

int KeeperTaskItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // required uint32 need = 2;
    if (has_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperTaskItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperTaskItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperTaskItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperTaskItem::MergeFrom(const KeeperTaskItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_need()) {
      set_need(from.need());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperTaskItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperTaskItem::CopyFrom(const KeeperTaskItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperTaskItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KeeperTaskItem::Swap(KeeperTaskItem* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(need_, other->need_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperTaskItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperTaskItem_descriptor_;
  metadata.reflection = KeeperTaskItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeeperSetTask::kKeeperIdFieldNumber;
const int KeeperSetTask::kTaskFieldNumber;
#endif  // !_MSC_VER

KeeperSetTask::KeeperSetTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoKeeper.KeeperSetTask)
}

void KeeperSetTask::InitAsDefaultInstance() {
}

KeeperSetTask::KeeperSetTask(const KeeperSetTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoKeeper.KeeperSetTask)
}

void KeeperSetTask::SharedCtor() {
  _cached_size_ = 0;
  keeperid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperSetTask::~KeeperSetTask() {
  // @@protoc_insertion_point(destructor:ProtoKeeper.KeeperSetTask)
  SharedDtor();
}

void KeeperSetTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeeperSetTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperSetTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperSetTask_descriptor_;
}

const KeeperSetTask& KeeperSetTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoKeeper_2eproto();
  return *default_instance_;
}

KeeperSetTask* KeeperSetTask::default_instance_ = NULL;

KeeperSetTask* KeeperSetTask::New() const {
  return new KeeperSetTask;
}

void KeeperSetTask::Clear() {
  keeperid_ = 0u;
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperSetTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoKeeper.KeeperSetTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 keeperId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keeperid_)));
          set_has_keeperid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task;
        break;
      }

      // repeated .ProtoKeeper.KeeperTaskItem task = 2;
      case 2: {
        if (tag == 18) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoKeeper.KeeperSetTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoKeeper.KeeperSetTask)
  return false;
#undef DO_
}

void KeeperSetTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoKeeper.KeeperSetTask)
  // required uint32 keeperId = 1;
  if (has_keeperid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->keeperid(), output);
  }

  // repeated .ProtoKeeper.KeeperTaskItem task = 2;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoKeeper.KeeperSetTask)
}

::google::protobuf::uint8* KeeperSetTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoKeeper.KeeperSetTask)
  // required uint32 keeperId = 1;
  if (has_keeperid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->keeperid(), target);
  }

  // repeated .ProtoKeeper.KeeperTaskItem task = 2;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoKeeper.KeeperSetTask)
  return target;
}

int KeeperSetTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 keeperId = 1;
    if (has_keeperid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keeperid());
    }

  }
  // repeated .ProtoKeeper.KeeperTaskItem task = 2;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperSetTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperSetTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperSetTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperSetTask::MergeFrom(const KeeperSetTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keeperid()) {
      set_keeperid(from.keeperid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperSetTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperSetTask::CopyFrom(const KeeperSetTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperSetTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->task())) return false;
  return true;
}

void KeeperSetTask::Swap(KeeperSetTask* other) {
  if (other != this) {
    std::swap(keeperid_, other->keeperid_);
    task_.Swap(&other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperSetTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperSetTask_descriptor_;
  metadata.reflection = KeeperSetTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeeperSetAutoFeed::kAutoFeedFieldNumber;
#endif  // !_MSC_VER

KeeperSetAutoFeed::KeeperSetAutoFeed()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoKeeper.KeeperSetAutoFeed)
}

void KeeperSetAutoFeed::InitAsDefaultInstance() {
}

KeeperSetAutoFeed::KeeperSetAutoFeed(const KeeperSetAutoFeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoKeeper.KeeperSetAutoFeed)
}

void KeeperSetAutoFeed::SharedCtor() {
  _cached_size_ = 0;
  autofeed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperSetAutoFeed::~KeeperSetAutoFeed() {
  // @@protoc_insertion_point(destructor:ProtoKeeper.KeeperSetAutoFeed)
  SharedDtor();
}

void KeeperSetAutoFeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeeperSetAutoFeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperSetAutoFeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperSetAutoFeed_descriptor_;
}

const KeeperSetAutoFeed& KeeperSetAutoFeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoKeeper_2eproto();
  return *default_instance_;
}

KeeperSetAutoFeed* KeeperSetAutoFeed::default_instance_ = NULL;

KeeperSetAutoFeed* KeeperSetAutoFeed::New() const {
  return new KeeperSetAutoFeed;
}

void KeeperSetAutoFeed::Clear() {
  autofeed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperSetAutoFeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoKeeper.KeeperSetAutoFeed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 autoFeed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autofeed_)));
          set_has_autofeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoKeeper.KeeperSetAutoFeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoKeeper.KeeperSetAutoFeed)
  return false;
#undef DO_
}

void KeeperSetAutoFeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoKeeper.KeeperSetAutoFeed)
  // required uint32 autoFeed = 1;
  if (has_autofeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->autofeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoKeeper.KeeperSetAutoFeed)
}

::google::protobuf::uint8* KeeperSetAutoFeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoKeeper.KeeperSetAutoFeed)
  // required uint32 autoFeed = 1;
  if (has_autofeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->autofeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoKeeper.KeeperSetAutoFeed)
  return target;
}

int KeeperSetAutoFeed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 autoFeed = 1;
    if (has_autofeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autofeed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperSetAutoFeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperSetAutoFeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperSetAutoFeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperSetAutoFeed::MergeFrom(const KeeperSetAutoFeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autofeed()) {
      set_autofeed(from.autofeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperSetAutoFeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperSetAutoFeed::CopyFrom(const KeeperSetAutoFeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperSetAutoFeed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeeperSetAutoFeed::Swap(KeeperSetAutoFeed* other) {
  if (other != this) {
    std::swap(autofeed_, other->autofeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperSetAutoFeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperSetAutoFeed_descriptor_;
  metadata.reflection = KeeperSetAutoFeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeeperSetAutoFeedResp::kRetFieldNumber;
#endif  // !_MSC_VER

KeeperSetAutoFeedResp::KeeperSetAutoFeedResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoKeeper.KeeperSetAutoFeedResp)
}

void KeeperSetAutoFeedResp::InitAsDefaultInstance() {
}

KeeperSetAutoFeedResp::KeeperSetAutoFeedResp(const KeeperSetAutoFeedResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoKeeper.KeeperSetAutoFeedResp)
}

void KeeperSetAutoFeedResp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeeperSetAutoFeedResp::~KeeperSetAutoFeedResp() {
  // @@protoc_insertion_point(destructor:ProtoKeeper.KeeperSetAutoFeedResp)
  SharedDtor();
}

void KeeperSetAutoFeedResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeeperSetAutoFeedResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeeperSetAutoFeedResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeeperSetAutoFeedResp_descriptor_;
}

const KeeperSetAutoFeedResp& KeeperSetAutoFeedResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoKeeper_2eproto();
  return *default_instance_;
}

KeeperSetAutoFeedResp* KeeperSetAutoFeedResp::default_instance_ = NULL;

KeeperSetAutoFeedResp* KeeperSetAutoFeedResp::New() const {
  return new KeeperSetAutoFeedResp;
}

void KeeperSetAutoFeedResp::Clear() {
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeeperSetAutoFeedResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoKeeper.KeeperSetAutoFeedResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoKeeper.KeeperSetAutoFeedResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoKeeper.KeeperSetAutoFeedResp)
  return false;
#undef DO_
}

void KeeperSetAutoFeedResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoKeeper.KeeperSetAutoFeedResp)
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoKeeper.KeeperSetAutoFeedResp)
}

::google::protobuf::uint8* KeeperSetAutoFeedResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoKeeper.KeeperSetAutoFeedResp)
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoKeeper.KeeperSetAutoFeedResp)
  return target;
}

int KeeperSetAutoFeedResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeeperSetAutoFeedResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeeperSetAutoFeedResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeeperSetAutoFeedResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeeperSetAutoFeedResp::MergeFrom(const KeeperSetAutoFeedResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeeperSetAutoFeedResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeeperSetAutoFeedResp::CopyFrom(const KeeperSetAutoFeedResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeeperSetAutoFeedResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeeperSetAutoFeedResp::Swap(KeeperSetAutoFeedResp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeeperSetAutoFeedResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeeperSetAutoFeedResp_descriptor_;
  metadata.reflection = KeeperSetAutoFeedResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoKeeper

// @@protoc_insertion_point(global_scope)
