// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoTheme.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoTheme.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoTheme {

namespace {

const ::google::protobuf::Descriptor* ThemeInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeBuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeBuyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeBuyResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeBuyResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeUseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeUseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThemeInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThemeInfoResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoTheme_2eproto() {
  protobuf_AddDesc_ProtoTheme_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoTheme.proto");
  GOOGLE_CHECK(file != NULL);
  ThemeInfoReq_descriptor_ = file->message_type(0);
  static const int ThemeInfoReq_offsets_[1] = {
  };
  ThemeInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeInfoReq_descriptor_,
      ThemeInfoReq::default_instance_,
      ThemeInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeInfoReq));
  ThemeBuyReq_descriptor_ = file->message_type(1);
  static const int ThemeBuyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeBuyReq, themeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeBuyReq, itemtype_),
  };
  ThemeBuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeBuyReq_descriptor_,
      ThemeBuyReq::default_instance_,
      ThemeBuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeBuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeBuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeBuyReq));
  ThemeBuyResp_descriptor_ = file->message_type(2);
  static const int ThemeBuyResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeBuyResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeBuyResp, themeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeBuyResp, themeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeBuyResp, itemtype_),
  };
  ThemeBuyResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeBuyResp_descriptor_,
      ThemeBuyResp::default_instance_,
      ThemeBuyResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeBuyResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeBuyResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeBuyResp));
  ThemeUseReq_descriptor_ = file->message_type(3);
  static const int ThemeUseReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeUseReq, themeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeUseReq, itemtype_),
  };
  ThemeUseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeUseReq_descriptor_,
      ThemeUseReq::default_instance_,
      ThemeUseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeUseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeUseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeUseReq));
  ThemeInfoResp_descriptor_ = file->message_type(4);
  static const int ThemeInfoResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeInfoResp, use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeInfoResp, own_),
  };
  ThemeInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThemeInfoResp_descriptor_,
      ThemeInfoResp::default_instance_,
      ThemeInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThemeInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThemeInfoResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoTheme_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeInfoReq_descriptor_, &ThemeInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeBuyReq_descriptor_, &ThemeBuyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeBuyResp_descriptor_, &ThemeBuyResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeUseReq_descriptor_, &ThemeUseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThemeInfoResp_descriptor_, &ThemeInfoResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoTheme_2eproto() {
  delete ThemeInfoReq::default_instance_;
  delete ThemeInfoReq_reflection_;
  delete ThemeBuyReq::default_instance_;
  delete ThemeBuyReq_reflection_;
  delete ThemeBuyResp::default_instance_;
  delete ThemeBuyResp_reflection_;
  delete ThemeUseReq::default_instance_;
  delete ThemeUseReq_reflection_;
  delete ThemeInfoResp::default_instance_;
  delete ThemeInfoResp_reflection_;
}

void protobuf_AddDesc_ProtoTheme_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ProtoTheme.proto\022\nProtoTheme\032\020DataComm"
    "on.proto\"\016\n\014ThemeInfoReq\"0\n\013ThemeBuyReq\022"
    "\017\n\007themeId\030\001 \002(\r\022\020\n\010itemType\030\002 \002(\r\"\214\001\n\014T"
    "hemeBuyResp\022+\n\007commons\030\001 \002(\0132\032.DataCommo"
    "n.CommonItemsCPP\022,\n\tthemeInfo\030\002 \002(\0132\031.Pr"
    "otoTheme.ThemeInfoResp\022\017\n\007themeId\030\003 \001(\r\022"
    "\020\n\010itemType\030\004 \001(\r\"0\n\013ThemeUseReq\022\017\n\007them"
    "eId\030\001 \002(\r\022\020\n\010itemType\030\002 \003(\r\")\n\rThemeInfo"
    "Resp\022\013\n\003use\030\001 \003(\r\022\013\n\003own\030\002 \003(\r", 350);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoTheme.proto", &protobuf_RegisterTypes);
  ThemeInfoReq::default_instance_ = new ThemeInfoReq();
  ThemeBuyReq::default_instance_ = new ThemeBuyReq();
  ThemeBuyResp::default_instance_ = new ThemeBuyResp();
  ThemeUseReq::default_instance_ = new ThemeUseReq();
  ThemeInfoResp::default_instance_ = new ThemeInfoResp();
  ThemeInfoReq::default_instance_->InitAsDefaultInstance();
  ThemeBuyReq::default_instance_->InitAsDefaultInstance();
  ThemeBuyResp::default_instance_->InitAsDefaultInstance();
  ThemeUseReq::default_instance_->InitAsDefaultInstance();
  ThemeInfoResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoTheme_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoTheme_2eproto {
  StaticDescriptorInitializer_ProtoTheme_2eproto() {
    protobuf_AddDesc_ProtoTheme_2eproto();
  }
} static_descriptor_initializer_ProtoTheme_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ThemeInfoReq::ThemeInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTheme.ThemeInfoReq)
}

void ThemeInfoReq::InitAsDefaultInstance() {
}

ThemeInfoReq::ThemeInfoReq(const ThemeInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoTheme.ThemeInfoReq)
}

void ThemeInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeInfoReq::~ThemeInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoTheme.ThemeInfoReq)
  SharedDtor();
}

void ThemeInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThemeInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeInfoReq_descriptor_;
}

const ThemeInfoReq& ThemeInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTheme_2eproto();
  return *default_instance_;
}

ThemeInfoReq* ThemeInfoReq::default_instance_ = NULL;

ThemeInfoReq* ThemeInfoReq::New() const {
  return new ThemeInfoReq;
}

void ThemeInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTheme.ThemeInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTheme.ThemeInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTheme.ThemeInfoReq)
  return false;
#undef DO_
}

void ThemeInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTheme.ThemeInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTheme.ThemeInfoReq)
}

::google::protobuf::uint8* ThemeInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTheme.ThemeInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTheme.ThemeInfoReq)
  return target;
}

int ThemeInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeInfoReq::MergeFrom(const ThemeInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeInfoReq::CopyFrom(const ThemeInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeInfoReq::IsInitialized() const {

  return true;
}

void ThemeInfoReq::Swap(ThemeInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeInfoReq_descriptor_;
  metadata.reflection = ThemeInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeBuyReq::kThemeIdFieldNumber;
const int ThemeBuyReq::kItemTypeFieldNumber;
#endif  // !_MSC_VER

ThemeBuyReq::ThemeBuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTheme.ThemeBuyReq)
}

void ThemeBuyReq::InitAsDefaultInstance() {
}

ThemeBuyReq::ThemeBuyReq(const ThemeBuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoTheme.ThemeBuyReq)
}

void ThemeBuyReq::SharedCtor() {
  _cached_size_ = 0;
  themeid_ = 0u;
  itemtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeBuyReq::~ThemeBuyReq() {
  // @@protoc_insertion_point(destructor:ProtoTheme.ThemeBuyReq)
  SharedDtor();
}

void ThemeBuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThemeBuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeBuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeBuyReq_descriptor_;
}

const ThemeBuyReq& ThemeBuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTheme_2eproto();
  return *default_instance_;
}

ThemeBuyReq* ThemeBuyReq::default_instance_ = NULL;

ThemeBuyReq* ThemeBuyReq::New() const {
  return new ThemeBuyReq;
}

void ThemeBuyReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ThemeBuyReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(themeid_, itemtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeBuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTheme.ThemeBuyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 themeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &themeid_)));
          set_has_themeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemType;
        break;
      }

      // required uint32 itemType = 2;
      case 2: {
        if (tag == 16) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTheme.ThemeBuyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTheme.ThemeBuyReq)
  return false;
#undef DO_
}

void ThemeBuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTheme.ThemeBuyReq)
  // required uint32 themeId = 1;
  if (has_themeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->themeid(), output);
  }

  // required uint32 itemType = 2;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTheme.ThemeBuyReq)
}

::google::protobuf::uint8* ThemeBuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTheme.ThemeBuyReq)
  // required uint32 themeId = 1;
  if (has_themeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->themeid(), target);
  }

  // required uint32 itemType = 2;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTheme.ThemeBuyReq)
  return target;
}

int ThemeBuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 themeId = 1;
    if (has_themeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->themeid());
    }

    // required uint32 itemType = 2;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeBuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeBuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeBuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeBuyReq::MergeFrom(const ThemeBuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_themeid()) {
      set_themeid(from.themeid());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeBuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeBuyReq::CopyFrom(const ThemeBuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeBuyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ThemeBuyReq::Swap(ThemeBuyReq* other) {
  if (other != this) {
    std::swap(themeid_, other->themeid_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeBuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeBuyReq_descriptor_;
  metadata.reflection = ThemeBuyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeBuyResp::kCommonsFieldNumber;
const int ThemeBuyResp::kThemeInfoFieldNumber;
const int ThemeBuyResp::kThemeIdFieldNumber;
const int ThemeBuyResp::kItemTypeFieldNumber;
#endif  // !_MSC_VER

ThemeBuyResp::ThemeBuyResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTheme.ThemeBuyResp)
}

void ThemeBuyResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  themeinfo_ = const_cast< ::ProtoTheme::ThemeInfoResp*>(&::ProtoTheme::ThemeInfoResp::default_instance());
}

ThemeBuyResp::ThemeBuyResp(const ThemeBuyResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoTheme.ThemeBuyResp)
}

void ThemeBuyResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  themeinfo_ = NULL;
  themeid_ = 0u;
  itemtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeBuyResp::~ThemeBuyResp() {
  // @@protoc_insertion_point(destructor:ProtoTheme.ThemeBuyResp)
  SharedDtor();
}

void ThemeBuyResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete themeinfo_;
  }
}

void ThemeBuyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeBuyResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeBuyResp_descriptor_;
}

const ThemeBuyResp& ThemeBuyResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTheme_2eproto();
  return *default_instance_;
}

ThemeBuyResp* ThemeBuyResp::default_instance_ = NULL;

ThemeBuyResp* ThemeBuyResp::New() const {
  return new ThemeBuyResp;
}

void ThemeBuyResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ThemeBuyResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(themeid_, itemtype_);
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_themeinfo()) {
      if (themeinfo_ != NULL) themeinfo_->::ProtoTheme::ThemeInfoResp::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeBuyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTheme.ThemeBuyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_themeInfo;
        break;
      }

      // required .ProtoTheme.ThemeInfoResp themeInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_themeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_themeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_themeId;
        break;
      }

      // optional uint32 themeId = 3;
      case 3: {
        if (tag == 24) {
         parse_themeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &themeid_)));
          set_has_themeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemType;
        break;
      }

      // optional uint32 itemType = 4;
      case 4: {
        if (tag == 32) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTheme.ThemeBuyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTheme.ThemeBuyResp)
  return false;
#undef DO_
}

void ThemeBuyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTheme.ThemeBuyResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  // required .ProtoTheme.ThemeInfoResp themeInfo = 2;
  if (has_themeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->themeinfo(), output);
  }

  // optional uint32 themeId = 3;
  if (has_themeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->themeid(), output);
  }

  // optional uint32 itemType = 4;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTheme.ThemeBuyResp)
}

::google::protobuf::uint8* ThemeBuyResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTheme.ThemeBuyResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  // required .ProtoTheme.ThemeInfoResp themeInfo = 2;
  if (has_themeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->themeinfo(), target);
  }

  // optional uint32 themeId = 3;
  if (has_themeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->themeid(), target);
  }

  // optional uint32 itemType = 4;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTheme.ThemeBuyResp)
  return target;
}

int ThemeBuyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required .ProtoTheme.ThemeInfoResp themeInfo = 2;
    if (has_themeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->themeinfo());
    }

    // optional uint32 themeId = 3;
    if (has_themeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->themeid());
    }

    // optional uint32 itemType = 4;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeBuyResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeBuyResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeBuyResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeBuyResp::MergeFrom(const ThemeBuyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_themeinfo()) {
      mutable_themeinfo()->::ProtoTheme::ThemeInfoResp::MergeFrom(from.themeinfo());
    }
    if (from.has_themeid()) {
      set_themeid(from.themeid());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeBuyResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeBuyResp::CopyFrom(const ThemeBuyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeBuyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ThemeBuyResp::Swap(ThemeBuyResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(themeinfo_, other->themeinfo_);
    std::swap(themeid_, other->themeid_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeBuyResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeBuyResp_descriptor_;
  metadata.reflection = ThemeBuyResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeUseReq::kThemeIdFieldNumber;
const int ThemeUseReq::kItemTypeFieldNumber;
#endif  // !_MSC_VER

ThemeUseReq::ThemeUseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTheme.ThemeUseReq)
}

void ThemeUseReq::InitAsDefaultInstance() {
}

ThemeUseReq::ThemeUseReq(const ThemeUseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoTheme.ThemeUseReq)
}

void ThemeUseReq::SharedCtor() {
  _cached_size_ = 0;
  themeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeUseReq::~ThemeUseReq() {
  // @@protoc_insertion_point(destructor:ProtoTheme.ThemeUseReq)
  SharedDtor();
}

void ThemeUseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThemeUseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeUseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeUseReq_descriptor_;
}

const ThemeUseReq& ThemeUseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTheme_2eproto();
  return *default_instance_;
}

ThemeUseReq* ThemeUseReq::default_instance_ = NULL;

ThemeUseReq* ThemeUseReq::New() const {
  return new ThemeUseReq;
}

void ThemeUseReq::Clear() {
  themeid_ = 0u;
  itemtype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeUseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTheme.ThemeUseReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 themeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &themeid_)));
          set_has_themeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemType;
        break;
      }

      // repeated uint32 itemType = 2;
      case 2: {
        if (tag == 16) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_itemtype())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_itemtype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemType;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTheme.ThemeUseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTheme.ThemeUseReq)
  return false;
#undef DO_
}

void ThemeUseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTheme.ThemeUseReq)
  // required uint32 themeId = 1;
  if (has_themeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->themeid(), output);
  }

  // repeated uint32 itemType = 2;
  for (int i = 0; i < this->itemtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->itemtype(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTheme.ThemeUseReq)
}

::google::protobuf::uint8* ThemeUseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTheme.ThemeUseReq)
  // required uint32 themeId = 1;
  if (has_themeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->themeid(), target);
  }

  // repeated uint32 itemType = 2;
  for (int i = 0; i < this->itemtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->itemtype(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTheme.ThemeUseReq)
  return target;
}

int ThemeUseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 themeId = 1;
    if (has_themeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->themeid());
    }

  }
  // repeated uint32 itemType = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->itemtype(i));
    }
    total_size += 1 * this->itemtype_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeUseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeUseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeUseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeUseReq::MergeFrom(const ThemeUseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemtype_.MergeFrom(from.itemtype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_themeid()) {
      set_themeid(from.themeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeUseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeUseReq::CopyFrom(const ThemeUseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeUseReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ThemeUseReq::Swap(ThemeUseReq* other) {
  if (other != this) {
    std::swap(themeid_, other->themeid_);
    itemtype_.Swap(&other->itemtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeUseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeUseReq_descriptor_;
  metadata.reflection = ThemeUseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThemeInfoResp::kUseFieldNumber;
const int ThemeInfoResp::kOwnFieldNumber;
#endif  // !_MSC_VER

ThemeInfoResp::ThemeInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTheme.ThemeInfoResp)
}

void ThemeInfoResp::InitAsDefaultInstance() {
}

ThemeInfoResp::ThemeInfoResp(const ThemeInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoTheme.ThemeInfoResp)
}

void ThemeInfoResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThemeInfoResp::~ThemeInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoTheme.ThemeInfoResp)
  SharedDtor();
}

void ThemeInfoResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThemeInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThemeInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThemeInfoResp_descriptor_;
}

const ThemeInfoResp& ThemeInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTheme_2eproto();
  return *default_instance_;
}

ThemeInfoResp* ThemeInfoResp::default_instance_ = NULL;

ThemeInfoResp* ThemeInfoResp::New() const {
  return new ThemeInfoResp;
}

void ThemeInfoResp::Clear() {
  use_.Clear();
  own_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThemeInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTheme.ThemeInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 use = 1;
      case 1: {
        if (tag == 8) {
         parse_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_use())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_use())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_use;
        if (input->ExpectTag(16)) goto parse_own;
        break;
      }

      // repeated uint32 own = 2;
      case 2: {
        if (tag == 16) {
         parse_own:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_own())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_own())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_own;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTheme.ThemeInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTheme.ThemeInfoResp)
  return false;
#undef DO_
}

void ThemeInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTheme.ThemeInfoResp)
  // repeated uint32 use = 1;
  for (int i = 0; i < this->use_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->use(i), output);
  }

  // repeated uint32 own = 2;
  for (int i = 0; i < this->own_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->own(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTheme.ThemeInfoResp)
}

::google::protobuf::uint8* ThemeInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTheme.ThemeInfoResp)
  // repeated uint32 use = 1;
  for (int i = 0; i < this->use_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->use(i), target);
  }

  // repeated uint32 own = 2;
  for (int i = 0; i < this->own_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->own(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTheme.ThemeInfoResp)
  return target;
}

int ThemeInfoResp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 use = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->use_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->use(i));
    }
    total_size += 1 * this->use_size() + data_size;
  }

  // repeated uint32 own = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->own_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->own(i));
    }
    total_size += 1 * this->own_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThemeInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThemeInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThemeInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThemeInfoResp::MergeFrom(const ThemeInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  use_.MergeFrom(from.use_);
  own_.MergeFrom(from.own_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThemeInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeInfoResp::CopyFrom(const ThemeInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeInfoResp::IsInitialized() const {

  return true;
}

void ThemeInfoResp::Swap(ThemeInfoResp* other) {
  if (other != this) {
    use_.Swap(&other->use_);
    own_.Swap(&other->own_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThemeInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThemeInfoResp_descriptor_;
  metadata.reflection = ThemeInfoResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoTheme

// @@protoc_insertion_point(global_scope)
