// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataCommon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DataCommon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DataCommon {

namespace {

const ::google::protobuf::Descriptor* BaseItemCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseItemCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBaseChangeCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBaseChangeCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropsItemCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropsItemCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropsChangeCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropsChangeCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropsAllChangeCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropsAllChangeCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonItemsCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonItemsCPP_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DataCommon_2eproto() {
  protobuf_AddDesc_DataCommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DataCommon.proto");
  GOOGLE_CHECK(file != NULL);
  BaseItemCPP_descriptor_ = file->message_type(0);
  static const int BaseItemCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseItemCPP, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseItemCPP, change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseItemCPP, totalvalue_),
  };
  BaseItemCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseItemCPP_descriptor_,
      BaseItemCPP::default_instance_,
      BaseItemCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseItemCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseItemCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseItemCPP));
  UserBaseChangeCPP_descriptor_ = file->message_type(1);
  static const int UserBaseChangeCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseChangeCPP, baseitem_),
  };
  UserBaseChangeCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBaseChangeCPP_descriptor_,
      UserBaseChangeCPP::default_instance_,
      UserBaseChangeCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseChangeCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseChangeCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBaseChangeCPP));
  PropsItemCPP_descriptor_ = file->message_type(2);
  static const int PropsItemCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsItemCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsItemCPP, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsItemCPP, itemcnt_),
  };
  PropsItemCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropsItemCPP_descriptor_,
      PropsItemCPP::default_instance_,
      PropsItemCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsItemCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsItemCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropsItemCPP));
  PropsChangeCPP_descriptor_ = file->message_type(3);
  static const int PropsChangeCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsChangeCPP, change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsChangeCPP, props_),
  };
  PropsChangeCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropsChangeCPP_descriptor_,
      PropsChangeCPP::default_instance_,
      PropsChangeCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsChangeCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsChangeCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropsChangeCPP));
  PropsAllChangeCPP_descriptor_ = file->message_type(4);
  static const int PropsAllChangeCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsAllChangeCPP, propsitem_),
  };
  PropsAllChangeCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropsAllChangeCPP_descriptor_,
      PropsAllChangeCPP::default_instance_,
      PropsAllChangeCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsAllChangeCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsAllChangeCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropsAllChangeCPP));
  CommonItemsCPP_descriptor_ = file->message_type(5);
  static const int CommonItemsCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonItemsCPP, userbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonItemsCPP, props_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonItemsCPP, from_),
  };
  CommonItemsCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonItemsCPP_descriptor_,
      CommonItemsCPP::default_instance_,
      CommonItemsCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonItemsCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonItemsCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonItemsCPP));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DataCommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseItemCPP_descriptor_, &BaseItemCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBaseChangeCPP_descriptor_, &UserBaseChangeCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropsItemCPP_descriptor_, &PropsItemCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropsChangeCPP_descriptor_, &PropsChangeCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropsAllChangeCPP_descriptor_, &PropsAllChangeCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonItemsCPP_descriptor_, &CommonItemsCPP::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DataCommon_2eproto() {
  delete BaseItemCPP::default_instance_;
  delete BaseItemCPP_reflection_;
  delete UserBaseChangeCPP::default_instance_;
  delete UserBaseChangeCPP_reflection_;
  delete PropsItemCPP::default_instance_;
  delete PropsItemCPP_reflection_;
  delete PropsChangeCPP::default_instance_;
  delete PropsChangeCPP_reflection_;
  delete PropsAllChangeCPP::default_instance_;
  delete PropsAllChangeCPP_reflection_;
  delete CommonItemsCPP::default_instance_;
  delete CommonItemsCPP_reflection_;
}

void protobuf_AddDesc_DataCommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020DataCommon.proto\022\nDataCommon\"\?\n\013BaseIt"
    "emCPP\022\014\n\004type\030\001 \002(\r\022\016\n\006change\030\002 \002(\005\022\022\n\nt"
    "otalValue\030\003 \002(\004\">\n\021UserBaseChangeCPP\022)\n\010"
    "baseItem\030\001 \003(\0132\027.DataCommon.BaseItemCPP\""
    "<\n\014PropsItemCPP\022\n\n\002ud\030\001 \002(\r\022\017\n\007propsId\030\002"
    " \002(\r\022\017\n\007itemCnt\030\003 \002(\r\"I\n\016PropsChangeCPP\022"
    "\016\n\006change\030\001 \002(\005\022\'\n\005props\030\002 \002(\0132\030.DataCom"
    "mon.PropsItemCPP\"B\n\021PropsAllChangeCPP\022-\n"
    "\tpropsitem\030\001 \003(\0132\032.DataCommon.PropsChang"
    "eCPP\"}\n\016CommonItemsCPP\022/\n\010userbase\030\001 \001(\013"
    "2\035.DataCommon.UserBaseChangeCPP\022,\n\005props"
    "\030\002 \001(\0132\035.DataCommon.PropsAllChangeCPP\022\014\n"
    "\004from\030\003 \001(\r", 491);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DataCommon.proto", &protobuf_RegisterTypes);
  BaseItemCPP::default_instance_ = new BaseItemCPP();
  UserBaseChangeCPP::default_instance_ = new UserBaseChangeCPP();
  PropsItemCPP::default_instance_ = new PropsItemCPP();
  PropsChangeCPP::default_instance_ = new PropsChangeCPP();
  PropsAllChangeCPP::default_instance_ = new PropsAllChangeCPP();
  CommonItemsCPP::default_instance_ = new CommonItemsCPP();
  BaseItemCPP::default_instance_->InitAsDefaultInstance();
  UserBaseChangeCPP::default_instance_->InitAsDefaultInstance();
  PropsItemCPP::default_instance_->InitAsDefaultInstance();
  PropsChangeCPP::default_instance_->InitAsDefaultInstance();
  PropsAllChangeCPP::default_instance_->InitAsDefaultInstance();
  CommonItemsCPP::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DataCommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DataCommon_2eproto {
  StaticDescriptorInitializer_DataCommon_2eproto() {
    protobuf_AddDesc_DataCommon_2eproto();
  }
} static_descriptor_initializer_DataCommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BaseItemCPP::kTypeFieldNumber;
const int BaseItemCPP::kChangeFieldNumber;
const int BaseItemCPP::kTotalValueFieldNumber;
#endif  // !_MSC_VER

BaseItemCPP::BaseItemCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCommon.BaseItemCPP)
}

void BaseItemCPP::InitAsDefaultInstance() {
}

BaseItemCPP::BaseItemCPP(const BaseItemCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataCommon.BaseItemCPP)
}

void BaseItemCPP::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  change_ = 0;
  totalvalue_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseItemCPP::~BaseItemCPP() {
  // @@protoc_insertion_point(destructor:DataCommon.BaseItemCPP)
  SharedDtor();
}

void BaseItemCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseItemCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseItemCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseItemCPP_descriptor_;
}

const BaseItemCPP& BaseItemCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCommon_2eproto();
  return *default_instance_;
}

BaseItemCPP* BaseItemCPP::default_instance_ = NULL;

BaseItemCPP* BaseItemCPP::New() const {
  return new BaseItemCPP;
}

void BaseItemCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BaseItemCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, totalvalue_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseItemCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCommon.BaseItemCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_change;
        break;
      }

      // required int32 change = 2;
      case 2: {
        if (tag == 16) {
         parse_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_)));
          set_has_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalValue;
        break;
      }

      // required uint64 totalValue = 3;
      case 3: {
        if (tag == 24) {
         parse_totalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalvalue_)));
          set_has_totalvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCommon.BaseItemCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCommon.BaseItemCPP)
  return false;
#undef DO_
}

void BaseItemCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCommon.BaseItemCPP)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required int32 change = 2;
  if (has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->change(), output);
  }

  // required uint64 totalValue = 3;
  if (has_totalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->totalvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCommon.BaseItemCPP)
}

::google::protobuf::uint8* BaseItemCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCommon.BaseItemCPP)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required int32 change = 2;
  if (has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->change(), target);
  }

  // required uint64 totalValue = 3;
  if (has_totalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->totalvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCommon.BaseItemCPP)
  return target;
}

int BaseItemCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required int32 change = 2;
    if (has_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change());
    }

    // required uint64 totalValue = 3;
    if (has_totalvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseItemCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseItemCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseItemCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseItemCPP::MergeFrom(const BaseItemCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_change()) {
      set_change(from.change());
    }
    if (from.has_totalvalue()) {
      set_totalvalue(from.totalvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseItemCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseItemCPP::CopyFrom(const BaseItemCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseItemCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BaseItemCPP::Swap(BaseItemCPP* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(change_, other->change_);
    std::swap(totalvalue_, other->totalvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseItemCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseItemCPP_descriptor_;
  metadata.reflection = BaseItemCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserBaseChangeCPP::kBaseItemFieldNumber;
#endif  // !_MSC_VER

UserBaseChangeCPP::UserBaseChangeCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCommon.UserBaseChangeCPP)
}

void UserBaseChangeCPP::InitAsDefaultInstance() {
}

UserBaseChangeCPP::UserBaseChangeCPP(const UserBaseChangeCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataCommon.UserBaseChangeCPP)
}

void UserBaseChangeCPP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBaseChangeCPP::~UserBaseChangeCPP() {
  // @@protoc_insertion_point(destructor:DataCommon.UserBaseChangeCPP)
  SharedDtor();
}

void UserBaseChangeCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserBaseChangeCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBaseChangeCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBaseChangeCPP_descriptor_;
}

const UserBaseChangeCPP& UserBaseChangeCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCommon_2eproto();
  return *default_instance_;
}

UserBaseChangeCPP* UserBaseChangeCPP::default_instance_ = NULL;

UserBaseChangeCPP* UserBaseChangeCPP::New() const {
  return new UserBaseChangeCPP;
}

void UserBaseChangeCPP::Clear() {
  baseitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBaseChangeCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCommon.UserBaseChangeCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DataCommon.BaseItemCPP baseItem = 1;
      case 1: {
        if (tag == 10) {
         parse_baseItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baseitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_baseItem;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCommon.UserBaseChangeCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCommon.UserBaseChangeCPP)
  return false;
#undef DO_
}

void UserBaseChangeCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCommon.UserBaseChangeCPP)
  // repeated .DataCommon.BaseItemCPP baseItem = 1;
  for (int i = 0; i < this->baseitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCommon.UserBaseChangeCPP)
}

::google::protobuf::uint8* UserBaseChangeCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCommon.UserBaseChangeCPP)
  // repeated .DataCommon.BaseItemCPP baseItem = 1;
  for (int i = 0; i < this->baseitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCommon.UserBaseChangeCPP)
  return target;
}

int UserBaseChangeCPP::ByteSize() const {
  int total_size = 0;

  // repeated .DataCommon.BaseItemCPP baseItem = 1;
  total_size += 1 * this->baseitem_size();
  for (int i = 0; i < this->baseitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baseitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBaseChangeCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBaseChangeCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBaseChangeCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBaseChangeCPP::MergeFrom(const UserBaseChangeCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  baseitem_.MergeFrom(from.baseitem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBaseChangeCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBaseChangeCPP::CopyFrom(const UserBaseChangeCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBaseChangeCPP::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->baseitem())) return false;
  return true;
}

void UserBaseChangeCPP::Swap(UserBaseChangeCPP* other) {
  if (other != this) {
    baseitem_.Swap(&other->baseitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBaseChangeCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBaseChangeCPP_descriptor_;
  metadata.reflection = UserBaseChangeCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropsItemCPP::kUdFieldNumber;
const int PropsItemCPP::kPropsIdFieldNumber;
const int PropsItemCPP::kItemCntFieldNumber;
#endif  // !_MSC_VER

PropsItemCPP::PropsItemCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCommon.PropsItemCPP)
}

void PropsItemCPP::InitAsDefaultInstance() {
}

PropsItemCPP::PropsItemCPP(const PropsItemCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataCommon.PropsItemCPP)
}

void PropsItemCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  propsid_ = 0u;
  itemcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropsItemCPP::~PropsItemCPP() {
  // @@protoc_insertion_point(destructor:DataCommon.PropsItemCPP)
  SharedDtor();
}

void PropsItemCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropsItemCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropsItemCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropsItemCPP_descriptor_;
}

const PropsItemCPP& PropsItemCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCommon_2eproto();
  return *default_instance_;
}

PropsItemCPP* PropsItemCPP::default_instance_ = NULL;

PropsItemCPP* PropsItemCPP::New() const {
  return new PropsItemCPP;
}

void PropsItemCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PropsItemCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ud_, itemcnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropsItemCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCommon.PropsItemCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsId;
        break;
      }

      // required uint32 propsId = 2;
      case 2: {
        if (tag == 16) {
         parse_propsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemCnt;
        break;
      }

      // required uint32 itemCnt = 3;
      case 3: {
        if (tag == 24) {
         parse_itemCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcnt_)));
          set_has_itemcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCommon.PropsItemCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCommon.PropsItemCPP)
  return false;
#undef DO_
}

void PropsItemCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCommon.PropsItemCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 propsId = 2;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propsid(), output);
  }

  // required uint32 itemCnt = 3;
  if (has_itemcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCommon.PropsItemCPP)
}

::google::protobuf::uint8* PropsItemCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCommon.PropsItemCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 propsId = 2;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propsid(), target);
  }

  // required uint32 itemCnt = 3;
  if (has_itemcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCommon.PropsItemCPP)
  return target;
}

int PropsItemCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 propsId = 2;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 itemCnt = 3;
    if (has_itemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropsItemCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropsItemCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropsItemCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropsItemCPP::MergeFrom(const PropsItemCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_itemcnt()) {
      set_itemcnt(from.itemcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropsItemCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropsItemCPP::CopyFrom(const PropsItemCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropsItemCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PropsItemCPP::Swap(PropsItemCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(propsid_, other->propsid_);
    std::swap(itemcnt_, other->itemcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropsItemCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropsItemCPP_descriptor_;
  metadata.reflection = PropsItemCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropsChangeCPP::kChangeFieldNumber;
const int PropsChangeCPP::kPropsFieldNumber;
#endif  // !_MSC_VER

PropsChangeCPP::PropsChangeCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCommon.PropsChangeCPP)
}

void PropsChangeCPP::InitAsDefaultInstance() {
  props_ = const_cast< ::DataCommon::PropsItemCPP*>(&::DataCommon::PropsItemCPP::default_instance());
}

PropsChangeCPP::PropsChangeCPP(const PropsChangeCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataCommon.PropsChangeCPP)
}

void PropsChangeCPP::SharedCtor() {
  _cached_size_ = 0;
  change_ = 0;
  props_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropsChangeCPP::~PropsChangeCPP() {
  // @@protoc_insertion_point(destructor:DataCommon.PropsChangeCPP)
  SharedDtor();
}

void PropsChangeCPP::SharedDtor() {
  if (this != default_instance_) {
    delete props_;
  }
}

void PropsChangeCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropsChangeCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropsChangeCPP_descriptor_;
}

const PropsChangeCPP& PropsChangeCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCommon_2eproto();
  return *default_instance_;
}

PropsChangeCPP* PropsChangeCPP::default_instance_ = NULL;

PropsChangeCPP* PropsChangeCPP::New() const {
  return new PropsChangeCPP;
}

void PropsChangeCPP::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    change_ = 0;
    if (has_props()) {
      if (props_ != NULL) props_->::DataCommon::PropsItemCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropsChangeCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCommon.PropsChangeCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 change = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_)));
          set_has_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_props;
        break;
      }

      // required .DataCommon.PropsItemCPP props = 2;
      case 2: {
        if (tag == 18) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_props()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCommon.PropsChangeCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCommon.PropsChangeCPP)
  return false;
#undef DO_
}

void PropsChangeCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCommon.PropsChangeCPP)
  // required int32 change = 1;
  if (has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->change(), output);
  }

  // required .DataCommon.PropsItemCPP props = 2;
  if (has_props()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->props(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCommon.PropsChangeCPP)
}

::google::protobuf::uint8* PropsChangeCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCommon.PropsChangeCPP)
  // required int32 change = 1;
  if (has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->change(), target);
  }

  // required .DataCommon.PropsItemCPP props = 2;
  if (has_props()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->props(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCommon.PropsChangeCPP)
  return target;
}

int PropsChangeCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 change = 1;
    if (has_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change());
    }

    // required .DataCommon.PropsItemCPP props = 2;
    if (has_props()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->props());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropsChangeCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropsChangeCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropsChangeCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropsChangeCPP::MergeFrom(const PropsChangeCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change()) {
      set_change(from.change());
    }
    if (from.has_props()) {
      mutable_props()->::DataCommon::PropsItemCPP::MergeFrom(from.props());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropsChangeCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropsChangeCPP::CopyFrom(const PropsChangeCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropsChangeCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_props()) {
    if (!this->props().IsInitialized()) return false;
  }
  return true;
}

void PropsChangeCPP::Swap(PropsChangeCPP* other) {
  if (other != this) {
    std::swap(change_, other->change_);
    std::swap(props_, other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropsChangeCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropsChangeCPP_descriptor_;
  metadata.reflection = PropsChangeCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropsAllChangeCPP::kPropsitemFieldNumber;
#endif  // !_MSC_VER

PropsAllChangeCPP::PropsAllChangeCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCommon.PropsAllChangeCPP)
}

void PropsAllChangeCPP::InitAsDefaultInstance() {
}

PropsAllChangeCPP::PropsAllChangeCPP(const PropsAllChangeCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataCommon.PropsAllChangeCPP)
}

void PropsAllChangeCPP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropsAllChangeCPP::~PropsAllChangeCPP() {
  // @@protoc_insertion_point(destructor:DataCommon.PropsAllChangeCPP)
  SharedDtor();
}

void PropsAllChangeCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropsAllChangeCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropsAllChangeCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropsAllChangeCPP_descriptor_;
}

const PropsAllChangeCPP& PropsAllChangeCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCommon_2eproto();
  return *default_instance_;
}

PropsAllChangeCPP* PropsAllChangeCPP::default_instance_ = NULL;

PropsAllChangeCPP* PropsAllChangeCPP::New() const {
  return new PropsAllChangeCPP;
}

void PropsAllChangeCPP::Clear() {
  propsitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropsAllChangeCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCommon.PropsAllChangeCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DataCommon.PropsChangeCPP propsitem = 1;
      case 1: {
        if (tag == 10) {
         parse_propsitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propsitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_propsitem;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCommon.PropsAllChangeCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCommon.PropsAllChangeCPP)
  return false;
#undef DO_
}

void PropsAllChangeCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCommon.PropsAllChangeCPP)
  // repeated .DataCommon.PropsChangeCPP propsitem = 1;
  for (int i = 0; i < this->propsitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->propsitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCommon.PropsAllChangeCPP)
}

::google::protobuf::uint8* PropsAllChangeCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCommon.PropsAllChangeCPP)
  // repeated .DataCommon.PropsChangeCPP propsitem = 1;
  for (int i = 0; i < this->propsitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->propsitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCommon.PropsAllChangeCPP)
  return target;
}

int PropsAllChangeCPP::ByteSize() const {
  int total_size = 0;

  // repeated .DataCommon.PropsChangeCPP propsitem = 1;
  total_size += 1 * this->propsitem_size();
  for (int i = 0; i < this->propsitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->propsitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropsAllChangeCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropsAllChangeCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropsAllChangeCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropsAllChangeCPP::MergeFrom(const PropsAllChangeCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  propsitem_.MergeFrom(from.propsitem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropsAllChangeCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropsAllChangeCPP::CopyFrom(const PropsAllChangeCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropsAllChangeCPP::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->propsitem())) return false;
  return true;
}

void PropsAllChangeCPP::Swap(PropsAllChangeCPP* other) {
  if (other != this) {
    propsitem_.Swap(&other->propsitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropsAllChangeCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropsAllChangeCPP_descriptor_;
  metadata.reflection = PropsAllChangeCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonItemsCPP::kUserbaseFieldNumber;
const int CommonItemsCPP::kPropsFieldNumber;
const int CommonItemsCPP::kFromFieldNumber;
#endif  // !_MSC_VER

CommonItemsCPP::CommonItemsCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCommon.CommonItemsCPP)
}

void CommonItemsCPP::InitAsDefaultInstance() {
  userbase_ = const_cast< ::DataCommon::UserBaseChangeCPP*>(&::DataCommon::UserBaseChangeCPP::default_instance());
  props_ = const_cast< ::DataCommon::PropsAllChangeCPP*>(&::DataCommon::PropsAllChangeCPP::default_instance());
}

CommonItemsCPP::CommonItemsCPP(const CommonItemsCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DataCommon.CommonItemsCPP)
}

void CommonItemsCPP::SharedCtor() {
  _cached_size_ = 0;
  userbase_ = NULL;
  props_ = NULL;
  from_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonItemsCPP::~CommonItemsCPP() {
  // @@protoc_insertion_point(destructor:DataCommon.CommonItemsCPP)
  SharedDtor();
}

void CommonItemsCPP::SharedDtor() {
  if (this != default_instance_) {
    delete userbase_;
    delete props_;
  }
}

void CommonItemsCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonItemsCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonItemsCPP_descriptor_;
}

const CommonItemsCPP& CommonItemsCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCommon_2eproto();
  return *default_instance_;
}

CommonItemsCPP* CommonItemsCPP::default_instance_ = NULL;

CommonItemsCPP* CommonItemsCPP::New() const {
  return new CommonItemsCPP;
}

void CommonItemsCPP::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_userbase()) {
      if (userbase_ != NULL) userbase_->::DataCommon::UserBaseChangeCPP::Clear();
    }
    if (has_props()) {
      if (props_ != NULL) props_->::DataCommon::PropsAllChangeCPP::Clear();
    }
    from_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonItemsCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataCommon.CommonItemsCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.UserBaseChangeCPP userbase = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userbase()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_props;
        break;
      }

      // optional .DataCommon.PropsAllChangeCPP props = 2;
      case 2: {
        if (tag == 18) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_props()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_from;
        break;
      }

      // optional uint32 from = 3;
      case 3: {
        if (tag == 24) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataCommon.CommonItemsCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataCommon.CommonItemsCPP)
  return false;
#undef DO_
}

void CommonItemsCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataCommon.CommonItemsCPP)
  // optional .DataCommon.UserBaseChangeCPP userbase = 1;
  if (has_userbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userbase(), output);
  }

  // optional .DataCommon.PropsAllChangeCPP props = 2;
  if (has_props()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->props(), output);
  }

  // optional uint32 from = 3;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->from(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DataCommon.CommonItemsCPP)
}

::google::protobuf::uint8* CommonItemsCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCommon.CommonItemsCPP)
  // optional .DataCommon.UserBaseChangeCPP userbase = 1;
  if (has_userbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userbase(), target);
  }

  // optional .DataCommon.PropsAllChangeCPP props = 2;
  if (has_props()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->props(), target);
  }

  // optional uint32 from = 3;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->from(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCommon.CommonItemsCPP)
  return target;
}

int CommonItemsCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.UserBaseChangeCPP userbase = 1;
    if (has_userbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userbase());
    }

    // optional .DataCommon.PropsAllChangeCPP props = 2;
    if (has_props()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->props());
    }

    // optional uint32 from = 3;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonItemsCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonItemsCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonItemsCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonItemsCPP::MergeFrom(const CommonItemsCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userbase()) {
      mutable_userbase()->::DataCommon::UserBaseChangeCPP::MergeFrom(from.userbase());
    }
    if (from.has_props()) {
      mutable_props()->::DataCommon::PropsAllChangeCPP::MergeFrom(from.props());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonItemsCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonItemsCPP::CopyFrom(const CommonItemsCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonItemsCPP::IsInitialized() const {

  if (has_userbase()) {
    if (!this->userbase().IsInitialized()) return false;
  }
  if (has_props()) {
    if (!this->props().IsInitialized()) return false;
  }
  return true;
}

void CommonItemsCPP::Swap(CommonItemsCPP* other) {
  if (other != this) {
    std::swap(userbase_, other->userbase_);
    std::swap(props_, other->props_);
    std::swap(from_, other->from_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonItemsCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonItemsCPP_descriptor_;
  metadata.reflection = CommonItemsCPP_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataCommon

// @@protoc_insertion_point(global_scope)
