// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoPush.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoPush.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoPush {

namespace {

const ::google::protobuf::Descriptor* PushBuildingsCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushBuildingsCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushUserUpLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushUserUpLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardLevelUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardLevelUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardLevelUpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardLevelUpResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushOnceEveryDayReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushOnceEveryDayReward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoPush_2eproto() {
  protobuf_AddDesc_ProtoPush_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoPush.proto");
  GOOGLE_CHECK(file != NULL);
  PushBuildingsCPP_descriptor_ = file->message_type(0);
  static const int PushBuildingsCPP_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuildingsCPP, buildings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuildingsCPP, croplands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuildingsCPP, equipments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuildingsCPP, animals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuildingsCPP, equipmentstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuildingsCPP, fruits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuildingsCPP, orders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuildingsCPP, truck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuildingsCPP, shipping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuildingsCPP, shipboxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuildingsCPP, commons_),
  };
  PushBuildingsCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushBuildingsCPP_descriptor_,
      PushBuildingsCPP::default_instance_,
      PushBuildingsCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuildingsCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuildingsCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushBuildingsCPP));
  PushUserUpLevel_descriptor_ = file->message_type(1);
  static const int PushUserUpLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushUserUpLevel, commons_),
  };
  PushUserUpLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushUserUpLevel_descriptor_,
      PushUserUpLevel::default_instance_,
      PushUserUpLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushUserUpLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushUserUpLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushUserUpLevel));
  RewardLevelUpReq_descriptor_ = file->message_type(2);
  static const int RewardLevelUpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLevelUpReq, type_),
  };
  RewardLevelUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardLevelUpReq_descriptor_,
      RewardLevelUpReq::default_instance_,
      RewardLevelUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLevelUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLevelUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardLevelUpReq));
  RewardLevelUpResp_descriptor_ = file->message_type(3);
  static const int RewardLevelUpResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLevelUpResp, commons_),
  };
  RewardLevelUpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardLevelUpResp_descriptor_,
      RewardLevelUpResp::default_instance_,
      RewardLevelUpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLevelUpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLevelUpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardLevelUpResp));
  PushOnceEveryDayReward_descriptor_ = file->message_type(4);
  static const int PushOnceEveryDayReward_offsets_[1] = {
  };
  PushOnceEveryDayReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushOnceEveryDayReward_descriptor_,
      PushOnceEveryDayReward::default_instance_,
      PushOnceEveryDayReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushOnceEveryDayReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushOnceEveryDayReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushOnceEveryDayReward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoPush_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushBuildingsCPP_descriptor_, &PushBuildingsCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushUserUpLevel_descriptor_, &PushUserUpLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardLevelUpReq_descriptor_, &RewardLevelUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardLevelUpResp_descriptor_, &RewardLevelUpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushOnceEveryDayReward_descriptor_, &PushOnceEveryDayReward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoPush_2eproto() {
  delete PushBuildingsCPP::default_instance_;
  delete PushBuildingsCPP_reflection_;
  delete PushUserUpLevel::default_instance_;
  delete PushUserUpLevel_reflection_;
  delete RewardLevelUpReq::default_instance_;
  delete RewardLevelUpReq_reflection_;
  delete RewardLevelUpResp::default_instance_;
  delete RewardLevelUpResp_reflection_;
  delete PushOnceEveryDayReward::default_instance_;
  delete PushOnceEveryDayReward_reflection_;
}

void protobuf_AddDesc_ProtoPush_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBuilding::protobuf_AddDesc_ProtoBuilding_2eproto();
  ::ProtoProduce::protobuf_AddDesc_ProtoProduce_2eproto();
  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::ProtoOrder::protobuf_AddDesc_ProtoOrder_2eproto();
  ::ProtoShipping::protobuf_AddDesc_ProtoShipping_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ProtoPush.proto\022\tProtoPush\032\023ProtoBuild"
    "ing.proto\032\022ProtoProduce.proto\032\020DataCommo"
    "n.proto\032\020ProtoOrder.proto\032\023ProtoShipping"
    ".proto\"\204\004\n\020PushBuildingsCPP\022-\n\tbuildings"
    "\030\001 \003(\0132\032.ProtoBuilding.BuildingCPP\022,\n\tcr"
    "oplands\030\002 \003(\0132\031.ProtoProduce.CropLandCPP"
    "\0221\n\nequipments\030\003 \003(\0132\035.ProtoProduce.Prod"
    "uceEquipCPP\022(\n\007animals\030\004 \003(\0132\027.ProtoProd"
    "uce.AnimalCPP\0226\n\requipmentstar\030\005 \003(\0132\037.P"
    "rotoBuilding.EquipmentStarCPP\022&\n\006fruits\030"
    "\006 \003(\0132\026.ProtoProduce.FruitCPP\022$\n\006orders\030"
    "\007 \003(\0132\024.ProtoOrder.OrderCPP\022#\n\005truck\030\010 \001"
    "(\0132\024.ProtoOrder.TruckCPP\022,\n\010shipping\030\t \001"
    "(\0132\032.ProtoShipping.ShippingCPP\0220\n\tshipbo"
    "xes\030\n \003(\0132\035.ProtoShipping.ShippingBoxCPP"
    "\022+\n\007commons\030\013 \001(\0132\032.DataCommon.CommonIte"
    "msCPP\">\n\017PushUserUpLevel\022+\n\007commons\030\001 \002("
    "\0132\032.DataCommon.CommonItemsCPP\" \n\020RewardL"
    "evelUpReq\022\014\n\004type\030\001 \002(\r\"@\n\021RewardLevelUp"
    "Resp\022+\n\007commons\030\001 \002(\0132\032.DataCommon.Commo"
    "nItemsCPP\"\030\n\026PushOnceEveryDayReward", 835);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoPush.proto", &protobuf_RegisterTypes);
  PushBuildingsCPP::default_instance_ = new PushBuildingsCPP();
  PushUserUpLevel::default_instance_ = new PushUserUpLevel();
  RewardLevelUpReq::default_instance_ = new RewardLevelUpReq();
  RewardLevelUpResp::default_instance_ = new RewardLevelUpResp();
  PushOnceEveryDayReward::default_instance_ = new PushOnceEveryDayReward();
  PushBuildingsCPP::default_instance_->InitAsDefaultInstance();
  PushUserUpLevel::default_instance_->InitAsDefaultInstance();
  RewardLevelUpReq::default_instance_->InitAsDefaultInstance();
  RewardLevelUpResp::default_instance_->InitAsDefaultInstance();
  PushOnceEveryDayReward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoPush_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoPush_2eproto {
  StaticDescriptorInitializer_ProtoPush_2eproto() {
    protobuf_AddDesc_ProtoPush_2eproto();
  }
} static_descriptor_initializer_ProtoPush_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PushBuildingsCPP::kBuildingsFieldNumber;
const int PushBuildingsCPP::kCroplandsFieldNumber;
const int PushBuildingsCPP::kEquipmentsFieldNumber;
const int PushBuildingsCPP::kAnimalsFieldNumber;
const int PushBuildingsCPP::kEquipmentstarFieldNumber;
const int PushBuildingsCPP::kFruitsFieldNumber;
const int PushBuildingsCPP::kOrdersFieldNumber;
const int PushBuildingsCPP::kTruckFieldNumber;
const int PushBuildingsCPP::kShippingFieldNumber;
const int PushBuildingsCPP::kShipboxesFieldNumber;
const int PushBuildingsCPP::kCommonsFieldNumber;
#endif  // !_MSC_VER

PushBuildingsCPP::PushBuildingsCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPush.PushBuildingsCPP)
}

void PushBuildingsCPP::InitAsDefaultInstance() {
  truck_ = const_cast< ::ProtoOrder::TruckCPP*>(&::ProtoOrder::TruckCPP::default_instance());
  shipping_ = const_cast< ::ProtoShipping::ShippingCPP*>(&::ProtoShipping::ShippingCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

PushBuildingsCPP::PushBuildingsCPP(const PushBuildingsCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPush.PushBuildingsCPP)
}

void PushBuildingsCPP::SharedCtor() {
  _cached_size_ = 0;
  truck_ = NULL;
  shipping_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushBuildingsCPP::~PushBuildingsCPP() {
  // @@protoc_insertion_point(destructor:ProtoPush.PushBuildingsCPP)
  SharedDtor();
}

void PushBuildingsCPP::SharedDtor() {
  if (this != default_instance_) {
    delete truck_;
    delete shipping_;
    delete commons_;
  }
}

void PushBuildingsCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushBuildingsCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushBuildingsCPP_descriptor_;
}

const PushBuildingsCPP& PushBuildingsCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPush_2eproto();
  return *default_instance_;
}

PushBuildingsCPP* PushBuildingsCPP::default_instance_ = NULL;

PushBuildingsCPP* PushBuildingsCPP::New() const {
  return new PushBuildingsCPP;
}

void PushBuildingsCPP::Clear() {
  if (has_truck()) {
    if (truck_ != NULL) truck_->::ProtoOrder::TruckCPP::Clear();
  }
  if (_has_bits_[8 / 32] & 1280) {
    if (has_shipping()) {
      if (shipping_ != NULL) shipping_->::ProtoShipping::ShippingCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  buildings_.Clear();
  croplands_.Clear();
  equipments_.Clear();
  animals_.Clear();
  equipmentstar_.Clear();
  fruits_.Clear();
  orders_.Clear();
  shipboxes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushBuildingsCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPush.PushBuildingsCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBuilding.BuildingCPP buildings = 1;
      case 1: {
        if (tag == 10) {
         parse_buildings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_buildings;
        if (input->ExpectTag(18)) goto parse_croplands;
        break;
      }

      // repeated .ProtoProduce.CropLandCPP croplands = 2;
      case 2: {
        if (tag == 18) {
         parse_croplands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_croplands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_croplands;
        if (input->ExpectTag(26)) goto parse_equipments;
        break;
      }

      // repeated .ProtoProduce.ProduceEquipCPP equipments = 3;
      case 3: {
        if (tag == 26) {
         parse_equipments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_equipments;
        if (input->ExpectTag(34)) goto parse_animals;
        break;
      }

      // repeated .ProtoProduce.AnimalCPP animals = 4;
      case 4: {
        if (tag == 34) {
         parse_animals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_animals;
        if (input->ExpectTag(42)) goto parse_equipmentstar;
        break;
      }

      // repeated .ProtoBuilding.EquipmentStarCPP equipmentstar = 5;
      case 5: {
        if (tag == 42) {
         parse_equipmentstar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentstar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_equipmentstar;
        if (input->ExpectTag(50)) goto parse_fruits;
        break;
      }

      // repeated .ProtoProduce.FruitCPP fruits = 6;
      case 6: {
        if (tag == 50) {
         parse_fruits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fruits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fruits;
        if (input->ExpectTag(58)) goto parse_orders;
        break;
      }

      // repeated .ProtoOrder.OrderCPP orders = 7;
      case 7: {
        if (tag == 58) {
         parse_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_orders;
        if (input->ExpectTag(66)) goto parse_truck;
        break;
      }

      // optional .ProtoOrder.TruckCPP truck = 8;
      case 8: {
        if (tag == 66) {
         parse_truck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truck()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_shipping;
        break;
      }

      // optional .ProtoShipping.ShippingCPP shipping = 9;
      case 9: {
        if (tag == 74) {
         parse_shipping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shipping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_shipboxes;
        break;
      }

      // repeated .ProtoShipping.ShippingBoxCPP shipboxes = 10;
      case 10: {
        if (tag == 82) {
         parse_shipboxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shipboxes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_shipboxes;
        if (input->ExpectTag(90)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 11;
      case 11: {
        if (tag == 90) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPush.PushBuildingsCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPush.PushBuildingsCPP)
  return false;
#undef DO_
}

void PushBuildingsCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPush.PushBuildingsCPP)
  // repeated .ProtoBuilding.BuildingCPP buildings = 1;
  for (int i = 0; i < this->buildings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buildings(i), output);
  }

  // repeated .ProtoProduce.CropLandCPP croplands = 2;
  for (int i = 0; i < this->croplands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->croplands(i), output);
  }

  // repeated .ProtoProduce.ProduceEquipCPP equipments = 3;
  for (int i = 0; i < this->equipments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equipments(i), output);
  }

  // repeated .ProtoProduce.AnimalCPP animals = 4;
  for (int i = 0; i < this->animals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->animals(i), output);
  }

  // repeated .ProtoBuilding.EquipmentStarCPP equipmentstar = 5;
  for (int i = 0; i < this->equipmentstar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equipmentstar(i), output);
  }

  // repeated .ProtoProduce.FruitCPP fruits = 6;
  for (int i = 0; i < this->fruits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fruits(i), output);
  }

  // repeated .ProtoOrder.OrderCPP orders = 7;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->orders(i), output);
  }

  // optional .ProtoOrder.TruckCPP truck = 8;
  if (has_truck()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->truck(), output);
  }

  // optional .ProtoShipping.ShippingCPP shipping = 9;
  if (has_shipping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->shipping(), output);
  }

  // repeated .ProtoShipping.ShippingBoxCPP shipboxes = 10;
  for (int i = 0; i < this->shipboxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->shipboxes(i), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 11;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPush.PushBuildingsCPP)
}

::google::protobuf::uint8* PushBuildingsCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPush.PushBuildingsCPP)
  // repeated .ProtoBuilding.BuildingCPP buildings = 1;
  for (int i = 0; i < this->buildings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buildings(i), target);
  }

  // repeated .ProtoProduce.CropLandCPP croplands = 2;
  for (int i = 0; i < this->croplands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->croplands(i), target);
  }

  // repeated .ProtoProduce.ProduceEquipCPP equipments = 3;
  for (int i = 0; i < this->equipments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equipments(i), target);
  }

  // repeated .ProtoProduce.AnimalCPP animals = 4;
  for (int i = 0; i < this->animals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->animals(i), target);
  }

  // repeated .ProtoBuilding.EquipmentStarCPP equipmentstar = 5;
  for (int i = 0; i < this->equipmentstar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equipmentstar(i), target);
  }

  // repeated .ProtoProduce.FruitCPP fruits = 6;
  for (int i = 0; i < this->fruits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fruits(i), target);
  }

  // repeated .ProtoOrder.OrderCPP orders = 7;
  for (int i = 0; i < this->orders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->orders(i), target);
  }

  // optional .ProtoOrder.TruckCPP truck = 8;
  if (has_truck()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->truck(), target);
  }

  // optional .ProtoShipping.ShippingCPP shipping = 9;
  if (has_shipping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->shipping(), target);
  }

  // repeated .ProtoShipping.ShippingBoxCPP shipboxes = 10;
  for (int i = 0; i < this->shipboxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->shipboxes(i), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 11;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPush.PushBuildingsCPP)
  return target;
}

int PushBuildingsCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[7 / 32] & (0xffu << (7 % 32))) {
    // optional .ProtoOrder.TruckCPP truck = 8;
    if (has_truck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->truck());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ProtoShipping.ShippingCPP shipping = 9;
    if (has_shipping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shipping());
    }

    // optional .DataCommon.CommonItemsCPP commons = 11;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  // repeated .ProtoBuilding.BuildingCPP buildings = 1;
  total_size += 1 * this->buildings_size();
  for (int i = 0; i < this->buildings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildings(i));
  }

  // repeated .ProtoProduce.CropLandCPP croplands = 2;
  total_size += 1 * this->croplands_size();
  for (int i = 0; i < this->croplands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->croplands(i));
  }

  // repeated .ProtoProduce.ProduceEquipCPP equipments = 3;
  total_size += 1 * this->equipments_size();
  for (int i = 0; i < this->equipments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipments(i));
  }

  // repeated .ProtoProduce.AnimalCPP animals = 4;
  total_size += 1 * this->animals_size();
  for (int i = 0; i < this->animals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animals(i));
  }

  // repeated .ProtoBuilding.EquipmentStarCPP equipmentstar = 5;
  total_size += 1 * this->equipmentstar_size();
  for (int i = 0; i < this->equipmentstar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentstar(i));
  }

  // repeated .ProtoProduce.FruitCPP fruits = 6;
  total_size += 1 * this->fruits_size();
  for (int i = 0; i < this->fruits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fruits(i));
  }

  // repeated .ProtoOrder.OrderCPP orders = 7;
  total_size += 1 * this->orders_size();
  for (int i = 0; i < this->orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orders(i));
  }

  // repeated .ProtoShipping.ShippingBoxCPP shipboxes = 10;
  total_size += 1 * this->shipboxes_size();
  for (int i = 0; i < this->shipboxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shipboxes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushBuildingsCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushBuildingsCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushBuildingsCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushBuildingsCPP::MergeFrom(const PushBuildingsCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildings_.MergeFrom(from.buildings_);
  croplands_.MergeFrom(from.croplands_);
  equipments_.MergeFrom(from.equipments_);
  animals_.MergeFrom(from.animals_);
  equipmentstar_.MergeFrom(from.equipmentstar_);
  fruits_.MergeFrom(from.fruits_);
  orders_.MergeFrom(from.orders_);
  shipboxes_.MergeFrom(from.shipboxes_);
  if (from._has_bits_[7 / 32] & (0xffu << (7 % 32))) {
    if (from.has_truck()) {
      mutable_truck()->::ProtoOrder::TruckCPP::MergeFrom(from.truck());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_shipping()) {
      mutable_shipping()->::ProtoShipping::ShippingCPP::MergeFrom(from.shipping());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushBuildingsCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushBuildingsCPP::CopyFrom(const PushBuildingsCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushBuildingsCPP::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->buildings())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->croplands())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equipments())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->animals())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equipmentstar())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fruits())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->orders())) return false;
  if (has_truck()) {
    if (!this->truck().IsInitialized()) return false;
  }
  if (has_shipping()) {
    if (!this->shipping().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->shipboxes())) return false;
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void PushBuildingsCPP::Swap(PushBuildingsCPP* other) {
  if (other != this) {
    buildings_.Swap(&other->buildings_);
    croplands_.Swap(&other->croplands_);
    equipments_.Swap(&other->equipments_);
    animals_.Swap(&other->animals_);
    equipmentstar_.Swap(&other->equipmentstar_);
    fruits_.Swap(&other->fruits_);
    orders_.Swap(&other->orders_);
    std::swap(truck_, other->truck_);
    std::swap(shipping_, other->shipping_);
    shipboxes_.Swap(&other->shipboxes_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushBuildingsCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushBuildingsCPP_descriptor_;
  metadata.reflection = PushBuildingsCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushUserUpLevel::kCommonsFieldNumber;
#endif  // !_MSC_VER

PushUserUpLevel::PushUserUpLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPush.PushUserUpLevel)
}

void PushUserUpLevel::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

PushUserUpLevel::PushUserUpLevel(const PushUserUpLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPush.PushUserUpLevel)
}

void PushUserUpLevel::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushUserUpLevel::~PushUserUpLevel() {
  // @@protoc_insertion_point(destructor:ProtoPush.PushUserUpLevel)
  SharedDtor();
}

void PushUserUpLevel::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void PushUserUpLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushUserUpLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushUserUpLevel_descriptor_;
}

const PushUserUpLevel& PushUserUpLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPush_2eproto();
  return *default_instance_;
}

PushUserUpLevel* PushUserUpLevel::default_instance_ = NULL;

PushUserUpLevel* PushUserUpLevel::New() const {
  return new PushUserUpLevel;
}

void PushUserUpLevel::Clear() {
  if (has_commons()) {
    if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushUserUpLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPush.PushUserUpLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPush.PushUserUpLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPush.PushUserUpLevel)
  return false;
#undef DO_
}

void PushUserUpLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPush.PushUserUpLevel)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPush.PushUserUpLevel)
}

::google::protobuf::uint8* PushUserUpLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPush.PushUserUpLevel)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPush.PushUserUpLevel)
  return target;
}

int PushUserUpLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushUserUpLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushUserUpLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushUserUpLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushUserUpLevel::MergeFrom(const PushUserUpLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushUserUpLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushUserUpLevel::CopyFrom(const PushUserUpLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushUserUpLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void PushUserUpLevel::Swap(PushUserUpLevel* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushUserUpLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushUserUpLevel_descriptor_;
  metadata.reflection = PushUserUpLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardLevelUpReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RewardLevelUpReq::RewardLevelUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPush.RewardLevelUpReq)
}

void RewardLevelUpReq::InitAsDefaultInstance() {
}

RewardLevelUpReq::RewardLevelUpReq(const RewardLevelUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPush.RewardLevelUpReq)
}

void RewardLevelUpReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardLevelUpReq::~RewardLevelUpReq() {
  // @@protoc_insertion_point(destructor:ProtoPush.RewardLevelUpReq)
  SharedDtor();
}

void RewardLevelUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardLevelUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardLevelUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardLevelUpReq_descriptor_;
}

const RewardLevelUpReq& RewardLevelUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPush_2eproto();
  return *default_instance_;
}

RewardLevelUpReq* RewardLevelUpReq::default_instance_ = NULL;

RewardLevelUpReq* RewardLevelUpReq::New() const {
  return new RewardLevelUpReq;
}

void RewardLevelUpReq::Clear() {
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardLevelUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPush.RewardLevelUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPush.RewardLevelUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPush.RewardLevelUpReq)
  return false;
#undef DO_
}

void RewardLevelUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPush.RewardLevelUpReq)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPush.RewardLevelUpReq)
}

::google::protobuf::uint8* RewardLevelUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPush.RewardLevelUpReq)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPush.RewardLevelUpReq)
  return target;
}

int RewardLevelUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardLevelUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardLevelUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardLevelUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardLevelUpReq::MergeFrom(const RewardLevelUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardLevelUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardLevelUpReq::CopyFrom(const RewardLevelUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardLevelUpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RewardLevelUpReq::Swap(RewardLevelUpReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardLevelUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardLevelUpReq_descriptor_;
  metadata.reflection = RewardLevelUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardLevelUpResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

RewardLevelUpResp::RewardLevelUpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPush.RewardLevelUpResp)
}

void RewardLevelUpResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

RewardLevelUpResp::RewardLevelUpResp(const RewardLevelUpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPush.RewardLevelUpResp)
}

void RewardLevelUpResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardLevelUpResp::~RewardLevelUpResp() {
  // @@protoc_insertion_point(destructor:ProtoPush.RewardLevelUpResp)
  SharedDtor();
}

void RewardLevelUpResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void RewardLevelUpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardLevelUpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardLevelUpResp_descriptor_;
}

const RewardLevelUpResp& RewardLevelUpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPush_2eproto();
  return *default_instance_;
}

RewardLevelUpResp* RewardLevelUpResp::default_instance_ = NULL;

RewardLevelUpResp* RewardLevelUpResp::New() const {
  return new RewardLevelUpResp;
}

void RewardLevelUpResp::Clear() {
  if (has_commons()) {
    if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardLevelUpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPush.RewardLevelUpResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPush.RewardLevelUpResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPush.RewardLevelUpResp)
  return false;
#undef DO_
}

void RewardLevelUpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPush.RewardLevelUpResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPush.RewardLevelUpResp)
}

::google::protobuf::uint8* RewardLevelUpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPush.RewardLevelUpResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPush.RewardLevelUpResp)
  return target;
}

int RewardLevelUpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardLevelUpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardLevelUpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardLevelUpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardLevelUpResp::MergeFrom(const RewardLevelUpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardLevelUpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardLevelUpResp::CopyFrom(const RewardLevelUpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardLevelUpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void RewardLevelUpResp::Swap(RewardLevelUpResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardLevelUpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardLevelUpResp_descriptor_;
  metadata.reflection = RewardLevelUpResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PushOnceEveryDayReward::PushOnceEveryDayReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPush.PushOnceEveryDayReward)
}

void PushOnceEveryDayReward::InitAsDefaultInstance() {
}

PushOnceEveryDayReward::PushOnceEveryDayReward(const PushOnceEveryDayReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPush.PushOnceEveryDayReward)
}

void PushOnceEveryDayReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushOnceEveryDayReward::~PushOnceEveryDayReward() {
  // @@protoc_insertion_point(destructor:ProtoPush.PushOnceEveryDayReward)
  SharedDtor();
}

void PushOnceEveryDayReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PushOnceEveryDayReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushOnceEveryDayReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushOnceEveryDayReward_descriptor_;
}

const PushOnceEveryDayReward& PushOnceEveryDayReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPush_2eproto();
  return *default_instance_;
}

PushOnceEveryDayReward* PushOnceEveryDayReward::default_instance_ = NULL;

PushOnceEveryDayReward* PushOnceEveryDayReward::New() const {
  return new PushOnceEveryDayReward;
}

void PushOnceEveryDayReward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushOnceEveryDayReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPush.PushOnceEveryDayReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPush.PushOnceEveryDayReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPush.PushOnceEveryDayReward)
  return false;
#undef DO_
}

void PushOnceEveryDayReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPush.PushOnceEveryDayReward)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPush.PushOnceEveryDayReward)
}

::google::protobuf::uint8* PushOnceEveryDayReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPush.PushOnceEveryDayReward)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPush.PushOnceEveryDayReward)
  return target;
}

int PushOnceEveryDayReward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushOnceEveryDayReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushOnceEveryDayReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushOnceEveryDayReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushOnceEveryDayReward::MergeFrom(const PushOnceEveryDayReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushOnceEveryDayReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushOnceEveryDayReward::CopyFrom(const PushOnceEveryDayReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushOnceEveryDayReward::IsInitialized() const {

  return true;
}

void PushOnceEveryDayReward::Swap(PushOnceEveryDayReward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushOnceEveryDayReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushOnceEveryDayReward_descriptor_;
  metadata.reflection = PushOnceEveryDayReward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoPush

// @@protoc_insertion_point(global_scope)
