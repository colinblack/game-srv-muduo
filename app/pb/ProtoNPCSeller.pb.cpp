// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoNPCSeller.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoNPCSeller.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoNPCSeller {

namespace {

const ::google::protobuf::Descriptor* NPCSellerCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCSellerCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPropsDiscountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPropsDiscountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPropsDiscountResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPropsDiscountResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseNPCSellerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseNPCSellerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseNPCSellerResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseNPCSellerResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeNPCSellerStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeNPCSellerStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeNPCSellerStatusResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeNPCSellerStatusResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushNPCSellerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushNPCSellerInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoNPCSeller_2eproto() {
  protobuf_AddDesc_ProtoNPCSeller_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoNPCSeller.proto");
  GOOGLE_CHECK(file != NULL);
  NPCSellerCPP_descriptor_ = file->message_type(0);
  static const int NPCSellerCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, propscnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, propsdiscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, npcnextvisitts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, npcsellerstatus_),
  };
  NPCSellerCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCSellerCPP_descriptor_,
      NPCSellerCPP::default_instance_,
      NPCSellerCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCSellerCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCSellerCPP));
  GetPropsDiscountReq_descriptor_ = file->message_type(1);
  static const int GetPropsDiscountReq_offsets_[1] = {
  };
  GetPropsDiscountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPropsDiscountReq_descriptor_,
      GetPropsDiscountReq::default_instance_,
      GetPropsDiscountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPropsDiscountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPropsDiscountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPropsDiscountReq));
  GetPropsDiscountResp_descriptor_ = file->message_type(2);
  static const int GetPropsDiscountResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPropsDiscountResp, npcseller_),
  };
  GetPropsDiscountResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPropsDiscountResp_descriptor_,
      GetPropsDiscountResp::default_instance_,
      GetPropsDiscountResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPropsDiscountResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPropsDiscountResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPropsDiscountResp));
  ResponseNPCSellerReq_descriptor_ = file->message_type(3);
  static const int ResponseNPCSellerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNPCSellerReq, responseflag_),
  };
  ResponseNPCSellerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseNPCSellerReq_descriptor_,
      ResponseNPCSellerReq::default_instance_,
      ResponseNPCSellerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNPCSellerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNPCSellerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseNPCSellerReq));
  ResponseNPCSellerResp_descriptor_ = file->message_type(4);
  static const int ResponseNPCSellerResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNPCSellerResp, npcseller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNPCSellerResp, commons_),
  };
  ResponseNPCSellerResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseNPCSellerResp_descriptor_,
      ResponseNPCSellerResp::default_instance_,
      ResponseNPCSellerResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNPCSellerResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNPCSellerResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseNPCSellerResp));
  ChangeNPCSellerStatusReq_descriptor_ = file->message_type(5);
  static const int ChangeNPCSellerStatusReq_offsets_[1] = {
  };
  ChangeNPCSellerStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeNPCSellerStatusReq_descriptor_,
      ChangeNPCSellerStatusReq::default_instance_,
      ChangeNPCSellerStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNPCSellerStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNPCSellerStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeNPCSellerStatusReq));
  ChangeNPCSellerStatusResp_descriptor_ = file->message_type(6);
  static const int ChangeNPCSellerStatusResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNPCSellerStatusResp, npcseller_),
  };
  ChangeNPCSellerStatusResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeNPCSellerStatusResp_descriptor_,
      ChangeNPCSellerStatusResp::default_instance_,
      ChangeNPCSellerStatusResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNPCSellerStatusResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNPCSellerStatusResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeNPCSellerStatusResp));
  PushNPCSellerInfo_descriptor_ = file->message_type(7);
  static const int PushNPCSellerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushNPCSellerInfo, npcseller_),
  };
  PushNPCSellerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushNPCSellerInfo_descriptor_,
      PushNPCSellerInfo::default_instance_,
      PushNPCSellerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushNPCSellerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushNPCSellerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushNPCSellerInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoNPCSeller_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCSellerCPP_descriptor_, &NPCSellerCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPropsDiscountReq_descriptor_, &GetPropsDiscountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPropsDiscountResp_descriptor_, &GetPropsDiscountResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseNPCSellerReq_descriptor_, &ResponseNPCSellerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseNPCSellerResp_descriptor_, &ResponseNPCSellerResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeNPCSellerStatusReq_descriptor_, &ChangeNPCSellerStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeNPCSellerStatusResp_descriptor_, &ChangeNPCSellerStatusResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushNPCSellerInfo_descriptor_, &PushNPCSellerInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoNPCSeller_2eproto() {
  delete NPCSellerCPP::default_instance_;
  delete NPCSellerCPP_reflection_;
  delete GetPropsDiscountReq::default_instance_;
  delete GetPropsDiscountReq_reflection_;
  delete GetPropsDiscountResp::default_instance_;
  delete GetPropsDiscountResp_reflection_;
  delete ResponseNPCSellerReq::default_instance_;
  delete ResponseNPCSellerReq_reflection_;
  delete ResponseNPCSellerResp::default_instance_;
  delete ResponseNPCSellerResp_reflection_;
  delete ChangeNPCSellerStatusReq::default_instance_;
  delete ChangeNPCSellerStatusReq_reflection_;
  delete ChangeNPCSellerStatusResp::default_instance_;
  delete ChangeNPCSellerStatusResp_reflection_;
  delete PushNPCSellerInfo::default_instance_;
  delete PushNPCSellerInfo_reflection_;
}

void protobuf_AddDesc_ProtoNPCSeller_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ProtoNPCSeller.proto\022\016ProtoNPCSeller\032\020"
    "DataCommon.proto\"y\n\014NPCSellerCPP\022\017\n\007prop"
    "sId\030\001 \002(\r\022\020\n\010propsCnt\030\002 \002(\r\022\025\n\rpropsDisc"
    "ount\030\003 \002(\r\022\026\n\016npcNextVisitTs\030\004 \002(\r\022\027\n\017np"
    "cSellerStatus\030\005 \002(\r\"\025\n\023GetPropsDiscountR"
    "eq\"G\n\024GetPropsDiscountResp\022/\n\tnpcSeller\030"
    "\001 \002(\0132\034.ProtoNPCSeller.NPCSellerCPP\",\n\024R"
    "esponseNPCSellerReq\022\024\n\014responseFlag\030\001 \002("
    "\r\"u\n\025ResponseNPCSellerResp\022/\n\tnpcSeller\030"
    "\001 \002(\0132\034.ProtoNPCSeller.NPCSellerCPP\022+\n\007c"
    "ommons\030\002 \001(\0132\032.DataCommon.CommonItemsCPP"
    "\"\032\n\030ChangeNPCSellerStatusReq\"L\n\031ChangeNP"
    "CSellerStatusResp\022/\n\tnpcSeller\030\001 \002(\0132\034.P"
    "rotoNPCSeller.NPCSellerCPP\"D\n\021PushNPCSel"
    "lerInfo\022/\n\tnpcSeller\030\001 \002(\0132\034.ProtoNPCSel"
    "ler.NPCSellerCPP", 616);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoNPCSeller.proto", &protobuf_RegisterTypes);
  NPCSellerCPP::default_instance_ = new NPCSellerCPP();
  GetPropsDiscountReq::default_instance_ = new GetPropsDiscountReq();
  GetPropsDiscountResp::default_instance_ = new GetPropsDiscountResp();
  ResponseNPCSellerReq::default_instance_ = new ResponseNPCSellerReq();
  ResponseNPCSellerResp::default_instance_ = new ResponseNPCSellerResp();
  ChangeNPCSellerStatusReq::default_instance_ = new ChangeNPCSellerStatusReq();
  ChangeNPCSellerStatusResp::default_instance_ = new ChangeNPCSellerStatusResp();
  PushNPCSellerInfo::default_instance_ = new PushNPCSellerInfo();
  NPCSellerCPP::default_instance_->InitAsDefaultInstance();
  GetPropsDiscountReq::default_instance_->InitAsDefaultInstance();
  GetPropsDiscountResp::default_instance_->InitAsDefaultInstance();
  ResponseNPCSellerReq::default_instance_->InitAsDefaultInstance();
  ResponseNPCSellerResp::default_instance_->InitAsDefaultInstance();
  ChangeNPCSellerStatusReq::default_instance_->InitAsDefaultInstance();
  ChangeNPCSellerStatusResp::default_instance_->InitAsDefaultInstance();
  PushNPCSellerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoNPCSeller_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoNPCSeller_2eproto {
  StaticDescriptorInitializer_ProtoNPCSeller_2eproto() {
    protobuf_AddDesc_ProtoNPCSeller_2eproto();
  }
} static_descriptor_initializer_ProtoNPCSeller_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NPCSellerCPP::kPropsIdFieldNumber;
const int NPCSellerCPP::kPropsCntFieldNumber;
const int NPCSellerCPP::kPropsDiscountFieldNumber;
const int NPCSellerCPP::kNpcNextVisitTsFieldNumber;
const int NPCSellerCPP::kNpcSellerStatusFieldNumber;
#endif  // !_MSC_VER

NPCSellerCPP::NPCSellerCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCSeller.NPCSellerCPP)
}

void NPCSellerCPP::InitAsDefaultInstance() {
}

NPCSellerCPP::NPCSellerCPP(const NPCSellerCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCSeller.NPCSellerCPP)
}

void NPCSellerCPP::SharedCtor() {
  _cached_size_ = 0;
  propsid_ = 0u;
  propscnt_ = 0u;
  propsdiscount_ = 0u;
  npcnextvisitts_ = 0u;
  npcsellerstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCSellerCPP::~NPCSellerCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCSeller.NPCSellerCPP)
  SharedDtor();
}

void NPCSellerCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCSellerCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCSellerCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCSellerCPP_descriptor_;
}

const NPCSellerCPP& NPCSellerCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCSeller_2eproto();
  return *default_instance_;
}

NPCSellerCPP* NPCSellerCPP::default_instance_ = NULL;

NPCSellerCPP* NPCSellerCPP::New() const {
  return new NPCSellerCPP;
}

void NPCSellerCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NPCSellerCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(propsid_, npcsellerstatus_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCSellerCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCSeller.NPCSellerCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 propsId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsCnt;
        break;
      }

      // required uint32 propsCnt = 2;
      case 2: {
        if (tag == 16) {
         parse_propsCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propscnt_)));
          set_has_propscnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_propsDiscount;
        break;
      }

      // required uint32 propsDiscount = 3;
      case 3: {
        if (tag == 24) {
         parse_propsDiscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsdiscount_)));
          set_has_propsdiscount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcNextVisitTs;
        break;
      }

      // required uint32 npcNextVisitTs = 4;
      case 4: {
        if (tag == 32) {
         parse_npcNextVisitTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcnextvisitts_)));
          set_has_npcnextvisitts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_npcSellerStatus;
        break;
      }

      // required uint32 npcSellerStatus = 5;
      case 5: {
        if (tag == 40) {
         parse_npcSellerStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcsellerstatus_)));
          set_has_npcsellerstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCSeller.NPCSellerCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCSeller.NPCSellerCPP)
  return false;
#undef DO_
}

void NPCSellerCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCSeller.NPCSellerCPP)
  // required uint32 propsId = 1;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  // required uint32 propsCnt = 2;
  if (has_propscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propscnt(), output);
  }

  // required uint32 propsDiscount = 3;
  if (has_propsdiscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->propsdiscount(), output);
  }

  // required uint32 npcNextVisitTs = 4;
  if (has_npcnextvisitts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->npcnextvisitts(), output);
  }

  // required uint32 npcSellerStatus = 5;
  if (has_npcsellerstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->npcsellerstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCSeller.NPCSellerCPP)
}

::google::protobuf::uint8* NPCSellerCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCSeller.NPCSellerCPP)
  // required uint32 propsId = 1;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  // required uint32 propsCnt = 2;
  if (has_propscnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propscnt(), target);
  }

  // required uint32 propsDiscount = 3;
  if (has_propsdiscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->propsdiscount(), target);
  }

  // required uint32 npcNextVisitTs = 4;
  if (has_npcnextvisitts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->npcnextvisitts(), target);
  }

  // required uint32 npcSellerStatus = 5;
  if (has_npcsellerstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->npcsellerstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCSeller.NPCSellerCPP)
  return target;
}

int NPCSellerCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 propsId = 1;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 propsCnt = 2;
    if (has_propscnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propscnt());
    }

    // required uint32 propsDiscount = 3;
    if (has_propsdiscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsdiscount());
    }

    // required uint32 npcNextVisitTs = 4;
    if (has_npcnextvisitts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcnextvisitts());
    }

    // required uint32 npcSellerStatus = 5;
    if (has_npcsellerstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcsellerstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCSellerCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCSellerCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCSellerCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCSellerCPP::MergeFrom(const NPCSellerCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_propscnt()) {
      set_propscnt(from.propscnt());
    }
    if (from.has_propsdiscount()) {
      set_propsdiscount(from.propsdiscount());
    }
    if (from.has_npcnextvisitts()) {
      set_npcnextvisitts(from.npcnextvisitts());
    }
    if (from.has_npcsellerstatus()) {
      set_npcsellerstatus(from.npcsellerstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCSellerCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCSellerCPP::CopyFrom(const NPCSellerCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCSellerCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void NPCSellerCPP::Swap(NPCSellerCPP* other) {
  if (other != this) {
    std::swap(propsid_, other->propsid_);
    std::swap(propscnt_, other->propscnt_);
    std::swap(propsdiscount_, other->propsdiscount_);
    std::swap(npcnextvisitts_, other->npcnextvisitts_);
    std::swap(npcsellerstatus_, other->npcsellerstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCSellerCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCSellerCPP_descriptor_;
  metadata.reflection = NPCSellerCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetPropsDiscountReq::GetPropsDiscountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCSeller.GetPropsDiscountReq)
}

void GetPropsDiscountReq::InitAsDefaultInstance() {
}

GetPropsDiscountReq::GetPropsDiscountReq(const GetPropsDiscountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCSeller.GetPropsDiscountReq)
}

void GetPropsDiscountReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPropsDiscountReq::~GetPropsDiscountReq() {
  // @@protoc_insertion_point(destructor:ProtoNPCSeller.GetPropsDiscountReq)
  SharedDtor();
}

void GetPropsDiscountReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPropsDiscountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPropsDiscountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPropsDiscountReq_descriptor_;
}

const GetPropsDiscountReq& GetPropsDiscountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCSeller_2eproto();
  return *default_instance_;
}

GetPropsDiscountReq* GetPropsDiscountReq::default_instance_ = NULL;

GetPropsDiscountReq* GetPropsDiscountReq::New() const {
  return new GetPropsDiscountReq;
}

void GetPropsDiscountReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPropsDiscountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCSeller.GetPropsDiscountReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCSeller.GetPropsDiscountReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCSeller.GetPropsDiscountReq)
  return false;
#undef DO_
}

void GetPropsDiscountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCSeller.GetPropsDiscountReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCSeller.GetPropsDiscountReq)
}

::google::protobuf::uint8* GetPropsDiscountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCSeller.GetPropsDiscountReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCSeller.GetPropsDiscountReq)
  return target;
}

int GetPropsDiscountReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPropsDiscountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPropsDiscountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPropsDiscountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPropsDiscountReq::MergeFrom(const GetPropsDiscountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPropsDiscountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPropsDiscountReq::CopyFrom(const GetPropsDiscountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPropsDiscountReq::IsInitialized() const {

  return true;
}

void GetPropsDiscountReq::Swap(GetPropsDiscountReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPropsDiscountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPropsDiscountReq_descriptor_;
  metadata.reflection = GetPropsDiscountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPropsDiscountResp::kNpcSellerFieldNumber;
#endif  // !_MSC_VER

GetPropsDiscountResp::GetPropsDiscountResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCSeller.GetPropsDiscountResp)
}

void GetPropsDiscountResp::InitAsDefaultInstance() {
  npcseller_ = const_cast< ::ProtoNPCSeller::NPCSellerCPP*>(&::ProtoNPCSeller::NPCSellerCPP::default_instance());
}

GetPropsDiscountResp::GetPropsDiscountResp(const GetPropsDiscountResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCSeller.GetPropsDiscountResp)
}

void GetPropsDiscountResp::SharedCtor() {
  _cached_size_ = 0;
  npcseller_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPropsDiscountResp::~GetPropsDiscountResp() {
  // @@protoc_insertion_point(destructor:ProtoNPCSeller.GetPropsDiscountResp)
  SharedDtor();
}

void GetPropsDiscountResp::SharedDtor() {
  if (this != default_instance_) {
    delete npcseller_;
  }
}

void GetPropsDiscountResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPropsDiscountResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPropsDiscountResp_descriptor_;
}

const GetPropsDiscountResp& GetPropsDiscountResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCSeller_2eproto();
  return *default_instance_;
}

GetPropsDiscountResp* GetPropsDiscountResp::default_instance_ = NULL;

GetPropsDiscountResp* GetPropsDiscountResp::New() const {
  return new GetPropsDiscountResp;
}

void GetPropsDiscountResp::Clear() {
  if (has_npcseller()) {
    if (npcseller_ != NULL) npcseller_->::ProtoNPCSeller::NPCSellerCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPropsDiscountResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCSeller.GetPropsDiscountResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npcseller()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCSeller.GetPropsDiscountResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCSeller.GetPropsDiscountResp)
  return false;
#undef DO_
}

void GetPropsDiscountResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCSeller.GetPropsDiscountResp)
  // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
  if (has_npcseller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->npcseller(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCSeller.GetPropsDiscountResp)
}

::google::protobuf::uint8* GetPropsDiscountResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCSeller.GetPropsDiscountResp)
  // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
  if (has_npcseller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npcseller(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCSeller.GetPropsDiscountResp)
  return target;
}

int GetPropsDiscountResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
    if (has_npcseller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npcseller());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPropsDiscountResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPropsDiscountResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPropsDiscountResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPropsDiscountResp::MergeFrom(const GetPropsDiscountResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcseller()) {
      mutable_npcseller()->::ProtoNPCSeller::NPCSellerCPP::MergeFrom(from.npcseller());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPropsDiscountResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPropsDiscountResp::CopyFrom(const GetPropsDiscountResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPropsDiscountResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_npcseller()) {
    if (!this->npcseller().IsInitialized()) return false;
  }
  return true;
}

void GetPropsDiscountResp::Swap(GetPropsDiscountResp* other) {
  if (other != this) {
    std::swap(npcseller_, other->npcseller_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPropsDiscountResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPropsDiscountResp_descriptor_;
  metadata.reflection = GetPropsDiscountResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseNPCSellerReq::kResponseFlagFieldNumber;
#endif  // !_MSC_VER

ResponseNPCSellerReq::ResponseNPCSellerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCSeller.ResponseNPCSellerReq)
}

void ResponseNPCSellerReq::InitAsDefaultInstance() {
}

ResponseNPCSellerReq::ResponseNPCSellerReq(const ResponseNPCSellerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCSeller.ResponseNPCSellerReq)
}

void ResponseNPCSellerReq::SharedCtor() {
  _cached_size_ = 0;
  responseflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseNPCSellerReq::~ResponseNPCSellerReq() {
  // @@protoc_insertion_point(destructor:ProtoNPCSeller.ResponseNPCSellerReq)
  SharedDtor();
}

void ResponseNPCSellerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseNPCSellerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseNPCSellerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseNPCSellerReq_descriptor_;
}

const ResponseNPCSellerReq& ResponseNPCSellerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCSeller_2eproto();
  return *default_instance_;
}

ResponseNPCSellerReq* ResponseNPCSellerReq::default_instance_ = NULL;

ResponseNPCSellerReq* ResponseNPCSellerReq::New() const {
  return new ResponseNPCSellerReq;
}

void ResponseNPCSellerReq::Clear() {
  responseflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseNPCSellerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCSeller.ResponseNPCSellerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 responseFlag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &responseflag_)));
          set_has_responseflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCSeller.ResponseNPCSellerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCSeller.ResponseNPCSellerReq)
  return false;
#undef DO_
}

void ResponseNPCSellerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCSeller.ResponseNPCSellerReq)
  // required uint32 responseFlag = 1;
  if (has_responseflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->responseflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCSeller.ResponseNPCSellerReq)
}

::google::protobuf::uint8* ResponseNPCSellerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCSeller.ResponseNPCSellerReq)
  // required uint32 responseFlag = 1;
  if (has_responseflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->responseflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCSeller.ResponseNPCSellerReq)
  return target;
}

int ResponseNPCSellerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 responseFlag = 1;
    if (has_responseflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->responseflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseNPCSellerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseNPCSellerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseNPCSellerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseNPCSellerReq::MergeFrom(const ResponseNPCSellerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responseflag()) {
      set_responseflag(from.responseflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseNPCSellerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseNPCSellerReq::CopyFrom(const ResponseNPCSellerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseNPCSellerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResponseNPCSellerReq::Swap(ResponseNPCSellerReq* other) {
  if (other != this) {
    std::swap(responseflag_, other->responseflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseNPCSellerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseNPCSellerReq_descriptor_;
  metadata.reflection = ResponseNPCSellerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseNPCSellerResp::kNpcSellerFieldNumber;
const int ResponseNPCSellerResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ResponseNPCSellerResp::ResponseNPCSellerResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCSeller.ResponseNPCSellerResp)
}

void ResponseNPCSellerResp::InitAsDefaultInstance() {
  npcseller_ = const_cast< ::ProtoNPCSeller::NPCSellerCPP*>(&::ProtoNPCSeller::NPCSellerCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ResponseNPCSellerResp::ResponseNPCSellerResp(const ResponseNPCSellerResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCSeller.ResponseNPCSellerResp)
}

void ResponseNPCSellerResp::SharedCtor() {
  _cached_size_ = 0;
  npcseller_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseNPCSellerResp::~ResponseNPCSellerResp() {
  // @@protoc_insertion_point(destructor:ProtoNPCSeller.ResponseNPCSellerResp)
  SharedDtor();
}

void ResponseNPCSellerResp::SharedDtor() {
  if (this != default_instance_) {
    delete npcseller_;
    delete commons_;
  }
}

void ResponseNPCSellerResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseNPCSellerResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseNPCSellerResp_descriptor_;
}

const ResponseNPCSellerResp& ResponseNPCSellerResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCSeller_2eproto();
  return *default_instance_;
}

ResponseNPCSellerResp* ResponseNPCSellerResp::default_instance_ = NULL;

ResponseNPCSellerResp* ResponseNPCSellerResp::New() const {
  return new ResponseNPCSellerResp;
}

void ResponseNPCSellerResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_npcseller()) {
      if (npcseller_ != NULL) npcseller_->::ProtoNPCSeller::NPCSellerCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseNPCSellerResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCSeller.ResponseNPCSellerResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npcseller()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCSeller.ResponseNPCSellerResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCSeller.ResponseNPCSellerResp)
  return false;
#undef DO_
}

void ResponseNPCSellerResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCSeller.ResponseNPCSellerResp)
  // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
  if (has_npcseller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->npcseller(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCSeller.ResponseNPCSellerResp)
}

::google::protobuf::uint8* ResponseNPCSellerResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCSeller.ResponseNPCSellerResp)
  // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
  if (has_npcseller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npcseller(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCSeller.ResponseNPCSellerResp)
  return target;
}

int ResponseNPCSellerResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
    if (has_npcseller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npcseller());
    }

    // optional .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseNPCSellerResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseNPCSellerResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseNPCSellerResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseNPCSellerResp::MergeFrom(const ResponseNPCSellerResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcseller()) {
      mutable_npcseller()->::ProtoNPCSeller::NPCSellerCPP::MergeFrom(from.npcseller());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseNPCSellerResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseNPCSellerResp::CopyFrom(const ResponseNPCSellerResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseNPCSellerResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_npcseller()) {
    if (!this->npcseller().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ResponseNPCSellerResp::Swap(ResponseNPCSellerResp* other) {
  if (other != this) {
    std::swap(npcseller_, other->npcseller_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseNPCSellerResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseNPCSellerResp_descriptor_;
  metadata.reflection = ResponseNPCSellerResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ChangeNPCSellerStatusReq::ChangeNPCSellerStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCSeller.ChangeNPCSellerStatusReq)
}

void ChangeNPCSellerStatusReq::InitAsDefaultInstance() {
}

ChangeNPCSellerStatusReq::ChangeNPCSellerStatusReq(const ChangeNPCSellerStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCSeller.ChangeNPCSellerStatusReq)
}

void ChangeNPCSellerStatusReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeNPCSellerStatusReq::~ChangeNPCSellerStatusReq() {
  // @@protoc_insertion_point(destructor:ProtoNPCSeller.ChangeNPCSellerStatusReq)
  SharedDtor();
}

void ChangeNPCSellerStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeNPCSellerStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeNPCSellerStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeNPCSellerStatusReq_descriptor_;
}

const ChangeNPCSellerStatusReq& ChangeNPCSellerStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCSeller_2eproto();
  return *default_instance_;
}

ChangeNPCSellerStatusReq* ChangeNPCSellerStatusReq::default_instance_ = NULL;

ChangeNPCSellerStatusReq* ChangeNPCSellerStatusReq::New() const {
  return new ChangeNPCSellerStatusReq;
}

void ChangeNPCSellerStatusReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeNPCSellerStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCSeller.ChangeNPCSellerStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCSeller.ChangeNPCSellerStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCSeller.ChangeNPCSellerStatusReq)
  return false;
#undef DO_
}

void ChangeNPCSellerStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCSeller.ChangeNPCSellerStatusReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCSeller.ChangeNPCSellerStatusReq)
}

::google::protobuf::uint8* ChangeNPCSellerStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCSeller.ChangeNPCSellerStatusReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCSeller.ChangeNPCSellerStatusReq)
  return target;
}

int ChangeNPCSellerStatusReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeNPCSellerStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeNPCSellerStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeNPCSellerStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeNPCSellerStatusReq::MergeFrom(const ChangeNPCSellerStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeNPCSellerStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeNPCSellerStatusReq::CopyFrom(const ChangeNPCSellerStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeNPCSellerStatusReq::IsInitialized() const {

  return true;
}

void ChangeNPCSellerStatusReq::Swap(ChangeNPCSellerStatusReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeNPCSellerStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeNPCSellerStatusReq_descriptor_;
  metadata.reflection = ChangeNPCSellerStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeNPCSellerStatusResp::kNpcSellerFieldNumber;
#endif  // !_MSC_VER

ChangeNPCSellerStatusResp::ChangeNPCSellerStatusResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCSeller.ChangeNPCSellerStatusResp)
}

void ChangeNPCSellerStatusResp::InitAsDefaultInstance() {
  npcseller_ = const_cast< ::ProtoNPCSeller::NPCSellerCPP*>(&::ProtoNPCSeller::NPCSellerCPP::default_instance());
}

ChangeNPCSellerStatusResp::ChangeNPCSellerStatusResp(const ChangeNPCSellerStatusResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCSeller.ChangeNPCSellerStatusResp)
}

void ChangeNPCSellerStatusResp::SharedCtor() {
  _cached_size_ = 0;
  npcseller_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeNPCSellerStatusResp::~ChangeNPCSellerStatusResp() {
  // @@protoc_insertion_point(destructor:ProtoNPCSeller.ChangeNPCSellerStatusResp)
  SharedDtor();
}

void ChangeNPCSellerStatusResp::SharedDtor() {
  if (this != default_instance_) {
    delete npcseller_;
  }
}

void ChangeNPCSellerStatusResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeNPCSellerStatusResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeNPCSellerStatusResp_descriptor_;
}

const ChangeNPCSellerStatusResp& ChangeNPCSellerStatusResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCSeller_2eproto();
  return *default_instance_;
}

ChangeNPCSellerStatusResp* ChangeNPCSellerStatusResp::default_instance_ = NULL;

ChangeNPCSellerStatusResp* ChangeNPCSellerStatusResp::New() const {
  return new ChangeNPCSellerStatusResp;
}

void ChangeNPCSellerStatusResp::Clear() {
  if (has_npcseller()) {
    if (npcseller_ != NULL) npcseller_->::ProtoNPCSeller::NPCSellerCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeNPCSellerStatusResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCSeller.ChangeNPCSellerStatusResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npcseller()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCSeller.ChangeNPCSellerStatusResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCSeller.ChangeNPCSellerStatusResp)
  return false;
#undef DO_
}

void ChangeNPCSellerStatusResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCSeller.ChangeNPCSellerStatusResp)
  // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
  if (has_npcseller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->npcseller(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCSeller.ChangeNPCSellerStatusResp)
}

::google::protobuf::uint8* ChangeNPCSellerStatusResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCSeller.ChangeNPCSellerStatusResp)
  // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
  if (has_npcseller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npcseller(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCSeller.ChangeNPCSellerStatusResp)
  return target;
}

int ChangeNPCSellerStatusResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
    if (has_npcseller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npcseller());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeNPCSellerStatusResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeNPCSellerStatusResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeNPCSellerStatusResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeNPCSellerStatusResp::MergeFrom(const ChangeNPCSellerStatusResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcseller()) {
      mutable_npcseller()->::ProtoNPCSeller::NPCSellerCPP::MergeFrom(from.npcseller());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeNPCSellerStatusResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeNPCSellerStatusResp::CopyFrom(const ChangeNPCSellerStatusResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeNPCSellerStatusResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_npcseller()) {
    if (!this->npcseller().IsInitialized()) return false;
  }
  return true;
}

void ChangeNPCSellerStatusResp::Swap(ChangeNPCSellerStatusResp* other) {
  if (other != this) {
    std::swap(npcseller_, other->npcseller_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeNPCSellerStatusResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeNPCSellerStatusResp_descriptor_;
  metadata.reflection = ChangeNPCSellerStatusResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushNPCSellerInfo::kNpcSellerFieldNumber;
#endif  // !_MSC_VER

PushNPCSellerInfo::PushNPCSellerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCSeller.PushNPCSellerInfo)
}

void PushNPCSellerInfo::InitAsDefaultInstance() {
  npcseller_ = const_cast< ::ProtoNPCSeller::NPCSellerCPP*>(&::ProtoNPCSeller::NPCSellerCPP::default_instance());
}

PushNPCSellerInfo::PushNPCSellerInfo(const PushNPCSellerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCSeller.PushNPCSellerInfo)
}

void PushNPCSellerInfo::SharedCtor() {
  _cached_size_ = 0;
  npcseller_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushNPCSellerInfo::~PushNPCSellerInfo() {
  // @@protoc_insertion_point(destructor:ProtoNPCSeller.PushNPCSellerInfo)
  SharedDtor();
}

void PushNPCSellerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete npcseller_;
  }
}

void PushNPCSellerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushNPCSellerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushNPCSellerInfo_descriptor_;
}

const PushNPCSellerInfo& PushNPCSellerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCSeller_2eproto();
  return *default_instance_;
}

PushNPCSellerInfo* PushNPCSellerInfo::default_instance_ = NULL;

PushNPCSellerInfo* PushNPCSellerInfo::New() const {
  return new PushNPCSellerInfo;
}

void PushNPCSellerInfo::Clear() {
  if (has_npcseller()) {
    if (npcseller_ != NULL) npcseller_->::ProtoNPCSeller::NPCSellerCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushNPCSellerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCSeller.PushNPCSellerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npcseller()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCSeller.PushNPCSellerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCSeller.PushNPCSellerInfo)
  return false;
#undef DO_
}

void PushNPCSellerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCSeller.PushNPCSellerInfo)
  // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
  if (has_npcseller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->npcseller(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCSeller.PushNPCSellerInfo)
}

::google::protobuf::uint8* PushNPCSellerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCSeller.PushNPCSellerInfo)
  // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
  if (has_npcseller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npcseller(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCSeller.PushNPCSellerInfo)
  return target;
}

int PushNPCSellerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNPCSeller.NPCSellerCPP npcSeller = 1;
    if (has_npcseller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npcseller());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushNPCSellerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushNPCSellerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushNPCSellerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushNPCSellerInfo::MergeFrom(const PushNPCSellerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcseller()) {
      mutable_npcseller()->::ProtoNPCSeller::NPCSellerCPP::MergeFrom(from.npcseller());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushNPCSellerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushNPCSellerInfo::CopyFrom(const PushNPCSellerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushNPCSellerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_npcseller()) {
    if (!this->npcseller().IsInitialized()) return false;
  }
  return true;
}

void PushNPCSellerInfo::Swap(PushNPCSellerInfo* other) {
  if (other != this) {
    std::swap(npcseller_, other->npcseller_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushNPCSellerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushNPCSellerInfo_descriptor_;
  metadata.reflection = PushNPCSellerInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoNPCSeller

// @@protoc_insertion_point(global_scope)
