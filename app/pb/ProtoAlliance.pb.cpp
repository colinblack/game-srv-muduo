// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoAlliance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoAlliance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoAlliance {

namespace {

const ::google::protobuf::Descriptor* AllianceCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceMemberCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceMemberCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceApplyCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceApplyCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceInvitedCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceInvitedCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckNameAvailableReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckNameAvailableReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckNameAvailableResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckNameAvailableResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateAllianceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateAllianceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateAllianceResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateAllianceResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecommendllianceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecommendllianceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartAllianceCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartAllianceCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecommendllianceResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecommendllianceResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPartAllianceInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPartAllianceInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPartAllianceInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPartAllianceInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestApplyJoinBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestApplyJoinBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyApplyJoinBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyApplyJoinBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApproveJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApproveJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestApproveJoinAllianceBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestApproveJoinAllianceBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestApproveJoinUserBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestApproveJoinUserBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyApproveJoinBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyApproveJoinBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApproveJoinResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApproveJoinResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitAllianceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitAllianceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestExitAllianceBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestExitAllianceBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyExitAllianceBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyExitAllianceBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitAllianceResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitAllianceResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostionChangePushReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostionChangePushReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestInviteJoinBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestInviteJoinBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestInviteJoinUserBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestInviteJoinUserBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyInviteJoinBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyInviteJoinBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvitedPushReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvitedPushReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAcceptInviteBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAcceptInviteBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAcceptInviteBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAcceptInviteBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptInviteResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptInviteResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManipulateMemberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManipulateMemberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestManipulateMemberBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestManipulateMemberBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyManipulateMemberBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyManipulateMemberBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManipulateMemberResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManipulateMemberResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickOutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickOutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestKickOutBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestKickOutBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyKickOutBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyKickOutBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestKickOutMemberBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestKickOutMemberBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickOutResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickOutResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestTransferBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestTransferBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyTransferBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyTransferBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EditAllianceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditAllianceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestEditAllianceBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestEditAllianceBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyEditAllianceBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyEditAllianceBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* EditAllianceResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EditAllianceResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceDonationCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceDonationCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeekDonationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeekDonationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSeekDonationBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSeekDonationBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplySeekDonationBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplySeekDonationBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeekDonationResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeekDonationResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CutUpDonationCDReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CutUpDonationCDReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CutUpDonationCDResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CutUpDonationCDResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferDonationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferDonationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestOfferDonationBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestOfferDonationBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyOfferDonationBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyOfferDonationBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferDonationResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferDonationResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchDonationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchDonationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFetchDonationBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFetchDonationBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyFetchDonationBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyFetchDonationBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchDonationResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchDonationResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceNotifyCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceNotifyCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendNotifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendNotifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSendNotifyBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSendNotifyBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplySendNotifyBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplySendNotifyBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendNotifyResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendNotifyResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelNotifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelNotifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestDelNotifyBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestDelNotifyBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyDelNotifyBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyDelNotifyBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelNotifyResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelNotifyResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AidInfoCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AidInfoCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllianceFunctionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllianceFunctionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllianceFunctionResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllianceFunctionResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceFunctionBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceFunctionBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceFunctionBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceFunctionBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNotifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNotifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNotifyResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNotifyResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceNotifyBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceNotifyBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceNotifyBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceNotifyBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMemberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMemberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceMemberBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceMemberBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceMemberBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceMemberBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMemberResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMemberResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAlliance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAlliance_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUpdateMemberBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUpdateMemberBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAddMemberHelpTimesBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAddMemberHelpTimesBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceSetFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceSetFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceSetFlagBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceSetFlagBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceMemberProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceMemberProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceMemberProgressBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceMemberProgressBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceRaceMemberProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceRaceMemberProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceInfoBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceInfoBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceRaceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceRaceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceRaceOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceRaceOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceRaceMemberOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceRaceMemberOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceOrderBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceOrderBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceRaceOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceRaceOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceOperateOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceOperateOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceOperateOrderBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceOperateOrderBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceRaceOperateOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceRaceOperateOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceMemberDelOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceMemberDelOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceMemberDelOrderBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceMemberDelOrderBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceMemberUpdateOrderBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceMemberUpdateOrderBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceBuyOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceBuyOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceBuyOrderBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceBuyOrderBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceRaceBuyOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceRaceBuyOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceWatchAd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceWatchAd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceRaceWatchAd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceRaceWatchAd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceWatchAdBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceWatchAdBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceRewardBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceRewardBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceRaceReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceRaceReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceTakeGradeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceTakeGradeReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceTakeGradeRewardBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceTakeGradeRewardBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceRaceTakeGradeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceRaceTakeGradeReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceTakeStageReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceTakeStageReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceTakeStageRewardBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceTakeStageRewardBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceRaceTakeStageReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceRaceTakeStageReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceRefreshStageReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceRefreshStageReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceRefreshStageRewardBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceRefreshStageRewardBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceRaceRefreshStageReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceRaceRefreshStageReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceRaceMemberOrderLogItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceRaceMemberOrderLogItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceMemberOrderLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceMemberOrderLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceMemberOrderLogBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceMemberOrderLogBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceRaceMemberOrderLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceRaceMemberOrderLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceRacePersonOrderLogItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceRacePersonOrderLogItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRacePersonOrderLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRacePersonOrderLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRacePersonOrderLogBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRacePersonOrderLogBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceRacePersonOrderLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceRacePersonOrderLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetAllianceRaceGroupPointBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetAllianceRaceGroupPointBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceRaceGroupMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceRaceGroupMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceGroupMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceGroupMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAllianceRaceGroupMemberBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAllianceRaceGroupMemberBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAllianceRaceGroupMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAllianceRaceGroupMember_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoAlliance_2eproto() {
  protobuf_AddDesc_ProtoAlliance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoAlliance.proto");
  GOOGLE_CHECK(file != NULL);
  AllianceCPP_descriptor_ = file->message_type(0);
  static const int AllianceCPP_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceCPP, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceCPP, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceCPP, createuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceCPP, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceCPP, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceCPP, applytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceCPP, applylevellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceCPP, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceCPP, qqgroup_),
  };
  AllianceCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceCPP_descriptor_,
      AllianceCPP::default_instance_,
      AllianceCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceCPP));
  AllianceMemberCPP_descriptor_ = file->message_type(1);
  static const int AllianceMemberCPP_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberCPP, memberuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberCPP, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberCPP, authority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberCPP, helptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberCPP, onlinets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberCPP, helpts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberCPP, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberCPP, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberCPP, joints_),
  };
  AllianceMemberCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceMemberCPP_descriptor_,
      AllianceMemberCPP::default_instance_,
      AllianceMemberCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceMemberCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceMemberCPP));
  AllianceApplyCPP_descriptor_ = file->message_type(2);
  static const int AllianceApplyCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceApplyCPP, applyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceApplyCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceApplyCPP, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceApplyCPP, applyts_),
  };
  AllianceApplyCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceApplyCPP_descriptor_,
      AllianceApplyCPP::default_instance_,
      AllianceApplyCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceApplyCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceApplyCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceApplyCPP));
  AllianceInvitedCPP_descriptor_ = file->message_type(3);
  static const int AllianceInvitedCPP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInvitedCPP, inviteuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInvitedCPP, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInvitedCPP, alliancename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInvitedCPP, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInvitedCPP, invitename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInvitedCPP, invitets_),
  };
  AllianceInvitedCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceInvitedCPP_descriptor_,
      AllianceInvitedCPP::default_instance_,
      AllianceInvitedCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInvitedCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceInvitedCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceInvitedCPP));
  CheckNameAvailableReq_descriptor_ = file->message_type(4);
  static const int CheckNameAvailableReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameAvailableReq, name_),
  };
  CheckNameAvailableReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckNameAvailableReq_descriptor_,
      CheckNameAvailableReq::default_instance_,
      CheckNameAvailableReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameAvailableReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameAvailableReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckNameAvailableReq));
  CheckNameAvailableResp_descriptor_ = file->message_type(5);
  static const int CheckNameAvailableResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameAvailableResp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameAvailableResp, isavailable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameAvailableResp, reason_),
  };
  CheckNameAvailableResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckNameAvailableResp_descriptor_,
      CheckNameAvailableResp::default_instance_,
      CheckNameAvailableResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameAvailableResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckNameAvailableResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckNameAvailableResp));
  CreateAllianceReq_descriptor_ = file->message_type(6);
  static const int CreateAllianceReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceReq, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceReq, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceReq, applytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceReq, applylevellimit_),
  };
  CreateAllianceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateAllianceReq_descriptor_,
      CreateAllianceReq::default_instance_,
      CreateAllianceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateAllianceReq));
  CreateAllianceResp_descriptor_ = file->message_type(7);
  static const int CreateAllianceResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceResp, alliance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceResp, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceResp, commons_),
  };
  CreateAllianceResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateAllianceResp_descriptor_,
      CreateAllianceResp::default_instance_,
      CreateAllianceResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAllianceResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateAllianceResp));
  RecommendllianceReq_descriptor_ = file->message_type(8);
  static const int RecommendllianceReq_offsets_[1] = {
  };
  RecommendllianceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecommendllianceReq_descriptor_,
      RecommendllianceReq::default_instance_,
      RecommendllianceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendllianceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendllianceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecommendllianceReq));
  PartAllianceCPP_descriptor_ = file->message_type(9);
  static const int PartAllianceCPP_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartAllianceCPP, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartAllianceCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartAllianceCPP, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartAllianceCPP, applytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartAllianceCPP, applylevellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartAllianceCPP, membercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartAllianceCPP, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartAllianceCPP, onlinenum_),
  };
  PartAllianceCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartAllianceCPP_descriptor_,
      PartAllianceCPP::default_instance_,
      PartAllianceCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartAllianceCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartAllianceCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartAllianceCPP));
  RecommendllianceResp_descriptor_ = file->message_type(10);
  static const int RecommendllianceResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendllianceResp, alliancebrief_),
  };
  RecommendllianceResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecommendllianceResp_descriptor_,
      RecommendllianceResp::default_instance_,
      RecommendllianceResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendllianceResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendllianceResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecommendllianceResp));
  GetPartAllianceInfoReq_descriptor_ = file->message_type(11);
  static const int GetPartAllianceInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartAllianceInfoReq, allianceid_),
  };
  GetPartAllianceInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPartAllianceInfoReq_descriptor_,
      GetPartAllianceInfoReq::default_instance_,
      GetPartAllianceInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartAllianceInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartAllianceInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPartAllianceInfoReq));
  GetPartAllianceInfoResp_descriptor_ = file->message_type(12);
  static const int GetPartAllianceInfoResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartAllianceInfoResp, alliancebrief_),
  };
  GetPartAllianceInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPartAllianceInfoResp_descriptor_,
      GetPartAllianceInfoResp::default_instance_,
      GetPartAllianceInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartAllianceInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPartAllianceInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPartAllianceInfoResp));
  ApplyJoinReq_descriptor_ = file->message_type(13);
  static const int ApplyJoinReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinReq, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinReq, reason_),
  };
  ApplyJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinReq_descriptor_,
      ApplyJoinReq::default_instance_,
      ApplyJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinReq));
  RequestApplyJoinBC_descriptor_ = file->message_type(14);
  static const int RequestApplyJoinBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApplyJoinBC, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApplyJoinBC, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApplyJoinBC, member_),
  };
  RequestApplyJoinBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestApplyJoinBC_descriptor_,
      RequestApplyJoinBC::default_instance_,
      RequestApplyJoinBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApplyJoinBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApplyJoinBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestApplyJoinBC));
  ReplyApplyJoinBC_descriptor_ = file->message_type(15);
  static const int ReplyApplyJoinBC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyApplyJoinBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyApplyJoinBC, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyApplyJoinBC, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyApplyJoinBC, alliance_),
  };
  ReplyApplyJoinBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyApplyJoinBC_descriptor_,
      ReplyApplyJoinBC::default_instance_,
      ReplyApplyJoinBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyApplyJoinBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyApplyJoinBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyApplyJoinBC));
  ApplyJoinResp_descriptor_ = file->message_type(16);
  static const int ApplyJoinResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinResp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinResp, apply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinResp, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinResp, alliance_),
  };
  ApplyJoinResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinResp_descriptor_,
      ApplyJoinResp::default_instance_,
      ApplyJoinResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinResp));
  ApproveJoinReq_descriptor_ = file->message_type(17);
  static const int ApproveJoinReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveJoinReq, applyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveJoinReq, operate_),
  };
  ApproveJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApproveJoinReq_descriptor_,
      ApproveJoinReq::default_instance_,
      ApproveJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApproveJoinReq));
  RequestApproveJoinAllianceBC_descriptor_ = file->message_type(18);
  static const int RequestApproveJoinAllianceBC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApproveJoinAllianceBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApproveJoinAllianceBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApproveJoinAllianceBC, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApproveJoinAllianceBC, member_),
  };
  RequestApproveJoinAllianceBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestApproveJoinAllianceBC_descriptor_,
      RequestApproveJoinAllianceBC::default_instance_,
      RequestApproveJoinAllianceBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApproveJoinAllianceBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApproveJoinAllianceBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestApproveJoinAllianceBC));
  RequestApproveJoinUserBC_descriptor_ = file->message_type(19);
  static const int RequestApproveJoinUserBC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApproveJoinUserBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApproveJoinUserBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApproveJoinUserBC, applyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApproveJoinUserBC, operate_),
  };
  RequestApproveJoinUserBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestApproveJoinUserBC_descriptor_,
      RequestApproveJoinUserBC::default_instance_,
      RequestApproveJoinUserBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApproveJoinUserBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestApproveJoinUserBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestApproveJoinUserBC));
  ReplyApproveJoinBC_descriptor_ = file->message_type(20);
  static const int ReplyApproveJoinBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyApproveJoinBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyApproveJoinBC, alliance_),
  };
  ReplyApproveJoinBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyApproveJoinBC_descriptor_,
      ReplyApproveJoinBC::default_instance_,
      ReplyApproveJoinBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyApproveJoinBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyApproveJoinBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyApproveJoinBC));
  ApproveJoinResp_descriptor_ = file->message_type(21);
  static const int ApproveJoinResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveJoinResp, applyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveJoinResp, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveJoinResp, member_),
  };
  ApproveJoinResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApproveJoinResp_descriptor_,
      ApproveJoinResp::default_instance_,
      ApproveJoinResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveJoinResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveJoinResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApproveJoinResp));
  ExitAllianceReq_descriptor_ = file->message_type(22);
  static const int ExitAllianceReq_offsets_[1] = {
  };
  ExitAllianceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitAllianceReq_descriptor_,
      ExitAllianceReq::default_instance_,
      ExitAllianceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitAllianceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitAllianceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitAllianceReq));
  RequestExitAllianceBC_descriptor_ = file->message_type(23);
  static const int RequestExitAllianceBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExitAllianceBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExitAllianceBC, uid_),
  };
  RequestExitAllianceBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestExitAllianceBC_descriptor_,
      RequestExitAllianceBC::default_instance_,
      RequestExitAllianceBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExitAllianceBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestExitAllianceBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestExitAllianceBC));
  ReplyExitAllianceBC_descriptor_ = file->message_type(24);
  static const int ReplyExitAllianceBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyExitAllianceBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyExitAllianceBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyExitAllianceBC, alliance_),
  };
  ReplyExitAllianceBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyExitAllianceBC_descriptor_,
      ReplyExitAllianceBC::default_instance_,
      ReplyExitAllianceBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyExitAllianceBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyExitAllianceBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyExitAllianceBC));
  ExitAllianceResp_descriptor_ = file->message_type(25);
  static const int ExitAllianceResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitAllianceResp, commons_),
  };
  ExitAllianceResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitAllianceResp_descriptor_,
      ExitAllianceResp::default_instance_,
      ExitAllianceResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitAllianceResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitAllianceResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitAllianceResp));
  PostionChangePushReq_descriptor_ = file->message_type(26);
  static const int PostionChangePushReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostionChangePushReq, oldpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostionChangePushReq, newpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostionChangePushReq, alliance_),
  };
  PostionChangePushReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostionChangePushReq_descriptor_,
      PostionChangePushReq::default_instance_,
      PostionChangePushReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostionChangePushReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostionChangePushReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostionChangePushReq));
  InviteJoinReq_descriptor_ = file->message_type(27);
  static const int InviteJoinReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinReq, inviteduid_),
  };
  InviteJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinReq_descriptor_,
      InviteJoinReq::default_instance_,
      InviteJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinReq));
  RequestInviteJoinBC_descriptor_ = file->message_type(28);
  static const int RequestInviteJoinBC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInviteJoinBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInviteJoinBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInviteJoinBC, inviteduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInviteJoinBC, name_),
  };
  RequestInviteJoinBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestInviteJoinBC_descriptor_,
      RequestInviteJoinBC::default_instance_,
      RequestInviteJoinBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInviteJoinBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInviteJoinBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestInviteJoinBC));
  RequestInviteJoinUserBC_descriptor_ = file->message_type(29);
  static const int RequestInviteJoinUserBC_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInviteJoinUserBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInviteJoinUserBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInviteJoinUserBC, inviteduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInviteJoinUserBC, allianceflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInviteJoinUserBC, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInviteJoinUserBC, alliancename_),
  };
  RequestInviteJoinUserBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestInviteJoinUserBC_descriptor_,
      RequestInviteJoinUserBC::default_instance_,
      RequestInviteJoinUserBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInviteJoinUserBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestInviteJoinUserBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestInviteJoinUserBC));
  ReplyInviteJoinBC_descriptor_ = file->message_type(30);
  static const int ReplyInviteJoinBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyInviteJoinBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyInviteJoinBC, alliance_),
  };
  ReplyInviteJoinBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyInviteJoinBC_descriptor_,
      ReplyInviteJoinBC::default_instance_,
      ReplyInviteJoinBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyInviteJoinBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyInviteJoinBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyInviteJoinBC));
  InviteJoinResp_descriptor_ = file->message_type(31);
  static const int InviteJoinResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinResp, inviteduid_),
  };
  InviteJoinResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinResp_descriptor_,
      InviteJoinResp::default_instance_,
      InviteJoinResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinResp));
  InvitedPushReq_descriptor_ = file->message_type(32);
  static const int InvitedPushReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitedPushReq, invite_),
  };
  InvitedPushReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvitedPushReq_descriptor_,
      InvitedPushReq::default_instance_,
      InvitedPushReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitedPushReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitedPushReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvitedPushReq));
  AcceptInviteReq_descriptor_ = file->message_type(33);
  static const int AcceptInviteReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInviteReq, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInviteReq, operate_),
  };
  AcceptInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptInviteReq_descriptor_,
      AcceptInviteReq::default_instance_,
      AcceptInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptInviteReq));
  RequestAcceptInviteBC_descriptor_ = file->message_type(34);
  static const int RequestAcceptInviteBC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAcceptInviteBC, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAcceptInviteBC, inviteuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAcceptInviteBC, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAcceptInviteBC, member_),
  };
  RequestAcceptInviteBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAcceptInviteBC_descriptor_,
      RequestAcceptInviteBC::default_instance_,
      RequestAcceptInviteBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAcceptInviteBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAcceptInviteBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAcceptInviteBC));
  ReplyAcceptInviteBC_descriptor_ = file->message_type(35);
  static const int ReplyAcceptInviteBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAcceptInviteBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAcceptInviteBC, alliance_),
  };
  ReplyAcceptInviteBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAcceptInviteBC_descriptor_,
      ReplyAcceptInviteBC::default_instance_,
      ReplyAcceptInviteBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAcceptInviteBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAcceptInviteBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAcceptInviteBC));
  AcceptInviteResp_descriptor_ = file->message_type(36);
  static const int AcceptInviteResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInviteResp, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInviteResp, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInviteResp, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInviteResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInviteResp, alliance_),
  };
  AcceptInviteResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptInviteResp_descriptor_,
      AcceptInviteResp::default_instance_,
      AcceptInviteResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInviteResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptInviteResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptInviteResp));
  ManipulateMemberReq_descriptor_ = file->message_type(37);
  static const int ManipulateMemberReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateMemberReq, memberuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateMemberReq, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateMemberReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateMemberReq, destination_),
  };
  ManipulateMemberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManipulateMemberReq_descriptor_,
      ManipulateMemberReq::default_instance_,
      ManipulateMemberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateMemberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateMemberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManipulateMemberReq));
  RequestManipulateMemberBC_descriptor_ = file->message_type(38);
  static const int RequestManipulateMemberBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestManipulateMemberBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestManipulateMemberBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestManipulateMemberBC, info_),
  };
  RequestManipulateMemberBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestManipulateMemberBC_descriptor_,
      RequestManipulateMemberBC::default_instance_,
      RequestManipulateMemberBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestManipulateMemberBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestManipulateMemberBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestManipulateMemberBC));
  ReplyManipulateMemberBC_descriptor_ = file->message_type(39);
  static const int ReplyManipulateMemberBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyManipulateMemberBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyManipulateMemberBC, alliance_),
  };
  ReplyManipulateMemberBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyManipulateMemberBC_descriptor_,
      ReplyManipulateMemberBC::default_instance_,
      ReplyManipulateMemberBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyManipulateMemberBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyManipulateMemberBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyManipulateMemberBC));
  ManipulateMemberResp_descriptor_ = file->message_type(40);
  static const int ManipulateMemberResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateMemberResp, member_),
  };
  ManipulateMemberResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManipulateMemberResp_descriptor_,
      ManipulateMemberResp::default_instance_,
      ManipulateMemberResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateMemberResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManipulateMemberResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManipulateMemberResp));
  KickOutReq_descriptor_ = file->message_type(41);
  static const int KickOutReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutReq, memberuid_),
  };
  KickOutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickOutReq_descriptor_,
      KickOutReq::default_instance_,
      KickOutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickOutReq));
  RequestKickOutBC_descriptor_ = file->message_type(42);
  static const int RequestKickOutBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestKickOutBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestKickOutBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestKickOutBC, memberuid_),
  };
  RequestKickOutBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestKickOutBC_descriptor_,
      RequestKickOutBC::default_instance_,
      RequestKickOutBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestKickOutBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestKickOutBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestKickOutBC));
  ReplyKickOutBC_descriptor_ = file->message_type(43);
  static const int ReplyKickOutBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyKickOutBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyKickOutBC, alliance_),
  };
  ReplyKickOutBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyKickOutBC_descriptor_,
      ReplyKickOutBC::default_instance_,
      ReplyKickOutBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyKickOutBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyKickOutBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyKickOutBC));
  RequestKickOutMemberBC_descriptor_ = file->message_type(44);
  static const int RequestKickOutMemberBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestKickOutMemberBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestKickOutMemberBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestKickOutMemberBC, memberuid_),
  };
  RequestKickOutMemberBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestKickOutMemberBC_descriptor_,
      RequestKickOutMemberBC::default_instance_,
      RequestKickOutMemberBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestKickOutMemberBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestKickOutMemberBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestKickOutMemberBC));
  KickOutResp_descriptor_ = file->message_type(45);
  static const int KickOutResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutResp, memberuid_),
  };
  KickOutResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickOutResp_descriptor_,
      KickOutResp::default_instance_,
      KickOutResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickOutResp));
  TransferReq_descriptor_ = file->message_type(46);
  static const int TransferReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferReq, memberuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferReq, othername_),
  };
  TransferReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferReq_descriptor_,
      TransferReq::default_instance_,
      TransferReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferReq));
  RequestTransferBC_descriptor_ = file->message_type(47);
  static const int RequestTransferBC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTransferBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTransferBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTransferBC, memberuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTransferBC, othername_),
  };
  RequestTransferBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestTransferBC_descriptor_,
      RequestTransferBC::default_instance_,
      RequestTransferBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTransferBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTransferBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestTransferBC));
  ReplyTransferBC_descriptor_ = file->message_type(48);
  static const int ReplyTransferBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyTransferBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyTransferBC, alliance_),
  };
  ReplyTransferBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyTransferBC_descriptor_,
      ReplyTransferBC::default_instance_,
      ReplyTransferBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyTransferBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyTransferBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyTransferBC));
  TransferResp_descriptor_ = file->message_type(49);
  static const int TransferResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferResp, myself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferResp, other_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferResp, alliance_),
  };
  TransferResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferResp_descriptor_,
      TransferResp::default_instance_,
      TransferResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferResp));
  EditAllianceReq_descriptor_ = file->message_type(50);
  static const int EditAllianceReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditAllianceReq, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditAllianceReq, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditAllianceReq, applytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditAllianceReq, applylevellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditAllianceReq, qqgroup_),
  };
  EditAllianceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditAllianceReq_descriptor_,
      EditAllianceReq::default_instance_,
      EditAllianceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditAllianceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditAllianceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditAllianceReq));
  RequestEditAllianceBC_descriptor_ = file->message_type(51);
  static const int RequestEditAllianceBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEditAllianceBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEditAllianceBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEditAllianceBC, info_),
  };
  RequestEditAllianceBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestEditAllianceBC_descriptor_,
      RequestEditAllianceBC::default_instance_,
      RequestEditAllianceBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEditAllianceBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEditAllianceBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestEditAllianceBC));
  ReplyEditAllianceBC_descriptor_ = file->message_type(52);
  static const int ReplyEditAllianceBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyEditAllianceBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyEditAllianceBC, alliance_),
  };
  ReplyEditAllianceBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyEditAllianceBC_descriptor_,
      ReplyEditAllianceBC::default_instance_,
      ReplyEditAllianceBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyEditAllianceBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyEditAllianceBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyEditAllianceBC));
  EditAllianceResp_descriptor_ = file->message_type(53);
  static const int EditAllianceResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditAllianceResp, alliance_),
  };
  EditAllianceResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EditAllianceResp_descriptor_,
      EditAllianceResp::default_instance_,
      EditAllianceResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditAllianceResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EditAllianceResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EditAllianceResp));
  AllianceDonationCPP_descriptor_ = file->message_type(54);
  static const int AllianceDonationCPP_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationCPP, applyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationCPP, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationCPP, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationCPP, donatecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationCPP, fetchcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationCPP, donateuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationCPP, donatetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationCPP, donatename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationCPP, applyts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationCPP, level_),
  };
  AllianceDonationCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceDonationCPP_descriptor_,
      AllianceDonationCPP::default_instance_,
      AllianceDonationCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceDonationCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceDonationCPP));
  SeekDonationReq_descriptor_ = file->message_type(55);
  static const int SeekDonationReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekDonationReq, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekDonationReq, count_),
  };
  SeekDonationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeekDonationReq_descriptor_,
      SeekDonationReq::default_instance_,
      SeekDonationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekDonationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekDonationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeekDonationReq));
  RequestSeekDonationBC_descriptor_ = file->message_type(56);
  static const int RequestSeekDonationBC_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSeekDonationBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSeekDonationBC, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSeekDonationBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSeekDonationBC, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSeekDonationBC, cdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSeekDonationBC, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSeekDonationBC, level_),
  };
  RequestSeekDonationBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSeekDonationBC_descriptor_,
      RequestSeekDonationBC::default_instance_,
      RequestSeekDonationBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSeekDonationBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSeekDonationBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSeekDonationBC));
  ReplySeekDonationBC_descriptor_ = file->message_type(57);
  static const int ReplySeekDonationBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySeekDonationBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySeekDonationBC, cdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySeekDonationBC, alliance_),
  };
  ReplySeekDonationBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplySeekDonationBC_descriptor_,
      ReplySeekDonationBC::default_instance_,
      ReplySeekDonationBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySeekDonationBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySeekDonationBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplySeekDonationBC));
  SeekDonationResp_descriptor_ = file->message_type(58);
  static const int SeekDonationResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekDonationResp, donation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekDonationResp, nextdonationts_),
  };
  SeekDonationResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeekDonationResp_descriptor_,
      SeekDonationResp::default_instance_,
      SeekDonationResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekDonationResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekDonationResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeekDonationResp));
  CutUpDonationCDReq_descriptor_ = file->message_type(59);
  static const int CutUpDonationCDReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutUpDonationCDReq, type_),
  };
  CutUpDonationCDReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CutUpDonationCDReq_descriptor_,
      CutUpDonationCDReq::default_instance_,
      CutUpDonationCDReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutUpDonationCDReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutUpDonationCDReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CutUpDonationCDReq));
  CutUpDonationCDResp_descriptor_ = file->message_type(60);
  static const int CutUpDonationCDResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutUpDonationCDResp, nextdonationts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutUpDonationCDResp, commons_),
  };
  CutUpDonationCDResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CutUpDonationCDResp_descriptor_,
      CutUpDonationCDResp::default_instance_,
      CutUpDonationCDResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutUpDonationCDResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CutUpDonationCDResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CutUpDonationCDResp));
  OfferDonationReq_descriptor_ = file->message_type(61);
  static const int OfferDonationReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDonationReq, applyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDonationReq, propsid_),
  };
  OfferDonationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferDonationReq_descriptor_,
      OfferDonationReq::default_instance_,
      OfferDonationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDonationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDonationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferDonationReq));
  RequestOfferDonationBC_descriptor_ = file->message_type(62);
  static const int RequestOfferDonationBC_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOfferDonationBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOfferDonationBC, applyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOfferDonationBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOfferDonationBC, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOfferDonationBC, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOfferDonationBC, commons_),
  };
  RequestOfferDonationBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestOfferDonationBC_descriptor_,
      RequestOfferDonationBC::default_instance_,
      RequestOfferDonationBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOfferDonationBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOfferDonationBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestOfferDonationBC));
  ReplyOfferDonationBC_descriptor_ = file->message_type(63);
  static const int ReplyOfferDonationBC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyOfferDonationBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyOfferDonationBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyOfferDonationBC, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyOfferDonationBC, alliance_),
  };
  ReplyOfferDonationBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyOfferDonationBC_descriptor_,
      ReplyOfferDonationBC::default_instance_,
      ReplyOfferDonationBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyOfferDonationBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyOfferDonationBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyOfferDonationBC));
  OfferDonationResp_descriptor_ = file->message_type(64);
  static const int OfferDonationResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDonationResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDonationResp, donation_),
  };
  OfferDonationResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferDonationResp_descriptor_,
      OfferDonationResp::default_instance_,
      OfferDonationResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDonationResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferDonationResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferDonationResp));
  FetchDonationReq_descriptor_ = file->message_type(65);
  static const int FetchDonationReq_offsets_[1] = {
  };
  FetchDonationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchDonationReq_descriptor_,
      FetchDonationReq::default_instance_,
      FetchDonationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchDonationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchDonationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchDonationReq));
  RequestFetchDonationBC_descriptor_ = file->message_type(66);
  static const int RequestFetchDonationBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFetchDonationBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFetchDonationBC, uid_),
  };
  RequestFetchDonationBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFetchDonationBC_descriptor_,
      RequestFetchDonationBC::default_instance_,
      RequestFetchDonationBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFetchDonationBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFetchDonationBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFetchDonationBC));
  ReplyFetchDonationBC_descriptor_ = file->message_type(67);
  static const int ReplyFetchDonationBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyFetchDonationBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyFetchDonationBC, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyFetchDonationBC, alliance_),
  };
  ReplyFetchDonationBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyFetchDonationBC_descriptor_,
      ReplyFetchDonationBC::default_instance_,
      ReplyFetchDonationBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyFetchDonationBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyFetchDonationBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyFetchDonationBC));
  FetchDonationResp_descriptor_ = file->message_type(68);
  static const int FetchDonationResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchDonationResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchDonationResp, donation_),
  };
  FetchDonationResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchDonationResp_descriptor_,
      FetchDonationResp::default_instance_,
      FetchDonationResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchDonationResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchDonationResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchDonationResp));
  AllianceNotifyCPP_descriptor_ = file->message_type(69);
  static const int AllianceNotifyCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNotifyCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNotifyCPP, announcer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNotifyCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNotifyCPP, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNotifyCPP, createts_),
  };
  AllianceNotifyCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceNotifyCPP_descriptor_,
      AllianceNotifyCPP::default_instance_,
      AllianceNotifyCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNotifyCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceNotifyCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceNotifyCPP));
  SendNotifyReq_descriptor_ = file->message_type(70);
  static const int SendNotifyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendNotifyReq, content_),
  };
  SendNotifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendNotifyReq_descriptor_,
      SendNotifyReq::default_instance_,
      SendNotifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendNotifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendNotifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendNotifyReq));
  RequestSendNotifyBC_descriptor_ = file->message_type(71);
  static const int RequestSendNotifyBC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendNotifyBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendNotifyBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendNotifyBC, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendNotifyBC, name_),
  };
  RequestSendNotifyBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSendNotifyBC_descriptor_,
      RequestSendNotifyBC::default_instance_,
      RequestSendNotifyBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendNotifyBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSendNotifyBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSendNotifyBC));
  ReplySendNotifyBC_descriptor_ = file->message_type(72);
  static const int ReplySendNotifyBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySendNotifyBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySendNotifyBC, alliance_),
  };
  ReplySendNotifyBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplySendNotifyBC_descriptor_,
      ReplySendNotifyBC::default_instance_,
      ReplySendNotifyBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySendNotifyBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySendNotifyBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplySendNotifyBC));
  SendNotifyResp_descriptor_ = file->message_type(73);
  static const int SendNotifyResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendNotifyResp, notify_),
  };
  SendNotifyResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendNotifyResp_descriptor_,
      SendNotifyResp::default_instance_,
      SendNotifyResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendNotifyResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendNotifyResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendNotifyResp));
  DelNotifyReq_descriptor_ = file->message_type(74);
  static const int DelNotifyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelNotifyReq, id_),
  };
  DelNotifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelNotifyReq_descriptor_,
      DelNotifyReq::default_instance_,
      DelNotifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelNotifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelNotifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelNotifyReq));
  RequestDelNotifyBC_descriptor_ = file->message_type(75);
  static const int RequestDelNotifyBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDelNotifyBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDelNotifyBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDelNotifyBC, id_),
  };
  RequestDelNotifyBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestDelNotifyBC_descriptor_,
      RequestDelNotifyBC::default_instance_,
      RequestDelNotifyBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDelNotifyBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDelNotifyBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestDelNotifyBC));
  ReplyDelNotifyBC_descriptor_ = file->message_type(76);
  static const int ReplyDelNotifyBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyDelNotifyBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyDelNotifyBC, alliance_),
  };
  ReplyDelNotifyBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyDelNotifyBC_descriptor_,
      ReplyDelNotifyBC::default_instance_,
      ReplyDelNotifyBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyDelNotifyBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyDelNotifyBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyDelNotifyBC));
  DelNotifyResp_descriptor_ = file->message_type(77);
  static const int DelNotifyResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelNotifyResp, id_),
  };
  DelNotifyResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelNotifyResp_descriptor_,
      DelNotifyResp::default_instance_,
      DelNotifyResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelNotifyResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelNotifyResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelNotifyResp));
  AidInfoCPP_descriptor_ = file->message_type(78);
  static const int AidInfoCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidInfoCPP, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidInfoCPP, name_),
  };
  AidInfoCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AidInfoCPP_descriptor_,
      AidInfoCPP::default_instance_,
      AidInfoCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidInfoCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidInfoCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AidInfoCPP));
  GetAllianceFunctionReq_descriptor_ = file->message_type(79);
  static const int GetAllianceFunctionReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllianceFunctionReq, type_),
  };
  GetAllianceFunctionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllianceFunctionReq_descriptor_,
      GetAllianceFunctionReq::default_instance_,
      GetAllianceFunctionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllianceFunctionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllianceFunctionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllianceFunctionReq));
  GetAllianceFunctionResp_descriptor_ = file->message_type(80);
  static const int GetAllianceFunctionResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllianceFunctionResp, applylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllianceFunctionResp, donations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllianceFunctionResp, aidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllianceFunctionResp, invitelist_),
  };
  GetAllianceFunctionResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllianceFunctionResp_descriptor_,
      GetAllianceFunctionResp::default_instance_,
      GetAllianceFunctionResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllianceFunctionResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllianceFunctionResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllianceFunctionResp));
  RequestAllianceFunctionBC_descriptor_ = file->message_type(81);
  static const int RequestAllianceFunctionBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceFunctionBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceFunctionBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceFunctionBC, type_),
  };
  RequestAllianceFunctionBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceFunctionBC_descriptor_,
      RequestAllianceFunctionBC::default_instance_,
      RequestAllianceFunctionBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceFunctionBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceFunctionBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceFunctionBC));
  ReplyAllianceFunctionBC_descriptor_ = file->message_type(82);
  static const int ReplyAllianceFunctionBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceFunctionBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceFunctionBC, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceFunctionBC, alliance_),
  };
  ReplyAllianceFunctionBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceFunctionBC_descriptor_,
      ReplyAllianceFunctionBC::default_instance_,
      ReplyAllianceFunctionBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceFunctionBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceFunctionBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceFunctionBC));
  GetNotifyReq_descriptor_ = file->message_type(83);
  static const int GetNotifyReq_offsets_[1] = {
  };
  GetNotifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNotifyReq_descriptor_,
      GetNotifyReq::default_instance_,
      GetNotifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNotifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNotifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNotifyReq));
  GetNotifyResp_descriptor_ = file->message_type(84);
  static const int GetNotifyResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNotifyResp, notifies_),
  };
  GetNotifyResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNotifyResp_descriptor_,
      GetNotifyResp::default_instance_,
      GetNotifyResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNotifyResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNotifyResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNotifyResp));
  RequestAllianceNotifyBC_descriptor_ = file->message_type(85);
  static const int RequestAllianceNotifyBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceNotifyBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceNotifyBC, uid_),
  };
  RequestAllianceNotifyBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceNotifyBC_descriptor_,
      RequestAllianceNotifyBC::default_instance_,
      RequestAllianceNotifyBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceNotifyBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceNotifyBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceNotifyBC));
  ReplyAllianceNotifyBC_descriptor_ = file->message_type(86);
  static const int ReplyAllianceNotifyBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceNotifyBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceNotifyBC, alliance_),
  };
  ReplyAllianceNotifyBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceNotifyBC_descriptor_,
      ReplyAllianceNotifyBC::default_instance_,
      ReplyAllianceNotifyBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceNotifyBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceNotifyBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceNotifyBC));
  GetMemberReq_descriptor_ = file->message_type(87);
  static const int GetMemberReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemberReq, allianceid_),
  };
  GetMemberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMemberReq_descriptor_,
      GetMemberReq::default_instance_,
      GetMemberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMemberReq));
  RequestAllianceMemberBC_descriptor_ = file->message_type(88);
  static const int RequestAllianceMemberBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceMemberBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceMemberBC, uid_),
  };
  RequestAllianceMemberBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceMemberBC_descriptor_,
      RequestAllianceMemberBC::default_instance_,
      RequestAllianceMemberBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceMemberBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceMemberBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceMemberBC));
  ReplyAllianceMemberBC_descriptor_ = file->message_type(89);
  static const int ReplyAllianceMemberBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceMemberBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceMemberBC, alliance_),
  };
  ReplyAllianceMemberBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceMemberBC_descriptor_,
      ReplyAllianceMemberBC::default_instance_,
      ReplyAllianceMemberBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceMemberBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceMemberBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceMemberBC));
  GetMemberResp_descriptor_ = file->message_type(90);
  static const int GetMemberResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemberResp, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemberResp, allianceid_),
  };
  GetMemberResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMemberResp_descriptor_,
      GetMemberResp::default_instance_,
      GetMemberResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemberResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMemberResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMemberResp));
  RequestAlliance_descriptor_ = file->message_type(91);
  static const int RequestAlliance_offsets_[1] = {
  };
  RequestAlliance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAlliance_descriptor_,
      RequestAlliance::default_instance_,
      RequestAlliance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAlliance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAlliance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAlliance));
  RequestAllianceBC_descriptor_ = file->message_type(92);
  static const int RequestAllianceBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceBC, uid_),
  };
  RequestAllianceBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceBC_descriptor_,
      RequestAllianceBC::default_instance_,
      RequestAllianceBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceBC));
  ReplyAllianceBC_descriptor_ = file->message_type(93);
  static const int ReplyAllianceBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceBC, alliance_),
  };
  ReplyAllianceBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceBC_descriptor_,
      ReplyAllianceBC::default_instance_,
      ReplyAllianceBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceBC));
  RequestUpdateMemberBC_descriptor_ = file->message_type(94);
  static const int RequestUpdateMemberBC_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateMemberBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateMemberBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateMemberBC, onlinets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateMemberBC, helpts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateMemberBC, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateMemberBC, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateMemberBC, viplevel_),
  };
  RequestUpdateMemberBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUpdateMemberBC_descriptor_,
      RequestUpdateMemberBC::default_instance_,
      RequestUpdateMemberBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateMemberBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpdateMemberBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUpdateMemberBC));
  RequestAddMemberHelpTimesBC_descriptor_ = file->message_type(95);
  static const int RequestAddMemberHelpTimesBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddMemberHelpTimesBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddMemberHelpTimesBC, uid_),
  };
  RequestAddMemberHelpTimesBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAddMemberHelpTimesBC_descriptor_,
      RequestAddMemberHelpTimesBC::default_instance_,
      RequestAddMemberHelpTimesBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddMemberHelpTimesBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddMemberHelpTimesBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAddMemberHelpTimesBC));
  RequestAllianceRaceSetFlag_descriptor_ = file->message_type(96);
  static const int RequestAllianceRaceSetFlag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceSetFlag, id_),
  };
  RequestAllianceRaceSetFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceSetFlag_descriptor_,
      RequestAllianceRaceSetFlag::default_instance_,
      RequestAllianceRaceSetFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceSetFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceSetFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceSetFlag));
  RequestAllianceRaceSetFlagBC_descriptor_ = file->message_type(97);
  static const int RequestAllianceRaceSetFlagBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceSetFlagBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceSetFlagBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceSetFlagBC, id_),
  };
  RequestAllianceRaceSetFlagBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceSetFlagBC_descriptor_,
      RequestAllianceRaceSetFlagBC::default_instance_,
      RequestAllianceRaceSetFlagBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceSetFlagBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceSetFlagBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceSetFlagBC));
  RequestAllianceRaceMemberProgress_descriptor_ = file->message_type(98);
  static const int RequestAllianceRaceMemberProgress_offsets_[1] = {
  };
  RequestAllianceRaceMemberProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceMemberProgress_descriptor_,
      RequestAllianceRaceMemberProgress::default_instance_,
      RequestAllianceRaceMemberProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceMemberProgress));
  RequestAllianceRaceMemberProgressBC_descriptor_ = file->message_type(99);
  static const int RequestAllianceRaceMemberProgressBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberProgressBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberProgressBC, uid_),
  };
  RequestAllianceRaceMemberProgressBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceMemberProgressBC_descriptor_,
      RequestAllianceRaceMemberProgressBC::default_instance_,
      RequestAllianceRaceMemberProgressBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberProgressBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberProgressBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceMemberProgressBC));
  ReplyAllianceRaceMemberProgress_descriptor_ = file->message_type(100);
  static const int ReplyAllianceRaceMemberProgress_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceMemberProgress, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceMemberProgress, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceMemberProgress, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceMemberProgress, progress_),
  };
  ReplyAllianceRaceMemberProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceRaceMemberProgress_descriptor_,
      ReplyAllianceRaceMemberProgress::default_instance_,
      ReplyAllianceRaceMemberProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceMemberProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceMemberProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceRaceMemberProgress));
  RequestAllianceRaceInfo_descriptor_ = file->message_type(101);
  static const int RequestAllianceRaceInfo_offsets_[1] = {
  };
  RequestAllianceRaceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceInfo_descriptor_,
      RequestAllianceRaceInfo::default_instance_,
      RequestAllianceRaceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceInfo));
  RequestAllianceRaceInfoBC_descriptor_ = file->message_type(102);
  static const int RequestAllianceRaceInfoBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceInfoBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceInfoBC, uid_),
  };
  RequestAllianceRaceInfoBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceInfoBC_descriptor_,
      RequestAllianceRaceInfoBC::default_instance_,
      RequestAllianceRaceInfoBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceInfoBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceInfoBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceInfoBC));
  ReplyAllianceRaceInfo_descriptor_ = file->message_type(103);
  static const int ReplyAllianceRaceInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceInfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceInfo, racelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceInfo, overts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceInfo, inrace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceInfo, memberpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceInfo, openrace_),
  };
  ReplyAllianceRaceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceRaceInfo_descriptor_,
      ReplyAllianceRaceInfo::default_instance_,
      ReplyAllianceRaceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceRaceInfo));
  AllianceRaceOrder_descriptor_ = file->message_type(104);
  static const int AllianceRaceOrder_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceOrder, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceOrder, cdts_),
  };
  AllianceRaceOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceRaceOrder_descriptor_,
      AllianceRaceOrder::default_instance_,
      AllianceRaceOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceRaceOrder));
  AllianceRaceMemberOrder_descriptor_ = file->message_type(105);
  static const int AllianceRaceMemberOrder_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrder, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrder, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrder, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrder, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrder, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrder, fig_),
  };
  AllianceRaceMemberOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceRaceMemberOrder_descriptor_,
      AllianceRaceMemberOrder::default_instance_,
      AllianceRaceMemberOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceRaceMemberOrder));
  RequestAllianceRaceOrder_descriptor_ = file->message_type(106);
  static const int RequestAllianceRaceOrder_offsets_[1] = {
  };
  RequestAllianceRaceOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceOrder_descriptor_,
      RequestAllianceRaceOrder::default_instance_,
      RequestAllianceRaceOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceOrder));
  RequestAllianceRaceOrderBC_descriptor_ = file->message_type(107);
  static const int RequestAllianceRaceOrderBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOrderBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOrderBC, uid_),
  };
  RequestAllianceRaceOrderBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceOrderBC_descriptor_,
      RequestAllianceRaceOrderBC::default_instance_,
      RequestAllianceRaceOrderBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOrderBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOrderBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceOrderBC));
  ReplyAllianceRaceOrder_descriptor_ = file->message_type(108);
  static const int ReplyAllianceRaceOrder_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOrder, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOrder, orderrecv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOrder, maxorderrecv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOrder, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOrder, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOrder, memberorder_),
  };
  ReplyAllianceRaceOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceRaceOrder_descriptor_,
      ReplyAllianceRaceOrder::default_instance_,
      ReplyAllianceRaceOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceRaceOrder));
  RequestAllianceRaceOperateOrder_descriptor_ = file->message_type(109);
  static const int RequestAllianceRaceOperateOrder_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOperateOrder, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOperateOrder, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOperateOrder, cdts_),
  };
  RequestAllianceRaceOperateOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceOperateOrder_descriptor_,
      RequestAllianceRaceOperateOrder::default_instance_,
      RequestAllianceRaceOperateOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOperateOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOperateOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceOperateOrder));
  RequestAllianceRaceOperateOrderBC_descriptor_ = file->message_type(110);
  static const int RequestAllianceRaceOperateOrderBC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOperateOrderBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOperateOrderBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOperateOrderBC, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOperateOrderBC, operate_),
  };
  RequestAllianceRaceOperateOrderBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceOperateOrderBC_descriptor_,
      RequestAllianceRaceOperateOrderBC::default_instance_,
      RequestAllianceRaceOperateOrderBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOperateOrderBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceOperateOrderBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceOperateOrderBC));
  ReplyAllianceRaceOperateOrder_descriptor_ = file->message_type(111);
  static const int ReplyAllianceRaceOperateOrder_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOperateOrder, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOperateOrder, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOperateOrder, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOperateOrder, cdts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOperateOrder, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOperateOrder, order_),
  };
  ReplyAllianceRaceOperateOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceRaceOperateOrder_descriptor_,
      ReplyAllianceRaceOperateOrder::default_instance_,
      ReplyAllianceRaceOperateOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOperateOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceOperateOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceRaceOperateOrder));
  RequestAllianceRaceMemberDelOrder_descriptor_ = file->message_type(112);
  static const int RequestAllianceRaceMemberDelOrder_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberDelOrder, type_),
  };
  RequestAllianceRaceMemberDelOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceMemberDelOrder_descriptor_,
      RequestAllianceRaceMemberDelOrder::default_instance_,
      RequestAllianceRaceMemberDelOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberDelOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberDelOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceMemberDelOrder));
  RequestAllianceRaceMemberDelOrderBC_descriptor_ = file->message_type(113);
  static const int RequestAllianceRaceMemberDelOrderBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberDelOrderBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberDelOrderBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberDelOrderBC, type_),
  };
  RequestAllianceRaceMemberDelOrderBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceMemberDelOrderBC_descriptor_,
      RequestAllianceRaceMemberDelOrderBC::default_instance_,
      RequestAllianceRaceMemberDelOrderBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberDelOrderBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberDelOrderBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceMemberDelOrderBC));
  RequestAllianceRaceMemberUpdateOrderBC_descriptor_ = file->message_type(114);
  static const int RequestAllianceRaceMemberUpdateOrderBC_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberUpdateOrderBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberUpdateOrderBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberUpdateOrderBC, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberUpdateOrderBC, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberUpdateOrderBC, target_),
  };
  RequestAllianceRaceMemberUpdateOrderBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceMemberUpdateOrderBC_descriptor_,
      RequestAllianceRaceMemberUpdateOrderBC::default_instance_,
      RequestAllianceRaceMemberUpdateOrderBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberUpdateOrderBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberUpdateOrderBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceMemberUpdateOrderBC));
  RequestAllianceRaceBuyOrder_descriptor_ = file->message_type(115);
  static const int RequestAllianceRaceBuyOrder_offsets_[1] = {
  };
  RequestAllianceRaceBuyOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceBuyOrder_descriptor_,
      RequestAllianceRaceBuyOrder::default_instance_,
      RequestAllianceRaceBuyOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceBuyOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceBuyOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceBuyOrder));
  RequestAllianceRaceBuyOrderBC_descriptor_ = file->message_type(116);
  static const int RequestAllianceRaceBuyOrderBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceBuyOrderBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceBuyOrderBC, uid_),
  };
  RequestAllianceRaceBuyOrderBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceBuyOrderBC_descriptor_,
      RequestAllianceRaceBuyOrderBC::default_instance_,
      RequestAllianceRaceBuyOrderBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceBuyOrderBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceBuyOrderBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceBuyOrderBC));
  ReplyAllianceRaceBuyOrder_descriptor_ = file->message_type(117);
  static const int ReplyAllianceRaceBuyOrder_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceBuyOrder, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceBuyOrder, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceBuyOrder, commons_),
  };
  ReplyAllianceRaceBuyOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceRaceBuyOrder_descriptor_,
      ReplyAllianceRaceBuyOrder::default_instance_,
      ReplyAllianceRaceBuyOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceBuyOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceBuyOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceRaceBuyOrder));
  RequestAllianceRaceWatchAd_descriptor_ = file->message_type(118);
  static const int RequestAllianceRaceWatchAd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceWatchAd, type_),
  };
  RequestAllianceRaceWatchAd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceWatchAd_descriptor_,
      RequestAllianceRaceWatchAd::default_instance_,
      RequestAllianceRaceWatchAd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceWatchAd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceWatchAd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceWatchAd));
  ReplyAllianceRaceWatchAd_descriptor_ = file->message_type(119);
  static const int ReplyAllianceRaceWatchAd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceWatchAd, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceWatchAd, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceWatchAd, point_),
  };
  ReplyAllianceRaceWatchAd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceRaceWatchAd_descriptor_,
      ReplyAllianceRaceWatchAd::default_instance_,
      ReplyAllianceRaceWatchAd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceWatchAd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceWatchAd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceRaceWatchAd));
  RequestAllianceRaceWatchAdBC_descriptor_ = file->message_type(120);
  static const int RequestAllianceRaceWatchAdBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceWatchAdBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceWatchAdBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceWatchAdBC, point_),
  };
  RequestAllianceRaceWatchAdBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceWatchAdBC_descriptor_,
      RequestAllianceRaceWatchAdBC::default_instance_,
      RequestAllianceRaceWatchAdBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceWatchAdBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceWatchAdBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceWatchAdBC));
  RequestAllianceRaceReward_descriptor_ = file->message_type(121);
  static const int RequestAllianceRaceReward_offsets_[1] = {
  };
  RequestAllianceRaceReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceReward_descriptor_,
      RequestAllianceRaceReward::default_instance_,
      RequestAllianceRaceReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceReward));
  RequestAllianceRaceRewardBC_descriptor_ = file->message_type(122);
  static const int RequestAllianceRaceRewardBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceRewardBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceRewardBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceRewardBC, id_),
  };
  RequestAllianceRaceRewardBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceRewardBC_descriptor_,
      RequestAllianceRaceRewardBC::default_instance_,
      RequestAllianceRaceRewardBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceRewardBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceRewardBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceRewardBC));
  ReplyAllianceRaceReward_descriptor_ = file->message_type(123);
  static const int ReplyAllianceRaceReward_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceReward, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceReward, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceReward, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceReward, userlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceReward, olevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceReward, opoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceReward, gradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceReward, stageid_),
  };
  ReplyAllianceRaceReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceRaceReward_descriptor_,
      ReplyAllianceRaceReward::default_instance_,
      ReplyAllianceRaceReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceRaceReward));
  RequestAllianceRaceTakeGradeReward_descriptor_ = file->message_type(124);
  static const int RequestAllianceRaceTakeGradeReward_offsets_[1] = {
  };
  RequestAllianceRaceTakeGradeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceTakeGradeReward_descriptor_,
      RequestAllianceRaceTakeGradeReward::default_instance_,
      RequestAllianceRaceTakeGradeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceTakeGradeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceTakeGradeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceTakeGradeReward));
  RequestAllianceRaceTakeGradeRewardBC_descriptor_ = file->message_type(125);
  static const int RequestAllianceRaceTakeGradeRewardBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceTakeGradeRewardBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceTakeGradeRewardBC, uid_),
  };
  RequestAllianceRaceTakeGradeRewardBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceTakeGradeRewardBC_descriptor_,
      RequestAllianceRaceTakeGradeRewardBC::default_instance_,
      RequestAllianceRaceTakeGradeRewardBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceTakeGradeRewardBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceTakeGradeRewardBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceTakeGradeRewardBC));
  ReplyAllianceRaceTakeGradeReward_descriptor_ = file->message_type(126);
  static const int ReplyAllianceRaceTakeGradeReward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeGradeReward, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeGradeReward, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeGradeReward, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeGradeReward, userlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeGradeReward, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeGradeReward, id_),
  };
  ReplyAllianceRaceTakeGradeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceRaceTakeGradeReward_descriptor_,
      ReplyAllianceRaceTakeGradeReward::default_instance_,
      ReplyAllianceRaceTakeGradeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeGradeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeGradeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceRaceTakeGradeReward));
  RequestAllianceRaceTakeStageReward_descriptor_ = file->message_type(127);
  static const int RequestAllianceRaceTakeStageReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceTakeStageReward, id_),
  };
  RequestAllianceRaceTakeStageReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceTakeStageReward_descriptor_,
      RequestAllianceRaceTakeStageReward::default_instance_,
      RequestAllianceRaceTakeStageReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceTakeStageReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceTakeStageReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceTakeStageReward));
  RequestAllianceRaceTakeStageRewardBC_descriptor_ = file->message_type(128);
  static const int RequestAllianceRaceTakeStageRewardBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceTakeStageRewardBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceTakeStageRewardBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceTakeStageRewardBC, id_),
  };
  RequestAllianceRaceTakeStageRewardBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceTakeStageRewardBC_descriptor_,
      RequestAllianceRaceTakeStageRewardBC::default_instance_,
      RequestAllianceRaceTakeStageRewardBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceTakeStageRewardBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceTakeStageRewardBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceTakeStageRewardBC));
  ReplyAllianceRaceTakeStageReward_descriptor_ = file->message_type(129);
  static const int ReplyAllianceRaceTakeStageReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeStageReward, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeStageReward, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeStageReward, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeStageReward, userlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeStageReward, id_),
  };
  ReplyAllianceRaceTakeStageReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceRaceTakeStageReward_descriptor_,
      ReplyAllianceRaceTakeStageReward::default_instance_,
      ReplyAllianceRaceTakeStageReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeStageReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceTakeStageReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceRaceTakeStageReward));
  RequestAllianceRaceRefreshStageReward_descriptor_ = file->message_type(130);
  static const int RequestAllianceRaceRefreshStageReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceRefreshStageReward, id_),
  };
  RequestAllianceRaceRefreshStageReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceRefreshStageReward_descriptor_,
      RequestAllianceRaceRefreshStageReward::default_instance_,
      RequestAllianceRaceRefreshStageReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceRefreshStageReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceRefreshStageReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceRefreshStageReward));
  RequestAllianceRaceRefreshStageRewardBC_descriptor_ = file->message_type(131);
  static const int RequestAllianceRaceRefreshStageRewardBC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceRefreshStageRewardBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceRefreshStageRewardBC, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceRefreshStageRewardBC, id_),
  };
  RequestAllianceRaceRefreshStageRewardBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceRefreshStageRewardBC_descriptor_,
      RequestAllianceRaceRefreshStageRewardBC::default_instance_,
      RequestAllianceRaceRefreshStageRewardBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceRefreshStageRewardBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceRefreshStageRewardBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceRefreshStageRewardBC));
  ReplyAllianceRaceRefreshStageReward_descriptor_ = file->message_type(132);
  static const int ReplyAllianceRaceRefreshStageReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceRefreshStageReward, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceRefreshStageReward, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceRefreshStageReward, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceRefreshStageReward, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceRefreshStageReward, id_),
  };
  ReplyAllianceRaceRefreshStageReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceRaceRefreshStageReward_descriptor_,
      ReplyAllianceRaceRefreshStageReward::default_instance_,
      ReplyAllianceRaceRefreshStageReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceRefreshStageReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceRefreshStageReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceRaceRefreshStageReward));
  AllianceRaceMemberOrderLogItem_descriptor_ = file->message_type(133);
  static const int AllianceRaceMemberOrderLogItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrderLogItem, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrderLogItem, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrderLogItem, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrderLogItem, cancel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrderLogItem, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrderLogItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrderLogItem, fig_),
  };
  AllianceRaceMemberOrderLogItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceRaceMemberOrderLogItem_descriptor_,
      AllianceRaceMemberOrderLogItem::default_instance_,
      AllianceRaceMemberOrderLogItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrderLogItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceMemberOrderLogItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceRaceMemberOrderLogItem));
  RequestAllianceRaceMemberOrderLog_descriptor_ = file->message_type(134);
  static const int RequestAllianceRaceMemberOrderLog_offsets_[1] = {
  };
  RequestAllianceRaceMemberOrderLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceMemberOrderLog_descriptor_,
      RequestAllianceRaceMemberOrderLog::default_instance_,
      RequestAllianceRaceMemberOrderLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberOrderLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberOrderLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceMemberOrderLog));
  RequestAllianceRaceMemberOrderLogBC_descriptor_ = file->message_type(135);
  static const int RequestAllianceRaceMemberOrderLogBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberOrderLogBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberOrderLogBC, uid_),
  };
  RequestAllianceRaceMemberOrderLogBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceMemberOrderLogBC_descriptor_,
      RequestAllianceRaceMemberOrderLogBC::default_instance_,
      RequestAllianceRaceMemberOrderLogBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberOrderLogBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceMemberOrderLogBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceMemberOrderLogBC));
  ReplyAllianceRaceMemberOrderLog_descriptor_ = file->message_type(136);
  static const int ReplyAllianceRaceMemberOrderLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceMemberOrderLog, member_),
  };
  ReplyAllianceRaceMemberOrderLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceRaceMemberOrderLog_descriptor_,
      ReplyAllianceRaceMemberOrderLog::default_instance_,
      ReplyAllianceRaceMemberOrderLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceMemberOrderLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceMemberOrderLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceRaceMemberOrderLog));
  AllianceRacePersonOrderLogItem_descriptor_ = file->message_type(137);
  static const int AllianceRacePersonOrderLogItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRacePersonOrderLogItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRacePersonOrderLogItem, status_),
  };
  AllianceRacePersonOrderLogItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceRacePersonOrderLogItem_descriptor_,
      AllianceRacePersonOrderLogItem::default_instance_,
      AllianceRacePersonOrderLogItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRacePersonOrderLogItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRacePersonOrderLogItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceRacePersonOrderLogItem));
  RequestAllianceRacePersonOrderLog_descriptor_ = file->message_type(138);
  static const int RequestAllianceRacePersonOrderLog_offsets_[1] = {
  };
  RequestAllianceRacePersonOrderLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRacePersonOrderLog_descriptor_,
      RequestAllianceRacePersonOrderLog::default_instance_,
      RequestAllianceRacePersonOrderLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRacePersonOrderLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRacePersonOrderLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRacePersonOrderLog));
  RequestAllianceRacePersonOrderLogBC_descriptor_ = file->message_type(139);
  static const int RequestAllianceRacePersonOrderLogBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRacePersonOrderLogBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRacePersonOrderLogBC, uid_),
  };
  RequestAllianceRacePersonOrderLogBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRacePersonOrderLogBC_descriptor_,
      RequestAllianceRacePersonOrderLogBC::default_instance_,
      RequestAllianceRacePersonOrderLogBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRacePersonOrderLogBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRacePersonOrderLogBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRacePersonOrderLogBC));
  ReplyAllianceRacePersonOrderLog_descriptor_ = file->message_type(140);
  static const int ReplyAllianceRacePersonOrderLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRacePersonOrderLog, member_),
  };
  ReplyAllianceRacePersonOrderLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceRacePersonOrderLog_descriptor_,
      ReplyAllianceRacePersonOrderLog::default_instance_,
      ReplyAllianceRacePersonOrderLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRacePersonOrderLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRacePersonOrderLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceRacePersonOrderLog));
  SetAllianceRaceGroupPointBC_descriptor_ = file->message_type(141);
  static const int SetAllianceRaceGroupPointBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAllianceRaceGroupPointBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAllianceRaceGroupPointBC, point_),
  };
  SetAllianceRaceGroupPointBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetAllianceRaceGroupPointBC_descriptor_,
      SetAllianceRaceGroupPointBC::default_instance_,
      SetAllianceRaceGroupPointBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAllianceRaceGroupPointBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAllianceRaceGroupPointBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetAllianceRaceGroupPointBC));
  AllianceRaceGroupMember_descriptor_ = file->message_type(142);
  static const int AllianceRaceGroupMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceGroupMember, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceGroupMember, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceGroupMember, count_),
  };
  AllianceRaceGroupMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceRaceGroupMember_descriptor_,
      AllianceRaceGroupMember::default_instance_,
      AllianceRaceGroupMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceGroupMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceRaceGroupMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceRaceGroupMember));
  RequestAllianceRaceGroupMember_descriptor_ = file->message_type(143);
  static const int RequestAllianceRaceGroupMember_offsets_[1] = {
  };
  RequestAllianceRaceGroupMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceGroupMember_descriptor_,
      RequestAllianceRaceGroupMember::default_instance_,
      RequestAllianceRaceGroupMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceGroupMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceGroupMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceGroupMember));
  RequestAllianceRaceGroupMemberBC_descriptor_ = file->message_type(144);
  static const int RequestAllianceRaceGroupMemberBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceGroupMemberBC, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceGroupMemberBC, uid_),
  };
  RequestAllianceRaceGroupMemberBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAllianceRaceGroupMemberBC_descriptor_,
      RequestAllianceRaceGroupMemberBC::default_instance_,
      RequestAllianceRaceGroupMemberBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceGroupMemberBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAllianceRaceGroupMemberBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAllianceRaceGroupMemberBC));
  ReplyAllianceRaceGroupMember_descriptor_ = file->message_type(145);
  static const int ReplyAllianceRaceGroupMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceGroupMember, member_),
  };
  ReplyAllianceRaceGroupMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAllianceRaceGroupMember_descriptor_,
      ReplyAllianceRaceGroupMember::default_instance_,
      ReplyAllianceRaceGroupMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceGroupMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAllianceRaceGroupMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAllianceRaceGroupMember));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoAlliance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceCPP_descriptor_, &AllianceCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceMemberCPP_descriptor_, &AllianceMemberCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceApplyCPP_descriptor_, &AllianceApplyCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceInvitedCPP_descriptor_, &AllianceInvitedCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckNameAvailableReq_descriptor_, &CheckNameAvailableReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckNameAvailableResp_descriptor_, &CheckNameAvailableResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateAllianceReq_descriptor_, &CreateAllianceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateAllianceResp_descriptor_, &CreateAllianceResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecommendllianceReq_descriptor_, &RecommendllianceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartAllianceCPP_descriptor_, &PartAllianceCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecommendllianceResp_descriptor_, &RecommendllianceResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPartAllianceInfoReq_descriptor_, &GetPartAllianceInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPartAllianceInfoResp_descriptor_, &GetPartAllianceInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinReq_descriptor_, &ApplyJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestApplyJoinBC_descriptor_, &RequestApplyJoinBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyApplyJoinBC_descriptor_, &ReplyApplyJoinBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinResp_descriptor_, &ApplyJoinResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApproveJoinReq_descriptor_, &ApproveJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestApproveJoinAllianceBC_descriptor_, &RequestApproveJoinAllianceBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestApproveJoinUserBC_descriptor_, &RequestApproveJoinUserBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyApproveJoinBC_descriptor_, &ReplyApproveJoinBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApproveJoinResp_descriptor_, &ApproveJoinResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitAllianceReq_descriptor_, &ExitAllianceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestExitAllianceBC_descriptor_, &RequestExitAllianceBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyExitAllianceBC_descriptor_, &ReplyExitAllianceBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitAllianceResp_descriptor_, &ExitAllianceResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostionChangePushReq_descriptor_, &PostionChangePushReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinReq_descriptor_, &InviteJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestInviteJoinBC_descriptor_, &RequestInviteJoinBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestInviteJoinUserBC_descriptor_, &RequestInviteJoinUserBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyInviteJoinBC_descriptor_, &ReplyInviteJoinBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinResp_descriptor_, &InviteJoinResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvitedPushReq_descriptor_, &InvitedPushReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptInviteReq_descriptor_, &AcceptInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAcceptInviteBC_descriptor_, &RequestAcceptInviteBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAcceptInviteBC_descriptor_, &ReplyAcceptInviteBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptInviteResp_descriptor_, &AcceptInviteResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManipulateMemberReq_descriptor_, &ManipulateMemberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestManipulateMemberBC_descriptor_, &RequestManipulateMemberBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyManipulateMemberBC_descriptor_, &ReplyManipulateMemberBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManipulateMemberResp_descriptor_, &ManipulateMemberResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickOutReq_descriptor_, &KickOutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestKickOutBC_descriptor_, &RequestKickOutBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyKickOutBC_descriptor_, &ReplyKickOutBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestKickOutMemberBC_descriptor_, &RequestKickOutMemberBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickOutResp_descriptor_, &KickOutResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferReq_descriptor_, &TransferReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestTransferBC_descriptor_, &RequestTransferBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyTransferBC_descriptor_, &ReplyTransferBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferResp_descriptor_, &TransferResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditAllianceReq_descriptor_, &EditAllianceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestEditAllianceBC_descriptor_, &RequestEditAllianceBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyEditAllianceBC_descriptor_, &ReplyEditAllianceBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EditAllianceResp_descriptor_, &EditAllianceResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceDonationCPP_descriptor_, &AllianceDonationCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeekDonationReq_descriptor_, &SeekDonationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSeekDonationBC_descriptor_, &RequestSeekDonationBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplySeekDonationBC_descriptor_, &ReplySeekDonationBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeekDonationResp_descriptor_, &SeekDonationResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CutUpDonationCDReq_descriptor_, &CutUpDonationCDReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CutUpDonationCDResp_descriptor_, &CutUpDonationCDResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferDonationReq_descriptor_, &OfferDonationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestOfferDonationBC_descriptor_, &RequestOfferDonationBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyOfferDonationBC_descriptor_, &ReplyOfferDonationBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferDonationResp_descriptor_, &OfferDonationResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchDonationReq_descriptor_, &FetchDonationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFetchDonationBC_descriptor_, &RequestFetchDonationBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyFetchDonationBC_descriptor_, &ReplyFetchDonationBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchDonationResp_descriptor_, &FetchDonationResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceNotifyCPP_descriptor_, &AllianceNotifyCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendNotifyReq_descriptor_, &SendNotifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSendNotifyBC_descriptor_, &RequestSendNotifyBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplySendNotifyBC_descriptor_, &ReplySendNotifyBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendNotifyResp_descriptor_, &SendNotifyResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelNotifyReq_descriptor_, &DelNotifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestDelNotifyBC_descriptor_, &RequestDelNotifyBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyDelNotifyBC_descriptor_, &ReplyDelNotifyBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelNotifyResp_descriptor_, &DelNotifyResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AidInfoCPP_descriptor_, &AidInfoCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllianceFunctionReq_descriptor_, &GetAllianceFunctionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllianceFunctionResp_descriptor_, &GetAllianceFunctionResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceFunctionBC_descriptor_, &RequestAllianceFunctionBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceFunctionBC_descriptor_, &ReplyAllianceFunctionBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNotifyReq_descriptor_, &GetNotifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNotifyResp_descriptor_, &GetNotifyResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceNotifyBC_descriptor_, &RequestAllianceNotifyBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceNotifyBC_descriptor_, &ReplyAllianceNotifyBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMemberReq_descriptor_, &GetMemberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceMemberBC_descriptor_, &RequestAllianceMemberBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceMemberBC_descriptor_, &ReplyAllianceMemberBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMemberResp_descriptor_, &GetMemberResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAlliance_descriptor_, &RequestAlliance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceBC_descriptor_, &RequestAllianceBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceBC_descriptor_, &ReplyAllianceBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUpdateMemberBC_descriptor_, &RequestUpdateMemberBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAddMemberHelpTimesBC_descriptor_, &RequestAddMemberHelpTimesBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceSetFlag_descriptor_, &RequestAllianceRaceSetFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceSetFlagBC_descriptor_, &RequestAllianceRaceSetFlagBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceMemberProgress_descriptor_, &RequestAllianceRaceMemberProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceMemberProgressBC_descriptor_, &RequestAllianceRaceMemberProgressBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceRaceMemberProgress_descriptor_, &ReplyAllianceRaceMemberProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceInfo_descriptor_, &RequestAllianceRaceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceInfoBC_descriptor_, &RequestAllianceRaceInfoBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceRaceInfo_descriptor_, &ReplyAllianceRaceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceRaceOrder_descriptor_, &AllianceRaceOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceRaceMemberOrder_descriptor_, &AllianceRaceMemberOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceOrder_descriptor_, &RequestAllianceRaceOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceOrderBC_descriptor_, &RequestAllianceRaceOrderBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceRaceOrder_descriptor_, &ReplyAllianceRaceOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceOperateOrder_descriptor_, &RequestAllianceRaceOperateOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceOperateOrderBC_descriptor_, &RequestAllianceRaceOperateOrderBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceRaceOperateOrder_descriptor_, &ReplyAllianceRaceOperateOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceMemberDelOrder_descriptor_, &RequestAllianceRaceMemberDelOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceMemberDelOrderBC_descriptor_, &RequestAllianceRaceMemberDelOrderBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceMemberUpdateOrderBC_descriptor_, &RequestAllianceRaceMemberUpdateOrderBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceBuyOrder_descriptor_, &RequestAllianceRaceBuyOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceBuyOrderBC_descriptor_, &RequestAllianceRaceBuyOrderBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceRaceBuyOrder_descriptor_, &ReplyAllianceRaceBuyOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceWatchAd_descriptor_, &RequestAllianceRaceWatchAd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceRaceWatchAd_descriptor_, &ReplyAllianceRaceWatchAd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceWatchAdBC_descriptor_, &RequestAllianceRaceWatchAdBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceReward_descriptor_, &RequestAllianceRaceReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceRewardBC_descriptor_, &RequestAllianceRaceRewardBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceRaceReward_descriptor_, &ReplyAllianceRaceReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceTakeGradeReward_descriptor_, &RequestAllianceRaceTakeGradeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceTakeGradeRewardBC_descriptor_, &RequestAllianceRaceTakeGradeRewardBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceRaceTakeGradeReward_descriptor_, &ReplyAllianceRaceTakeGradeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceTakeStageReward_descriptor_, &RequestAllianceRaceTakeStageReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceTakeStageRewardBC_descriptor_, &RequestAllianceRaceTakeStageRewardBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceRaceTakeStageReward_descriptor_, &ReplyAllianceRaceTakeStageReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceRefreshStageReward_descriptor_, &RequestAllianceRaceRefreshStageReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceRefreshStageRewardBC_descriptor_, &RequestAllianceRaceRefreshStageRewardBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceRaceRefreshStageReward_descriptor_, &ReplyAllianceRaceRefreshStageReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceRaceMemberOrderLogItem_descriptor_, &AllianceRaceMemberOrderLogItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceMemberOrderLog_descriptor_, &RequestAllianceRaceMemberOrderLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceMemberOrderLogBC_descriptor_, &RequestAllianceRaceMemberOrderLogBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceRaceMemberOrderLog_descriptor_, &ReplyAllianceRaceMemberOrderLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceRacePersonOrderLogItem_descriptor_, &AllianceRacePersonOrderLogItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRacePersonOrderLog_descriptor_, &RequestAllianceRacePersonOrderLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRacePersonOrderLogBC_descriptor_, &RequestAllianceRacePersonOrderLogBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceRacePersonOrderLog_descriptor_, &ReplyAllianceRacePersonOrderLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetAllianceRaceGroupPointBC_descriptor_, &SetAllianceRaceGroupPointBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceRaceGroupMember_descriptor_, &AllianceRaceGroupMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceGroupMember_descriptor_, &RequestAllianceRaceGroupMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAllianceRaceGroupMemberBC_descriptor_, &RequestAllianceRaceGroupMemberBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAllianceRaceGroupMember_descriptor_, &ReplyAllianceRaceGroupMember::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoAlliance_2eproto() {
  delete AllianceCPP::default_instance_;
  delete AllianceCPP_reflection_;
  delete AllianceMemberCPP::default_instance_;
  delete AllianceMemberCPP_reflection_;
  delete AllianceApplyCPP::default_instance_;
  delete AllianceApplyCPP_reflection_;
  delete AllianceInvitedCPP::default_instance_;
  delete AllianceInvitedCPP_reflection_;
  delete CheckNameAvailableReq::default_instance_;
  delete CheckNameAvailableReq_reflection_;
  delete CheckNameAvailableResp::default_instance_;
  delete CheckNameAvailableResp_reflection_;
  delete CreateAllianceReq::default_instance_;
  delete CreateAllianceReq_reflection_;
  delete CreateAllianceResp::default_instance_;
  delete CreateAllianceResp_reflection_;
  delete RecommendllianceReq::default_instance_;
  delete RecommendllianceReq_reflection_;
  delete PartAllianceCPP::default_instance_;
  delete PartAllianceCPP_reflection_;
  delete RecommendllianceResp::default_instance_;
  delete RecommendllianceResp_reflection_;
  delete GetPartAllianceInfoReq::default_instance_;
  delete GetPartAllianceInfoReq_reflection_;
  delete GetPartAllianceInfoResp::default_instance_;
  delete GetPartAllianceInfoResp_reflection_;
  delete ApplyJoinReq::default_instance_;
  delete ApplyJoinReq_reflection_;
  delete RequestApplyJoinBC::default_instance_;
  delete RequestApplyJoinBC_reflection_;
  delete ReplyApplyJoinBC::default_instance_;
  delete ReplyApplyJoinBC_reflection_;
  delete ApplyJoinResp::default_instance_;
  delete ApplyJoinResp_reflection_;
  delete ApproveJoinReq::default_instance_;
  delete ApproveJoinReq_reflection_;
  delete RequestApproveJoinAllianceBC::default_instance_;
  delete RequestApproveJoinAllianceBC_reflection_;
  delete RequestApproveJoinUserBC::default_instance_;
  delete RequestApproveJoinUserBC_reflection_;
  delete ReplyApproveJoinBC::default_instance_;
  delete ReplyApproveJoinBC_reflection_;
  delete ApproveJoinResp::default_instance_;
  delete ApproveJoinResp_reflection_;
  delete ExitAllianceReq::default_instance_;
  delete ExitAllianceReq_reflection_;
  delete RequestExitAllianceBC::default_instance_;
  delete RequestExitAllianceBC_reflection_;
  delete ReplyExitAllianceBC::default_instance_;
  delete ReplyExitAllianceBC_reflection_;
  delete ExitAllianceResp::default_instance_;
  delete ExitAllianceResp_reflection_;
  delete PostionChangePushReq::default_instance_;
  delete PostionChangePushReq_reflection_;
  delete InviteJoinReq::default_instance_;
  delete InviteJoinReq_reflection_;
  delete RequestInviteJoinBC::default_instance_;
  delete RequestInviteJoinBC_reflection_;
  delete RequestInviteJoinUserBC::default_instance_;
  delete RequestInviteJoinUserBC_reflection_;
  delete ReplyInviteJoinBC::default_instance_;
  delete ReplyInviteJoinBC_reflection_;
  delete InviteJoinResp::default_instance_;
  delete InviteJoinResp_reflection_;
  delete InvitedPushReq::default_instance_;
  delete InvitedPushReq_reflection_;
  delete AcceptInviteReq::default_instance_;
  delete AcceptInviteReq_reflection_;
  delete RequestAcceptInviteBC::default_instance_;
  delete RequestAcceptInviteBC_reflection_;
  delete ReplyAcceptInviteBC::default_instance_;
  delete ReplyAcceptInviteBC_reflection_;
  delete AcceptInviteResp::default_instance_;
  delete AcceptInviteResp_reflection_;
  delete ManipulateMemberReq::default_instance_;
  delete ManipulateMemberReq_reflection_;
  delete RequestManipulateMemberBC::default_instance_;
  delete RequestManipulateMemberBC_reflection_;
  delete ReplyManipulateMemberBC::default_instance_;
  delete ReplyManipulateMemberBC_reflection_;
  delete ManipulateMemberResp::default_instance_;
  delete ManipulateMemberResp_reflection_;
  delete KickOutReq::default_instance_;
  delete KickOutReq_reflection_;
  delete RequestKickOutBC::default_instance_;
  delete RequestKickOutBC_reflection_;
  delete ReplyKickOutBC::default_instance_;
  delete ReplyKickOutBC_reflection_;
  delete RequestKickOutMemberBC::default_instance_;
  delete RequestKickOutMemberBC_reflection_;
  delete KickOutResp::default_instance_;
  delete KickOutResp_reflection_;
  delete TransferReq::default_instance_;
  delete TransferReq_reflection_;
  delete RequestTransferBC::default_instance_;
  delete RequestTransferBC_reflection_;
  delete ReplyTransferBC::default_instance_;
  delete ReplyTransferBC_reflection_;
  delete TransferResp::default_instance_;
  delete TransferResp_reflection_;
  delete EditAllianceReq::default_instance_;
  delete EditAllianceReq_reflection_;
  delete RequestEditAllianceBC::default_instance_;
  delete RequestEditAllianceBC_reflection_;
  delete ReplyEditAllianceBC::default_instance_;
  delete ReplyEditAllianceBC_reflection_;
  delete EditAllianceResp::default_instance_;
  delete EditAllianceResp_reflection_;
  delete AllianceDonationCPP::default_instance_;
  delete AllianceDonationCPP_reflection_;
  delete SeekDonationReq::default_instance_;
  delete SeekDonationReq_reflection_;
  delete RequestSeekDonationBC::default_instance_;
  delete RequestSeekDonationBC_reflection_;
  delete ReplySeekDonationBC::default_instance_;
  delete ReplySeekDonationBC_reflection_;
  delete SeekDonationResp::default_instance_;
  delete SeekDonationResp_reflection_;
  delete CutUpDonationCDReq::default_instance_;
  delete CutUpDonationCDReq_reflection_;
  delete CutUpDonationCDResp::default_instance_;
  delete CutUpDonationCDResp_reflection_;
  delete OfferDonationReq::default_instance_;
  delete OfferDonationReq_reflection_;
  delete RequestOfferDonationBC::default_instance_;
  delete RequestOfferDonationBC_reflection_;
  delete ReplyOfferDonationBC::default_instance_;
  delete ReplyOfferDonationBC_reflection_;
  delete OfferDonationResp::default_instance_;
  delete OfferDonationResp_reflection_;
  delete FetchDonationReq::default_instance_;
  delete FetchDonationReq_reflection_;
  delete RequestFetchDonationBC::default_instance_;
  delete RequestFetchDonationBC_reflection_;
  delete ReplyFetchDonationBC::default_instance_;
  delete ReplyFetchDonationBC_reflection_;
  delete FetchDonationResp::default_instance_;
  delete FetchDonationResp_reflection_;
  delete AllianceNotifyCPP::default_instance_;
  delete AllianceNotifyCPP_reflection_;
  delete SendNotifyReq::default_instance_;
  delete SendNotifyReq_reflection_;
  delete RequestSendNotifyBC::default_instance_;
  delete RequestSendNotifyBC_reflection_;
  delete ReplySendNotifyBC::default_instance_;
  delete ReplySendNotifyBC_reflection_;
  delete SendNotifyResp::default_instance_;
  delete SendNotifyResp_reflection_;
  delete DelNotifyReq::default_instance_;
  delete DelNotifyReq_reflection_;
  delete RequestDelNotifyBC::default_instance_;
  delete RequestDelNotifyBC_reflection_;
  delete ReplyDelNotifyBC::default_instance_;
  delete ReplyDelNotifyBC_reflection_;
  delete DelNotifyResp::default_instance_;
  delete DelNotifyResp_reflection_;
  delete AidInfoCPP::default_instance_;
  delete AidInfoCPP_reflection_;
  delete GetAllianceFunctionReq::default_instance_;
  delete GetAllianceFunctionReq_reflection_;
  delete GetAllianceFunctionResp::default_instance_;
  delete GetAllianceFunctionResp_reflection_;
  delete RequestAllianceFunctionBC::default_instance_;
  delete RequestAllianceFunctionBC_reflection_;
  delete ReplyAllianceFunctionBC::default_instance_;
  delete ReplyAllianceFunctionBC_reflection_;
  delete GetNotifyReq::default_instance_;
  delete GetNotifyReq_reflection_;
  delete GetNotifyResp::default_instance_;
  delete GetNotifyResp_reflection_;
  delete RequestAllianceNotifyBC::default_instance_;
  delete RequestAllianceNotifyBC_reflection_;
  delete ReplyAllianceNotifyBC::default_instance_;
  delete ReplyAllianceNotifyBC_reflection_;
  delete GetMemberReq::default_instance_;
  delete GetMemberReq_reflection_;
  delete RequestAllianceMemberBC::default_instance_;
  delete RequestAllianceMemberBC_reflection_;
  delete ReplyAllianceMemberBC::default_instance_;
  delete ReplyAllianceMemberBC_reflection_;
  delete GetMemberResp::default_instance_;
  delete GetMemberResp_reflection_;
  delete RequestAlliance::default_instance_;
  delete RequestAlliance_reflection_;
  delete RequestAllianceBC::default_instance_;
  delete RequestAllianceBC_reflection_;
  delete ReplyAllianceBC::default_instance_;
  delete ReplyAllianceBC_reflection_;
  delete RequestUpdateMemberBC::default_instance_;
  delete RequestUpdateMemberBC_reflection_;
  delete RequestAddMemberHelpTimesBC::default_instance_;
  delete RequestAddMemberHelpTimesBC_reflection_;
  delete RequestAllianceRaceSetFlag::default_instance_;
  delete RequestAllianceRaceSetFlag_reflection_;
  delete RequestAllianceRaceSetFlagBC::default_instance_;
  delete RequestAllianceRaceSetFlagBC_reflection_;
  delete RequestAllianceRaceMemberProgress::default_instance_;
  delete RequestAllianceRaceMemberProgress_reflection_;
  delete RequestAllianceRaceMemberProgressBC::default_instance_;
  delete RequestAllianceRaceMemberProgressBC_reflection_;
  delete ReplyAllianceRaceMemberProgress::default_instance_;
  delete ReplyAllianceRaceMemberProgress_reflection_;
  delete RequestAllianceRaceInfo::default_instance_;
  delete RequestAllianceRaceInfo_reflection_;
  delete RequestAllianceRaceInfoBC::default_instance_;
  delete RequestAllianceRaceInfoBC_reflection_;
  delete ReplyAllianceRaceInfo::default_instance_;
  delete ReplyAllianceRaceInfo_reflection_;
  delete AllianceRaceOrder::default_instance_;
  delete AllianceRaceOrder_reflection_;
  delete AllianceRaceMemberOrder::default_instance_;
  delete AllianceRaceMemberOrder_reflection_;
  delete RequestAllianceRaceOrder::default_instance_;
  delete RequestAllianceRaceOrder_reflection_;
  delete RequestAllianceRaceOrderBC::default_instance_;
  delete RequestAllianceRaceOrderBC_reflection_;
  delete ReplyAllianceRaceOrder::default_instance_;
  delete ReplyAllianceRaceOrder_reflection_;
  delete RequestAllianceRaceOperateOrder::default_instance_;
  delete RequestAllianceRaceOperateOrder_reflection_;
  delete RequestAllianceRaceOperateOrderBC::default_instance_;
  delete RequestAllianceRaceOperateOrderBC_reflection_;
  delete ReplyAllianceRaceOperateOrder::default_instance_;
  delete ReplyAllianceRaceOperateOrder_reflection_;
  delete RequestAllianceRaceMemberDelOrder::default_instance_;
  delete RequestAllianceRaceMemberDelOrder_reflection_;
  delete RequestAllianceRaceMemberDelOrderBC::default_instance_;
  delete RequestAllianceRaceMemberDelOrderBC_reflection_;
  delete RequestAllianceRaceMemberUpdateOrderBC::default_instance_;
  delete RequestAllianceRaceMemberUpdateOrderBC_reflection_;
  delete RequestAllianceRaceBuyOrder::default_instance_;
  delete RequestAllianceRaceBuyOrder_reflection_;
  delete RequestAllianceRaceBuyOrderBC::default_instance_;
  delete RequestAllianceRaceBuyOrderBC_reflection_;
  delete ReplyAllianceRaceBuyOrder::default_instance_;
  delete ReplyAllianceRaceBuyOrder_reflection_;
  delete RequestAllianceRaceWatchAd::default_instance_;
  delete RequestAllianceRaceWatchAd_reflection_;
  delete ReplyAllianceRaceWatchAd::default_instance_;
  delete ReplyAllianceRaceWatchAd_reflection_;
  delete RequestAllianceRaceWatchAdBC::default_instance_;
  delete RequestAllianceRaceWatchAdBC_reflection_;
  delete RequestAllianceRaceReward::default_instance_;
  delete RequestAllianceRaceReward_reflection_;
  delete RequestAllianceRaceRewardBC::default_instance_;
  delete RequestAllianceRaceRewardBC_reflection_;
  delete ReplyAllianceRaceReward::default_instance_;
  delete ReplyAllianceRaceReward_reflection_;
  delete RequestAllianceRaceTakeGradeReward::default_instance_;
  delete RequestAllianceRaceTakeGradeReward_reflection_;
  delete RequestAllianceRaceTakeGradeRewardBC::default_instance_;
  delete RequestAllianceRaceTakeGradeRewardBC_reflection_;
  delete ReplyAllianceRaceTakeGradeReward::default_instance_;
  delete ReplyAllianceRaceTakeGradeReward_reflection_;
  delete RequestAllianceRaceTakeStageReward::default_instance_;
  delete RequestAllianceRaceTakeStageReward_reflection_;
  delete RequestAllianceRaceTakeStageRewardBC::default_instance_;
  delete RequestAllianceRaceTakeStageRewardBC_reflection_;
  delete ReplyAllianceRaceTakeStageReward::default_instance_;
  delete ReplyAllianceRaceTakeStageReward_reflection_;
  delete RequestAllianceRaceRefreshStageReward::default_instance_;
  delete RequestAllianceRaceRefreshStageReward_reflection_;
  delete RequestAllianceRaceRefreshStageRewardBC::default_instance_;
  delete RequestAllianceRaceRefreshStageRewardBC_reflection_;
  delete ReplyAllianceRaceRefreshStageReward::default_instance_;
  delete ReplyAllianceRaceRefreshStageReward_reflection_;
  delete AllianceRaceMemberOrderLogItem::default_instance_;
  delete AllianceRaceMemberOrderLogItem_reflection_;
  delete RequestAllianceRaceMemberOrderLog::default_instance_;
  delete RequestAllianceRaceMemberOrderLog_reflection_;
  delete RequestAllianceRaceMemberOrderLogBC::default_instance_;
  delete RequestAllianceRaceMemberOrderLogBC_reflection_;
  delete ReplyAllianceRaceMemberOrderLog::default_instance_;
  delete ReplyAllianceRaceMemberOrderLog_reflection_;
  delete AllianceRacePersonOrderLogItem::default_instance_;
  delete AllianceRacePersonOrderLogItem_reflection_;
  delete RequestAllianceRacePersonOrderLog::default_instance_;
  delete RequestAllianceRacePersonOrderLog_reflection_;
  delete RequestAllianceRacePersonOrderLogBC::default_instance_;
  delete RequestAllianceRacePersonOrderLogBC_reflection_;
  delete ReplyAllianceRacePersonOrderLog::default_instance_;
  delete ReplyAllianceRacePersonOrderLog_reflection_;
  delete SetAllianceRaceGroupPointBC::default_instance_;
  delete SetAllianceRaceGroupPointBC_reflection_;
  delete AllianceRaceGroupMember::default_instance_;
  delete AllianceRaceGroupMember_reflection_;
  delete RequestAllianceRaceGroupMember::default_instance_;
  delete RequestAllianceRaceGroupMember_reflection_;
  delete RequestAllianceRaceGroupMemberBC::default_instance_;
  delete RequestAllianceRaceGroupMemberBC_reflection_;
  delete ReplyAllianceRaceGroupMember::default_instance_;
  delete ReplyAllianceRaceGroupMember_reflection_;
}

void protobuf_AddDesc_ProtoAlliance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ProtoAlliance.proto\022\rProtoAlliance\032\020Da"
    "taCommon.proto\"\310\001\n\013AllianceCPP\022\022\n\nallian"
    "ceId\030\001 \002(\r\022\014\n\004name\030\002 \002(\014\022\014\n\004flag\030\003 \002(\r\022\021"
    "\n\tcreateUid\030\004 \002(\r\022\020\n\010username\030\005 \002(\014\022\022\n\nc"
    "reateTime\030\006 \002(\r\022\021\n\tapplyType\030\007 \002(\r\022\027\n\017ap"
    "plyLevelLimit\030\010 \002(\r\022\023\n\013description\030\t \001(\014"
    "\022\017\n\007qqgroup\030\n \002(\r\"\272\001\n\021AllianceMemberCPP\022"
    "\021\n\tmemberUid\030\001 \002(\r\022\014\n\004name\030\002 \001(\014\022\020\n\010posi"
    "tion\030\003 \002(\r\022\021\n\tauthority\030\004 \002(\r\022\021\n\thelptim"
    "es\030\005 \002(\r\022\020\n\010onlineTs\030\006 \002(\r\022\016\n\006helpTs\030\007 \001"
    "(\r\022\r\n\005level\030\010 \002(\r\022\013\n\003fig\030\t \001(\014\022\016\n\006joinTs"
    "\030\n \001(\r\"S\n\020AllianceApplyCPP\022\020\n\010applyUid\030\001"
    " \002(\r\022\014\n\004name\030\002 \001(\014\022\016\n\006reason\030\003 \002(\014\022\017\n\007ap"
    "plyts\030\004 \002(\r\"\205\001\n\022AllianceInvitedCPP\022\021\n\tin"
    "viteUid\030\001 \002(\r\022\022\n\nallianceId\030\002 \002(\r\022\024\n\014all"
    "ianceName\030\004 \002(\014\022\014\n\004flag\030\005 \002(\r\022\022\n\ninviteN"
    "ame\030\006 \002(\014\022\020\n\010invitets\030\007 \002(\r\"%\n\025CheckName"
    "AvailableReq\022\014\n\004name\030\001 \002(\014\"K\n\026CheckNameA"
    "vailableResp\022\014\n\004name\030\001 \002(\014\022\023\n\013isAvailabl"
    "e\030\002 \002(\010\022\016\n\006reason\030\003 \001(\014\"p\n\021CreateAllianc"
    "eReq\022\014\n\004flag\030\001 \002(\r\022\014\n\004name\030\002 \002(\014\022\023\n\013desc"
    "ription\030\003 \002(\014\022\021\n\tapplyType\030\004 \002(\r\022\027\n\017appl"
    "yLevelLimit\030\005 \002(\r\"\241\001\n\022CreateAllianceResp"
    "\022,\n\010alliance\030\001 \002(\0132\032.ProtoAlliance.Allia"
    "nceCPP\0220\n\006member\030\002 \002(\0132 .ProtoAlliance.A"
    "llianceMemberCPP\022+\n\007commons\030\003 \002(\0132\032.Data"
    "Common.CommonItemsCPP\"\025\n\023Recommendllianc"
    "eReq\"\252\001\n\017PartAllianceCPP\022\022\n\nallianceId\030\001"
    " \002(\r\022\014\n\004name\030\002 \002(\014\022\014\n\004flag\030\003 \002(\r\022\021\n\tappl"
    "yType\030\004 \002(\r\022\027\n\017applyLevelLimit\030\005 \002(\r\022\023\n\013"
    "memberCount\030\006 \002(\r\022\023\n\013description\030\007 \001(\014\022\021"
    "\n\tonlineNum\030\010 \001(\r\"M\n\024RecommendllianceRes"
    "p\0225\n\rallianceBrief\030\001 \003(\0132\036.ProtoAlliance"
    ".PartAllianceCPP\",\n\026GetPartAllianceInfoR"
    "eq\022\022\n\nallianceId\030\001 \003(\r\"P\n\027GetPartAllianc"
    "eInfoResp\0225\n\rallianceBrief\030\001 \003(\0132\036.Proto"
    "Alliance.PartAllianceCPP\"2\n\014ApplyJoinReq"
    "\022\022\n\nallianceId\030\001 \002(\r\022\016\n\006reason\030\002 \002(\014\"j\n\022"
    "RequestApplyJoinBC\022\022\n\nallianceId\030\001 \002(\r\022\016"
    "\n\006reason\030\002 \002(\014\0220\n\006member\030\003 \002(\0132 .ProtoAl"
    "liance.AllianceMemberCPP\"p\n\020ReplyApplyJo"
    "inBC\022\013\n\003uid\030\001 \002(\r\022\022\n\nallianceId\030\002 \002(\r\022\013\n"
    "\003ret\030\003 \002(\005\022.\n\010alliance\030\004 \001(\0132\034.ProtoAlli"
    "ance.ApplyJoinResp\"\331\001\n\rApplyJoinResp\022\013\n\003"
    "ret\030\001 \001(\005\022.\n\005apply\030\002 \001(\0132\037.ProtoAlliance"
    ".AllianceApplyCPP\0220\n\006member\030\003 \001(\0132 .Prot"
    "oAlliance.AllianceMemberCPP\022+\n\007commons\030\004"
    " \001(\0132\032.DataCommon.CommonItemsCPP\022,\n\010alli"
    "ance\030\005 \001(\0132\032.ProtoAlliance.AllianceCPP\"3"
    "\n\016ApproveJoinReq\022\020\n\010applyUid\030\001 \002(\r\022\017\n\007op"
    "erate\030\002 \002(\r\"{\n\034RequestApproveJoinAllianc"
    "eBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022\017\n\007operate"
    "\030\003 \002(\r\0220\n\006member\030\004 \002(\0132 .ProtoAlliance.A"
    "llianceMemberCPP\"W\n\030RequestApproveJoinUs"
    "erBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022\020\n\010applyU"
    "id\030\003 \002(\r\022\017\n\007operate\030\004 \002(\r\"S\n\022ReplyApprov"
    "eJoinBC\022\013\n\003uid\030\001 \002(\r\0220\n\010alliance\030\002 \001(\0132\036"
    ".ProtoAlliance.ApproveJoinResp\"f\n\017Approv"
    "eJoinResp\022\020\n\010applyUid\030\001 \002(\r\022\017\n\007operate\030\002"
    " \002(\r\0220\n\006member\030\003 \001(\0132 .ProtoAlliance.All"
    "ianceMemberCPP\"\021\n\017ExitAllianceReq\"1\n\025Req"
    "uestExitAllianceBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002"
    " \002(\r\"b\n\023ReplyExitAllianceBC\022\013\n\003uid\030\001 \002(\r"
    "\022\013\n\003aid\030\002 \002(\r\0221\n\010alliance\030\003 \001(\0132\037.ProtoA"
    "lliance.ExitAllianceResp\"\?\n\020ExitAlliance"
    "Resp\022+\n\007commons\030\001 \002(\0132\032.DataCommon.Commo"
    "nItemsCPP\"d\n\024PostionChangePushReq\022\016\n\006old"
    "pos\030\001 \002(\r\022\016\n\006newpos\030\002 \002(\r\022,\n\010alliance\030\003 "
    "\001(\0132\032.ProtoAlliance.AllianceCPP\"#\n\rInvit"
    "eJoinReq\022\022\n\ninvitedUid\030\001 \002(\r\"Q\n\023RequestI"
    "nviteJoinBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022\022\n"
    "\ninvitedUid\030\003 \002(\r\022\014\n\004name\030\004 \002(\014\"\201\001\n\027Requ"
    "estInviteJoinUserBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030"
    "\002 \002(\r\022\022\n\ninvitedUid\030\003 \002(\r\022\024\n\014allianceFla"
    "g\030\004 \002(\r\022\014\n\004name\030\005 \002(\014\022\024\n\014allianceName\030\006 "
    "\002(\014\"Q\n\021ReplyInviteJoinBC\022\013\n\003uid\030\001 \002(\r\022/\n"
    "\010alliance\030\002 \001(\0132\035.ProtoAlliance.InviteJo"
    "inResp\"$\n\016InviteJoinResp\022\022\n\ninvitedUid\030\001"
    " \002(\r\"C\n\016InvitedPushReq\0221\n\006invite\030\001 \002(\0132!"
    ".ProtoAlliance.AllianceInvitedCPP\"6\n\017Acc"
    "eptInviteReq\022\022\n\nallianceId\030\001 \002(\r\022\017\n\007oper"
    "ate\030\002 \002(\r\"\201\001\n\025RequestAcceptInviteBC\022\022\n\na"
    "llianceId\030\001 \002(\r\022\021\n\tinviteUid\030\002 \002(\r\022\017\n\007op"
    "erate\030\003 \002(\r\0220\n\006member\030\004 \001(\0132 .ProtoAllia"
    "nce.AllianceMemberCPP\"U\n\023ReplyAcceptInvi"
    "teBC\022\013\n\003uid\030\001 \002(\r\0221\n\010alliance\030\002 \001(\0132\037.Pr"
    "otoAlliance.AcceptInviteResp\"\304\001\n\020AcceptI"
    "nviteResp\022\022\n\nallianceId\030\001 \002(\r\022\017\n\007operate"
    "\030\002 \002(\r\0220\n\006member\030\003 \001(\0132 .ProtoAlliance.A"
    "llianceMemberCPP\022+\n\007commons\030\004 \001(\0132\032.Data"
    "Common.CommonItemsCPP\022,\n\010alliance\030\005 \001(\0132"
    "\032.ProtoAlliance.AllianceCPP\"\\\n\023Manipulat"
    "eMemberReq\022\021\n\tmemberUid\030\001 \002(\r\022\017\n\007operate"
    "\030\002 \002(\r\022\014\n\004type\030\003 \002(\r\022\023\n\013destination\030\004 \002("
    "\r\"g\n\031RequestManipulateMemberBC\022\013\n\003aid\030\001 "
    "\002(\r\022\013\n\003uid\030\002 \002(\r\0220\n\004info\030\003 \002(\0132\".ProtoAl"
    "liance.ManipulateMemberReq\"]\n\027ReplyManip"
    "ulateMemberBC\022\013\n\003uid\030\001 \002(\r\0225\n\010alliance\030\002"
    " \001(\0132#.ProtoAlliance.ManipulateMemberRes"
    "p\"H\n\024ManipulateMemberResp\0220\n\006member\030\001 \002("
    "\0132 .ProtoAlliance.AllianceMemberCPP\"\037\n\nK"
    "ickOutReq\022\021\n\tmemberUid\030\001 \002(\r\"\?\n\020RequestK"
    "ickOutBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022\021\n\tme"
    "mberUid\030\003 \002(\r\"K\n\016ReplyKickOutBC\022\013\n\003uid\030\001"
    " \002(\r\022,\n\010alliance\030\002 \001(\0132\032.ProtoAlliance.K"
    "ickOutResp\"E\n\026RequestKickOutMemberBC\022\013\n\003"
    "aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022\021\n\tmemberUid\030\003 \002("
    "\r\" \n\013KickOutResp\022\021\n\tmemberUid\030\001 \002(\r\"3\n\013T"
    "ransferReq\022\021\n\tmemberUid\030\001 \002(\r\022\021\n\totherNa"
    "me\030\002 \002(\014\"S\n\021RequestTransferBC\022\013\n\003aid\030\001 \002"
    "(\r\022\013\n\003uid\030\002 \002(\r\022\021\n\tmemberUid\030\003 \002(\r\022\021\n\tot"
    "herName\030\004 \002(\014\"M\n\017ReplyTransferBC\022\013\n\003uid\030"
    "\001 \002(\r\022-\n\010alliance\030\002 \001(\0132\033.ProtoAlliance."
    "TransferResp\"\237\001\n\014TransferResp\0220\n\006myself\030"
    "\001 \002(\0132 .ProtoAlliance.AllianceMemberCPP\022"
    "/\n\005other\030\002 \002(\0132 .ProtoAlliance.AllianceM"
    "emberCPP\022,\n\010alliance\030\003 \002(\0132\032.ProtoAllian"
    "ce.AllianceCPP\"q\n\017EditAllianceReq\022\014\n\004fla"
    "g\030\001 \002(\r\022\023\n\013description\030\002 \002(\014\022\021\n\tapplyTyp"
    "e\030\003 \002(\r\022\027\n\017applyLevelLimit\030\004 \002(\r\022\017\n\007qqgr"
    "oup\030\005 \001(\r\"_\n\025RequestEditAllianceBC\022\013\n\003ai"
    "d\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022,\n\004info\030\003 \002(\0132\036.Pro"
    "toAlliance.EditAllianceReq\"U\n\023ReplyEditA"
    "llianceBC\022\013\n\003uid\030\001 \002(\r\0221\n\010alliance\030\002 \001(\013"
    "2\037.ProtoAlliance.EditAllianceResp\"@\n\020Edi"
    "tAllianceResp\022,\n\010alliance\030\001 \002(\0132\032.ProtoA"
    "lliance.AllianceCPP\"\352\001\n\023AllianceDonation"
    "CPP\022\020\n\010applyUid\030\001 \002(\r\022\017\n\007propsid\030\002 \002(\r\022\r"
    "\n\005count\030\003 \002(\r\022\023\n\013donateCount\030\004 \002(\r\022\022\n\nfe"
    "tchCount\030\005 \002(\r\022\016\n\006status\030\006 \002(\r\022\014\n\004name\030\007"
    " \002(\014\022\021\n\tdonateUid\030\010 \003(\r\022\023\n\013donateTimes\030\t"
    " \003(\r\022\022\n\ndonateName\030\n \003(\014\022\017\n\007applyts\030\013 \002("
    "\r\022\r\n\005level\030\014 \002(\r\"1\n\017SeekDonationReq\022\017\n\007p"
    "ropsid\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\"~\n\025RequestSe"
    "ekDonationBC\022\013\n\003uid\030\001 \002(\r\022\r\n\005count\030\002 \002(\r"
    "\022\013\n\003aid\030\003 \002(\r\022\017\n\007propsid\030\004 \002(\r\022\016\n\006cdtime"
    "\030\005 \002(\r\022\014\n\004name\030\006 \002(\014\022\r\n\005level\030\007 \002(\r\"e\n\023R"
    "eplySeekDonationBC\022\013\n\003uid\030\001 \002(\r\022\016\n\006cdtim"
    "e\030\002 \002(\r\0221\n\010alliance\030\003 \001(\0132\037.ProtoAllianc"
    "e.SeekDonationResp\"`\n\020SeekDonationResp\0224"
    "\n\010donation\030\001 \002(\0132\".ProtoAlliance.Allianc"
    "eDonationCPP\022\026\n\016nextDonationTs\030\002 \002(\r\"\"\n\022"
    "CutUpDonationCDReq\022\014\n\004type\030\001 \001(\r\"Z\n\023CutU"
    "pDonationCDResp\022\026\n\016nextDonationTs\030\001 \002(\r\022"
    "+\n\007commons\030\002 \001(\0132\032.DataCommon.CommonItem"
    "sCPP\"5\n\020OfferDonationReq\022\020\n\010applyUid\030\001 \002"
    "(\r\022\017\n\007propsid\030\002 \002(\r\"\220\001\n\026RequestOfferDona"
    "tionBC\022\013\n\003uid\030\001 \002(\r\022\020\n\010applyUid\030\002 \002(\r\022\013\n"
    "\003aid\030\003 \002(\r\022\017\n\007propsid\030\004 \002(\r\022\014\n\004name\030\005 \002("
    "\014\022+\n\007commons\030\006 \002(\0132\032.DataCommon.CommonIt"
    "emsCPP\"u\n\024ReplyOfferDonationBC\022\013\n\003uid\030\001 "
    "\002(\r\022\013\n\003aid\030\002 \002(\r\022\017\n\007propsid\030\003 \002(\r\0222\n\010all"
    "iance\030\004 \001(\0132 .ProtoAlliance.OfferDonatio"
    "nResp\"v\n\021OfferDonationResp\022+\n\007commons\030\001 "
    "\002(\0132\032.DataCommon.CommonItemsCPP\0224\n\010donat"
    "ion\030\002 \002(\0132\".ProtoAlliance.AllianceDonati"
    "onCPP\"\022\n\020FetchDonationReq\"2\n\026RequestFetc"
    "hDonationBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\"h\n"
    "\024ReplyFetchDonationBC\022\013\n\003uid\030\001 \002(\r\022\017\n\007pr"
    "opsid\030\002 \002(\r\0222\n\010alliance\030\003 \001(\0132 .ProtoAll"
    "iance.FetchDonationResp\"v\n\021FetchDonation"
    "Resp\022+\n\007commons\030\001 \001(\0132\032.DataCommon.Commo"
    "nItemsCPP\0224\n\010donation\030\002 \001(\0132\".ProtoAllia"
    "nce.AllianceDonationCPP\"c\n\021AllianceNotif"
    "yCPP\022\n\n\002id\030\001 \002(\r\022\021\n\tannouncer\030\002 \002(\r\022\014\n\004n"
    "ame\030\003 \002(\014\022\017\n\007content\030\004 \002(\014\022\020\n\010createts\030\005"
    " \002(\r\" \n\rSendNotifyReq\022\017\n\007content\030\001 \002(\014\"N"
    "\n\023RequestSendNotifyBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003ui"
    "d\030\002 \002(\r\022\017\n\007content\030\003 \002(\014\022\014\n\004name\030\004 \002(\014\"Q"
    "\n\021ReplySendNotifyBC\022\013\n\003uid\030\001 \002(\r\022/\n\010alli"
    "ance\030\002 \001(\0132\035.ProtoAlliance.SendNotifyRes"
    "p\"B\n\016SendNotifyResp\0220\n\006notify\030\001 \002(\0132 .Pr"
    "otoAlliance.AllianceNotifyCPP\"\032\n\014DelNoti"
    "fyReq\022\n\n\002id\030\001 \002(\r\":\n\022RequestDelNotifyBC\022"
    "\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022\n\n\002id\030\003 \002(\r\"O\n"
    "\020ReplyDelNotifyBC\022\013\n\003uid\030\001 \002(\r\022.\n\010allian"
    "ce\030\002 \001(\0132\034.ProtoAlliance.DelNotifyResp\"\033"
    "\n\rDelNotifyResp\022\n\n\002id\030\001 \002(\r\"\'\n\nAidInfoCP"
    "P\022\013\n\003uid\030\001 \002(\r\022\014\n\004name\030\002 \002(\014\"&\n\026GetAllia"
    "nceFunctionReq\022\014\n\004type\030\001 \002(\r\"\347\001\n\027GetAlli"
    "anceFunctionResp\0222\n\tapplyList\030\001 \003(\0132\037.Pr"
    "otoAlliance.AllianceApplyCPP\0225\n\tdonation"
    "s\030\002 \003(\0132\".ProtoAlliance.AllianceDonation"
    "CPP\022*\n\007aidlist\030\003 \003(\0132\031.ProtoAlliance.Aid"
    "InfoCPP\0225\n\ninvitelist\030\004 \003(\0132!.ProtoAllia"
    "nce.AllianceInvitedCPP\"C\n\031RequestAllianc"
    "eFunctionBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022\014\n"
    "\004type\030\003 \002(\r\"n\n\027ReplyAllianceFunctionBC\022\013"
    "\n\003uid\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\0228\n\010alliance\030\003 "
    "\001(\0132&.ProtoAlliance.GetAllianceFunctionR"
    "esp\"\016\n\014GetNotifyReq\"C\n\rGetNotifyResp\0222\n\010"
    "notifies\030\001 \003(\0132 .ProtoAlliance.AllianceN"
    "otifyCPP\"3\n\027RequestAllianceNotifyBC\022\013\n\003a"
    "id\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\"T\n\025ReplyAllianceNo"
    "tifyBC\022\013\n\003uid\030\001 \002(\r\022.\n\010alliance\030\002 \001(\0132\034."
    "ProtoAlliance.GetNotifyResp\"\"\n\014GetMember"
    "Req\022\022\n\nallianceId\030\001 \002(\r\"3\n\027RequestAllian"
    "ceMemberBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\"T\n\025"
    "ReplyAllianceMemberBC\022\013\n\003uid\030\001 \002(\r\022.\n\010al"
    "liance\030\002 \001(\0132\034.ProtoAlliance.GetMemberRe"
    "sp\"V\n\rGetMemberResp\0221\n\007members\030\001 \003(\0132 .P"
    "rotoAlliance.AllianceMemberCPP\022\022\n\nallian"
    "ceId\030\002 \002(\r\"\021\n\017RequestAlliance\"-\n\021Request"
    "AllianceBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\"L\n\017"
    "ReplyAllianceBC\022\013\n\003uid\030\001 \002(\r\022,\n\010alliance"
    "\030\002 \001(\0132\032.ProtoAlliance.AllianceCPP\"\202\001\n\025R"
    "equestUpdateMemberBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid"
    "\030\002 \002(\r\022\020\n\010onlineTs\030\003 \001(\r\022\016\n\006helpTs\030\004 \001(\r"
    "\022\r\n\005level\030\005 \001(\r\022\014\n\004name\030\006 \001(\014\022\020\n\010vipLeve"
    "l\030\007 \001(\r\"7\n\033RequestAddMemberHelpTimesBC\022\013"
    "\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\"(\n\032RequestAllia"
    "nceRaceSetFlag\022\n\n\002id\030\001 \002(\r\"D\n\034RequestAll"
    "ianceRaceSetFlagBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002"
    " \002(\r\022\n\n\002id\030\003 \002(\r\"#\n!RequestAllianceRaceM"
    "emberProgress\"\?\n#RequestAllianceRaceMemb"
    "erProgressBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\"`"
    "\n\037ReplyAllianceRaceMemberProgress\022\017\n\007ord"
    "erId\030\001 \002(\r\022\016\n\006finish\030\002 \002(\r\022\n\n\002ts\030\003 \002(\r\022\020"
    "\n\010progress\030\004 \003(\r\"\031\n\027RequestAllianceRaceI"
    "nfo\"5\n\031RequestAllianceRaceInfoBC\022\013\n\003aid\030"
    "\001 \002(\r\022\013\n\003uid\030\002 \002(\r\"\216\001\n\025ReplyAllianceRace"
    "Info\022\r\n\005point\030\001 \002(\r\022\021\n\traceLevel\030\002 \002(\r\022\016"
    "\n\006overTs\030\003 \002(\r\022\014\n\004flag\030\004 \001(\r\022\016\n\006inRace\030\005"
    " \001(\r\022\023\n\013memberPoint\030\006 \001(\r\022\020\n\010openRace\030\007 "
    "\002(\r\"-\n\021AllianceRaceOrder\022\n\n\002id\030\001 \002(\r\022\014\n\004"
    "cdTs\030\002 \002(\r\"h\n\027AllianceRaceMemberOrder\022\013\n"
    "\003uid\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\n\n\002ts\030\003 \002(\r\022\r\n\005le"
    "vel\030\004 \002(\r\022\014\n\004name\030\005 \002(\014\022\013\n\003fig\030\006 \002(\014\"\032\n\030"
    "RequestAllianceRaceOrder\"6\n\032RequestAllia"
    "nceRaceOrderBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r"
    "\"\314\001\n\026ReplyAllianceRaceOrder\022\r\n\005point\030\001 \002"
    "(\r\022\021\n\torderRecv\030\002 \002(\r\022\024\n\014maxOrderRecv\030\003 "
    "\002(\r\022\014\n\004flag\030\004 \002(\r\022/\n\005order\030\005 \003(\0132 .Proto"
    "Alliance.AllianceRaceOrder\022;\n\013memberOrde"
    "r\030\006 \003(\0132&.ProtoAlliance.AllianceRaceMemb"
    "erOrder\"N\n\037RequestAllianceRaceOperateOrd"
    "er\022\014\n\004slot\030\001 \002(\r\022\017\n\007operate\030\002 \002(\r\022\014\n\004cdT"
    "s\030\003 \002(\r\"\\\n!RequestAllianceRaceOperateOrd"
    "erBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022\014\n\004slot\030\003"
    " \002(\r\022\017\n\007operate\030\004 \002(\r\"\273\001\n\035ReplyAllianceR"
    "aceOperateOrder\022\013\n\003ret\030\001 \002(\r\022\013\n\003uid\030\002 \002("
    "\r\022\017\n\007operate\030\003 \002(\r\022\014\n\004cdTs\030\004 \002(\r\022+\n\007comm"
    "ons\030\005 \001(\0132\032.DataCommon.CommonItemsCPP\0224\n"
    "\005order\030\006 \001(\0132%.ProtoAlliance.ReplyAllian"
    "ceRaceOrder\"1\n!RequestAllianceRaceMember"
    "DelOrder\022\014\n\004type\030\001 \002(\r\"M\n#RequestAllianc"
    "eRaceMemberDelOrderBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003ui"
    "d\030\002 \002(\r\022\014\n\004type\030\003 \002(\r\"t\n&RequestAlliance"
    "RaceMemberUpdateOrderBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003"
    "uid\030\002 \002(\r\022\021\n\torderType\030\003 \002(\r\022\r\n\005count\030\004 "
    "\002(\r\022\016\n\006target\030\005 \002(\r\"\035\n\033RequestAllianceRa"
    "ceBuyOrder\"9\n\035RequestAllianceRaceBuyOrde"
    "rBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\"b\n\031ReplyAl"
    "lianceRaceBuyOrder\022\013\n\003ret\030\001 \002(\r\022\013\n\003uid\030\002"
    " \002(\r\022+\n\007commons\030\003 \001(\0132\032.DataCommon.Commo"
    "nItemsCPP\"*\n\032RequestAllianceRaceWatchAd\022"
    "\014\n\004type\030\001 \002(\r\"c\n\030ReplyAllianceRaceWatchA"
    "d\022\013\n\003ret\030\001 \002(\r\022+\n\007commons\030\002 \001(\0132\032.DataCo"
    "mmon.CommonItemsCPP\022\r\n\005point\030\003 \001(\r\"G\n\034Re"
    "questAllianceRaceWatchAdBC\022\013\n\003aid\030\001 \002(\r\022"
    "\013\n\003uid\030\002 \002(\r\022\r\n\005point\030\003 \002(\r\"\033\n\031RequestAl"
    "lianceRaceReward\"C\n\033RequestAllianceRaceR"
    "ewardBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022\n\n\002id\030"
    "\003 \003(\r\"\230\001\n\027ReplyAllianceRaceReward\022\013\n\003ret"
    "\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022\016\n\006rankId\030\003 \002(\r\022\021\n\tu"
    "serLevel\030\004 \002(\r\022\016\n\006olevel\030\005 \002(\r\022\016\n\006opoint"
    "\030\006 \002(\r\022\017\n\007gradeId\030\007 \003(\r\022\017\n\007stageId\030\010 \003(\r"
    "\"$\n\"RequestAllianceRaceTakeGradeReward\"@"
    "\n$RequestAllianceRaceTakeGradeRewardBC\022\013"
    "\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\"\230\001\n ReplyAllian"
    "ceRaceTakeGradeReward\022\013\n\003ret\030\001 \002(\r\022\013\n\003ui"
    "d\030\002 \002(\r\022+\n\007commons\030\003 \001(\0132\032.DataCommon.Co"
    "mmonItemsCPP\022\021\n\tuserLevel\030\004 \001(\r\022\016\n\006rankI"
    "d\030\005 \001(\r\022\n\n\002id\030\006 \003(\r\"0\n\"RequestAllianceRa"
    "ceTakeStageReward\022\n\n\002id\030\001 \003(\r\"L\n$Request"
    "AllianceRaceTakeStageRewardBC\022\013\n\003aid\030\001 \002"
    "(\r\022\013\n\003uid\030\002 \002(\r\022\n\n\002id\030\003 \003(\r\"\210\001\n ReplyAll"
    "ianceRaceTakeStageReward\022\013\n\003ret\030\001 \002(\r\022\013\n"
    "\003uid\030\002 \002(\r\022+\n\007commons\030\003 \001(\0132\032.DataCommon"
    ".CommonItemsCPP\022\021\n\tuserLevel\030\004 \001(\r\022\n\n\002id"
    "\030\005 \003(\r\"3\n%RequestAllianceRaceRefreshStag"
    "eReward\022\n\n\002id\030\001 \003(\r\"O\n\'RequestAllianceRa"
    "ceRefreshStageRewardBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003u"
    "id\030\002 \002(\r\022\n\n\002id\030\003 \003(\r\"\211\001\n#ReplyAllianceRa"
    "ceRefreshStageReward\022\013\n\003ret\030\001 \002(\r\022\013\n\003uid"
    "\030\002 \002(\r\022+\n\007commons\030\003 \001(\0132\032.DataCommon.Com"
    "monItemsCPP\022\017\n\007levelId\030\004 \001(\r\022\n\n\002id\030\005 \003(\r"
    "\"\205\001\n\036AllianceRaceMemberOrderLogItem\022\013\n\003u"
    "id\030\001 \002(\r\022\016\n\006finish\030\002 \002(\r\022\013\n\003max\030\003 \002(\r\022\016\n"
    "\006cancel\030\004 \002(\r\022\r\n\005point\030\005 \002(\r\022\r\n\005level\030\006 "
    "\002(\r\022\013\n\003fig\030\007 \001(\014\"#\n!RequestAllianceRaceM"
    "emberOrderLog\"\?\n#RequestAllianceRaceMemb"
    "erOrderLogBC\022\013\n\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\"`"
    "\n\037ReplyAllianceRaceMemberOrderLog\022=\n\006mem"
    "ber\030\001 \003(\0132-.ProtoAlliance.AllianceRaceMe"
    "mberOrderLogItem\"<\n\036AllianceRacePersonOr"
    "derLogItem\022\n\n\002id\030\001 \002(\r\022\016\n\006status\030\002 \002(\r\"#"
    "\n!RequestAllianceRacePersonOrderLog\"\?\n#R"
    "equestAllianceRacePersonOrderLogBC\022\013\n\003ai"
    "d\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\"`\n\037ReplyAllianceRac"
    "ePersonOrderLog\022=\n\006member\030\001 \003(\0132-.ProtoA"
    "lliance.AllianceRacePersonOrderLogItem\"9"
    "\n\033SetAllianceRaceGroupPointBC\022\013\n\003aid\030\001 \002"
    "(\r\022\r\n\005point\030\002 \002(\r\"D\n\027AllianceRaceGroupMe"
    "mber\022\013\n\003aid\030\001 \002(\r\022\r\n\005point\030\002 \002(\r\022\r\n\005coun"
    "t\030\003 \002(\r\" \n\036RequestAllianceRaceGroupMembe"
    "r\"<\n RequestAllianceRaceGroupMemberBC\022\013\n"
    "\003aid\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\"V\n\034ReplyAlliance"
    "RaceGroupMember\0226\n\006member\030\001 \003(\0132&.ProtoA"
    "lliance.AllianceRaceGroupMember", 12391);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoAlliance.proto", &protobuf_RegisterTypes);
  AllianceCPP::default_instance_ = new AllianceCPP();
  AllianceMemberCPP::default_instance_ = new AllianceMemberCPP();
  AllianceApplyCPP::default_instance_ = new AllianceApplyCPP();
  AllianceInvitedCPP::default_instance_ = new AllianceInvitedCPP();
  CheckNameAvailableReq::default_instance_ = new CheckNameAvailableReq();
  CheckNameAvailableResp::default_instance_ = new CheckNameAvailableResp();
  CreateAllianceReq::default_instance_ = new CreateAllianceReq();
  CreateAllianceResp::default_instance_ = new CreateAllianceResp();
  RecommendllianceReq::default_instance_ = new RecommendllianceReq();
  PartAllianceCPP::default_instance_ = new PartAllianceCPP();
  RecommendllianceResp::default_instance_ = new RecommendllianceResp();
  GetPartAllianceInfoReq::default_instance_ = new GetPartAllianceInfoReq();
  GetPartAllianceInfoResp::default_instance_ = new GetPartAllianceInfoResp();
  ApplyJoinReq::default_instance_ = new ApplyJoinReq();
  RequestApplyJoinBC::default_instance_ = new RequestApplyJoinBC();
  ReplyApplyJoinBC::default_instance_ = new ReplyApplyJoinBC();
  ApplyJoinResp::default_instance_ = new ApplyJoinResp();
  ApproveJoinReq::default_instance_ = new ApproveJoinReq();
  RequestApproveJoinAllianceBC::default_instance_ = new RequestApproveJoinAllianceBC();
  RequestApproveJoinUserBC::default_instance_ = new RequestApproveJoinUserBC();
  ReplyApproveJoinBC::default_instance_ = new ReplyApproveJoinBC();
  ApproveJoinResp::default_instance_ = new ApproveJoinResp();
  ExitAllianceReq::default_instance_ = new ExitAllianceReq();
  RequestExitAllianceBC::default_instance_ = new RequestExitAllianceBC();
  ReplyExitAllianceBC::default_instance_ = new ReplyExitAllianceBC();
  ExitAllianceResp::default_instance_ = new ExitAllianceResp();
  PostionChangePushReq::default_instance_ = new PostionChangePushReq();
  InviteJoinReq::default_instance_ = new InviteJoinReq();
  RequestInviteJoinBC::default_instance_ = new RequestInviteJoinBC();
  RequestInviteJoinUserBC::default_instance_ = new RequestInviteJoinUserBC();
  ReplyInviteJoinBC::default_instance_ = new ReplyInviteJoinBC();
  InviteJoinResp::default_instance_ = new InviteJoinResp();
  InvitedPushReq::default_instance_ = new InvitedPushReq();
  AcceptInviteReq::default_instance_ = new AcceptInviteReq();
  RequestAcceptInviteBC::default_instance_ = new RequestAcceptInviteBC();
  ReplyAcceptInviteBC::default_instance_ = new ReplyAcceptInviteBC();
  AcceptInviteResp::default_instance_ = new AcceptInviteResp();
  ManipulateMemberReq::default_instance_ = new ManipulateMemberReq();
  RequestManipulateMemberBC::default_instance_ = new RequestManipulateMemberBC();
  ReplyManipulateMemberBC::default_instance_ = new ReplyManipulateMemberBC();
  ManipulateMemberResp::default_instance_ = new ManipulateMemberResp();
  KickOutReq::default_instance_ = new KickOutReq();
  RequestKickOutBC::default_instance_ = new RequestKickOutBC();
  ReplyKickOutBC::default_instance_ = new ReplyKickOutBC();
  RequestKickOutMemberBC::default_instance_ = new RequestKickOutMemberBC();
  KickOutResp::default_instance_ = new KickOutResp();
  TransferReq::default_instance_ = new TransferReq();
  RequestTransferBC::default_instance_ = new RequestTransferBC();
  ReplyTransferBC::default_instance_ = new ReplyTransferBC();
  TransferResp::default_instance_ = new TransferResp();
  EditAllianceReq::default_instance_ = new EditAllianceReq();
  RequestEditAllianceBC::default_instance_ = new RequestEditAllianceBC();
  ReplyEditAllianceBC::default_instance_ = new ReplyEditAllianceBC();
  EditAllianceResp::default_instance_ = new EditAllianceResp();
  AllianceDonationCPP::default_instance_ = new AllianceDonationCPP();
  SeekDonationReq::default_instance_ = new SeekDonationReq();
  RequestSeekDonationBC::default_instance_ = new RequestSeekDonationBC();
  ReplySeekDonationBC::default_instance_ = new ReplySeekDonationBC();
  SeekDonationResp::default_instance_ = new SeekDonationResp();
  CutUpDonationCDReq::default_instance_ = new CutUpDonationCDReq();
  CutUpDonationCDResp::default_instance_ = new CutUpDonationCDResp();
  OfferDonationReq::default_instance_ = new OfferDonationReq();
  RequestOfferDonationBC::default_instance_ = new RequestOfferDonationBC();
  ReplyOfferDonationBC::default_instance_ = new ReplyOfferDonationBC();
  OfferDonationResp::default_instance_ = new OfferDonationResp();
  FetchDonationReq::default_instance_ = new FetchDonationReq();
  RequestFetchDonationBC::default_instance_ = new RequestFetchDonationBC();
  ReplyFetchDonationBC::default_instance_ = new ReplyFetchDonationBC();
  FetchDonationResp::default_instance_ = new FetchDonationResp();
  AllianceNotifyCPP::default_instance_ = new AllianceNotifyCPP();
  SendNotifyReq::default_instance_ = new SendNotifyReq();
  RequestSendNotifyBC::default_instance_ = new RequestSendNotifyBC();
  ReplySendNotifyBC::default_instance_ = new ReplySendNotifyBC();
  SendNotifyResp::default_instance_ = new SendNotifyResp();
  DelNotifyReq::default_instance_ = new DelNotifyReq();
  RequestDelNotifyBC::default_instance_ = new RequestDelNotifyBC();
  ReplyDelNotifyBC::default_instance_ = new ReplyDelNotifyBC();
  DelNotifyResp::default_instance_ = new DelNotifyResp();
  AidInfoCPP::default_instance_ = new AidInfoCPP();
  GetAllianceFunctionReq::default_instance_ = new GetAllianceFunctionReq();
  GetAllianceFunctionResp::default_instance_ = new GetAllianceFunctionResp();
  RequestAllianceFunctionBC::default_instance_ = new RequestAllianceFunctionBC();
  ReplyAllianceFunctionBC::default_instance_ = new ReplyAllianceFunctionBC();
  GetNotifyReq::default_instance_ = new GetNotifyReq();
  GetNotifyResp::default_instance_ = new GetNotifyResp();
  RequestAllianceNotifyBC::default_instance_ = new RequestAllianceNotifyBC();
  ReplyAllianceNotifyBC::default_instance_ = new ReplyAllianceNotifyBC();
  GetMemberReq::default_instance_ = new GetMemberReq();
  RequestAllianceMemberBC::default_instance_ = new RequestAllianceMemberBC();
  ReplyAllianceMemberBC::default_instance_ = new ReplyAllianceMemberBC();
  GetMemberResp::default_instance_ = new GetMemberResp();
  RequestAlliance::default_instance_ = new RequestAlliance();
  RequestAllianceBC::default_instance_ = new RequestAllianceBC();
  ReplyAllianceBC::default_instance_ = new ReplyAllianceBC();
  RequestUpdateMemberBC::default_instance_ = new RequestUpdateMemberBC();
  RequestAddMemberHelpTimesBC::default_instance_ = new RequestAddMemberHelpTimesBC();
  RequestAllianceRaceSetFlag::default_instance_ = new RequestAllianceRaceSetFlag();
  RequestAllianceRaceSetFlagBC::default_instance_ = new RequestAllianceRaceSetFlagBC();
  RequestAllianceRaceMemberProgress::default_instance_ = new RequestAllianceRaceMemberProgress();
  RequestAllianceRaceMemberProgressBC::default_instance_ = new RequestAllianceRaceMemberProgressBC();
  ReplyAllianceRaceMemberProgress::default_instance_ = new ReplyAllianceRaceMemberProgress();
  RequestAllianceRaceInfo::default_instance_ = new RequestAllianceRaceInfo();
  RequestAllianceRaceInfoBC::default_instance_ = new RequestAllianceRaceInfoBC();
  ReplyAllianceRaceInfo::default_instance_ = new ReplyAllianceRaceInfo();
  AllianceRaceOrder::default_instance_ = new AllianceRaceOrder();
  AllianceRaceMemberOrder::default_instance_ = new AllianceRaceMemberOrder();
  RequestAllianceRaceOrder::default_instance_ = new RequestAllianceRaceOrder();
  RequestAllianceRaceOrderBC::default_instance_ = new RequestAllianceRaceOrderBC();
  ReplyAllianceRaceOrder::default_instance_ = new ReplyAllianceRaceOrder();
  RequestAllianceRaceOperateOrder::default_instance_ = new RequestAllianceRaceOperateOrder();
  RequestAllianceRaceOperateOrderBC::default_instance_ = new RequestAllianceRaceOperateOrderBC();
  ReplyAllianceRaceOperateOrder::default_instance_ = new ReplyAllianceRaceOperateOrder();
  RequestAllianceRaceMemberDelOrder::default_instance_ = new RequestAllianceRaceMemberDelOrder();
  RequestAllianceRaceMemberDelOrderBC::default_instance_ = new RequestAllianceRaceMemberDelOrderBC();
  RequestAllianceRaceMemberUpdateOrderBC::default_instance_ = new RequestAllianceRaceMemberUpdateOrderBC();
  RequestAllianceRaceBuyOrder::default_instance_ = new RequestAllianceRaceBuyOrder();
  RequestAllianceRaceBuyOrderBC::default_instance_ = new RequestAllianceRaceBuyOrderBC();
  ReplyAllianceRaceBuyOrder::default_instance_ = new ReplyAllianceRaceBuyOrder();
  RequestAllianceRaceWatchAd::default_instance_ = new RequestAllianceRaceWatchAd();
  ReplyAllianceRaceWatchAd::default_instance_ = new ReplyAllianceRaceWatchAd();
  RequestAllianceRaceWatchAdBC::default_instance_ = new RequestAllianceRaceWatchAdBC();
  RequestAllianceRaceReward::default_instance_ = new RequestAllianceRaceReward();
  RequestAllianceRaceRewardBC::default_instance_ = new RequestAllianceRaceRewardBC();
  ReplyAllianceRaceReward::default_instance_ = new ReplyAllianceRaceReward();
  RequestAllianceRaceTakeGradeReward::default_instance_ = new RequestAllianceRaceTakeGradeReward();
  RequestAllianceRaceTakeGradeRewardBC::default_instance_ = new RequestAllianceRaceTakeGradeRewardBC();
  ReplyAllianceRaceTakeGradeReward::default_instance_ = new ReplyAllianceRaceTakeGradeReward();
  RequestAllianceRaceTakeStageReward::default_instance_ = new RequestAllianceRaceTakeStageReward();
  RequestAllianceRaceTakeStageRewardBC::default_instance_ = new RequestAllianceRaceTakeStageRewardBC();
  ReplyAllianceRaceTakeStageReward::default_instance_ = new ReplyAllianceRaceTakeStageReward();
  RequestAllianceRaceRefreshStageReward::default_instance_ = new RequestAllianceRaceRefreshStageReward();
  RequestAllianceRaceRefreshStageRewardBC::default_instance_ = new RequestAllianceRaceRefreshStageRewardBC();
  ReplyAllianceRaceRefreshStageReward::default_instance_ = new ReplyAllianceRaceRefreshStageReward();
  AllianceRaceMemberOrderLogItem::default_instance_ = new AllianceRaceMemberOrderLogItem();
  RequestAllianceRaceMemberOrderLog::default_instance_ = new RequestAllianceRaceMemberOrderLog();
  RequestAllianceRaceMemberOrderLogBC::default_instance_ = new RequestAllianceRaceMemberOrderLogBC();
  ReplyAllianceRaceMemberOrderLog::default_instance_ = new ReplyAllianceRaceMemberOrderLog();
  AllianceRacePersonOrderLogItem::default_instance_ = new AllianceRacePersonOrderLogItem();
  RequestAllianceRacePersonOrderLog::default_instance_ = new RequestAllianceRacePersonOrderLog();
  RequestAllianceRacePersonOrderLogBC::default_instance_ = new RequestAllianceRacePersonOrderLogBC();
  ReplyAllianceRacePersonOrderLog::default_instance_ = new ReplyAllianceRacePersonOrderLog();
  SetAllianceRaceGroupPointBC::default_instance_ = new SetAllianceRaceGroupPointBC();
  AllianceRaceGroupMember::default_instance_ = new AllianceRaceGroupMember();
  RequestAllianceRaceGroupMember::default_instance_ = new RequestAllianceRaceGroupMember();
  RequestAllianceRaceGroupMemberBC::default_instance_ = new RequestAllianceRaceGroupMemberBC();
  ReplyAllianceRaceGroupMember::default_instance_ = new ReplyAllianceRaceGroupMember();
  AllianceCPP::default_instance_->InitAsDefaultInstance();
  AllianceMemberCPP::default_instance_->InitAsDefaultInstance();
  AllianceApplyCPP::default_instance_->InitAsDefaultInstance();
  AllianceInvitedCPP::default_instance_->InitAsDefaultInstance();
  CheckNameAvailableReq::default_instance_->InitAsDefaultInstance();
  CheckNameAvailableResp::default_instance_->InitAsDefaultInstance();
  CreateAllianceReq::default_instance_->InitAsDefaultInstance();
  CreateAllianceResp::default_instance_->InitAsDefaultInstance();
  RecommendllianceReq::default_instance_->InitAsDefaultInstance();
  PartAllianceCPP::default_instance_->InitAsDefaultInstance();
  RecommendllianceResp::default_instance_->InitAsDefaultInstance();
  GetPartAllianceInfoReq::default_instance_->InitAsDefaultInstance();
  GetPartAllianceInfoResp::default_instance_->InitAsDefaultInstance();
  ApplyJoinReq::default_instance_->InitAsDefaultInstance();
  RequestApplyJoinBC::default_instance_->InitAsDefaultInstance();
  ReplyApplyJoinBC::default_instance_->InitAsDefaultInstance();
  ApplyJoinResp::default_instance_->InitAsDefaultInstance();
  ApproveJoinReq::default_instance_->InitAsDefaultInstance();
  RequestApproveJoinAllianceBC::default_instance_->InitAsDefaultInstance();
  RequestApproveJoinUserBC::default_instance_->InitAsDefaultInstance();
  ReplyApproveJoinBC::default_instance_->InitAsDefaultInstance();
  ApproveJoinResp::default_instance_->InitAsDefaultInstance();
  ExitAllianceReq::default_instance_->InitAsDefaultInstance();
  RequestExitAllianceBC::default_instance_->InitAsDefaultInstance();
  ReplyExitAllianceBC::default_instance_->InitAsDefaultInstance();
  ExitAllianceResp::default_instance_->InitAsDefaultInstance();
  PostionChangePushReq::default_instance_->InitAsDefaultInstance();
  InviteJoinReq::default_instance_->InitAsDefaultInstance();
  RequestInviteJoinBC::default_instance_->InitAsDefaultInstance();
  RequestInviteJoinUserBC::default_instance_->InitAsDefaultInstance();
  ReplyInviteJoinBC::default_instance_->InitAsDefaultInstance();
  InviteJoinResp::default_instance_->InitAsDefaultInstance();
  InvitedPushReq::default_instance_->InitAsDefaultInstance();
  AcceptInviteReq::default_instance_->InitAsDefaultInstance();
  RequestAcceptInviteBC::default_instance_->InitAsDefaultInstance();
  ReplyAcceptInviteBC::default_instance_->InitAsDefaultInstance();
  AcceptInviteResp::default_instance_->InitAsDefaultInstance();
  ManipulateMemberReq::default_instance_->InitAsDefaultInstance();
  RequestManipulateMemberBC::default_instance_->InitAsDefaultInstance();
  ReplyManipulateMemberBC::default_instance_->InitAsDefaultInstance();
  ManipulateMemberResp::default_instance_->InitAsDefaultInstance();
  KickOutReq::default_instance_->InitAsDefaultInstance();
  RequestKickOutBC::default_instance_->InitAsDefaultInstance();
  ReplyKickOutBC::default_instance_->InitAsDefaultInstance();
  RequestKickOutMemberBC::default_instance_->InitAsDefaultInstance();
  KickOutResp::default_instance_->InitAsDefaultInstance();
  TransferReq::default_instance_->InitAsDefaultInstance();
  RequestTransferBC::default_instance_->InitAsDefaultInstance();
  ReplyTransferBC::default_instance_->InitAsDefaultInstance();
  TransferResp::default_instance_->InitAsDefaultInstance();
  EditAllianceReq::default_instance_->InitAsDefaultInstance();
  RequestEditAllianceBC::default_instance_->InitAsDefaultInstance();
  ReplyEditAllianceBC::default_instance_->InitAsDefaultInstance();
  EditAllianceResp::default_instance_->InitAsDefaultInstance();
  AllianceDonationCPP::default_instance_->InitAsDefaultInstance();
  SeekDonationReq::default_instance_->InitAsDefaultInstance();
  RequestSeekDonationBC::default_instance_->InitAsDefaultInstance();
  ReplySeekDonationBC::default_instance_->InitAsDefaultInstance();
  SeekDonationResp::default_instance_->InitAsDefaultInstance();
  CutUpDonationCDReq::default_instance_->InitAsDefaultInstance();
  CutUpDonationCDResp::default_instance_->InitAsDefaultInstance();
  OfferDonationReq::default_instance_->InitAsDefaultInstance();
  RequestOfferDonationBC::default_instance_->InitAsDefaultInstance();
  ReplyOfferDonationBC::default_instance_->InitAsDefaultInstance();
  OfferDonationResp::default_instance_->InitAsDefaultInstance();
  FetchDonationReq::default_instance_->InitAsDefaultInstance();
  RequestFetchDonationBC::default_instance_->InitAsDefaultInstance();
  ReplyFetchDonationBC::default_instance_->InitAsDefaultInstance();
  FetchDonationResp::default_instance_->InitAsDefaultInstance();
  AllianceNotifyCPP::default_instance_->InitAsDefaultInstance();
  SendNotifyReq::default_instance_->InitAsDefaultInstance();
  RequestSendNotifyBC::default_instance_->InitAsDefaultInstance();
  ReplySendNotifyBC::default_instance_->InitAsDefaultInstance();
  SendNotifyResp::default_instance_->InitAsDefaultInstance();
  DelNotifyReq::default_instance_->InitAsDefaultInstance();
  RequestDelNotifyBC::default_instance_->InitAsDefaultInstance();
  ReplyDelNotifyBC::default_instance_->InitAsDefaultInstance();
  DelNotifyResp::default_instance_->InitAsDefaultInstance();
  AidInfoCPP::default_instance_->InitAsDefaultInstance();
  GetAllianceFunctionReq::default_instance_->InitAsDefaultInstance();
  GetAllianceFunctionResp::default_instance_->InitAsDefaultInstance();
  RequestAllianceFunctionBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceFunctionBC::default_instance_->InitAsDefaultInstance();
  GetNotifyReq::default_instance_->InitAsDefaultInstance();
  GetNotifyResp::default_instance_->InitAsDefaultInstance();
  RequestAllianceNotifyBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceNotifyBC::default_instance_->InitAsDefaultInstance();
  GetMemberReq::default_instance_->InitAsDefaultInstance();
  RequestAllianceMemberBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceMemberBC::default_instance_->InitAsDefaultInstance();
  GetMemberResp::default_instance_->InitAsDefaultInstance();
  RequestAlliance::default_instance_->InitAsDefaultInstance();
  RequestAllianceBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceBC::default_instance_->InitAsDefaultInstance();
  RequestUpdateMemberBC::default_instance_->InitAsDefaultInstance();
  RequestAddMemberHelpTimesBC::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceSetFlag::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceSetFlagBC::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceMemberProgress::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceMemberProgressBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceRaceMemberProgress::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceInfo::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceInfoBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceRaceInfo::default_instance_->InitAsDefaultInstance();
  AllianceRaceOrder::default_instance_->InitAsDefaultInstance();
  AllianceRaceMemberOrder::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceOrder::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceOrderBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceRaceOrder::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceOperateOrder::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceOperateOrderBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceRaceOperateOrder::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceMemberDelOrder::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceMemberDelOrderBC::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceMemberUpdateOrderBC::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceBuyOrder::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceBuyOrderBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceRaceBuyOrder::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceWatchAd::default_instance_->InitAsDefaultInstance();
  ReplyAllianceRaceWatchAd::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceWatchAdBC::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceReward::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceRewardBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceRaceReward::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceTakeGradeReward::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceTakeGradeRewardBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceRaceTakeGradeReward::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceTakeStageReward::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceTakeStageRewardBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceRaceTakeStageReward::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceRefreshStageReward::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceRefreshStageRewardBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceRaceRefreshStageReward::default_instance_->InitAsDefaultInstance();
  AllianceRaceMemberOrderLogItem::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceMemberOrderLog::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceMemberOrderLogBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceRaceMemberOrderLog::default_instance_->InitAsDefaultInstance();
  AllianceRacePersonOrderLogItem::default_instance_->InitAsDefaultInstance();
  RequestAllianceRacePersonOrderLog::default_instance_->InitAsDefaultInstance();
  RequestAllianceRacePersonOrderLogBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceRacePersonOrderLog::default_instance_->InitAsDefaultInstance();
  SetAllianceRaceGroupPointBC::default_instance_->InitAsDefaultInstance();
  AllianceRaceGroupMember::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceGroupMember::default_instance_->InitAsDefaultInstance();
  RequestAllianceRaceGroupMemberBC::default_instance_->InitAsDefaultInstance();
  ReplyAllianceRaceGroupMember::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoAlliance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoAlliance_2eproto {
  StaticDescriptorInitializer_ProtoAlliance_2eproto() {
    protobuf_AddDesc_ProtoAlliance_2eproto();
  }
} static_descriptor_initializer_ProtoAlliance_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AllianceCPP::kAllianceIdFieldNumber;
const int AllianceCPP::kNameFieldNumber;
const int AllianceCPP::kFlagFieldNumber;
const int AllianceCPP::kCreateUidFieldNumber;
const int AllianceCPP::kUsernameFieldNumber;
const int AllianceCPP::kCreateTimeFieldNumber;
const int AllianceCPP::kApplyTypeFieldNumber;
const int AllianceCPP::kApplyLevelLimitFieldNumber;
const int AllianceCPP::kDescriptionFieldNumber;
const int AllianceCPP::kQqgroupFieldNumber;
#endif  // !_MSC_VER

AllianceCPP::AllianceCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.AllianceCPP)
}

void AllianceCPP::InitAsDefaultInstance() {
}

AllianceCPP::AllianceCPP(const AllianceCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.AllianceCPP)
}

void AllianceCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  allianceid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0u;
  createuid_ = 0u;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_ = 0u;
  applytype_ = 0u;
  applylevellimit_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qqgroup_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceCPP::~AllianceCPP() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.AllianceCPP)
  SharedDtor();
}

void AllianceCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void AllianceCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceCPP_descriptor_;
}

const AllianceCPP& AllianceCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

AllianceCPP* AllianceCPP::default_instance_ = NULL;

AllianceCPP* AllianceCPP::New() const {
  return new AllianceCPP;
}

void AllianceCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllianceCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(allianceid_, flag_);
    ZR_(createuid_, applylevellimit_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    qqgroup_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.AllianceCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 allianceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // required uint32 flag = 3;
      case 3: {
        if (tag == 24) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_createUid;
        break;
      }

      // required uint32 createUid = 4;
      case 4: {
        if (tag == 32) {
         parse_createUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createuid_)));
          set_has_createuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_username;
        break;
      }

      // required bytes username = 5;
      case 5: {
        if (tag == 42) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_createTime;
        break;
      }

      // required uint32 createTime = 6;
      case 6: {
        if (tag == 48) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_applyType;
        break;
      }

      // required uint32 applyType = 7;
      case 7: {
        if (tag == 56) {
         parse_applyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applytype_)));
          set_has_applytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_applyLevelLimit;
        break;
      }

      // required uint32 applyLevelLimit = 8;
      case 8: {
        if (tag == 64) {
         parse_applyLevelLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applylevellimit_)));
          set_has_applylevellimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_description;
        break;
      }

      // optional bytes description = 9;
      case 9: {
        if (tag == 74) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_qqgroup;
        break;
      }

      // required uint32 qqgroup = 10;
      case 10: {
        if (tag == 80) {
         parse_qqgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qqgroup_)));
          set_has_qqgroup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.AllianceCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.AllianceCPP)
  return false;
#undef DO_
}

void AllianceCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.AllianceCPP)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->allianceid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag(), output);
  }

  // required uint32 createUid = 4;
  if (has_createuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createuid(), output);
  }

  // required bytes username = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->username(), output);
  }

  // required uint32 createTime = 6;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->createtime(), output);
  }

  // required uint32 applyType = 7;
  if (has_applytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->applytype(), output);
  }

  // required uint32 applyLevelLimit = 8;
  if (has_applylevellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->applylevellimit(), output);
  }

  // optional bytes description = 9;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->description(), output);
  }

  // required uint32 qqgroup = 10;
  if (has_qqgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->qqgroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.AllianceCPP)
}

::google::protobuf::uint8* AllianceCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.AllianceCPP)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->allianceid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required uint32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag(), target);
  }

  // required uint32 createUid = 4;
  if (has_createuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createuid(), target);
  }

  // required bytes username = 5;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->username(), target);
  }

  // required uint32 createTime = 6;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->createtime(), target);
  }

  // required uint32 applyType = 7;
  if (has_applytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->applytype(), target);
  }

  // required uint32 applyLevelLimit = 8;
  if (has_applylevellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->applylevellimit(), target);
  }

  // optional bytes description = 9;
  if (has_description()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->description(), target);
  }

  // required uint32 qqgroup = 10;
  if (has_qqgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->qqgroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.AllianceCPP)
  return target;
}

int AllianceCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 allianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // required uint32 createUid = 4;
    if (has_createuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createuid());
    }

    // required bytes username = 5;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // required uint32 createTime = 6;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // required uint32 applyType = 7;
    if (has_applytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applytype());
    }

    // required uint32 applyLevelLimit = 8;
    if (has_applylevellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applylevellimit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes description = 9;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }

    // required uint32 qqgroup = 10;
    if (has_qqgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qqgroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceCPP::MergeFrom(const AllianceCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_createuid()) {
      set_createuid(from.createuid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_applytype()) {
      set_applytype(from.applytype());
    }
    if (from.has_applylevellimit()) {
      set_applylevellimit(from.applylevellimit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_qqgroup()) {
      set_qqgroup(from.qqgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceCPP::CopyFrom(const AllianceCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x000002ff) != 0x000002ff) return false;

  return true;
}

void AllianceCPP::Swap(AllianceCPP* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(name_, other->name_);
    std::swap(flag_, other->flag_);
    std::swap(createuid_, other->createuid_);
    std::swap(username_, other->username_);
    std::swap(createtime_, other->createtime_);
    std::swap(applytype_, other->applytype_);
    std::swap(applylevellimit_, other->applylevellimit_);
    std::swap(description_, other->description_);
    std::swap(qqgroup_, other->qqgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceCPP_descriptor_;
  metadata.reflection = AllianceCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceMemberCPP::kMemberUidFieldNumber;
const int AllianceMemberCPP::kNameFieldNumber;
const int AllianceMemberCPP::kPositionFieldNumber;
const int AllianceMemberCPP::kAuthorityFieldNumber;
const int AllianceMemberCPP::kHelptimesFieldNumber;
const int AllianceMemberCPP::kOnlineTsFieldNumber;
const int AllianceMemberCPP::kHelpTsFieldNumber;
const int AllianceMemberCPP::kLevelFieldNumber;
const int AllianceMemberCPP::kFigFieldNumber;
const int AllianceMemberCPP::kJoinTsFieldNumber;
#endif  // !_MSC_VER

AllianceMemberCPP::AllianceMemberCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.AllianceMemberCPP)
}

void AllianceMemberCPP::InitAsDefaultInstance() {
}

AllianceMemberCPP::AllianceMemberCPP(const AllianceMemberCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.AllianceMemberCPP)
}

void AllianceMemberCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  memberuid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = 0u;
  authority_ = 0u;
  helptimes_ = 0u;
  onlinets_ = 0u;
  helpts_ = 0u;
  level_ = 0u;
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  joints_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceMemberCPP::~AllianceMemberCPP() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.AllianceMemberCPP)
  SharedDtor();
}

void AllianceMemberCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (this != default_instance_) {
  }
}

void AllianceMemberCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceMemberCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceMemberCPP_descriptor_;
}

const AllianceMemberCPP& AllianceMemberCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

AllianceMemberCPP* AllianceMemberCPP::default_instance_ = NULL;

AllianceMemberCPP* AllianceMemberCPP::New() const {
  return new AllianceMemberCPP;
}

void AllianceMemberCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllianceMemberCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(memberuid_, helpts_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    level_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
    joints_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceMemberCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.AllianceMemberCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 memberUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberuid_)));
          set_has_memberuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // required uint32 position = 3;
      case 3: {
        if (tag == 24) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_authority;
        break;
      }

      // required uint32 authority = 4;
      case 4: {
        if (tag == 32) {
         parse_authority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &authority_)));
          set_has_authority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_helptimes;
        break;
      }

      // required uint32 helptimes = 5;
      case 5: {
        if (tag == 40) {
         parse_helptimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &helptimes_)));
          set_has_helptimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_onlineTs;
        break;
      }

      // required uint32 onlineTs = 6;
      case 6: {
        if (tag == 48) {
         parse_onlineTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinets_)));
          set_has_onlinets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_helpTs;
        break;
      }

      // optional uint32 helpTs = 7;
      case 7: {
        if (tag == 56) {
         parse_helpTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &helpts_)));
          set_has_helpts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // required uint32 level = 8;
      case 8: {
        if (tag == 64) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_fig;
        break;
      }

      // optional bytes fig = 9;
      case 9: {
        if (tag == 74) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_joinTs;
        break;
      }

      // optional uint32 joinTs = 10;
      case 10: {
        if (tag == 80) {
         parse_joinTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joints_)));
          set_has_joints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.AllianceMemberCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.AllianceMemberCPP)
  return false;
#undef DO_
}

void AllianceMemberCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.AllianceMemberCPP)
  // required uint32 memberUid = 1;
  if (has_memberuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->memberuid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position(), output);
  }

  // required uint32 authority = 4;
  if (has_authority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->authority(), output);
  }

  // required uint32 helptimes = 5;
  if (has_helptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->helptimes(), output);
  }

  // required uint32 onlineTs = 6;
  if (has_onlinets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->onlinets(), output);
  }

  // optional uint32 helpTs = 7;
  if (has_helpts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->helpts(), output);
  }

  // required uint32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  // optional bytes fig = 9;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->fig(), output);
  }

  // optional uint32 joinTs = 10;
  if (has_joints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->joints(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.AllianceMemberCPP)
}

::google::protobuf::uint8* AllianceMemberCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.AllianceMemberCPP)
  // required uint32 memberUid = 1;
  if (has_memberuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->memberuid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required uint32 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position(), target);
  }

  // required uint32 authority = 4;
  if (has_authority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->authority(), target);
  }

  // required uint32 helptimes = 5;
  if (has_helptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->helptimes(), target);
  }

  // required uint32 onlineTs = 6;
  if (has_onlinets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->onlinets(), target);
  }

  // optional uint32 helpTs = 7;
  if (has_helpts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->helpts(), target);
  }

  // required uint32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }

  // optional bytes fig = 9;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->fig(), target);
  }

  // optional uint32 joinTs = 10;
  if (has_joints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->joints(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.AllianceMemberCPP)
  return target;
}

int AllianceMemberCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 memberUid = 1;
    if (has_memberuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberuid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint32 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // required uint32 authority = 4;
    if (has_authority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->authority());
    }

    // required uint32 helptimes = 5;
    if (has_helptimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->helptimes());
    }

    // required uint32 onlineTs = 6;
    if (has_onlinets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinets());
    }

    // optional uint32 helpTs = 7;
    if (has_helpts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->helpts());
    }

    // required uint32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes fig = 9;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }

    // optional uint32 joinTs = 10;
    if (has_joints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joints());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceMemberCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceMemberCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceMemberCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceMemberCPP::MergeFrom(const AllianceMemberCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberuid()) {
      set_memberuid(from.memberuid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_authority()) {
      set_authority(from.authority());
    }
    if (from.has_helptimes()) {
      set_helptimes(from.helptimes());
    }
    if (from.has_onlinets()) {
      set_onlinets(from.onlinets());
    }
    if (from.has_helpts()) {
      set_helpts(from.helpts());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fig()) {
      set_fig(from.fig());
    }
    if (from.has_joints()) {
      set_joints(from.joints());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceMemberCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceMemberCPP::CopyFrom(const AllianceMemberCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceMemberCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000bd) != 0x000000bd) return false;

  return true;
}

void AllianceMemberCPP::Swap(AllianceMemberCPP* other) {
  if (other != this) {
    std::swap(memberuid_, other->memberuid_);
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(authority_, other->authority_);
    std::swap(helptimes_, other->helptimes_);
    std::swap(onlinets_, other->onlinets_);
    std::swap(helpts_, other->helpts_);
    std::swap(level_, other->level_);
    std::swap(fig_, other->fig_);
    std::swap(joints_, other->joints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceMemberCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceMemberCPP_descriptor_;
  metadata.reflection = AllianceMemberCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceApplyCPP::kApplyUidFieldNumber;
const int AllianceApplyCPP::kNameFieldNumber;
const int AllianceApplyCPP::kReasonFieldNumber;
const int AllianceApplyCPP::kApplytsFieldNumber;
#endif  // !_MSC_VER

AllianceApplyCPP::AllianceApplyCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.AllianceApplyCPP)
}

void AllianceApplyCPP::InitAsDefaultInstance() {
}

AllianceApplyCPP::AllianceApplyCPP(const AllianceApplyCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.AllianceApplyCPP)
}

void AllianceApplyCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  applyuid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applyts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceApplyCPP::~AllianceApplyCPP() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.AllianceApplyCPP)
  SharedDtor();
}

void AllianceApplyCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void AllianceApplyCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceApplyCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceApplyCPP_descriptor_;
}

const AllianceApplyCPP& AllianceApplyCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

AllianceApplyCPP* AllianceApplyCPP::default_instance_ = NULL;

AllianceApplyCPP* AllianceApplyCPP::New() const {
  return new AllianceApplyCPP;
}

void AllianceApplyCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllianceApplyCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(applyuid_, applyts_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceApplyCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.AllianceApplyCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 applyUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applyuid_)));
          set_has_applyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // required bytes reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_applyts;
        break;
      }

      // required uint32 applyts = 4;
      case 4: {
        if (tag == 32) {
         parse_applyts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applyts_)));
          set_has_applyts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.AllianceApplyCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.AllianceApplyCPP)
  return false;
#undef DO_
}

void AllianceApplyCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.AllianceApplyCPP)
  // required uint32 applyUid = 1;
  if (has_applyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->applyuid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required bytes reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->reason(), output);
  }

  // required uint32 applyts = 4;
  if (has_applyts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->applyts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.AllianceApplyCPP)
}

::google::protobuf::uint8* AllianceApplyCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.AllianceApplyCPP)
  // required uint32 applyUid = 1;
  if (has_applyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->applyuid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes reason = 3;
  if (has_reason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->reason(), target);
  }

  // required uint32 applyts = 4;
  if (has_applyts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->applyts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.AllianceApplyCPP)
  return target;
}

int AllianceApplyCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 applyUid = 1;
    if (has_applyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applyuid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reason());
    }

    // required uint32 applyts = 4;
    if (has_applyts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applyts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceApplyCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceApplyCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceApplyCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceApplyCPP::MergeFrom(const AllianceApplyCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applyuid()) {
      set_applyuid(from.applyuid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_applyts()) {
      set_applyts(from.applyts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceApplyCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceApplyCPP::CopyFrom(const AllianceApplyCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceApplyCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void AllianceApplyCPP::Swap(AllianceApplyCPP* other) {
  if (other != this) {
    std::swap(applyuid_, other->applyuid_);
    std::swap(name_, other->name_);
    std::swap(reason_, other->reason_);
    std::swap(applyts_, other->applyts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceApplyCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceApplyCPP_descriptor_;
  metadata.reflection = AllianceApplyCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceInvitedCPP::kInviteUidFieldNumber;
const int AllianceInvitedCPP::kAllianceIdFieldNumber;
const int AllianceInvitedCPP::kAllianceNameFieldNumber;
const int AllianceInvitedCPP::kFlagFieldNumber;
const int AllianceInvitedCPP::kInviteNameFieldNumber;
const int AllianceInvitedCPP::kInvitetsFieldNumber;
#endif  // !_MSC_VER

AllianceInvitedCPP::AllianceInvitedCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.AllianceInvitedCPP)
}

void AllianceInvitedCPP::InitAsDefaultInstance() {
}

AllianceInvitedCPP::AllianceInvitedCPP(const AllianceInvitedCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.AllianceInvitedCPP)
}

void AllianceInvitedCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  inviteuid_ = 0u;
  allianceid_ = 0u;
  alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0u;
  invitename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitets_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceInvitedCPP::~AllianceInvitedCPP() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.AllianceInvitedCPP)
  SharedDtor();
}

void AllianceInvitedCPP::SharedDtor() {
  if (alliancename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alliancename_;
  }
  if (invitename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitename_;
  }
  if (this != default_instance_) {
  }
}

void AllianceInvitedCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceInvitedCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceInvitedCPP_descriptor_;
}

const AllianceInvitedCPP& AllianceInvitedCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

AllianceInvitedCPP* AllianceInvitedCPP::default_instance_ = NULL;

AllianceInvitedCPP* AllianceInvitedCPP::New() const {
  return new AllianceInvitedCPP;
}

void AllianceInvitedCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllianceInvitedCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(inviteuid_, allianceid_);
    ZR_(flag_, invitets_);
    if (has_alliancename()) {
      if (alliancename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alliancename_->clear();
      }
    }
    if (has_invitename()) {
      if (invitename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invitename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceInvitedCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.AllianceInvitedCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 inviteUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviteuid_)));
          set_has_inviteuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_allianceId;
        break;
      }

      // required uint32 allianceId = 2;
      case 2: {
        if (tag == 16) {
         parse_allianceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_allianceName;
        break;
      }

      // required bytes allianceName = 4;
      case 4: {
        if (tag == 34) {
         parse_allianceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_alliancename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flag;
        break;
      }

      // required uint32 flag = 5;
      case 5: {
        if (tag == 40) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_inviteName;
        break;
      }

      // required bytes inviteName = 6;
      case 6: {
        if (tag == 50) {
         parse_inviteName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_invitename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_invitets;
        break;
      }

      // required uint32 invitets = 7;
      case 7: {
        if (tag == 56) {
         parse_invitets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invitets_)));
          set_has_invitets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.AllianceInvitedCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.AllianceInvitedCPP)
  return false;
#undef DO_
}

void AllianceInvitedCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.AllianceInvitedCPP)
  // required uint32 inviteUid = 1;
  if (has_inviteuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inviteuid(), output);
  }

  // required uint32 allianceId = 2;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->allianceid(), output);
  }

  // required bytes allianceName = 4;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->alliancename(), output);
  }

  // required uint32 flag = 5;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flag(), output);
  }

  // required bytes inviteName = 6;
  if (has_invitename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->invitename(), output);
  }

  // required uint32 invitets = 7;
  if (has_invitets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->invitets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.AllianceInvitedCPP)
}

::google::protobuf::uint8* AllianceInvitedCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.AllianceInvitedCPP)
  // required uint32 inviteUid = 1;
  if (has_inviteuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inviteuid(), target);
  }

  // required uint32 allianceId = 2;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->allianceid(), target);
  }

  // required bytes allianceName = 4;
  if (has_alliancename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->alliancename(), target);
  }

  // required uint32 flag = 5;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flag(), target);
  }

  // required bytes inviteName = 6;
  if (has_invitename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->invitename(), target);
  }

  // required uint32 invitets = 7;
  if (has_invitets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->invitets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.AllianceInvitedCPP)
  return target;
}

int AllianceInvitedCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 inviteUid = 1;
    if (has_inviteuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviteuid());
    }

    // required uint32 allianceId = 2;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

    // required bytes allianceName = 4;
    if (has_alliancename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->alliancename());
    }

    // required uint32 flag = 5;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // required bytes inviteName = 6;
    if (has_invitename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->invitename());
    }

    // required uint32 invitets = 7;
    if (has_invitets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invitets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceInvitedCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceInvitedCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceInvitedCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceInvitedCPP::MergeFrom(const AllianceInvitedCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviteuid()) {
      set_inviteuid(from.inviteuid());
    }
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_alliancename()) {
      set_alliancename(from.alliancename());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_invitename()) {
      set_invitename(from.invitename());
    }
    if (from.has_invitets()) {
      set_invitets(from.invitets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceInvitedCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceInvitedCPP::CopyFrom(const AllianceInvitedCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceInvitedCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void AllianceInvitedCPP::Swap(AllianceInvitedCPP* other) {
  if (other != this) {
    std::swap(inviteuid_, other->inviteuid_);
    std::swap(allianceid_, other->allianceid_);
    std::swap(alliancename_, other->alliancename_);
    std::swap(flag_, other->flag_);
    std::swap(invitename_, other->invitename_);
    std::swap(invitets_, other->invitets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceInvitedCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceInvitedCPP_descriptor_;
  metadata.reflection = AllianceInvitedCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckNameAvailableReq::kNameFieldNumber;
#endif  // !_MSC_VER

CheckNameAvailableReq::CheckNameAvailableReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.CheckNameAvailableReq)
}

void CheckNameAvailableReq::InitAsDefaultInstance() {
}

CheckNameAvailableReq::CheckNameAvailableReq(const CheckNameAvailableReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.CheckNameAvailableReq)
}

void CheckNameAvailableReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckNameAvailableReq::~CheckNameAvailableReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.CheckNameAvailableReq)
  SharedDtor();
}

void CheckNameAvailableReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CheckNameAvailableReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckNameAvailableReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckNameAvailableReq_descriptor_;
}

const CheckNameAvailableReq& CheckNameAvailableReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

CheckNameAvailableReq* CheckNameAvailableReq::default_instance_ = NULL;

CheckNameAvailableReq* CheckNameAvailableReq::New() const {
  return new CheckNameAvailableReq;
}

void CheckNameAvailableReq::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckNameAvailableReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.CheckNameAvailableReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.CheckNameAvailableReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.CheckNameAvailableReq)
  return false;
#undef DO_
}

void CheckNameAvailableReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.CheckNameAvailableReq)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.CheckNameAvailableReq)
}

::google::protobuf::uint8* CheckNameAvailableReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.CheckNameAvailableReq)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.CheckNameAvailableReq)
  return target;
}

int CheckNameAvailableReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckNameAvailableReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckNameAvailableReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckNameAvailableReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckNameAvailableReq::MergeFrom(const CheckNameAvailableReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckNameAvailableReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckNameAvailableReq::CopyFrom(const CheckNameAvailableReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNameAvailableReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CheckNameAvailableReq::Swap(CheckNameAvailableReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckNameAvailableReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckNameAvailableReq_descriptor_;
  metadata.reflection = CheckNameAvailableReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckNameAvailableResp::kNameFieldNumber;
const int CheckNameAvailableResp::kIsAvailableFieldNumber;
const int CheckNameAvailableResp::kReasonFieldNumber;
#endif  // !_MSC_VER

CheckNameAvailableResp::CheckNameAvailableResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.CheckNameAvailableResp)
}

void CheckNameAvailableResp::InitAsDefaultInstance() {
}

CheckNameAvailableResp::CheckNameAvailableResp(const CheckNameAvailableResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.CheckNameAvailableResp)
}

void CheckNameAvailableResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isavailable_ = false;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckNameAvailableResp::~CheckNameAvailableResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.CheckNameAvailableResp)
  SharedDtor();
}

void CheckNameAvailableResp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void CheckNameAvailableResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckNameAvailableResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckNameAvailableResp_descriptor_;
}

const CheckNameAvailableResp& CheckNameAvailableResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

CheckNameAvailableResp* CheckNameAvailableResp::default_instance_ = NULL;

CheckNameAvailableResp* CheckNameAvailableResp::New() const {
  return new CheckNameAvailableResp;
}

void CheckNameAvailableResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    isavailable_ = false;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckNameAvailableResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.CheckNameAvailableResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isAvailable;
        break;
      }

      // required bool isAvailable = 2;
      case 2: {
        if (tag == 16) {
         parse_isAvailable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isavailable_)));
          set_has_isavailable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // optional bytes reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.CheckNameAvailableResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.CheckNameAvailableResp)
  return false;
#undef DO_
}

void CheckNameAvailableResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.CheckNameAvailableResp)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // required bool isAvailable = 2;
  if (has_isavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isavailable(), output);
  }

  // optional bytes reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.CheckNameAvailableResp)
}

::google::protobuf::uint8* CheckNameAvailableResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.CheckNameAvailableResp)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // required bool isAvailable = 2;
  if (has_isavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isavailable(), target);
  }

  // optional bytes reason = 3;
  if (has_reason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.CheckNameAvailableResp)
  return target;
}

int CheckNameAvailableResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bool isAvailable = 2;
    if (has_isavailable()) {
      total_size += 1 + 1;
    }

    // optional bytes reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckNameAvailableResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckNameAvailableResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckNameAvailableResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckNameAvailableResp::MergeFrom(const CheckNameAvailableResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_isavailable()) {
      set_isavailable(from.isavailable());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckNameAvailableResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckNameAvailableResp::CopyFrom(const CheckNameAvailableResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckNameAvailableResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CheckNameAvailableResp::Swap(CheckNameAvailableResp* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(isavailable_, other->isavailable_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckNameAvailableResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckNameAvailableResp_descriptor_;
  metadata.reflection = CheckNameAvailableResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateAllianceReq::kFlagFieldNumber;
const int CreateAllianceReq::kNameFieldNumber;
const int CreateAllianceReq::kDescriptionFieldNumber;
const int CreateAllianceReq::kApplyTypeFieldNumber;
const int CreateAllianceReq::kApplyLevelLimitFieldNumber;
#endif  // !_MSC_VER

CreateAllianceReq::CreateAllianceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.CreateAllianceReq)
}

void CreateAllianceReq::InitAsDefaultInstance() {
}

CreateAllianceReq::CreateAllianceReq(const CreateAllianceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.CreateAllianceReq)
}

void CreateAllianceReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  flag_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applytype_ = 0u;
  applylevellimit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateAllianceReq::~CreateAllianceReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.CreateAllianceReq)
  SharedDtor();
}

void CreateAllianceReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void CreateAllianceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAllianceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateAllianceReq_descriptor_;
}

const CreateAllianceReq& CreateAllianceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

CreateAllianceReq* CreateAllianceReq::default_instance_ = NULL;

CreateAllianceReq* CreateAllianceReq::New() const {
  return new CreateAllianceReq;
}

void CreateAllianceReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateAllianceReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(flag_, applytype_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    applylevellimit_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateAllianceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.CreateAllianceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // required bytes description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_applyType;
        break;
      }

      // required uint32 applyType = 4;
      case 4: {
        if (tag == 32) {
         parse_applyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applytype_)));
          set_has_applytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_applyLevelLimit;
        break;
      }

      // required uint32 applyLevelLimit = 5;
      case 5: {
        if (tag == 40) {
         parse_applyLevelLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applylevellimit_)));
          set_has_applylevellimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.CreateAllianceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.CreateAllianceReq)
  return false;
#undef DO_
}

void CreateAllianceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.CreateAllianceReq)
  // required uint32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required bytes description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->description(), output);
  }

  // required uint32 applyType = 4;
  if (has_applytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->applytype(), output);
  }

  // required uint32 applyLevelLimit = 5;
  if (has_applylevellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->applylevellimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.CreateAllianceReq)
}

::google::protobuf::uint8* CreateAllianceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.CreateAllianceReq)
  // required uint32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes description = 3;
  if (has_description()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->description(), target);
  }

  // required uint32 applyType = 4;
  if (has_applytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->applytype(), target);
  }

  // required uint32 applyLevelLimit = 5;
  if (has_applylevellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->applylevellimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.CreateAllianceReq)
  return target;
}

int CreateAllianceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }

    // required uint32 applyType = 4;
    if (has_applytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applytype());
    }

    // required uint32 applyLevelLimit = 5;
    if (has_applylevellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applylevellimit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAllianceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateAllianceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateAllianceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateAllianceReq::MergeFrom(const CreateAllianceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_applytype()) {
      set_applytype(from.applytype());
    }
    if (from.has_applylevellimit()) {
      set_applylevellimit(from.applylevellimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateAllianceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAllianceReq::CopyFrom(const CreateAllianceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAllianceReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CreateAllianceReq::Swap(CreateAllianceReq* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(applytype_, other->applytype_);
    std::swap(applylevellimit_, other->applylevellimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateAllianceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateAllianceReq_descriptor_;
  metadata.reflection = CreateAllianceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateAllianceResp::kAllianceFieldNumber;
const int CreateAllianceResp::kMemberFieldNumber;
const int CreateAllianceResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

CreateAllianceResp::CreateAllianceResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.CreateAllianceResp)
}

void CreateAllianceResp::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::AllianceCPP*>(&::ProtoAlliance::AllianceCPP::default_instance());
  member_ = const_cast< ::ProtoAlliance::AllianceMemberCPP*>(&::ProtoAlliance::AllianceMemberCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

CreateAllianceResp::CreateAllianceResp(const CreateAllianceResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.CreateAllianceResp)
}

void CreateAllianceResp::SharedCtor() {
  _cached_size_ = 0;
  alliance_ = NULL;
  member_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateAllianceResp::~CreateAllianceResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.CreateAllianceResp)
  SharedDtor();
}

void CreateAllianceResp::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
    delete member_;
    delete commons_;
  }
}

void CreateAllianceResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAllianceResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateAllianceResp_descriptor_;
}

const CreateAllianceResp& CreateAllianceResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

CreateAllianceResp* CreateAllianceResp::default_instance_ = NULL;

CreateAllianceResp* CreateAllianceResp::New() const {
  return new CreateAllianceResp;
}

void CreateAllianceResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::AllianceCPP::Clear();
    }
    if (has_member()) {
      if (member_ != NULL) member_->::ProtoAlliance::AllianceMemberCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateAllianceResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.CreateAllianceResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoAlliance.AllianceCPP alliance = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_member;
        break;
      }

      // required .ProtoAlliance.AllianceMemberCPP member = 2;
      case 2: {
        if (tag == 18) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.CreateAllianceResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.CreateAllianceResp)
  return false;
#undef DO_
}

void CreateAllianceResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.CreateAllianceResp)
  // required .ProtoAlliance.AllianceCPP alliance = 1;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliance(), output);
  }

  // required .ProtoAlliance.AllianceMemberCPP member = 2;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.CreateAllianceResp)
}

::google::protobuf::uint8* CreateAllianceResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.CreateAllianceResp)
  // required .ProtoAlliance.AllianceCPP alliance = 1;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliance(), target);
  }

  // required .ProtoAlliance.AllianceMemberCPP member = 2;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.CreateAllianceResp)
  return target;
}

int CreateAllianceResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoAlliance.AllianceCPP alliance = 1;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

    // required .ProtoAlliance.AllianceMemberCPP member = 2;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

    // required .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAllianceResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateAllianceResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateAllianceResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateAllianceResp::MergeFrom(const CreateAllianceResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::AllianceCPP::MergeFrom(from.alliance());
    }
    if (from.has_member()) {
      mutable_member()->::ProtoAlliance::AllianceMemberCPP::MergeFrom(from.member());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateAllianceResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAllianceResp::CopyFrom(const CreateAllianceResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAllianceResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  if (has_member()) {
    if (!this->member().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void CreateAllianceResp::Swap(CreateAllianceResp* other) {
  if (other != this) {
    std::swap(alliance_, other->alliance_);
    std::swap(member_, other->member_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateAllianceResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateAllianceResp_descriptor_;
  metadata.reflection = CreateAllianceResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RecommendllianceReq::RecommendllianceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RecommendllianceReq)
}

void RecommendllianceReq::InitAsDefaultInstance() {
}

RecommendllianceReq::RecommendllianceReq(const RecommendllianceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RecommendllianceReq)
}

void RecommendllianceReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecommendllianceReq::~RecommendllianceReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RecommendllianceReq)
  SharedDtor();
}

void RecommendllianceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecommendllianceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecommendllianceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecommendllianceReq_descriptor_;
}

const RecommendllianceReq& RecommendllianceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RecommendllianceReq* RecommendllianceReq::default_instance_ = NULL;

RecommendllianceReq* RecommendllianceReq::New() const {
  return new RecommendllianceReq;
}

void RecommendllianceReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecommendllianceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RecommendllianceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RecommendllianceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RecommendllianceReq)
  return false;
#undef DO_
}

void RecommendllianceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RecommendllianceReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RecommendllianceReq)
}

::google::protobuf::uint8* RecommendllianceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RecommendllianceReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RecommendllianceReq)
  return target;
}

int RecommendllianceReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecommendllianceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecommendllianceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecommendllianceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecommendllianceReq::MergeFrom(const RecommendllianceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecommendllianceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecommendllianceReq::CopyFrom(const RecommendllianceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecommendllianceReq::IsInitialized() const {

  return true;
}

void RecommendllianceReq::Swap(RecommendllianceReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecommendllianceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecommendllianceReq_descriptor_;
  metadata.reflection = RecommendllianceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartAllianceCPP::kAllianceIdFieldNumber;
const int PartAllianceCPP::kNameFieldNumber;
const int PartAllianceCPP::kFlagFieldNumber;
const int PartAllianceCPP::kApplyTypeFieldNumber;
const int PartAllianceCPP::kApplyLevelLimitFieldNumber;
const int PartAllianceCPP::kMemberCountFieldNumber;
const int PartAllianceCPP::kDescriptionFieldNumber;
const int PartAllianceCPP::kOnlineNumFieldNumber;
#endif  // !_MSC_VER

PartAllianceCPP::PartAllianceCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.PartAllianceCPP)
}

void PartAllianceCPP::InitAsDefaultInstance() {
}

PartAllianceCPP::PartAllianceCPP(const PartAllianceCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.PartAllianceCPP)
}

void PartAllianceCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  allianceid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0u;
  applytype_ = 0u;
  applylevellimit_ = 0u;
  membercount_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onlinenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartAllianceCPP::~PartAllianceCPP() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.PartAllianceCPP)
  SharedDtor();
}

void PartAllianceCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void PartAllianceCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartAllianceCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartAllianceCPP_descriptor_;
}

const PartAllianceCPP& PartAllianceCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

PartAllianceCPP* PartAllianceCPP::default_instance_ = NULL;

PartAllianceCPP* PartAllianceCPP::New() const {
  return new PartAllianceCPP;
}

void PartAllianceCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PartAllianceCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(allianceid_, applylevellimit_);
    ZR_(membercount_, onlinenum_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartAllianceCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.PartAllianceCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 allianceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // required uint32 flag = 3;
      case 3: {
        if (tag == 24) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_applyType;
        break;
      }

      // required uint32 applyType = 4;
      case 4: {
        if (tag == 32) {
         parse_applyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applytype_)));
          set_has_applytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_applyLevelLimit;
        break;
      }

      // required uint32 applyLevelLimit = 5;
      case 5: {
        if (tag == 40) {
         parse_applyLevelLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applylevellimit_)));
          set_has_applylevellimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_memberCount;
        break;
      }

      // required uint32 memberCount = 6;
      case 6: {
        if (tag == 48) {
         parse_memberCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
          set_has_membercount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_description;
        break;
      }

      // optional bytes description = 7;
      case 7: {
        if (tag == 58) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_onlineNum;
        break;
      }

      // optional uint32 onlineNum = 8;
      case 8: {
        if (tag == 64) {
         parse_onlineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinenum_)));
          set_has_onlinenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.PartAllianceCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.PartAllianceCPP)
  return false;
#undef DO_
}

void PartAllianceCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.PartAllianceCPP)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->allianceid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag(), output);
  }

  // required uint32 applyType = 4;
  if (has_applytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->applytype(), output);
  }

  // required uint32 applyLevelLimit = 5;
  if (has_applylevellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->applylevellimit(), output);
  }

  // required uint32 memberCount = 6;
  if (has_membercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->membercount(), output);
  }

  // optional bytes description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->description(), output);
  }

  // optional uint32 onlineNum = 8;
  if (has_onlinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->onlinenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.PartAllianceCPP)
}

::google::protobuf::uint8* PartAllianceCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.PartAllianceCPP)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->allianceid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required uint32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag(), target);
  }

  // required uint32 applyType = 4;
  if (has_applytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->applytype(), target);
  }

  // required uint32 applyLevelLimit = 5;
  if (has_applylevellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->applylevellimit(), target);
  }

  // required uint32 memberCount = 6;
  if (has_membercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->membercount(), target);
  }

  // optional bytes description = 7;
  if (has_description()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->description(), target);
  }

  // optional uint32 onlineNum = 8;
  if (has_onlinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->onlinenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.PartAllianceCPP)
  return target;
}

int PartAllianceCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 allianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // required uint32 applyType = 4;
    if (has_applytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applytype());
    }

    // required uint32 applyLevelLimit = 5;
    if (has_applylevellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applylevellimit());
    }

    // required uint32 memberCount = 6;
    if (has_membercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->membercount());
    }

    // optional bytes description = 7;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }

    // optional uint32 onlineNum = 8;
    if (has_onlinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartAllianceCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartAllianceCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartAllianceCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartAllianceCPP::MergeFrom(const PartAllianceCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_applytype()) {
      set_applytype(from.applytype());
    }
    if (from.has_applylevellimit()) {
      set_applylevellimit(from.applylevellimit());
    }
    if (from.has_membercount()) {
      set_membercount(from.membercount());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_onlinenum()) {
      set_onlinenum(from.onlinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartAllianceCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartAllianceCPP::CopyFrom(const PartAllianceCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartAllianceCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PartAllianceCPP::Swap(PartAllianceCPP* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(name_, other->name_);
    std::swap(flag_, other->flag_);
    std::swap(applytype_, other->applytype_);
    std::swap(applylevellimit_, other->applylevellimit_);
    std::swap(membercount_, other->membercount_);
    std::swap(description_, other->description_);
    std::swap(onlinenum_, other->onlinenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartAllianceCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartAllianceCPP_descriptor_;
  metadata.reflection = PartAllianceCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecommendllianceResp::kAllianceBriefFieldNumber;
#endif  // !_MSC_VER

RecommendllianceResp::RecommendllianceResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RecommendllianceResp)
}

void RecommendllianceResp::InitAsDefaultInstance() {
}

RecommendllianceResp::RecommendllianceResp(const RecommendllianceResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RecommendllianceResp)
}

void RecommendllianceResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecommendllianceResp::~RecommendllianceResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RecommendllianceResp)
  SharedDtor();
}

void RecommendllianceResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecommendllianceResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecommendllianceResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecommendllianceResp_descriptor_;
}

const RecommendllianceResp& RecommendllianceResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RecommendllianceResp* RecommendllianceResp::default_instance_ = NULL;

RecommendllianceResp* RecommendllianceResp::New() const {
  return new RecommendllianceResp;
}

void RecommendllianceResp::Clear() {
  alliancebrief_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecommendllianceResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RecommendllianceResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoAlliance.PartAllianceCPP allianceBrief = 1;
      case 1: {
        if (tag == 10) {
         parse_allianceBrief:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alliancebrief()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_allianceBrief;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RecommendllianceResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RecommendllianceResp)
  return false;
#undef DO_
}

void RecommendllianceResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RecommendllianceResp)
  // repeated .ProtoAlliance.PartAllianceCPP allianceBrief = 1;
  for (int i = 0; i < this->alliancebrief_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliancebrief(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RecommendllianceResp)
}

::google::protobuf::uint8* RecommendllianceResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RecommendllianceResp)
  // repeated .ProtoAlliance.PartAllianceCPP allianceBrief = 1;
  for (int i = 0; i < this->alliancebrief_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliancebrief(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RecommendllianceResp)
  return target;
}

int RecommendllianceResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoAlliance.PartAllianceCPP allianceBrief = 1;
  total_size += 1 * this->alliancebrief_size();
  for (int i = 0; i < this->alliancebrief_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alliancebrief(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecommendllianceResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecommendllianceResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecommendllianceResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecommendllianceResp::MergeFrom(const RecommendllianceResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  alliancebrief_.MergeFrom(from.alliancebrief_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecommendllianceResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecommendllianceResp::CopyFrom(const RecommendllianceResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecommendllianceResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->alliancebrief())) return false;
  return true;
}

void RecommendllianceResp::Swap(RecommendllianceResp* other) {
  if (other != this) {
    alliancebrief_.Swap(&other->alliancebrief_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecommendllianceResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecommendllianceResp_descriptor_;
  metadata.reflection = RecommendllianceResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPartAllianceInfoReq::kAllianceIdFieldNumber;
#endif  // !_MSC_VER

GetPartAllianceInfoReq::GetPartAllianceInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.GetPartAllianceInfoReq)
}

void GetPartAllianceInfoReq::InitAsDefaultInstance() {
}

GetPartAllianceInfoReq::GetPartAllianceInfoReq(const GetPartAllianceInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.GetPartAllianceInfoReq)
}

void GetPartAllianceInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPartAllianceInfoReq::~GetPartAllianceInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.GetPartAllianceInfoReq)
  SharedDtor();
}

void GetPartAllianceInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPartAllianceInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPartAllianceInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPartAllianceInfoReq_descriptor_;
}

const GetPartAllianceInfoReq& GetPartAllianceInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

GetPartAllianceInfoReq* GetPartAllianceInfoReq::default_instance_ = NULL;

GetPartAllianceInfoReq* GetPartAllianceInfoReq::New() const {
  return new GetPartAllianceInfoReq;
}

void GetPartAllianceInfoReq::Clear() {
  allianceid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPartAllianceInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.GetPartAllianceInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 allianceId = 1;
      case 1: {
        if (tag == 8) {
         parse_allianceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_allianceid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_allianceid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_allianceId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.GetPartAllianceInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.GetPartAllianceInfoReq)
  return false;
#undef DO_
}

void GetPartAllianceInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.GetPartAllianceInfoReq)
  // repeated uint32 allianceId = 1;
  for (int i = 0; i < this->allianceid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->allianceid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.GetPartAllianceInfoReq)
}

::google::protobuf::uint8* GetPartAllianceInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.GetPartAllianceInfoReq)
  // repeated uint32 allianceId = 1;
  for (int i = 0; i < this->allianceid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->allianceid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.GetPartAllianceInfoReq)
  return target;
}

int GetPartAllianceInfoReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 allianceId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->allianceid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->allianceid(i));
    }
    total_size += 1 * this->allianceid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPartAllianceInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPartAllianceInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPartAllianceInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPartAllianceInfoReq::MergeFrom(const GetPartAllianceInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  allianceid_.MergeFrom(from.allianceid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPartAllianceInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPartAllianceInfoReq::CopyFrom(const GetPartAllianceInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPartAllianceInfoReq::IsInitialized() const {

  return true;
}

void GetPartAllianceInfoReq::Swap(GetPartAllianceInfoReq* other) {
  if (other != this) {
    allianceid_.Swap(&other->allianceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPartAllianceInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPartAllianceInfoReq_descriptor_;
  metadata.reflection = GetPartAllianceInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPartAllianceInfoResp::kAllianceBriefFieldNumber;
#endif  // !_MSC_VER

GetPartAllianceInfoResp::GetPartAllianceInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.GetPartAllianceInfoResp)
}

void GetPartAllianceInfoResp::InitAsDefaultInstance() {
}

GetPartAllianceInfoResp::GetPartAllianceInfoResp(const GetPartAllianceInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.GetPartAllianceInfoResp)
}

void GetPartAllianceInfoResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPartAllianceInfoResp::~GetPartAllianceInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.GetPartAllianceInfoResp)
  SharedDtor();
}

void GetPartAllianceInfoResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPartAllianceInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPartAllianceInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPartAllianceInfoResp_descriptor_;
}

const GetPartAllianceInfoResp& GetPartAllianceInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

GetPartAllianceInfoResp* GetPartAllianceInfoResp::default_instance_ = NULL;

GetPartAllianceInfoResp* GetPartAllianceInfoResp::New() const {
  return new GetPartAllianceInfoResp;
}

void GetPartAllianceInfoResp::Clear() {
  alliancebrief_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPartAllianceInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.GetPartAllianceInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoAlliance.PartAllianceCPP allianceBrief = 1;
      case 1: {
        if (tag == 10) {
         parse_allianceBrief:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alliancebrief()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_allianceBrief;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.GetPartAllianceInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.GetPartAllianceInfoResp)
  return false;
#undef DO_
}

void GetPartAllianceInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.GetPartAllianceInfoResp)
  // repeated .ProtoAlliance.PartAllianceCPP allianceBrief = 1;
  for (int i = 0; i < this->alliancebrief_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliancebrief(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.GetPartAllianceInfoResp)
}

::google::protobuf::uint8* GetPartAllianceInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.GetPartAllianceInfoResp)
  // repeated .ProtoAlliance.PartAllianceCPP allianceBrief = 1;
  for (int i = 0; i < this->alliancebrief_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliancebrief(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.GetPartAllianceInfoResp)
  return target;
}

int GetPartAllianceInfoResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoAlliance.PartAllianceCPP allianceBrief = 1;
  total_size += 1 * this->alliancebrief_size();
  for (int i = 0; i < this->alliancebrief_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alliancebrief(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPartAllianceInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPartAllianceInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPartAllianceInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPartAllianceInfoResp::MergeFrom(const GetPartAllianceInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  alliancebrief_.MergeFrom(from.alliancebrief_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPartAllianceInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPartAllianceInfoResp::CopyFrom(const GetPartAllianceInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPartAllianceInfoResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->alliancebrief())) return false;
  return true;
}

void GetPartAllianceInfoResp::Swap(GetPartAllianceInfoResp* other) {
  if (other != this) {
    alliancebrief_.Swap(&other->alliancebrief_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPartAllianceInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPartAllianceInfoResp_descriptor_;
  metadata.reflection = GetPartAllianceInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinReq::kAllianceIdFieldNumber;
const int ApplyJoinReq::kReasonFieldNumber;
#endif  // !_MSC_VER

ApplyJoinReq::ApplyJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ApplyJoinReq)
}

void ApplyJoinReq::InitAsDefaultInstance() {
}

ApplyJoinReq::ApplyJoinReq(const ApplyJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ApplyJoinReq)
}

void ApplyJoinReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  allianceid_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinReq::~ApplyJoinReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ApplyJoinReq)
  SharedDtor();
}

void ApplyJoinReq::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void ApplyJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinReq_descriptor_;
}

const ApplyJoinReq& ApplyJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ApplyJoinReq* ApplyJoinReq::default_instance_ = NULL;

ApplyJoinReq* ApplyJoinReq::New() const {
  return new ApplyJoinReq;
}

void ApplyJoinReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    allianceid_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ApplyJoinReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 allianceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // required bytes reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ApplyJoinReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ApplyJoinReq)
  return false;
#undef DO_
}

void ApplyJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ApplyJoinReq)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->allianceid(), output);
  }

  // required bytes reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ApplyJoinReq)
}

::google::protobuf::uint8* ApplyJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ApplyJoinReq)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->allianceid(), target);
  }

  // required bytes reason = 2;
  if (has_reason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ApplyJoinReq)
  return target;
}

int ApplyJoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 allianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

    // required bytes reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinReq::MergeFrom(const ApplyJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinReq::CopyFrom(const ApplyJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ApplyJoinReq::Swap(ApplyJoinReq* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinReq_descriptor_;
  metadata.reflection = ApplyJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestApplyJoinBC::kAllianceIdFieldNumber;
const int RequestApplyJoinBC::kReasonFieldNumber;
const int RequestApplyJoinBC::kMemberFieldNumber;
#endif  // !_MSC_VER

RequestApplyJoinBC::RequestApplyJoinBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestApplyJoinBC)
}

void RequestApplyJoinBC::InitAsDefaultInstance() {
  member_ = const_cast< ::ProtoAlliance::AllianceMemberCPP*>(&::ProtoAlliance::AllianceMemberCPP::default_instance());
}

RequestApplyJoinBC::RequestApplyJoinBC(const RequestApplyJoinBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestApplyJoinBC)
}

void RequestApplyJoinBC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  allianceid_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestApplyJoinBC::~RequestApplyJoinBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestApplyJoinBC)
  SharedDtor();
}

void RequestApplyJoinBC::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
    delete member_;
  }
}

void RequestApplyJoinBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestApplyJoinBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestApplyJoinBC_descriptor_;
}

const RequestApplyJoinBC& RequestApplyJoinBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestApplyJoinBC* RequestApplyJoinBC::default_instance_ = NULL;

RequestApplyJoinBC* RequestApplyJoinBC::New() const {
  return new RequestApplyJoinBC;
}

void RequestApplyJoinBC::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    allianceid_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
    if (has_member()) {
      if (member_ != NULL) member_->::ProtoAlliance::AllianceMemberCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestApplyJoinBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestApplyJoinBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 allianceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // required bytes reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_member;
        break;
      }

      // required .ProtoAlliance.AllianceMemberCPP member = 3;
      case 3: {
        if (tag == 26) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestApplyJoinBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestApplyJoinBC)
  return false;
#undef DO_
}

void RequestApplyJoinBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestApplyJoinBC)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->allianceid(), output);
  }

  // required bytes reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->reason(), output);
  }

  // required .ProtoAlliance.AllianceMemberCPP member = 3;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->member(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestApplyJoinBC)
}

::google::protobuf::uint8* RequestApplyJoinBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestApplyJoinBC)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->allianceid(), target);
  }

  // required bytes reason = 2;
  if (has_reason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->reason(), target);
  }

  // required .ProtoAlliance.AllianceMemberCPP member = 3;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->member(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestApplyJoinBC)
  return target;
}

int RequestApplyJoinBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 allianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

    // required bytes reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reason());
    }

    // required .ProtoAlliance.AllianceMemberCPP member = 3;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestApplyJoinBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestApplyJoinBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestApplyJoinBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestApplyJoinBC::MergeFrom(const RequestApplyJoinBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_member()) {
      mutable_member()->::ProtoAlliance::AllianceMemberCPP::MergeFrom(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestApplyJoinBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestApplyJoinBC::CopyFrom(const RequestApplyJoinBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestApplyJoinBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_member()) {
    if (!this->member().IsInitialized()) return false;
  }
  return true;
}

void RequestApplyJoinBC::Swap(RequestApplyJoinBC* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(reason_, other->reason_);
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestApplyJoinBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestApplyJoinBC_descriptor_;
  metadata.reflection = RequestApplyJoinBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyApplyJoinBC::kUidFieldNumber;
const int ReplyApplyJoinBC::kAllianceIdFieldNumber;
const int ReplyApplyJoinBC::kRetFieldNumber;
const int ReplyApplyJoinBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyApplyJoinBC::ReplyApplyJoinBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyApplyJoinBC)
}

void ReplyApplyJoinBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::ApplyJoinResp*>(&::ProtoAlliance::ApplyJoinResp::default_instance());
}

ReplyApplyJoinBC::ReplyApplyJoinBC(const ReplyApplyJoinBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyApplyJoinBC)
}

void ReplyApplyJoinBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  allianceid_ = 0u;
  ret_ = 0;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyApplyJoinBC::~ReplyApplyJoinBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyApplyJoinBC)
  SharedDtor();
}

void ReplyApplyJoinBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyApplyJoinBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyApplyJoinBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyApplyJoinBC_descriptor_;
}

const ReplyApplyJoinBC& ReplyApplyJoinBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyApplyJoinBC* ReplyApplyJoinBC::default_instance_ = NULL;

ReplyApplyJoinBC* ReplyApplyJoinBC::New() const {
  return new ReplyApplyJoinBC;
}

void ReplyApplyJoinBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyApplyJoinBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(uid_, allianceid_);
    ret_ = 0;
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::ApplyJoinResp::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyApplyJoinBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyApplyJoinBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_allianceId;
        break;
      }

      // required uint32 allianceId = 2;
      case 2: {
        if (tag == 16) {
         parse_allianceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required int32 ret = 3;
      case 3: {
        if (tag == 24) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.ApplyJoinResp alliance = 4;
      case 4: {
        if (tag == 34) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyApplyJoinBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyApplyJoinBC)
  return false;
#undef DO_
}

void ReplyApplyJoinBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyApplyJoinBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 allianceId = 2;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->allianceid(), output);
  }

  // required int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  // optional .ProtoAlliance.ApplyJoinResp alliance = 4;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyApplyJoinBC)
}

::google::protobuf::uint8* ReplyApplyJoinBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyApplyJoinBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 allianceId = 2;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->allianceid(), target);
  }

  // required int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  // optional .ProtoAlliance.ApplyJoinResp alliance = 4;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyApplyJoinBC)
  return target;
}

int ReplyApplyJoinBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 allianceId = 2;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

    // required int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .ProtoAlliance.ApplyJoinResp alliance = 4;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyApplyJoinBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyApplyJoinBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyApplyJoinBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyApplyJoinBC::MergeFrom(const ReplyApplyJoinBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::ApplyJoinResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyApplyJoinBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyApplyJoinBC::CopyFrom(const ReplyApplyJoinBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyApplyJoinBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyApplyJoinBC::Swap(ReplyApplyJoinBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(allianceid_, other->allianceid_);
    std::swap(ret_, other->ret_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyApplyJoinBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyApplyJoinBC_descriptor_;
  metadata.reflection = ReplyApplyJoinBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinResp::kRetFieldNumber;
const int ApplyJoinResp::kApplyFieldNumber;
const int ApplyJoinResp::kMemberFieldNumber;
const int ApplyJoinResp::kCommonsFieldNumber;
const int ApplyJoinResp::kAllianceFieldNumber;
#endif  // !_MSC_VER

ApplyJoinResp::ApplyJoinResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ApplyJoinResp)
}

void ApplyJoinResp::InitAsDefaultInstance() {
  apply_ = const_cast< ::ProtoAlliance::AllianceApplyCPP*>(&::ProtoAlliance::AllianceApplyCPP::default_instance());
  member_ = const_cast< ::ProtoAlliance::AllianceMemberCPP*>(&::ProtoAlliance::AllianceMemberCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  alliance_ = const_cast< ::ProtoAlliance::AllianceCPP*>(&::ProtoAlliance::AllianceCPP::default_instance());
}

ApplyJoinResp::ApplyJoinResp(const ApplyJoinResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ApplyJoinResp)
}

void ApplyJoinResp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  apply_ = NULL;
  member_ = NULL;
  commons_ = NULL;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinResp::~ApplyJoinResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ApplyJoinResp)
  SharedDtor();
}

void ApplyJoinResp::SharedDtor() {
  if (this != default_instance_) {
    delete apply_;
    delete member_;
    delete commons_;
    delete alliance_;
  }
}

void ApplyJoinResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinResp_descriptor_;
}

const ApplyJoinResp& ApplyJoinResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ApplyJoinResp* ApplyJoinResp::default_instance_ = NULL;

ApplyJoinResp* ApplyJoinResp::New() const {
  return new ApplyJoinResp;
}

void ApplyJoinResp::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    ret_ = 0;
    if (has_apply()) {
      if (apply_ != NULL) apply_->::ProtoAlliance::AllianceApplyCPP::Clear();
    }
    if (has_member()) {
      if (member_ != NULL) member_->::ProtoAlliance::AllianceMemberCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::AllianceCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ApplyJoinResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_apply;
        break;
      }

      // optional .ProtoAlliance.AllianceApplyCPP apply = 2;
      case 2: {
        if (tag == 18) {
         parse_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_member;
        break;
      }

      // optional .ProtoAlliance.AllianceMemberCPP member = 3;
      case 3: {
        if (tag == 26) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 4;
      case 4: {
        if (tag == 34) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.AllianceCPP alliance = 5;
      case 5: {
        if (tag == 42) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ApplyJoinResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ApplyJoinResp)
  return false;
#undef DO_
}

void ApplyJoinResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ApplyJoinResp)
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .ProtoAlliance.AllianceApplyCPP apply = 2;
  if (has_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->apply(), output);
  }

  // optional .ProtoAlliance.AllianceMemberCPP member = 3;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->member(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 4;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->commons(), output);
  }

  // optional .ProtoAlliance.AllianceCPP alliance = 5;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ApplyJoinResp)
}

::google::protobuf::uint8* ApplyJoinResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ApplyJoinResp)
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .ProtoAlliance.AllianceApplyCPP apply = 2;
  if (has_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->apply(), target);
  }

  // optional .ProtoAlliance.AllianceMemberCPP member = 3;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->member(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 4;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->commons(), target);
  }

  // optional .ProtoAlliance.AllianceCPP alliance = 5;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ApplyJoinResp)
  return target;
}

int ApplyJoinResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .ProtoAlliance.AllianceApplyCPP apply = 2;
    if (has_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apply());
    }

    // optional .ProtoAlliance.AllianceMemberCPP member = 3;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

    // optional .DataCommon.CommonItemsCPP commons = 4;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // optional .ProtoAlliance.AllianceCPP alliance = 5;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinResp::MergeFrom(const ApplyJoinResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_apply()) {
      mutable_apply()->::ProtoAlliance::AllianceApplyCPP::MergeFrom(from.apply());
    }
    if (from.has_member()) {
      mutable_member()->::ProtoAlliance::AllianceMemberCPP::MergeFrom(from.member());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::AllianceCPP::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinResp::CopyFrom(const ApplyJoinResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinResp::IsInitialized() const {

  if (has_apply()) {
    if (!this->apply().IsInitialized()) return false;
  }
  if (has_member()) {
    if (!this->member().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ApplyJoinResp::Swap(ApplyJoinResp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(apply_, other->apply_);
    std::swap(member_, other->member_);
    std::swap(commons_, other->commons_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinResp_descriptor_;
  metadata.reflection = ApplyJoinResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApproveJoinReq::kApplyUidFieldNumber;
const int ApproveJoinReq::kOperateFieldNumber;
#endif  // !_MSC_VER

ApproveJoinReq::ApproveJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ApproveJoinReq)
}

void ApproveJoinReq::InitAsDefaultInstance() {
}

ApproveJoinReq::ApproveJoinReq(const ApproveJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ApproveJoinReq)
}

void ApproveJoinReq::SharedCtor() {
  _cached_size_ = 0;
  applyuid_ = 0u;
  operate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApproveJoinReq::~ApproveJoinReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ApproveJoinReq)
  SharedDtor();
}

void ApproveJoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApproveJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApproveJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApproveJoinReq_descriptor_;
}

const ApproveJoinReq& ApproveJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ApproveJoinReq* ApproveJoinReq::default_instance_ = NULL;

ApproveJoinReq* ApproveJoinReq::New() const {
  return new ApproveJoinReq;
}

void ApproveJoinReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ApproveJoinReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(applyuid_, operate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApproveJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ApproveJoinReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 applyUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applyuid_)));
          set_has_applyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // required uint32 operate = 2;
      case 2: {
        if (tag == 16) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ApproveJoinReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ApproveJoinReq)
  return false;
#undef DO_
}

void ApproveJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ApproveJoinReq)
  // required uint32 applyUid = 1;
  if (has_applyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->applyuid(), output);
  }

  // required uint32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ApproveJoinReq)
}

::google::protobuf::uint8* ApproveJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ApproveJoinReq)
  // required uint32 applyUid = 1;
  if (has_applyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->applyuid(), target);
  }

  // required uint32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ApproveJoinReq)
  return target;
}

int ApproveJoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 applyUid = 1;
    if (has_applyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applyuid());
    }

    // required uint32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApproveJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApproveJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApproveJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApproveJoinReq::MergeFrom(const ApproveJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applyuid()) {
      set_applyuid(from.applyuid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApproveJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApproveJoinReq::CopyFrom(const ApproveJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApproveJoinReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ApproveJoinReq::Swap(ApproveJoinReq* other) {
  if (other != this) {
    std::swap(applyuid_, other->applyuid_);
    std::swap(operate_, other->operate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApproveJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApproveJoinReq_descriptor_;
  metadata.reflection = ApproveJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestApproveJoinAllianceBC::kAidFieldNumber;
const int RequestApproveJoinAllianceBC::kUidFieldNumber;
const int RequestApproveJoinAllianceBC::kOperateFieldNumber;
const int RequestApproveJoinAllianceBC::kMemberFieldNumber;
#endif  // !_MSC_VER

RequestApproveJoinAllianceBC::RequestApproveJoinAllianceBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestApproveJoinAllianceBC)
}

void RequestApproveJoinAllianceBC::InitAsDefaultInstance() {
  member_ = const_cast< ::ProtoAlliance::AllianceMemberCPP*>(&::ProtoAlliance::AllianceMemberCPP::default_instance());
}

RequestApproveJoinAllianceBC::RequestApproveJoinAllianceBC(const RequestApproveJoinAllianceBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestApproveJoinAllianceBC)
}

void RequestApproveJoinAllianceBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  operate_ = 0u;
  member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestApproveJoinAllianceBC::~RequestApproveJoinAllianceBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestApproveJoinAllianceBC)
  SharedDtor();
}

void RequestApproveJoinAllianceBC::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
  }
}

void RequestApproveJoinAllianceBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestApproveJoinAllianceBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestApproveJoinAllianceBC_descriptor_;
}

const RequestApproveJoinAllianceBC& RequestApproveJoinAllianceBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestApproveJoinAllianceBC* RequestApproveJoinAllianceBC::default_instance_ = NULL;

RequestApproveJoinAllianceBC* RequestApproveJoinAllianceBC::New() const {
  return new RequestApproveJoinAllianceBC;
}

void RequestApproveJoinAllianceBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestApproveJoinAllianceBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(aid_, uid_);
    operate_ = 0u;
    if (has_member()) {
      if (member_ != NULL) member_->::ProtoAlliance::AllianceMemberCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestApproveJoinAllianceBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestApproveJoinAllianceBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operate;
        break;
      }

      // required uint32 operate = 3;
      case 3: {
        if (tag == 24) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_member;
        break;
      }

      // required .ProtoAlliance.AllianceMemberCPP member = 4;
      case 4: {
        if (tag == 34) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestApproveJoinAllianceBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestApproveJoinAllianceBC)
  return false;
#undef DO_
}

void RequestApproveJoinAllianceBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestApproveJoinAllianceBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 operate = 3;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operate(), output);
  }

  // required .ProtoAlliance.AllianceMemberCPP member = 4;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->member(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestApproveJoinAllianceBC)
}

::google::protobuf::uint8* RequestApproveJoinAllianceBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestApproveJoinAllianceBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 operate = 3;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operate(), target);
  }

  // required .ProtoAlliance.AllianceMemberCPP member = 4;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->member(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestApproveJoinAllianceBC)
  return target;
}

int RequestApproveJoinAllianceBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 operate = 3;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate());
    }

    // required .ProtoAlliance.AllianceMemberCPP member = 4;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestApproveJoinAllianceBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestApproveJoinAllianceBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestApproveJoinAllianceBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestApproveJoinAllianceBC::MergeFrom(const RequestApproveJoinAllianceBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_member()) {
      mutable_member()->::ProtoAlliance::AllianceMemberCPP::MergeFrom(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestApproveJoinAllianceBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestApproveJoinAllianceBC::CopyFrom(const RequestApproveJoinAllianceBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestApproveJoinAllianceBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_member()) {
    if (!this->member().IsInitialized()) return false;
  }
  return true;
}

void RequestApproveJoinAllianceBC::Swap(RequestApproveJoinAllianceBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(operate_, other->operate_);
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestApproveJoinAllianceBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestApproveJoinAllianceBC_descriptor_;
  metadata.reflection = RequestApproveJoinAllianceBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestApproveJoinUserBC::kAidFieldNumber;
const int RequestApproveJoinUserBC::kUidFieldNumber;
const int RequestApproveJoinUserBC::kApplyUidFieldNumber;
const int RequestApproveJoinUserBC::kOperateFieldNumber;
#endif  // !_MSC_VER

RequestApproveJoinUserBC::RequestApproveJoinUserBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestApproveJoinUserBC)
}

void RequestApproveJoinUserBC::InitAsDefaultInstance() {
}

RequestApproveJoinUserBC::RequestApproveJoinUserBC(const RequestApproveJoinUserBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestApproveJoinUserBC)
}

void RequestApproveJoinUserBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  applyuid_ = 0u;
  operate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestApproveJoinUserBC::~RequestApproveJoinUserBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestApproveJoinUserBC)
  SharedDtor();
}

void RequestApproveJoinUserBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestApproveJoinUserBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestApproveJoinUserBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestApproveJoinUserBC_descriptor_;
}

const RequestApproveJoinUserBC& RequestApproveJoinUserBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestApproveJoinUserBC* RequestApproveJoinUserBC::default_instance_ = NULL;

RequestApproveJoinUserBC* RequestApproveJoinUserBC::New() const {
  return new RequestApproveJoinUserBC;
}

void RequestApproveJoinUserBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestApproveJoinUserBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, operate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestApproveJoinUserBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestApproveJoinUserBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_applyUid;
        break;
      }

      // required uint32 applyUid = 3;
      case 3: {
        if (tag == 24) {
         parse_applyUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applyuid_)));
          set_has_applyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_operate;
        break;
      }

      // required uint32 operate = 4;
      case 4: {
        if (tag == 32) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestApproveJoinUserBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestApproveJoinUserBC)
  return false;
#undef DO_
}

void RequestApproveJoinUserBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestApproveJoinUserBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 applyUid = 3;
  if (has_applyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->applyuid(), output);
  }

  // required uint32 operate = 4;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->operate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestApproveJoinUserBC)
}

::google::protobuf::uint8* RequestApproveJoinUserBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestApproveJoinUserBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 applyUid = 3;
  if (has_applyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->applyuid(), target);
  }

  // required uint32 operate = 4;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->operate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestApproveJoinUserBC)
  return target;
}

int RequestApproveJoinUserBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 applyUid = 3;
    if (has_applyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applyuid());
    }

    // required uint32 operate = 4;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestApproveJoinUserBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestApproveJoinUserBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestApproveJoinUserBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestApproveJoinUserBC::MergeFrom(const RequestApproveJoinUserBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_applyuid()) {
      set_applyuid(from.applyuid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestApproveJoinUserBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestApproveJoinUserBC::CopyFrom(const RequestApproveJoinUserBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestApproveJoinUserBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestApproveJoinUserBC::Swap(RequestApproveJoinUserBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(applyuid_, other->applyuid_);
    std::swap(operate_, other->operate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestApproveJoinUserBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestApproveJoinUserBC_descriptor_;
  metadata.reflection = RequestApproveJoinUserBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyApproveJoinBC::kUidFieldNumber;
const int ReplyApproveJoinBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyApproveJoinBC::ReplyApproveJoinBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyApproveJoinBC)
}

void ReplyApproveJoinBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::ApproveJoinResp*>(&::ProtoAlliance::ApproveJoinResp::default_instance());
}

ReplyApproveJoinBC::ReplyApproveJoinBC(const ReplyApproveJoinBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyApproveJoinBC)
}

void ReplyApproveJoinBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyApproveJoinBC::~ReplyApproveJoinBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyApproveJoinBC)
  SharedDtor();
}

void ReplyApproveJoinBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyApproveJoinBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyApproveJoinBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyApproveJoinBC_descriptor_;
}

const ReplyApproveJoinBC& ReplyApproveJoinBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyApproveJoinBC* ReplyApproveJoinBC::default_instance_ = NULL;

ReplyApproveJoinBC* ReplyApproveJoinBC::New() const {
  return new ReplyApproveJoinBC;
}

void ReplyApproveJoinBC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::ApproveJoinResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyApproveJoinBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyApproveJoinBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.ApproveJoinResp alliance = 2;
      case 2: {
        if (tag == 18) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyApproveJoinBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyApproveJoinBC)
  return false;
#undef DO_
}

void ReplyApproveJoinBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyApproveJoinBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .ProtoAlliance.ApproveJoinResp alliance = 2;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyApproveJoinBC)
}

::google::protobuf::uint8* ReplyApproveJoinBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyApproveJoinBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional .ProtoAlliance.ApproveJoinResp alliance = 2;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyApproveJoinBC)
  return target;
}

int ReplyApproveJoinBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .ProtoAlliance.ApproveJoinResp alliance = 2;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyApproveJoinBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyApproveJoinBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyApproveJoinBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyApproveJoinBC::MergeFrom(const ReplyApproveJoinBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::ApproveJoinResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyApproveJoinBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyApproveJoinBC::CopyFrom(const ReplyApproveJoinBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyApproveJoinBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyApproveJoinBC::Swap(ReplyApproveJoinBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyApproveJoinBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyApproveJoinBC_descriptor_;
  metadata.reflection = ReplyApproveJoinBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApproveJoinResp::kApplyUidFieldNumber;
const int ApproveJoinResp::kOperateFieldNumber;
const int ApproveJoinResp::kMemberFieldNumber;
#endif  // !_MSC_VER

ApproveJoinResp::ApproveJoinResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ApproveJoinResp)
}

void ApproveJoinResp::InitAsDefaultInstance() {
  member_ = const_cast< ::ProtoAlliance::AllianceMemberCPP*>(&::ProtoAlliance::AllianceMemberCPP::default_instance());
}

ApproveJoinResp::ApproveJoinResp(const ApproveJoinResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ApproveJoinResp)
}

void ApproveJoinResp::SharedCtor() {
  _cached_size_ = 0;
  applyuid_ = 0u;
  operate_ = 0u;
  member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApproveJoinResp::~ApproveJoinResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ApproveJoinResp)
  SharedDtor();
}

void ApproveJoinResp::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
  }
}

void ApproveJoinResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApproveJoinResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApproveJoinResp_descriptor_;
}

const ApproveJoinResp& ApproveJoinResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ApproveJoinResp* ApproveJoinResp::default_instance_ = NULL;

ApproveJoinResp* ApproveJoinResp::New() const {
  return new ApproveJoinResp;
}

void ApproveJoinResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ApproveJoinResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(applyuid_, operate_);
    if (has_member()) {
      if (member_ != NULL) member_->::ProtoAlliance::AllianceMemberCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApproveJoinResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ApproveJoinResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 applyUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applyuid_)));
          set_has_applyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // required uint32 operate = 2;
      case 2: {
        if (tag == 16) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_member;
        break;
      }

      // optional .ProtoAlliance.AllianceMemberCPP member = 3;
      case 3: {
        if (tag == 26) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ApproveJoinResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ApproveJoinResp)
  return false;
#undef DO_
}

void ApproveJoinResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ApproveJoinResp)
  // required uint32 applyUid = 1;
  if (has_applyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->applyuid(), output);
  }

  // required uint32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operate(), output);
  }

  // optional .ProtoAlliance.AllianceMemberCPP member = 3;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->member(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ApproveJoinResp)
}

::google::protobuf::uint8* ApproveJoinResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ApproveJoinResp)
  // required uint32 applyUid = 1;
  if (has_applyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->applyuid(), target);
  }

  // required uint32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operate(), target);
  }

  // optional .ProtoAlliance.AllianceMemberCPP member = 3;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->member(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ApproveJoinResp)
  return target;
}

int ApproveJoinResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 applyUid = 1;
    if (has_applyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applyuid());
    }

    // required uint32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate());
    }

    // optional .ProtoAlliance.AllianceMemberCPP member = 3;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApproveJoinResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApproveJoinResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApproveJoinResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApproveJoinResp::MergeFrom(const ApproveJoinResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applyuid()) {
      set_applyuid(from.applyuid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_member()) {
      mutable_member()->::ProtoAlliance::AllianceMemberCPP::MergeFrom(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApproveJoinResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApproveJoinResp::CopyFrom(const ApproveJoinResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApproveJoinResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_member()) {
    if (!this->member().IsInitialized()) return false;
  }
  return true;
}

void ApproveJoinResp::Swap(ApproveJoinResp* other) {
  if (other != this) {
    std::swap(applyuid_, other->applyuid_);
    std::swap(operate_, other->operate_);
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApproveJoinResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApproveJoinResp_descriptor_;
  metadata.reflection = ApproveJoinResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ExitAllianceReq::ExitAllianceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ExitAllianceReq)
}

void ExitAllianceReq::InitAsDefaultInstance() {
}

ExitAllianceReq::ExitAllianceReq(const ExitAllianceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ExitAllianceReq)
}

void ExitAllianceReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitAllianceReq::~ExitAllianceReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ExitAllianceReq)
  SharedDtor();
}

void ExitAllianceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitAllianceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitAllianceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitAllianceReq_descriptor_;
}

const ExitAllianceReq& ExitAllianceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ExitAllianceReq* ExitAllianceReq::default_instance_ = NULL;

ExitAllianceReq* ExitAllianceReq::New() const {
  return new ExitAllianceReq;
}

void ExitAllianceReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitAllianceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ExitAllianceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ExitAllianceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ExitAllianceReq)
  return false;
#undef DO_
}

void ExitAllianceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ExitAllianceReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ExitAllianceReq)
}

::google::protobuf::uint8* ExitAllianceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ExitAllianceReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ExitAllianceReq)
  return target;
}

int ExitAllianceReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitAllianceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitAllianceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitAllianceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitAllianceReq::MergeFrom(const ExitAllianceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitAllianceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitAllianceReq::CopyFrom(const ExitAllianceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitAllianceReq::IsInitialized() const {

  return true;
}

void ExitAllianceReq::Swap(ExitAllianceReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitAllianceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitAllianceReq_descriptor_;
  metadata.reflection = ExitAllianceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestExitAllianceBC::kAidFieldNumber;
const int RequestExitAllianceBC::kUidFieldNumber;
#endif  // !_MSC_VER

RequestExitAllianceBC::RequestExitAllianceBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestExitAllianceBC)
}

void RequestExitAllianceBC::InitAsDefaultInstance() {
}

RequestExitAllianceBC::RequestExitAllianceBC(const RequestExitAllianceBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestExitAllianceBC)
}

void RequestExitAllianceBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestExitAllianceBC::~RequestExitAllianceBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestExitAllianceBC)
  SharedDtor();
}

void RequestExitAllianceBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestExitAllianceBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestExitAllianceBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestExitAllianceBC_descriptor_;
}

const RequestExitAllianceBC& RequestExitAllianceBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestExitAllianceBC* RequestExitAllianceBC::default_instance_ = NULL;

RequestExitAllianceBC* RequestExitAllianceBC::New() const {
  return new RequestExitAllianceBC;
}

void RequestExitAllianceBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestExitAllianceBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestExitAllianceBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestExitAllianceBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestExitAllianceBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestExitAllianceBC)
  return false;
#undef DO_
}

void RequestExitAllianceBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestExitAllianceBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestExitAllianceBC)
}

::google::protobuf::uint8* RequestExitAllianceBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestExitAllianceBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestExitAllianceBC)
  return target;
}

int RequestExitAllianceBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestExitAllianceBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestExitAllianceBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestExitAllianceBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestExitAllianceBC::MergeFrom(const RequestExitAllianceBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestExitAllianceBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestExitAllianceBC::CopyFrom(const RequestExitAllianceBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestExitAllianceBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestExitAllianceBC::Swap(RequestExitAllianceBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestExitAllianceBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestExitAllianceBC_descriptor_;
  metadata.reflection = RequestExitAllianceBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyExitAllianceBC::kUidFieldNumber;
const int ReplyExitAllianceBC::kAidFieldNumber;
const int ReplyExitAllianceBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyExitAllianceBC::ReplyExitAllianceBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyExitAllianceBC)
}

void ReplyExitAllianceBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::ExitAllianceResp*>(&::ProtoAlliance::ExitAllianceResp::default_instance());
}

ReplyExitAllianceBC::ReplyExitAllianceBC(const ReplyExitAllianceBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyExitAllianceBC)
}

void ReplyExitAllianceBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  aid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyExitAllianceBC::~ReplyExitAllianceBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyExitAllianceBC)
  SharedDtor();
}

void ReplyExitAllianceBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyExitAllianceBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyExitAllianceBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyExitAllianceBC_descriptor_;
}

const ReplyExitAllianceBC& ReplyExitAllianceBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyExitAllianceBC* ReplyExitAllianceBC::default_instance_ = NULL;

ReplyExitAllianceBC* ReplyExitAllianceBC::New() const {
  return new ReplyExitAllianceBC;
}

void ReplyExitAllianceBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyExitAllianceBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, aid_);
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::ExitAllianceResp::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyExitAllianceBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyExitAllianceBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_aid;
        break;
      }

      // required uint32 aid = 2;
      case 2: {
        if (tag == 16) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.ExitAllianceResp alliance = 3;
      case 3: {
        if (tag == 26) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyExitAllianceBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyExitAllianceBC)
  return false;
#undef DO_
}

void ReplyExitAllianceBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyExitAllianceBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 aid = 2;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aid(), output);
  }

  // optional .ProtoAlliance.ExitAllianceResp alliance = 3;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyExitAllianceBC)
}

::google::protobuf::uint8* ReplyExitAllianceBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyExitAllianceBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 aid = 2;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->aid(), target);
  }

  // optional .ProtoAlliance.ExitAllianceResp alliance = 3;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyExitAllianceBC)
  return target;
}

int ReplyExitAllianceBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 aid = 2;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // optional .ProtoAlliance.ExitAllianceResp alliance = 3;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyExitAllianceBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyExitAllianceBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyExitAllianceBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyExitAllianceBC::MergeFrom(const ReplyExitAllianceBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::ExitAllianceResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyExitAllianceBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyExitAllianceBC::CopyFrom(const ReplyExitAllianceBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyExitAllianceBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyExitAllianceBC::Swap(ReplyExitAllianceBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(aid_, other->aid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyExitAllianceBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyExitAllianceBC_descriptor_;
  metadata.reflection = ReplyExitAllianceBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitAllianceResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ExitAllianceResp::ExitAllianceResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ExitAllianceResp)
}

void ExitAllianceResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ExitAllianceResp::ExitAllianceResp(const ExitAllianceResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ExitAllianceResp)
}

void ExitAllianceResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitAllianceResp::~ExitAllianceResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ExitAllianceResp)
  SharedDtor();
}

void ExitAllianceResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void ExitAllianceResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitAllianceResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitAllianceResp_descriptor_;
}

const ExitAllianceResp& ExitAllianceResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ExitAllianceResp* ExitAllianceResp::default_instance_ = NULL;

ExitAllianceResp* ExitAllianceResp::New() const {
  return new ExitAllianceResp;
}

void ExitAllianceResp::Clear() {
  if (has_commons()) {
    if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitAllianceResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ExitAllianceResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ExitAllianceResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ExitAllianceResp)
  return false;
#undef DO_
}

void ExitAllianceResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ExitAllianceResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ExitAllianceResp)
}

::google::protobuf::uint8* ExitAllianceResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ExitAllianceResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ExitAllianceResp)
  return target;
}

int ExitAllianceResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitAllianceResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitAllianceResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitAllianceResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitAllianceResp::MergeFrom(const ExitAllianceResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitAllianceResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitAllianceResp::CopyFrom(const ExitAllianceResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitAllianceResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ExitAllianceResp::Swap(ExitAllianceResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitAllianceResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitAllianceResp_descriptor_;
  metadata.reflection = ExitAllianceResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostionChangePushReq::kOldposFieldNumber;
const int PostionChangePushReq::kNewposFieldNumber;
const int PostionChangePushReq::kAllianceFieldNumber;
#endif  // !_MSC_VER

PostionChangePushReq::PostionChangePushReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.PostionChangePushReq)
}

void PostionChangePushReq::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::AllianceCPP*>(&::ProtoAlliance::AllianceCPP::default_instance());
}

PostionChangePushReq::PostionChangePushReq(const PostionChangePushReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.PostionChangePushReq)
}

void PostionChangePushReq::SharedCtor() {
  _cached_size_ = 0;
  oldpos_ = 0u;
  newpos_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostionChangePushReq::~PostionChangePushReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.PostionChangePushReq)
  SharedDtor();
}

void PostionChangePushReq::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void PostionChangePushReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostionChangePushReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostionChangePushReq_descriptor_;
}

const PostionChangePushReq& PostionChangePushReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

PostionChangePushReq* PostionChangePushReq::default_instance_ = NULL;

PostionChangePushReq* PostionChangePushReq::New() const {
  return new PostionChangePushReq;
}

void PostionChangePushReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PostionChangePushReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(oldpos_, newpos_);
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::AllianceCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostionChangePushReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.PostionChangePushReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oldpos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldpos_)));
          set_has_oldpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_newpos;
        break;
      }

      // required uint32 newpos = 2;
      case 2: {
        if (tag == 16) {
         parse_newpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newpos_)));
          set_has_newpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.AllianceCPP alliance = 3;
      case 3: {
        if (tag == 26) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.PostionChangePushReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.PostionChangePushReq)
  return false;
#undef DO_
}

void PostionChangePushReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.PostionChangePushReq)
  // required uint32 oldpos = 1;
  if (has_oldpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oldpos(), output);
  }

  // required uint32 newpos = 2;
  if (has_newpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newpos(), output);
  }

  // optional .ProtoAlliance.AllianceCPP alliance = 3;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.PostionChangePushReq)
}

::google::protobuf::uint8* PostionChangePushReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.PostionChangePushReq)
  // required uint32 oldpos = 1;
  if (has_oldpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oldpos(), target);
  }

  // required uint32 newpos = 2;
  if (has_newpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newpos(), target);
  }

  // optional .ProtoAlliance.AllianceCPP alliance = 3;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.PostionChangePushReq)
  return target;
}

int PostionChangePushReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oldpos = 1;
    if (has_oldpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldpos());
    }

    // required uint32 newpos = 2;
    if (has_newpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newpos());
    }

    // optional .ProtoAlliance.AllianceCPP alliance = 3;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostionChangePushReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostionChangePushReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostionChangePushReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostionChangePushReq::MergeFrom(const PostionChangePushReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oldpos()) {
      set_oldpos(from.oldpos());
    }
    if (from.has_newpos()) {
      set_newpos(from.newpos());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::AllianceCPP::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostionChangePushReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostionChangePushReq::CopyFrom(const PostionChangePushReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostionChangePushReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void PostionChangePushReq::Swap(PostionChangePushReq* other) {
  if (other != this) {
    std::swap(oldpos_, other->oldpos_);
    std::swap(newpos_, other->newpos_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostionChangePushReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostionChangePushReq_descriptor_;
  metadata.reflection = PostionChangePushReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinReq::kInvitedUidFieldNumber;
#endif  // !_MSC_VER

InviteJoinReq::InviteJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.InviteJoinReq)
}

void InviteJoinReq::InitAsDefaultInstance() {
}

InviteJoinReq::InviteJoinReq(const InviteJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.InviteJoinReq)
}

void InviteJoinReq::SharedCtor() {
  _cached_size_ = 0;
  inviteduid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinReq::~InviteJoinReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.InviteJoinReq)
  SharedDtor();
}

void InviteJoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinReq_descriptor_;
}

const InviteJoinReq& InviteJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

InviteJoinReq* InviteJoinReq::default_instance_ = NULL;

InviteJoinReq* InviteJoinReq::New() const {
  return new InviteJoinReq;
}

void InviteJoinReq::Clear() {
  inviteduid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.InviteJoinReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 invitedUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviteduid_)));
          set_has_inviteduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.InviteJoinReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.InviteJoinReq)
  return false;
#undef DO_
}

void InviteJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.InviteJoinReq)
  // required uint32 invitedUid = 1;
  if (has_inviteduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inviteduid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.InviteJoinReq)
}

::google::protobuf::uint8* InviteJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.InviteJoinReq)
  // required uint32 invitedUid = 1;
  if (has_inviteduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inviteduid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.InviteJoinReq)
  return target;
}

int InviteJoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 invitedUid = 1;
    if (has_inviteduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviteduid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinReq::MergeFrom(const InviteJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviteduid()) {
      set_inviteduid(from.inviteduid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinReq::CopyFrom(const InviteJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteJoinReq::Swap(InviteJoinReq* other) {
  if (other != this) {
    std::swap(inviteduid_, other->inviteduid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinReq_descriptor_;
  metadata.reflection = InviteJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestInviteJoinBC::kAidFieldNumber;
const int RequestInviteJoinBC::kUidFieldNumber;
const int RequestInviteJoinBC::kInvitedUidFieldNumber;
const int RequestInviteJoinBC::kNameFieldNumber;
#endif  // !_MSC_VER

RequestInviteJoinBC::RequestInviteJoinBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestInviteJoinBC)
}

void RequestInviteJoinBC::InitAsDefaultInstance() {
}

RequestInviteJoinBC::RequestInviteJoinBC(const RequestInviteJoinBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestInviteJoinBC)
}

void RequestInviteJoinBC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  inviteduid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestInviteJoinBC::~RequestInviteJoinBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestInviteJoinBC)
  SharedDtor();
}

void RequestInviteJoinBC::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RequestInviteJoinBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestInviteJoinBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestInviteJoinBC_descriptor_;
}

const RequestInviteJoinBC& RequestInviteJoinBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestInviteJoinBC* RequestInviteJoinBC::default_instance_ = NULL;

RequestInviteJoinBC* RequestInviteJoinBC::New() const {
  return new RequestInviteJoinBC;
}

void RequestInviteJoinBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestInviteJoinBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(aid_, uid_);
    inviteduid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestInviteJoinBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestInviteJoinBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_invitedUid;
        break;
      }

      // required uint32 invitedUid = 3;
      case 3: {
        if (tag == 24) {
         parse_invitedUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviteduid_)));
          set_has_inviteduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required bytes name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestInviteJoinBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestInviteJoinBC)
  return false;
#undef DO_
}

void RequestInviteJoinBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestInviteJoinBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 invitedUid = 3;
  if (has_inviteduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inviteduid(), output);
  }

  // required bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestInviteJoinBC)
}

::google::protobuf::uint8* RequestInviteJoinBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestInviteJoinBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 invitedUid = 3;
  if (has_inviteduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inviteduid(), target);
  }

  // required bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestInviteJoinBC)
  return target;
}

int RequestInviteJoinBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 invitedUid = 3;
    if (has_inviteduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviteduid());
    }

    // required bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestInviteJoinBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestInviteJoinBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestInviteJoinBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestInviteJoinBC::MergeFrom(const RequestInviteJoinBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_inviteduid()) {
      set_inviteduid(from.inviteduid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestInviteJoinBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInviteJoinBC::CopyFrom(const RequestInviteJoinBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInviteJoinBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestInviteJoinBC::Swap(RequestInviteJoinBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(inviteduid_, other->inviteduid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestInviteJoinBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestInviteJoinBC_descriptor_;
  metadata.reflection = RequestInviteJoinBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestInviteJoinUserBC::kAidFieldNumber;
const int RequestInviteJoinUserBC::kUidFieldNumber;
const int RequestInviteJoinUserBC::kInvitedUidFieldNumber;
const int RequestInviteJoinUserBC::kAllianceFlagFieldNumber;
const int RequestInviteJoinUserBC::kNameFieldNumber;
const int RequestInviteJoinUserBC::kAllianceNameFieldNumber;
#endif  // !_MSC_VER

RequestInviteJoinUserBC::RequestInviteJoinUserBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestInviteJoinUserBC)
}

void RequestInviteJoinUserBC::InitAsDefaultInstance() {
}

RequestInviteJoinUserBC::RequestInviteJoinUserBC(const RequestInviteJoinUserBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestInviteJoinUserBC)
}

void RequestInviteJoinUserBC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  inviteduid_ = 0u;
  allianceflag_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alliancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestInviteJoinUserBC::~RequestInviteJoinUserBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestInviteJoinUserBC)
  SharedDtor();
}

void RequestInviteJoinUserBC::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (alliancename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alliancename_;
  }
  if (this != default_instance_) {
  }
}

void RequestInviteJoinUserBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestInviteJoinUserBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestInviteJoinUserBC_descriptor_;
}

const RequestInviteJoinUserBC& RequestInviteJoinUserBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestInviteJoinUserBC* RequestInviteJoinUserBC::default_instance_ = NULL;

RequestInviteJoinUserBC* RequestInviteJoinUserBC::New() const {
  return new RequestInviteJoinUserBC;
}

void RequestInviteJoinUserBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestInviteJoinUserBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(aid_, allianceflag_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_alliancename()) {
      if (alliancename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alliancename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestInviteJoinUserBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestInviteJoinUserBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_invitedUid;
        break;
      }

      // required uint32 invitedUid = 3;
      case 3: {
        if (tag == 24) {
         parse_invitedUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviteduid_)));
          set_has_inviteduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_allianceFlag;
        break;
      }

      // required uint32 allianceFlag = 4;
      case 4: {
        if (tag == 32) {
         parse_allianceFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceflag_)));
          set_has_allianceflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required bytes name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_allianceName;
        break;
      }

      // required bytes allianceName = 6;
      case 6: {
        if (tag == 50) {
         parse_allianceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_alliancename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestInviteJoinUserBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestInviteJoinUserBC)
  return false;
#undef DO_
}

void RequestInviteJoinUserBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestInviteJoinUserBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 invitedUid = 3;
  if (has_inviteduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inviteduid(), output);
  }

  // required uint32 allianceFlag = 4;
  if (has_allianceflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->allianceflag(), output);
  }

  // required bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->name(), output);
  }

  // required bytes allianceName = 6;
  if (has_alliancename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->alliancename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestInviteJoinUserBC)
}

::google::protobuf::uint8* RequestInviteJoinUserBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestInviteJoinUserBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 invitedUid = 3;
  if (has_inviteduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inviteduid(), target);
  }

  // required uint32 allianceFlag = 4;
  if (has_allianceflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->allianceflag(), target);
  }

  // required bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  // required bytes allianceName = 6;
  if (has_alliancename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->alliancename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestInviteJoinUserBC)
  return target;
}

int RequestInviteJoinUserBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 invitedUid = 3;
    if (has_inviteduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviteduid());
    }

    // required uint32 allianceFlag = 4;
    if (has_allianceflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceflag());
    }

    // required bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes allianceName = 6;
    if (has_alliancename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->alliancename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestInviteJoinUserBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestInviteJoinUserBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestInviteJoinUserBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestInviteJoinUserBC::MergeFrom(const RequestInviteJoinUserBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_inviteduid()) {
      set_inviteduid(from.inviteduid());
    }
    if (from.has_allianceflag()) {
      set_allianceflag(from.allianceflag());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_alliancename()) {
      set_alliancename(from.alliancename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestInviteJoinUserBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInviteJoinUserBC::CopyFrom(const RequestInviteJoinUserBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInviteJoinUserBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void RequestInviteJoinUserBC::Swap(RequestInviteJoinUserBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(inviteduid_, other->inviteduid_);
    std::swap(allianceflag_, other->allianceflag_);
    std::swap(name_, other->name_);
    std::swap(alliancename_, other->alliancename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestInviteJoinUserBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestInviteJoinUserBC_descriptor_;
  metadata.reflection = RequestInviteJoinUserBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyInviteJoinBC::kUidFieldNumber;
const int ReplyInviteJoinBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyInviteJoinBC::ReplyInviteJoinBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyInviteJoinBC)
}

void ReplyInviteJoinBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::InviteJoinResp*>(&::ProtoAlliance::InviteJoinResp::default_instance());
}

ReplyInviteJoinBC::ReplyInviteJoinBC(const ReplyInviteJoinBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyInviteJoinBC)
}

void ReplyInviteJoinBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyInviteJoinBC::~ReplyInviteJoinBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyInviteJoinBC)
  SharedDtor();
}

void ReplyInviteJoinBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyInviteJoinBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyInviteJoinBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyInviteJoinBC_descriptor_;
}

const ReplyInviteJoinBC& ReplyInviteJoinBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyInviteJoinBC* ReplyInviteJoinBC::default_instance_ = NULL;

ReplyInviteJoinBC* ReplyInviteJoinBC::New() const {
  return new ReplyInviteJoinBC;
}

void ReplyInviteJoinBC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::InviteJoinResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyInviteJoinBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyInviteJoinBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.InviteJoinResp alliance = 2;
      case 2: {
        if (tag == 18) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyInviteJoinBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyInviteJoinBC)
  return false;
#undef DO_
}

void ReplyInviteJoinBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyInviteJoinBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .ProtoAlliance.InviteJoinResp alliance = 2;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyInviteJoinBC)
}

::google::protobuf::uint8* ReplyInviteJoinBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyInviteJoinBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional .ProtoAlliance.InviteJoinResp alliance = 2;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyInviteJoinBC)
  return target;
}

int ReplyInviteJoinBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .ProtoAlliance.InviteJoinResp alliance = 2;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyInviteJoinBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyInviteJoinBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyInviteJoinBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyInviteJoinBC::MergeFrom(const ReplyInviteJoinBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::InviteJoinResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyInviteJoinBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyInviteJoinBC::CopyFrom(const ReplyInviteJoinBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyInviteJoinBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyInviteJoinBC::Swap(ReplyInviteJoinBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyInviteJoinBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyInviteJoinBC_descriptor_;
  metadata.reflection = ReplyInviteJoinBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinResp::kInvitedUidFieldNumber;
#endif  // !_MSC_VER

InviteJoinResp::InviteJoinResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.InviteJoinResp)
}

void InviteJoinResp::InitAsDefaultInstance() {
}

InviteJoinResp::InviteJoinResp(const InviteJoinResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.InviteJoinResp)
}

void InviteJoinResp::SharedCtor() {
  _cached_size_ = 0;
  inviteduid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinResp::~InviteJoinResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.InviteJoinResp)
  SharedDtor();
}

void InviteJoinResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteJoinResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinResp_descriptor_;
}

const InviteJoinResp& InviteJoinResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

InviteJoinResp* InviteJoinResp::default_instance_ = NULL;

InviteJoinResp* InviteJoinResp::New() const {
  return new InviteJoinResp;
}

void InviteJoinResp::Clear() {
  inviteduid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.InviteJoinResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 invitedUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviteduid_)));
          set_has_inviteduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.InviteJoinResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.InviteJoinResp)
  return false;
#undef DO_
}

void InviteJoinResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.InviteJoinResp)
  // required uint32 invitedUid = 1;
  if (has_inviteduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inviteduid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.InviteJoinResp)
}

::google::protobuf::uint8* InviteJoinResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.InviteJoinResp)
  // required uint32 invitedUid = 1;
  if (has_inviteduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inviteduid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.InviteJoinResp)
  return target;
}

int InviteJoinResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 invitedUid = 1;
    if (has_inviteduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviteduid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinResp::MergeFrom(const InviteJoinResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviteduid()) {
      set_inviteduid(from.inviteduid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinResp::CopyFrom(const InviteJoinResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteJoinResp::Swap(InviteJoinResp* other) {
  if (other != this) {
    std::swap(inviteduid_, other->inviteduid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinResp_descriptor_;
  metadata.reflection = InviteJoinResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvitedPushReq::kInviteFieldNumber;
#endif  // !_MSC_VER

InvitedPushReq::InvitedPushReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.InvitedPushReq)
}

void InvitedPushReq::InitAsDefaultInstance() {
  invite_ = const_cast< ::ProtoAlliance::AllianceInvitedCPP*>(&::ProtoAlliance::AllianceInvitedCPP::default_instance());
}

InvitedPushReq::InvitedPushReq(const InvitedPushReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.InvitedPushReq)
}

void InvitedPushReq::SharedCtor() {
  _cached_size_ = 0;
  invite_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitedPushReq::~InvitedPushReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.InvitedPushReq)
  SharedDtor();
}

void InvitedPushReq::SharedDtor() {
  if (this != default_instance_) {
    delete invite_;
  }
}

void InvitedPushReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitedPushReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitedPushReq_descriptor_;
}

const InvitedPushReq& InvitedPushReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

InvitedPushReq* InvitedPushReq::default_instance_ = NULL;

InvitedPushReq* InvitedPushReq::New() const {
  return new InvitedPushReq;
}

void InvitedPushReq::Clear() {
  if (has_invite()) {
    if (invite_ != NULL) invite_->::ProtoAlliance::AllianceInvitedCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvitedPushReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.InvitedPushReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoAlliance.AllianceInvitedCPP invite = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.InvitedPushReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.InvitedPushReq)
  return false;
#undef DO_
}

void InvitedPushReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.InvitedPushReq)
  // required .ProtoAlliance.AllianceInvitedCPP invite = 1;
  if (has_invite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->invite(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.InvitedPushReq)
}

::google::protobuf::uint8* InvitedPushReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.InvitedPushReq)
  // required .ProtoAlliance.AllianceInvitedCPP invite = 1;
  if (has_invite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->invite(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.InvitedPushReq)
  return target;
}

int InvitedPushReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoAlliance.AllianceInvitedCPP invite = 1;
    if (has_invite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invite());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitedPushReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvitedPushReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvitedPushReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvitedPushReq::MergeFrom(const InvitedPushReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invite()) {
      mutable_invite()->::ProtoAlliance::AllianceInvitedCPP::MergeFrom(from.invite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvitedPushReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitedPushReq::CopyFrom(const InvitedPushReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitedPushReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_invite()) {
    if (!this->invite().IsInitialized()) return false;
  }
  return true;
}

void InvitedPushReq::Swap(InvitedPushReq* other) {
  if (other != this) {
    std::swap(invite_, other->invite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvitedPushReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvitedPushReq_descriptor_;
  metadata.reflection = InvitedPushReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptInviteReq::kAllianceIdFieldNumber;
const int AcceptInviteReq::kOperateFieldNumber;
#endif  // !_MSC_VER

AcceptInviteReq::AcceptInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.AcceptInviteReq)
}

void AcceptInviteReq::InitAsDefaultInstance() {
}

AcceptInviteReq::AcceptInviteReq(const AcceptInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.AcceptInviteReq)
}

void AcceptInviteReq::SharedCtor() {
  _cached_size_ = 0;
  allianceid_ = 0u;
  operate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptInviteReq::~AcceptInviteReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.AcceptInviteReq)
  SharedDtor();
}

void AcceptInviteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AcceptInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptInviteReq_descriptor_;
}

const AcceptInviteReq& AcceptInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

AcceptInviteReq* AcceptInviteReq::default_instance_ = NULL;

AcceptInviteReq* AcceptInviteReq::New() const {
  return new AcceptInviteReq;
}

void AcceptInviteReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AcceptInviteReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(allianceid_, operate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.AcceptInviteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 allianceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // required uint32 operate = 2;
      case 2: {
        if (tag == 16) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.AcceptInviteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.AcceptInviteReq)
  return false;
#undef DO_
}

void AcceptInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.AcceptInviteReq)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->allianceid(), output);
  }

  // required uint32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.AcceptInviteReq)
}

::google::protobuf::uint8* AcceptInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.AcceptInviteReq)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->allianceid(), target);
  }

  // required uint32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.AcceptInviteReq)
  return target;
}

int AcceptInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 allianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

    // required uint32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptInviteReq::MergeFrom(const AcceptInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptInviteReq::CopyFrom(const AcceptInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AcceptInviteReq::Swap(AcceptInviteReq* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(operate_, other->operate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptInviteReq_descriptor_;
  metadata.reflection = AcceptInviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAcceptInviteBC::kAllianceIdFieldNumber;
const int RequestAcceptInviteBC::kInviteUidFieldNumber;
const int RequestAcceptInviteBC::kOperateFieldNumber;
const int RequestAcceptInviteBC::kMemberFieldNumber;
#endif  // !_MSC_VER

RequestAcceptInviteBC::RequestAcceptInviteBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAcceptInviteBC)
}

void RequestAcceptInviteBC::InitAsDefaultInstance() {
  member_ = const_cast< ::ProtoAlliance::AllianceMemberCPP*>(&::ProtoAlliance::AllianceMemberCPP::default_instance());
}

RequestAcceptInviteBC::RequestAcceptInviteBC(const RequestAcceptInviteBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAcceptInviteBC)
}

void RequestAcceptInviteBC::SharedCtor() {
  _cached_size_ = 0;
  allianceid_ = 0u;
  inviteuid_ = 0u;
  operate_ = 0u;
  member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAcceptInviteBC::~RequestAcceptInviteBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAcceptInviteBC)
  SharedDtor();
}

void RequestAcceptInviteBC::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
  }
}

void RequestAcceptInviteBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAcceptInviteBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAcceptInviteBC_descriptor_;
}

const RequestAcceptInviteBC& RequestAcceptInviteBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAcceptInviteBC* RequestAcceptInviteBC::default_instance_ = NULL;

RequestAcceptInviteBC* RequestAcceptInviteBC::New() const {
  return new RequestAcceptInviteBC;
}

void RequestAcceptInviteBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAcceptInviteBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(allianceid_, inviteuid_);
    operate_ = 0u;
    if (has_member()) {
      if (member_ != NULL) member_->::ProtoAlliance::AllianceMemberCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAcceptInviteBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAcceptInviteBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 allianceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inviteUid;
        break;
      }

      // required uint32 inviteUid = 2;
      case 2: {
        if (tag == 16) {
         parse_inviteUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviteuid_)));
          set_has_inviteuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operate;
        break;
      }

      // required uint32 operate = 3;
      case 3: {
        if (tag == 24) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_member;
        break;
      }

      // optional .ProtoAlliance.AllianceMemberCPP member = 4;
      case 4: {
        if (tag == 34) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAcceptInviteBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAcceptInviteBC)
  return false;
#undef DO_
}

void RequestAcceptInviteBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAcceptInviteBC)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->allianceid(), output);
  }

  // required uint32 inviteUid = 2;
  if (has_inviteuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inviteuid(), output);
  }

  // required uint32 operate = 3;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operate(), output);
  }

  // optional .ProtoAlliance.AllianceMemberCPP member = 4;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->member(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAcceptInviteBC)
}

::google::protobuf::uint8* RequestAcceptInviteBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAcceptInviteBC)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->allianceid(), target);
  }

  // required uint32 inviteUid = 2;
  if (has_inviteuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inviteuid(), target);
  }

  // required uint32 operate = 3;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operate(), target);
  }

  // optional .ProtoAlliance.AllianceMemberCPP member = 4;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->member(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAcceptInviteBC)
  return target;
}

int RequestAcceptInviteBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 allianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

    // required uint32 inviteUid = 2;
    if (has_inviteuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviteuid());
    }

    // required uint32 operate = 3;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate());
    }

    // optional .ProtoAlliance.AllianceMemberCPP member = 4;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAcceptInviteBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAcceptInviteBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAcceptInviteBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAcceptInviteBC::MergeFrom(const RequestAcceptInviteBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_inviteuid()) {
      set_inviteuid(from.inviteuid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_member()) {
      mutable_member()->::ProtoAlliance::AllianceMemberCPP::MergeFrom(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAcceptInviteBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAcceptInviteBC::CopyFrom(const RequestAcceptInviteBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAcceptInviteBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_member()) {
    if (!this->member().IsInitialized()) return false;
  }
  return true;
}

void RequestAcceptInviteBC::Swap(RequestAcceptInviteBC* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(inviteuid_, other->inviteuid_);
    std::swap(operate_, other->operate_);
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAcceptInviteBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAcceptInviteBC_descriptor_;
  metadata.reflection = RequestAcceptInviteBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAcceptInviteBC::kUidFieldNumber;
const int ReplyAcceptInviteBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyAcceptInviteBC::ReplyAcceptInviteBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAcceptInviteBC)
}

void ReplyAcceptInviteBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::AcceptInviteResp*>(&::ProtoAlliance::AcceptInviteResp::default_instance());
}

ReplyAcceptInviteBC::ReplyAcceptInviteBC(const ReplyAcceptInviteBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAcceptInviteBC)
}

void ReplyAcceptInviteBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAcceptInviteBC::~ReplyAcceptInviteBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAcceptInviteBC)
  SharedDtor();
}

void ReplyAcceptInviteBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyAcceptInviteBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAcceptInviteBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAcceptInviteBC_descriptor_;
}

const ReplyAcceptInviteBC& ReplyAcceptInviteBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAcceptInviteBC* ReplyAcceptInviteBC::default_instance_ = NULL;

ReplyAcceptInviteBC* ReplyAcceptInviteBC::New() const {
  return new ReplyAcceptInviteBC;
}

void ReplyAcceptInviteBC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::AcceptInviteResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAcceptInviteBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAcceptInviteBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.AcceptInviteResp alliance = 2;
      case 2: {
        if (tag == 18) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAcceptInviteBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAcceptInviteBC)
  return false;
#undef DO_
}

void ReplyAcceptInviteBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAcceptInviteBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .ProtoAlliance.AcceptInviteResp alliance = 2;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAcceptInviteBC)
}

::google::protobuf::uint8* ReplyAcceptInviteBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAcceptInviteBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional .ProtoAlliance.AcceptInviteResp alliance = 2;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAcceptInviteBC)
  return target;
}

int ReplyAcceptInviteBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .ProtoAlliance.AcceptInviteResp alliance = 2;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAcceptInviteBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAcceptInviteBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAcceptInviteBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAcceptInviteBC::MergeFrom(const ReplyAcceptInviteBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::AcceptInviteResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAcceptInviteBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAcceptInviteBC::CopyFrom(const ReplyAcceptInviteBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAcceptInviteBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyAcceptInviteBC::Swap(ReplyAcceptInviteBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAcceptInviteBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAcceptInviteBC_descriptor_;
  metadata.reflection = ReplyAcceptInviteBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptInviteResp::kAllianceIdFieldNumber;
const int AcceptInviteResp::kOperateFieldNumber;
const int AcceptInviteResp::kMemberFieldNumber;
const int AcceptInviteResp::kCommonsFieldNumber;
const int AcceptInviteResp::kAllianceFieldNumber;
#endif  // !_MSC_VER

AcceptInviteResp::AcceptInviteResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.AcceptInviteResp)
}

void AcceptInviteResp::InitAsDefaultInstance() {
  member_ = const_cast< ::ProtoAlliance::AllianceMemberCPP*>(&::ProtoAlliance::AllianceMemberCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  alliance_ = const_cast< ::ProtoAlliance::AllianceCPP*>(&::ProtoAlliance::AllianceCPP::default_instance());
}

AcceptInviteResp::AcceptInviteResp(const AcceptInviteResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.AcceptInviteResp)
}

void AcceptInviteResp::SharedCtor() {
  _cached_size_ = 0;
  allianceid_ = 0u;
  operate_ = 0u;
  member_ = NULL;
  commons_ = NULL;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptInviteResp::~AcceptInviteResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.AcceptInviteResp)
  SharedDtor();
}

void AcceptInviteResp::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
    delete commons_;
    delete alliance_;
  }
}

void AcceptInviteResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptInviteResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptInviteResp_descriptor_;
}

const AcceptInviteResp& AcceptInviteResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

AcceptInviteResp* AcceptInviteResp::default_instance_ = NULL;

AcceptInviteResp* AcceptInviteResp::New() const {
  return new AcceptInviteResp;
}

void AcceptInviteResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AcceptInviteResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(allianceid_, operate_);
    if (has_member()) {
      if (member_ != NULL) member_->::ProtoAlliance::AllianceMemberCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::AllianceCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptInviteResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.AcceptInviteResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 allianceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // required uint32 operate = 2;
      case 2: {
        if (tag == 16) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_member;
        break;
      }

      // optional .ProtoAlliance.AllianceMemberCPP member = 3;
      case 3: {
        if (tag == 26) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 4;
      case 4: {
        if (tag == 34) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.AllianceCPP alliance = 5;
      case 5: {
        if (tag == 42) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.AcceptInviteResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.AcceptInviteResp)
  return false;
#undef DO_
}

void AcceptInviteResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.AcceptInviteResp)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->allianceid(), output);
  }

  // required uint32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operate(), output);
  }

  // optional .ProtoAlliance.AllianceMemberCPP member = 3;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->member(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 4;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->commons(), output);
  }

  // optional .ProtoAlliance.AllianceCPP alliance = 5;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.AcceptInviteResp)
}

::google::protobuf::uint8* AcceptInviteResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.AcceptInviteResp)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->allianceid(), target);
  }

  // required uint32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operate(), target);
  }

  // optional .ProtoAlliance.AllianceMemberCPP member = 3;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->member(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 4;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->commons(), target);
  }

  // optional .ProtoAlliance.AllianceCPP alliance = 5;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.AcceptInviteResp)
  return target;
}

int AcceptInviteResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 allianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

    // required uint32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate());
    }

    // optional .ProtoAlliance.AllianceMemberCPP member = 3;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

    // optional .DataCommon.CommonItemsCPP commons = 4;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // optional .ProtoAlliance.AllianceCPP alliance = 5;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptInviteResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptInviteResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptInviteResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptInviteResp::MergeFrom(const AcceptInviteResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_member()) {
      mutable_member()->::ProtoAlliance::AllianceMemberCPP::MergeFrom(from.member());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::AllianceCPP::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptInviteResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptInviteResp::CopyFrom(const AcceptInviteResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptInviteResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_member()) {
    if (!this->member().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void AcceptInviteResp::Swap(AcceptInviteResp* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(operate_, other->operate_);
    std::swap(member_, other->member_);
    std::swap(commons_, other->commons_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptInviteResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptInviteResp_descriptor_;
  metadata.reflection = AcceptInviteResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManipulateMemberReq::kMemberUidFieldNumber;
const int ManipulateMemberReq::kOperateFieldNumber;
const int ManipulateMemberReq::kTypeFieldNumber;
const int ManipulateMemberReq::kDestinationFieldNumber;
#endif  // !_MSC_VER

ManipulateMemberReq::ManipulateMemberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ManipulateMemberReq)
}

void ManipulateMemberReq::InitAsDefaultInstance() {
}

ManipulateMemberReq::ManipulateMemberReq(const ManipulateMemberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ManipulateMemberReq)
}

void ManipulateMemberReq::SharedCtor() {
  _cached_size_ = 0;
  memberuid_ = 0u;
  operate_ = 0u;
  type_ = 0u;
  destination_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManipulateMemberReq::~ManipulateMemberReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ManipulateMemberReq)
  SharedDtor();
}

void ManipulateMemberReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ManipulateMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManipulateMemberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManipulateMemberReq_descriptor_;
}

const ManipulateMemberReq& ManipulateMemberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ManipulateMemberReq* ManipulateMemberReq::default_instance_ = NULL;

ManipulateMemberReq* ManipulateMemberReq::New() const {
  return new ManipulateMemberReq;
}

void ManipulateMemberReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ManipulateMemberReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(memberuid_, destination_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManipulateMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ManipulateMemberReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 memberUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberuid_)));
          set_has_memberuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // required uint32 operate = 2;
      case 2: {
        if (tag == 16) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_destination;
        break;
      }

      // required uint32 destination = 4;
      case 4: {
        if (tag == 32) {
         parse_destination:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_)));
          set_has_destination();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ManipulateMemberReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ManipulateMemberReq)
  return false;
#undef DO_
}

void ManipulateMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ManipulateMemberReq)
  // required uint32 memberUid = 1;
  if (has_memberuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->memberuid(), output);
  }

  // required uint32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operate(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 destination = 4;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->destination(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ManipulateMemberReq)
}

::google::protobuf::uint8* ManipulateMemberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ManipulateMemberReq)
  // required uint32 memberUid = 1;
  if (has_memberuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->memberuid(), target);
  }

  // required uint32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operate(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 destination = 4;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->destination(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ManipulateMemberReq)
  return target;
}

int ManipulateMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 memberUid = 1;
    if (has_memberuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberuid());
    }

    // required uint32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 destination = 4;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destination());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManipulateMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManipulateMemberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManipulateMemberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManipulateMemberReq::MergeFrom(const ManipulateMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberuid()) {
      set_memberuid(from.memberuid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_destination()) {
      set_destination(from.destination());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManipulateMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManipulateMemberReq::CopyFrom(const ManipulateMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManipulateMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ManipulateMemberReq::Swap(ManipulateMemberReq* other) {
  if (other != this) {
    std::swap(memberuid_, other->memberuid_);
    std::swap(operate_, other->operate_);
    std::swap(type_, other->type_);
    std::swap(destination_, other->destination_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManipulateMemberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManipulateMemberReq_descriptor_;
  metadata.reflection = ManipulateMemberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestManipulateMemberBC::kAidFieldNumber;
const int RequestManipulateMemberBC::kUidFieldNumber;
const int RequestManipulateMemberBC::kInfoFieldNumber;
#endif  // !_MSC_VER

RequestManipulateMemberBC::RequestManipulateMemberBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestManipulateMemberBC)
}

void RequestManipulateMemberBC::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoAlliance::ManipulateMemberReq*>(&::ProtoAlliance::ManipulateMemberReq::default_instance());
}

RequestManipulateMemberBC::RequestManipulateMemberBC(const RequestManipulateMemberBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestManipulateMemberBC)
}

void RequestManipulateMemberBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestManipulateMemberBC::~RequestManipulateMemberBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestManipulateMemberBC)
  SharedDtor();
}

void RequestManipulateMemberBC::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void RequestManipulateMemberBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestManipulateMemberBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestManipulateMemberBC_descriptor_;
}

const RequestManipulateMemberBC& RequestManipulateMemberBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestManipulateMemberBC* RequestManipulateMemberBC::default_instance_ = NULL;

RequestManipulateMemberBC* RequestManipulateMemberBC::New() const {
  return new RequestManipulateMemberBC;
}

void RequestManipulateMemberBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestManipulateMemberBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(aid_, uid_);
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoAlliance::ManipulateMemberReq::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestManipulateMemberBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestManipulateMemberBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // required .ProtoAlliance.ManipulateMemberReq info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestManipulateMemberBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestManipulateMemberBC)
  return false;
#undef DO_
}

void RequestManipulateMemberBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestManipulateMemberBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required .ProtoAlliance.ManipulateMemberReq info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestManipulateMemberBC)
}

::google::protobuf::uint8* RequestManipulateMemberBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestManipulateMemberBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required .ProtoAlliance.ManipulateMemberReq info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestManipulateMemberBC)
  return target;
}

int RequestManipulateMemberBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required .ProtoAlliance.ManipulateMemberReq info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestManipulateMemberBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestManipulateMemberBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestManipulateMemberBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestManipulateMemberBC::MergeFrom(const RequestManipulateMemberBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info()) {
      mutable_info()->::ProtoAlliance::ManipulateMemberReq::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestManipulateMemberBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestManipulateMemberBC::CopyFrom(const RequestManipulateMemberBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestManipulateMemberBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void RequestManipulateMemberBC::Swap(RequestManipulateMemberBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestManipulateMemberBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestManipulateMemberBC_descriptor_;
  metadata.reflection = RequestManipulateMemberBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyManipulateMemberBC::kUidFieldNumber;
const int ReplyManipulateMemberBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyManipulateMemberBC::ReplyManipulateMemberBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyManipulateMemberBC)
}

void ReplyManipulateMemberBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::ManipulateMemberResp*>(&::ProtoAlliance::ManipulateMemberResp::default_instance());
}

ReplyManipulateMemberBC::ReplyManipulateMemberBC(const ReplyManipulateMemberBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyManipulateMemberBC)
}

void ReplyManipulateMemberBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyManipulateMemberBC::~ReplyManipulateMemberBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyManipulateMemberBC)
  SharedDtor();
}

void ReplyManipulateMemberBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyManipulateMemberBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyManipulateMemberBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyManipulateMemberBC_descriptor_;
}

const ReplyManipulateMemberBC& ReplyManipulateMemberBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyManipulateMemberBC* ReplyManipulateMemberBC::default_instance_ = NULL;

ReplyManipulateMemberBC* ReplyManipulateMemberBC::New() const {
  return new ReplyManipulateMemberBC;
}

void ReplyManipulateMemberBC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::ManipulateMemberResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyManipulateMemberBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyManipulateMemberBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.ManipulateMemberResp alliance = 2;
      case 2: {
        if (tag == 18) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyManipulateMemberBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyManipulateMemberBC)
  return false;
#undef DO_
}

void ReplyManipulateMemberBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyManipulateMemberBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .ProtoAlliance.ManipulateMemberResp alliance = 2;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyManipulateMemberBC)
}

::google::protobuf::uint8* ReplyManipulateMemberBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyManipulateMemberBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional .ProtoAlliance.ManipulateMemberResp alliance = 2;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyManipulateMemberBC)
  return target;
}

int ReplyManipulateMemberBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .ProtoAlliance.ManipulateMemberResp alliance = 2;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyManipulateMemberBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyManipulateMemberBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyManipulateMemberBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyManipulateMemberBC::MergeFrom(const ReplyManipulateMemberBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::ManipulateMemberResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyManipulateMemberBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyManipulateMemberBC::CopyFrom(const ReplyManipulateMemberBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyManipulateMemberBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyManipulateMemberBC::Swap(ReplyManipulateMemberBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyManipulateMemberBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyManipulateMemberBC_descriptor_;
  metadata.reflection = ReplyManipulateMemberBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManipulateMemberResp::kMemberFieldNumber;
#endif  // !_MSC_VER

ManipulateMemberResp::ManipulateMemberResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ManipulateMemberResp)
}

void ManipulateMemberResp::InitAsDefaultInstance() {
  member_ = const_cast< ::ProtoAlliance::AllianceMemberCPP*>(&::ProtoAlliance::AllianceMemberCPP::default_instance());
}

ManipulateMemberResp::ManipulateMemberResp(const ManipulateMemberResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ManipulateMemberResp)
}

void ManipulateMemberResp::SharedCtor() {
  _cached_size_ = 0;
  member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManipulateMemberResp::~ManipulateMemberResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ManipulateMemberResp)
  SharedDtor();
}

void ManipulateMemberResp::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
  }
}

void ManipulateMemberResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManipulateMemberResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManipulateMemberResp_descriptor_;
}

const ManipulateMemberResp& ManipulateMemberResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ManipulateMemberResp* ManipulateMemberResp::default_instance_ = NULL;

ManipulateMemberResp* ManipulateMemberResp::New() const {
  return new ManipulateMemberResp;
}

void ManipulateMemberResp::Clear() {
  if (has_member()) {
    if (member_ != NULL) member_->::ProtoAlliance::AllianceMemberCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManipulateMemberResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ManipulateMemberResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoAlliance.AllianceMemberCPP member = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ManipulateMemberResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ManipulateMemberResp)
  return false;
#undef DO_
}

void ManipulateMemberResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ManipulateMemberResp)
  // required .ProtoAlliance.AllianceMemberCPP member = 1;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ManipulateMemberResp)
}

::google::protobuf::uint8* ManipulateMemberResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ManipulateMemberResp)
  // required .ProtoAlliance.AllianceMemberCPP member = 1;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ManipulateMemberResp)
  return target;
}

int ManipulateMemberResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoAlliance.AllianceMemberCPP member = 1;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManipulateMemberResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManipulateMemberResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManipulateMemberResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManipulateMemberResp::MergeFrom(const ManipulateMemberResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member()) {
      mutable_member()->::ProtoAlliance::AllianceMemberCPP::MergeFrom(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManipulateMemberResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManipulateMemberResp::CopyFrom(const ManipulateMemberResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManipulateMemberResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_member()) {
    if (!this->member().IsInitialized()) return false;
  }
  return true;
}

void ManipulateMemberResp::Swap(ManipulateMemberResp* other) {
  if (other != this) {
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManipulateMemberResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManipulateMemberResp_descriptor_;
  metadata.reflection = ManipulateMemberResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickOutReq::kMemberUidFieldNumber;
#endif  // !_MSC_VER

KickOutReq::KickOutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.KickOutReq)
}

void KickOutReq::InitAsDefaultInstance() {
}

KickOutReq::KickOutReq(const KickOutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.KickOutReq)
}

void KickOutReq::SharedCtor() {
  _cached_size_ = 0;
  memberuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickOutReq::~KickOutReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.KickOutReq)
  SharedDtor();
}

void KickOutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickOutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickOutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickOutReq_descriptor_;
}

const KickOutReq& KickOutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

KickOutReq* KickOutReq::default_instance_ = NULL;

KickOutReq* KickOutReq::New() const {
  return new KickOutReq;
}

void KickOutReq::Clear() {
  memberuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickOutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.KickOutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 memberUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberuid_)));
          set_has_memberuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.KickOutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.KickOutReq)
  return false;
#undef DO_
}

void KickOutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.KickOutReq)
  // required uint32 memberUid = 1;
  if (has_memberuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->memberuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.KickOutReq)
}

::google::protobuf::uint8* KickOutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.KickOutReq)
  // required uint32 memberUid = 1;
  if (has_memberuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->memberuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.KickOutReq)
  return target;
}

int KickOutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 memberUid = 1;
    if (has_memberuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickOutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickOutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickOutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickOutReq::MergeFrom(const KickOutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberuid()) {
      set_memberuid(from.memberuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickOutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOutReq::CopyFrom(const KickOutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOutReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KickOutReq::Swap(KickOutReq* other) {
  if (other != this) {
    std::swap(memberuid_, other->memberuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickOutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickOutReq_descriptor_;
  metadata.reflection = KickOutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestKickOutBC::kAidFieldNumber;
const int RequestKickOutBC::kUidFieldNumber;
const int RequestKickOutBC::kMemberUidFieldNumber;
#endif  // !_MSC_VER

RequestKickOutBC::RequestKickOutBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestKickOutBC)
}

void RequestKickOutBC::InitAsDefaultInstance() {
}

RequestKickOutBC::RequestKickOutBC(const RequestKickOutBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestKickOutBC)
}

void RequestKickOutBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  memberuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestKickOutBC::~RequestKickOutBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestKickOutBC)
  SharedDtor();
}

void RequestKickOutBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestKickOutBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestKickOutBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestKickOutBC_descriptor_;
}

const RequestKickOutBC& RequestKickOutBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestKickOutBC* RequestKickOutBC::default_instance_ = NULL;

RequestKickOutBC* RequestKickOutBC::New() const {
  return new RequestKickOutBC;
}

void RequestKickOutBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestKickOutBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, memberuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestKickOutBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestKickOutBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_memberUid;
        break;
      }

      // required uint32 memberUid = 3;
      case 3: {
        if (tag == 24) {
         parse_memberUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberuid_)));
          set_has_memberuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestKickOutBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestKickOutBC)
  return false;
#undef DO_
}

void RequestKickOutBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestKickOutBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 memberUid = 3;
  if (has_memberuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->memberuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestKickOutBC)
}

::google::protobuf::uint8* RequestKickOutBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestKickOutBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 memberUid = 3;
  if (has_memberuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->memberuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestKickOutBC)
  return target;
}

int RequestKickOutBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 memberUid = 3;
    if (has_memberuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestKickOutBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestKickOutBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestKickOutBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestKickOutBC::MergeFrom(const RequestKickOutBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_memberuid()) {
      set_memberuid(from.memberuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestKickOutBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestKickOutBC::CopyFrom(const RequestKickOutBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestKickOutBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestKickOutBC::Swap(RequestKickOutBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(memberuid_, other->memberuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestKickOutBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestKickOutBC_descriptor_;
  metadata.reflection = RequestKickOutBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyKickOutBC::kUidFieldNumber;
const int ReplyKickOutBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyKickOutBC::ReplyKickOutBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyKickOutBC)
}

void ReplyKickOutBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::KickOutResp*>(&::ProtoAlliance::KickOutResp::default_instance());
}

ReplyKickOutBC::ReplyKickOutBC(const ReplyKickOutBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyKickOutBC)
}

void ReplyKickOutBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyKickOutBC::~ReplyKickOutBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyKickOutBC)
  SharedDtor();
}

void ReplyKickOutBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyKickOutBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyKickOutBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyKickOutBC_descriptor_;
}

const ReplyKickOutBC& ReplyKickOutBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyKickOutBC* ReplyKickOutBC::default_instance_ = NULL;

ReplyKickOutBC* ReplyKickOutBC::New() const {
  return new ReplyKickOutBC;
}

void ReplyKickOutBC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::KickOutResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyKickOutBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyKickOutBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.KickOutResp alliance = 2;
      case 2: {
        if (tag == 18) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyKickOutBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyKickOutBC)
  return false;
#undef DO_
}

void ReplyKickOutBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyKickOutBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .ProtoAlliance.KickOutResp alliance = 2;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyKickOutBC)
}

::google::protobuf::uint8* ReplyKickOutBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyKickOutBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional .ProtoAlliance.KickOutResp alliance = 2;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyKickOutBC)
  return target;
}

int ReplyKickOutBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .ProtoAlliance.KickOutResp alliance = 2;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyKickOutBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyKickOutBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyKickOutBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyKickOutBC::MergeFrom(const ReplyKickOutBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::KickOutResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyKickOutBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyKickOutBC::CopyFrom(const ReplyKickOutBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyKickOutBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyKickOutBC::Swap(ReplyKickOutBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyKickOutBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyKickOutBC_descriptor_;
  metadata.reflection = ReplyKickOutBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestKickOutMemberBC::kAidFieldNumber;
const int RequestKickOutMemberBC::kUidFieldNumber;
const int RequestKickOutMemberBC::kMemberUidFieldNumber;
#endif  // !_MSC_VER

RequestKickOutMemberBC::RequestKickOutMemberBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestKickOutMemberBC)
}

void RequestKickOutMemberBC::InitAsDefaultInstance() {
}

RequestKickOutMemberBC::RequestKickOutMemberBC(const RequestKickOutMemberBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestKickOutMemberBC)
}

void RequestKickOutMemberBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  memberuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestKickOutMemberBC::~RequestKickOutMemberBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestKickOutMemberBC)
  SharedDtor();
}

void RequestKickOutMemberBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestKickOutMemberBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestKickOutMemberBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestKickOutMemberBC_descriptor_;
}

const RequestKickOutMemberBC& RequestKickOutMemberBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestKickOutMemberBC* RequestKickOutMemberBC::default_instance_ = NULL;

RequestKickOutMemberBC* RequestKickOutMemberBC::New() const {
  return new RequestKickOutMemberBC;
}

void RequestKickOutMemberBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestKickOutMemberBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, memberuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestKickOutMemberBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestKickOutMemberBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_memberUid;
        break;
      }

      // required uint32 memberUid = 3;
      case 3: {
        if (tag == 24) {
         parse_memberUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberuid_)));
          set_has_memberuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestKickOutMemberBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestKickOutMemberBC)
  return false;
#undef DO_
}

void RequestKickOutMemberBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestKickOutMemberBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 memberUid = 3;
  if (has_memberuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->memberuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestKickOutMemberBC)
}

::google::protobuf::uint8* RequestKickOutMemberBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestKickOutMemberBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 memberUid = 3;
  if (has_memberuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->memberuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestKickOutMemberBC)
  return target;
}

int RequestKickOutMemberBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 memberUid = 3;
    if (has_memberuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestKickOutMemberBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestKickOutMemberBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestKickOutMemberBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestKickOutMemberBC::MergeFrom(const RequestKickOutMemberBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_memberuid()) {
      set_memberuid(from.memberuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestKickOutMemberBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestKickOutMemberBC::CopyFrom(const RequestKickOutMemberBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestKickOutMemberBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestKickOutMemberBC::Swap(RequestKickOutMemberBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(memberuid_, other->memberuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestKickOutMemberBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestKickOutMemberBC_descriptor_;
  metadata.reflection = RequestKickOutMemberBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickOutResp::kMemberUidFieldNumber;
#endif  // !_MSC_VER

KickOutResp::KickOutResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.KickOutResp)
}

void KickOutResp::InitAsDefaultInstance() {
}

KickOutResp::KickOutResp(const KickOutResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.KickOutResp)
}

void KickOutResp::SharedCtor() {
  _cached_size_ = 0;
  memberuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickOutResp::~KickOutResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.KickOutResp)
  SharedDtor();
}

void KickOutResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickOutResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickOutResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickOutResp_descriptor_;
}

const KickOutResp& KickOutResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

KickOutResp* KickOutResp::default_instance_ = NULL;

KickOutResp* KickOutResp::New() const {
  return new KickOutResp;
}

void KickOutResp::Clear() {
  memberuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickOutResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.KickOutResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 memberUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberuid_)));
          set_has_memberuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.KickOutResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.KickOutResp)
  return false;
#undef DO_
}

void KickOutResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.KickOutResp)
  // required uint32 memberUid = 1;
  if (has_memberuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->memberuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.KickOutResp)
}

::google::protobuf::uint8* KickOutResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.KickOutResp)
  // required uint32 memberUid = 1;
  if (has_memberuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->memberuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.KickOutResp)
  return target;
}

int KickOutResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 memberUid = 1;
    if (has_memberuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickOutResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickOutResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickOutResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickOutResp::MergeFrom(const KickOutResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberuid()) {
      set_memberuid(from.memberuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickOutResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOutResp::CopyFrom(const KickOutResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOutResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KickOutResp::Swap(KickOutResp* other) {
  if (other != this) {
    std::swap(memberuid_, other->memberuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickOutResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickOutResp_descriptor_;
  metadata.reflection = KickOutResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferReq::kMemberUidFieldNumber;
const int TransferReq::kOtherNameFieldNumber;
#endif  // !_MSC_VER

TransferReq::TransferReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.TransferReq)
}

void TransferReq::InitAsDefaultInstance() {
}

TransferReq::TransferReq(const TransferReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.TransferReq)
}

void TransferReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  memberuid_ = 0u;
  othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferReq::~TransferReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.TransferReq)
  SharedDtor();
}

void TransferReq::SharedDtor() {
  if (othername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete othername_;
  }
  if (this != default_instance_) {
  }
}

void TransferReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferReq_descriptor_;
}

const TransferReq& TransferReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

TransferReq* TransferReq::default_instance_ = NULL;

TransferReq* TransferReq::New() const {
  return new TransferReq;
}

void TransferReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    memberuid_ = 0u;
    if (has_othername()) {
      if (othername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        othername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.TransferReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 memberUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberuid_)));
          set_has_memberuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_otherName;
        break;
      }

      // required bytes otherName = 2;
      case 2: {
        if (tag == 18) {
         parse_otherName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_othername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.TransferReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.TransferReq)
  return false;
#undef DO_
}

void TransferReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.TransferReq)
  // required uint32 memberUid = 1;
  if (has_memberuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->memberuid(), output);
  }

  // required bytes otherName = 2;
  if (has_othername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->othername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.TransferReq)
}

::google::protobuf::uint8* TransferReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.TransferReq)
  // required uint32 memberUid = 1;
  if (has_memberuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->memberuid(), target);
  }

  // required bytes otherName = 2;
  if (has_othername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->othername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.TransferReq)
  return target;
}

int TransferReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 memberUid = 1;
    if (has_memberuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberuid());
    }

    // required bytes otherName = 2;
    if (has_othername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->othername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferReq::MergeFrom(const TransferReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberuid()) {
      set_memberuid(from.memberuid());
    }
    if (from.has_othername()) {
      set_othername(from.othername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferReq::CopyFrom(const TransferReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TransferReq::Swap(TransferReq* other) {
  if (other != this) {
    std::swap(memberuid_, other->memberuid_);
    std::swap(othername_, other->othername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferReq_descriptor_;
  metadata.reflection = TransferReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTransferBC::kAidFieldNumber;
const int RequestTransferBC::kUidFieldNumber;
const int RequestTransferBC::kMemberUidFieldNumber;
const int RequestTransferBC::kOtherNameFieldNumber;
#endif  // !_MSC_VER

RequestTransferBC::RequestTransferBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestTransferBC)
}

void RequestTransferBC::InitAsDefaultInstance() {
}

RequestTransferBC::RequestTransferBC(const RequestTransferBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestTransferBC)
}

void RequestTransferBC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  memberuid_ = 0u;
  othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTransferBC::~RequestTransferBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestTransferBC)
  SharedDtor();
}

void RequestTransferBC::SharedDtor() {
  if (othername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete othername_;
  }
  if (this != default_instance_) {
  }
}

void RequestTransferBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestTransferBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestTransferBC_descriptor_;
}

const RequestTransferBC& RequestTransferBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestTransferBC* RequestTransferBC::default_instance_ = NULL;

RequestTransferBC* RequestTransferBC::New() const {
  return new RequestTransferBC;
}

void RequestTransferBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestTransferBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(aid_, uid_);
    memberuid_ = 0u;
    if (has_othername()) {
      if (othername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        othername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestTransferBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestTransferBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_memberUid;
        break;
      }

      // required uint32 memberUid = 3;
      case 3: {
        if (tag == 24) {
         parse_memberUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberuid_)));
          set_has_memberuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_otherName;
        break;
      }

      // required bytes otherName = 4;
      case 4: {
        if (tag == 34) {
         parse_otherName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_othername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestTransferBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestTransferBC)
  return false;
#undef DO_
}

void RequestTransferBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestTransferBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 memberUid = 3;
  if (has_memberuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->memberuid(), output);
  }

  // required bytes otherName = 4;
  if (has_othername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->othername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestTransferBC)
}

::google::protobuf::uint8* RequestTransferBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestTransferBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 memberUid = 3;
  if (has_memberuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->memberuid(), target);
  }

  // required bytes otherName = 4;
  if (has_othername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->othername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestTransferBC)
  return target;
}

int RequestTransferBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 memberUid = 3;
    if (has_memberuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberuid());
    }

    // required bytes otherName = 4;
    if (has_othername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->othername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTransferBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestTransferBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestTransferBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestTransferBC::MergeFrom(const RequestTransferBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_memberuid()) {
      set_memberuid(from.memberuid());
    }
    if (from.has_othername()) {
      set_othername(from.othername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestTransferBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTransferBC::CopyFrom(const RequestTransferBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTransferBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestTransferBC::Swap(RequestTransferBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(memberuid_, other->memberuid_);
    std::swap(othername_, other->othername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestTransferBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestTransferBC_descriptor_;
  metadata.reflection = RequestTransferBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyTransferBC::kUidFieldNumber;
const int ReplyTransferBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyTransferBC::ReplyTransferBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyTransferBC)
}

void ReplyTransferBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::TransferResp*>(&::ProtoAlliance::TransferResp::default_instance());
}

ReplyTransferBC::ReplyTransferBC(const ReplyTransferBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyTransferBC)
}

void ReplyTransferBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyTransferBC::~ReplyTransferBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyTransferBC)
  SharedDtor();
}

void ReplyTransferBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyTransferBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyTransferBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyTransferBC_descriptor_;
}

const ReplyTransferBC& ReplyTransferBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyTransferBC* ReplyTransferBC::default_instance_ = NULL;

ReplyTransferBC* ReplyTransferBC::New() const {
  return new ReplyTransferBC;
}

void ReplyTransferBC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::TransferResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyTransferBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyTransferBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.TransferResp alliance = 2;
      case 2: {
        if (tag == 18) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyTransferBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyTransferBC)
  return false;
#undef DO_
}

void ReplyTransferBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyTransferBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .ProtoAlliance.TransferResp alliance = 2;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyTransferBC)
}

::google::protobuf::uint8* ReplyTransferBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyTransferBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional .ProtoAlliance.TransferResp alliance = 2;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyTransferBC)
  return target;
}

int ReplyTransferBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .ProtoAlliance.TransferResp alliance = 2;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyTransferBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyTransferBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyTransferBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyTransferBC::MergeFrom(const ReplyTransferBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::TransferResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyTransferBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyTransferBC::CopyFrom(const ReplyTransferBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyTransferBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyTransferBC::Swap(ReplyTransferBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyTransferBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyTransferBC_descriptor_;
  metadata.reflection = ReplyTransferBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferResp::kMyselfFieldNumber;
const int TransferResp::kOtherFieldNumber;
const int TransferResp::kAllianceFieldNumber;
#endif  // !_MSC_VER

TransferResp::TransferResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.TransferResp)
}

void TransferResp::InitAsDefaultInstance() {
  myself_ = const_cast< ::ProtoAlliance::AllianceMemberCPP*>(&::ProtoAlliance::AllianceMemberCPP::default_instance());
  other_ = const_cast< ::ProtoAlliance::AllianceMemberCPP*>(&::ProtoAlliance::AllianceMemberCPP::default_instance());
  alliance_ = const_cast< ::ProtoAlliance::AllianceCPP*>(&::ProtoAlliance::AllianceCPP::default_instance());
}

TransferResp::TransferResp(const TransferResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.TransferResp)
}

void TransferResp::SharedCtor() {
  _cached_size_ = 0;
  myself_ = NULL;
  other_ = NULL;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferResp::~TransferResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.TransferResp)
  SharedDtor();
}

void TransferResp::SharedDtor() {
  if (this != default_instance_) {
    delete myself_;
    delete other_;
    delete alliance_;
  }
}

void TransferResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferResp_descriptor_;
}

const TransferResp& TransferResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

TransferResp* TransferResp::default_instance_ = NULL;

TransferResp* TransferResp::New() const {
  return new TransferResp;
}

void TransferResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_myself()) {
      if (myself_ != NULL) myself_->::ProtoAlliance::AllianceMemberCPP::Clear();
    }
    if (has_other()) {
      if (other_ != NULL) other_->::ProtoAlliance::AllianceMemberCPP::Clear();
    }
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::AllianceCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.TransferResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoAlliance.AllianceMemberCPP myself = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myself()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_other;
        break;
      }

      // required .ProtoAlliance.AllianceMemberCPP other = 2;
      case 2: {
        if (tag == 18) {
         parse_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_alliance;
        break;
      }

      // required .ProtoAlliance.AllianceCPP alliance = 3;
      case 3: {
        if (tag == 26) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.TransferResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.TransferResp)
  return false;
#undef DO_
}

void TransferResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.TransferResp)
  // required .ProtoAlliance.AllianceMemberCPP myself = 1;
  if (has_myself()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->myself(), output);
  }

  // required .ProtoAlliance.AllianceMemberCPP other = 2;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->other(), output);
  }

  // required .ProtoAlliance.AllianceCPP alliance = 3;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.TransferResp)
}

::google::protobuf::uint8* TransferResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.TransferResp)
  // required .ProtoAlliance.AllianceMemberCPP myself = 1;
  if (has_myself()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->myself(), target);
  }

  // required .ProtoAlliance.AllianceMemberCPP other = 2;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->other(), target);
  }

  // required .ProtoAlliance.AllianceCPP alliance = 3;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.TransferResp)
  return target;
}

int TransferResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoAlliance.AllianceMemberCPP myself = 1;
    if (has_myself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myself());
    }

    // required .ProtoAlliance.AllianceMemberCPP other = 2;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other());
    }

    // required .ProtoAlliance.AllianceCPP alliance = 3;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferResp::MergeFrom(const TransferResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myself()) {
      mutable_myself()->::ProtoAlliance::AllianceMemberCPP::MergeFrom(from.myself());
    }
    if (from.has_other()) {
      mutable_other()->::ProtoAlliance::AllianceMemberCPP::MergeFrom(from.other());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::AllianceCPP::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferResp::CopyFrom(const TransferResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_myself()) {
    if (!this->myself().IsInitialized()) return false;
  }
  if (has_other()) {
    if (!this->other().IsInitialized()) return false;
  }
  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void TransferResp::Swap(TransferResp* other) {
  if (other != this) {
    std::swap(myself_, other->myself_);
    std::swap(other_, other->other_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferResp_descriptor_;
  metadata.reflection = TransferResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EditAllianceReq::kFlagFieldNumber;
const int EditAllianceReq::kDescriptionFieldNumber;
const int EditAllianceReq::kApplyTypeFieldNumber;
const int EditAllianceReq::kApplyLevelLimitFieldNumber;
const int EditAllianceReq::kQqgroupFieldNumber;
#endif  // !_MSC_VER

EditAllianceReq::EditAllianceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.EditAllianceReq)
}

void EditAllianceReq::InitAsDefaultInstance() {
}

EditAllianceReq::EditAllianceReq(const EditAllianceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.EditAllianceReq)
}

void EditAllianceReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  flag_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applytype_ = 0u;
  applylevellimit_ = 0u;
  qqgroup_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditAllianceReq::~EditAllianceReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.EditAllianceReq)
  SharedDtor();
}

void EditAllianceReq::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void EditAllianceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditAllianceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditAllianceReq_descriptor_;
}

const EditAllianceReq& EditAllianceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

EditAllianceReq* EditAllianceReq::default_instance_ = NULL;

EditAllianceReq* EditAllianceReq::New() const {
  return new EditAllianceReq;
}

void EditAllianceReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EditAllianceReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(flag_, qqgroup_);
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditAllianceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.EditAllianceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // required bytes description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_applyType;
        break;
      }

      // required uint32 applyType = 3;
      case 3: {
        if (tag == 24) {
         parse_applyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applytype_)));
          set_has_applytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_applyLevelLimit;
        break;
      }

      // required uint32 applyLevelLimit = 4;
      case 4: {
        if (tag == 32) {
         parse_applyLevelLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applylevellimit_)));
          set_has_applylevellimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_qqgroup;
        break;
      }

      // optional uint32 qqgroup = 5;
      case 5: {
        if (tag == 40) {
         parse_qqgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qqgroup_)));
          set_has_qqgroup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.EditAllianceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.EditAllianceReq)
  return false;
#undef DO_
}

void EditAllianceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.EditAllianceReq)
  // required uint32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  // required bytes description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->description(), output);
  }

  // required uint32 applyType = 3;
  if (has_applytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->applytype(), output);
  }

  // required uint32 applyLevelLimit = 4;
  if (has_applylevellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->applylevellimit(), output);
  }

  // optional uint32 qqgroup = 5;
  if (has_qqgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->qqgroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.EditAllianceReq)
}

::google::protobuf::uint8* EditAllianceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.EditAllianceReq)
  // required uint32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  // required bytes description = 2;
  if (has_description()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->description(), target);
  }

  // required uint32 applyType = 3;
  if (has_applytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->applytype(), target);
  }

  // required uint32 applyLevelLimit = 4;
  if (has_applylevellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->applylevellimit(), target);
  }

  // optional uint32 qqgroup = 5;
  if (has_qqgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->qqgroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.EditAllianceReq)
  return target;
}

int EditAllianceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // required bytes description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }

    // required uint32 applyType = 3;
    if (has_applytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applytype());
    }

    // required uint32 applyLevelLimit = 4;
    if (has_applylevellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applylevellimit());
    }

    // optional uint32 qqgroup = 5;
    if (has_qqgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qqgroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditAllianceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditAllianceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditAllianceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditAllianceReq::MergeFrom(const EditAllianceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_applytype()) {
      set_applytype(from.applytype());
    }
    if (from.has_applylevellimit()) {
      set_applylevellimit(from.applylevellimit());
    }
    if (from.has_qqgroup()) {
      set_qqgroup(from.qqgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditAllianceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditAllianceReq::CopyFrom(const EditAllianceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditAllianceReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void EditAllianceReq::Swap(EditAllianceReq* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(description_, other->description_);
    std::swap(applytype_, other->applytype_);
    std::swap(applylevellimit_, other->applylevellimit_);
    std::swap(qqgroup_, other->qqgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditAllianceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditAllianceReq_descriptor_;
  metadata.reflection = EditAllianceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestEditAllianceBC::kAidFieldNumber;
const int RequestEditAllianceBC::kUidFieldNumber;
const int RequestEditAllianceBC::kInfoFieldNumber;
#endif  // !_MSC_VER

RequestEditAllianceBC::RequestEditAllianceBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestEditAllianceBC)
}

void RequestEditAllianceBC::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoAlliance::EditAllianceReq*>(&::ProtoAlliance::EditAllianceReq::default_instance());
}

RequestEditAllianceBC::RequestEditAllianceBC(const RequestEditAllianceBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestEditAllianceBC)
}

void RequestEditAllianceBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestEditAllianceBC::~RequestEditAllianceBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestEditAllianceBC)
  SharedDtor();
}

void RequestEditAllianceBC::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void RequestEditAllianceBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestEditAllianceBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestEditAllianceBC_descriptor_;
}

const RequestEditAllianceBC& RequestEditAllianceBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestEditAllianceBC* RequestEditAllianceBC::default_instance_ = NULL;

RequestEditAllianceBC* RequestEditAllianceBC::New() const {
  return new RequestEditAllianceBC;
}

void RequestEditAllianceBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestEditAllianceBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(aid_, uid_);
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoAlliance::EditAllianceReq::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestEditAllianceBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestEditAllianceBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // required .ProtoAlliance.EditAllianceReq info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestEditAllianceBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestEditAllianceBC)
  return false;
#undef DO_
}

void RequestEditAllianceBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestEditAllianceBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required .ProtoAlliance.EditAllianceReq info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestEditAllianceBC)
}

::google::protobuf::uint8* RequestEditAllianceBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestEditAllianceBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required .ProtoAlliance.EditAllianceReq info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestEditAllianceBC)
  return target;
}

int RequestEditAllianceBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required .ProtoAlliance.EditAllianceReq info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEditAllianceBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestEditAllianceBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestEditAllianceBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestEditAllianceBC::MergeFrom(const RequestEditAllianceBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info()) {
      mutable_info()->::ProtoAlliance::EditAllianceReq::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestEditAllianceBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestEditAllianceBC::CopyFrom(const RequestEditAllianceBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEditAllianceBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void RequestEditAllianceBC::Swap(RequestEditAllianceBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestEditAllianceBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestEditAllianceBC_descriptor_;
  metadata.reflection = RequestEditAllianceBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyEditAllianceBC::kUidFieldNumber;
const int ReplyEditAllianceBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyEditAllianceBC::ReplyEditAllianceBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyEditAllianceBC)
}

void ReplyEditAllianceBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::EditAllianceResp*>(&::ProtoAlliance::EditAllianceResp::default_instance());
}

ReplyEditAllianceBC::ReplyEditAllianceBC(const ReplyEditAllianceBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyEditAllianceBC)
}

void ReplyEditAllianceBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyEditAllianceBC::~ReplyEditAllianceBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyEditAllianceBC)
  SharedDtor();
}

void ReplyEditAllianceBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyEditAllianceBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyEditAllianceBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyEditAllianceBC_descriptor_;
}

const ReplyEditAllianceBC& ReplyEditAllianceBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyEditAllianceBC* ReplyEditAllianceBC::default_instance_ = NULL;

ReplyEditAllianceBC* ReplyEditAllianceBC::New() const {
  return new ReplyEditAllianceBC;
}

void ReplyEditAllianceBC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::EditAllianceResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyEditAllianceBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyEditAllianceBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.EditAllianceResp alliance = 2;
      case 2: {
        if (tag == 18) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyEditAllianceBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyEditAllianceBC)
  return false;
#undef DO_
}

void ReplyEditAllianceBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyEditAllianceBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .ProtoAlliance.EditAllianceResp alliance = 2;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyEditAllianceBC)
}

::google::protobuf::uint8* ReplyEditAllianceBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyEditAllianceBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional .ProtoAlliance.EditAllianceResp alliance = 2;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyEditAllianceBC)
  return target;
}

int ReplyEditAllianceBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .ProtoAlliance.EditAllianceResp alliance = 2;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyEditAllianceBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyEditAllianceBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyEditAllianceBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyEditAllianceBC::MergeFrom(const ReplyEditAllianceBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::EditAllianceResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyEditAllianceBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyEditAllianceBC::CopyFrom(const ReplyEditAllianceBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyEditAllianceBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyEditAllianceBC::Swap(ReplyEditAllianceBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyEditAllianceBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyEditAllianceBC_descriptor_;
  metadata.reflection = ReplyEditAllianceBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EditAllianceResp::kAllianceFieldNumber;
#endif  // !_MSC_VER

EditAllianceResp::EditAllianceResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.EditAllianceResp)
}

void EditAllianceResp::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::AllianceCPP*>(&::ProtoAlliance::AllianceCPP::default_instance());
}

EditAllianceResp::EditAllianceResp(const EditAllianceResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.EditAllianceResp)
}

void EditAllianceResp::SharedCtor() {
  _cached_size_ = 0;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EditAllianceResp::~EditAllianceResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.EditAllianceResp)
  SharedDtor();
}

void EditAllianceResp::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void EditAllianceResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EditAllianceResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EditAllianceResp_descriptor_;
}

const EditAllianceResp& EditAllianceResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

EditAllianceResp* EditAllianceResp::default_instance_ = NULL;

EditAllianceResp* EditAllianceResp::New() const {
  return new EditAllianceResp;
}

void EditAllianceResp::Clear() {
  if (has_alliance()) {
    if (alliance_ != NULL) alliance_->::ProtoAlliance::AllianceCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EditAllianceResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.EditAllianceResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoAlliance.AllianceCPP alliance = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.EditAllianceResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.EditAllianceResp)
  return false;
#undef DO_
}

void EditAllianceResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.EditAllianceResp)
  // required .ProtoAlliance.AllianceCPP alliance = 1;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.EditAllianceResp)
}

::google::protobuf::uint8* EditAllianceResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.EditAllianceResp)
  // required .ProtoAlliance.AllianceCPP alliance = 1;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.EditAllianceResp)
  return target;
}

int EditAllianceResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoAlliance.AllianceCPP alliance = 1;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EditAllianceResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EditAllianceResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EditAllianceResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EditAllianceResp::MergeFrom(const EditAllianceResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::AllianceCPP::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EditAllianceResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditAllianceResp::CopyFrom(const EditAllianceResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditAllianceResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void EditAllianceResp::Swap(EditAllianceResp* other) {
  if (other != this) {
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EditAllianceResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EditAllianceResp_descriptor_;
  metadata.reflection = EditAllianceResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceDonationCPP::kApplyUidFieldNumber;
const int AllianceDonationCPP::kPropsidFieldNumber;
const int AllianceDonationCPP::kCountFieldNumber;
const int AllianceDonationCPP::kDonateCountFieldNumber;
const int AllianceDonationCPP::kFetchCountFieldNumber;
const int AllianceDonationCPP::kStatusFieldNumber;
const int AllianceDonationCPP::kNameFieldNumber;
const int AllianceDonationCPP::kDonateUidFieldNumber;
const int AllianceDonationCPP::kDonateTimesFieldNumber;
const int AllianceDonationCPP::kDonateNameFieldNumber;
const int AllianceDonationCPP::kApplytsFieldNumber;
const int AllianceDonationCPP::kLevelFieldNumber;
#endif  // !_MSC_VER

AllianceDonationCPP::AllianceDonationCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.AllianceDonationCPP)
}

void AllianceDonationCPP::InitAsDefaultInstance() {
}

AllianceDonationCPP::AllianceDonationCPP(const AllianceDonationCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.AllianceDonationCPP)
}

void AllianceDonationCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  applyuid_ = 0u;
  propsid_ = 0u;
  count_ = 0u;
  donatecount_ = 0u;
  fetchcount_ = 0u;
  status_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applyts_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceDonationCPP::~AllianceDonationCPP() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.AllianceDonationCPP)
  SharedDtor();
}

void AllianceDonationCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AllianceDonationCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceDonationCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceDonationCPP_descriptor_;
}

const AllianceDonationCPP& AllianceDonationCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

AllianceDonationCPP* AllianceDonationCPP::default_instance_ = NULL;

AllianceDonationCPP* AllianceDonationCPP::New() const {
  return new AllianceDonationCPP;
}

void AllianceDonationCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllianceDonationCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(applyuid_, status_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ZR_(applyts_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  donateuid_.Clear();
  donatetimes_.Clear();
  donatename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceDonationCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.AllianceDonationCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 applyUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applyuid_)));
          set_has_applyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsid;
        break;
      }

      // required uint32 propsid = 2;
      case 2: {
        if (tag == 16) {
         parse_propsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_donateCount;
        break;
      }

      // required uint32 donateCount = 4;
      case 4: {
        if (tag == 32) {
         parse_donateCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatecount_)));
          set_has_donatecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fetchCount;
        break;
      }

      // required uint32 fetchCount = 5;
      case 5: {
        if (tag == 40) {
         parse_fetchCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fetchcount_)));
          set_has_fetchcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required uint32 status = 6;
      case 6: {
        if (tag == 48) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // required bytes name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_donateUid;
        break;
      }

      // repeated uint32 donateUid = 8;
      case 8: {
        if (tag == 64) {
         parse_donateUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_donateuid())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_donateuid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_donateUid;
        if (input->ExpectTag(72)) goto parse_donateTimes;
        break;
      }

      // repeated uint32 donateTimes = 9;
      case 9: {
        if (tag == 72) {
         parse_donateTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_donatetimes())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_donatetimes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_donateTimes;
        if (input->ExpectTag(82)) goto parse_donateName;
        break;
      }

      // repeated bytes donateName = 10;
      case 10: {
        if (tag == 82) {
         parse_donateName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_donatename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_donateName;
        if (input->ExpectTag(88)) goto parse_applyts;
        break;
      }

      // required uint32 applyts = 11;
      case 11: {
        if (tag == 88) {
         parse_applyts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applyts_)));
          set_has_applyts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_level;
        break;
      }

      // required uint32 level = 12;
      case 12: {
        if (tag == 96) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.AllianceDonationCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.AllianceDonationCPP)
  return false;
#undef DO_
}

void AllianceDonationCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.AllianceDonationCPP)
  // required uint32 applyUid = 1;
  if (has_applyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->applyuid(), output);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propsid(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required uint32 donateCount = 4;
  if (has_donatecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->donatecount(), output);
  }

  // required uint32 fetchCount = 5;
  if (has_fetchcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fetchcount(), output);
  }

  // required uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  // required bytes name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->name(), output);
  }

  // repeated uint32 donateUid = 8;
  for (int i = 0; i < this->donateuid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->donateuid(i), output);
  }

  // repeated uint32 donateTimes = 9;
  for (int i = 0; i < this->donatetimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->donatetimes(i), output);
  }

  // repeated bytes donateName = 10;
  for (int i = 0; i < this->donatename_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->donatename(i), output);
  }

  // required uint32 applyts = 11;
  if (has_applyts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->applyts(), output);
  }

  // required uint32 level = 12;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.AllianceDonationCPP)
}

::google::protobuf::uint8* AllianceDonationCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.AllianceDonationCPP)
  // required uint32 applyUid = 1;
  if (has_applyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->applyuid(), target);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propsid(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required uint32 donateCount = 4;
  if (has_donatecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->donatecount(), target);
  }

  // required uint32 fetchCount = 5;
  if (has_fetchcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fetchcount(), target);
  }

  // required uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  // required bytes name = 7;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->name(), target);
  }

  // repeated uint32 donateUid = 8;
  for (int i = 0; i < this->donateuid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->donateuid(i), target);
  }

  // repeated uint32 donateTimes = 9;
  for (int i = 0; i < this->donatetimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->donatetimes(i), target);
  }

  // repeated bytes donateName = 10;
  for (int i = 0; i < this->donatename_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(10, this->donatename(i), target);
  }

  // required uint32 applyts = 11;
  if (has_applyts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->applyts(), target);
  }

  // required uint32 level = 12;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.AllianceDonationCPP)
  return target;
}

int AllianceDonationCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 applyUid = 1;
    if (has_applyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applyuid());
    }

    // required uint32 propsid = 2;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 donateCount = 4;
    if (has_donatecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatecount());
    }

    // required uint32 fetchCount = 5;
    if (has_fetchcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fetchcount());
    }

    // required uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required bytes name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // required uint32 applyts = 11;
    if (has_applyts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applyts());
    }

    // required uint32 level = 12;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  // repeated uint32 donateUid = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->donateuid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->donateuid(i));
    }
    total_size += 1 * this->donateuid_size() + data_size;
  }

  // repeated uint32 donateTimes = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->donatetimes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->donatetimes(i));
    }
    total_size += 1 * this->donatetimes_size() + data_size;
  }

  // repeated bytes donateName = 10;
  total_size += 1 * this->donatename_size();
  for (int i = 0; i < this->donatename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->donatename(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceDonationCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceDonationCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceDonationCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceDonationCPP::MergeFrom(const AllianceDonationCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  donateuid_.MergeFrom(from.donateuid_);
  donatetimes_.MergeFrom(from.donatetimes_);
  donatename_.MergeFrom(from.donatename_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applyuid()) {
      set_applyuid(from.applyuid());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_donatecount()) {
      set_donatecount(from.donatecount());
    }
    if (from.has_fetchcount()) {
      set_fetchcount(from.fetchcount());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_applyts()) {
      set_applyts(from.applyts());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceDonationCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceDonationCPP::CopyFrom(const AllianceDonationCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceDonationCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000c7f) != 0x00000c7f) return false;

  return true;
}

void AllianceDonationCPP::Swap(AllianceDonationCPP* other) {
  if (other != this) {
    std::swap(applyuid_, other->applyuid_);
    std::swap(propsid_, other->propsid_);
    std::swap(count_, other->count_);
    std::swap(donatecount_, other->donatecount_);
    std::swap(fetchcount_, other->fetchcount_);
    std::swap(status_, other->status_);
    std::swap(name_, other->name_);
    donateuid_.Swap(&other->donateuid_);
    donatetimes_.Swap(&other->donatetimes_);
    donatename_.Swap(&other->donatename_);
    std::swap(applyts_, other->applyts_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceDonationCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceDonationCPP_descriptor_;
  metadata.reflection = AllianceDonationCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeekDonationReq::kPropsidFieldNumber;
const int SeekDonationReq::kCountFieldNumber;
#endif  // !_MSC_VER

SeekDonationReq::SeekDonationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.SeekDonationReq)
}

void SeekDonationReq::InitAsDefaultInstance() {
}

SeekDonationReq::SeekDonationReq(const SeekDonationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.SeekDonationReq)
}

void SeekDonationReq::SharedCtor() {
  _cached_size_ = 0;
  propsid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeekDonationReq::~SeekDonationReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.SeekDonationReq)
  SharedDtor();
}

void SeekDonationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeekDonationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeekDonationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeekDonationReq_descriptor_;
}

const SeekDonationReq& SeekDonationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

SeekDonationReq* SeekDonationReq::default_instance_ = NULL;

SeekDonationReq* SeekDonationReq::New() const {
  return new SeekDonationReq;
}

void SeekDonationReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SeekDonationReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(propsid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeekDonationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.SeekDonationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 propsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.SeekDonationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.SeekDonationReq)
  return false;
#undef DO_
}

void SeekDonationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.SeekDonationReq)
  // required uint32 propsid = 1;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.SeekDonationReq)
}

::google::protobuf::uint8* SeekDonationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.SeekDonationReq)
  // required uint32 propsid = 1;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.SeekDonationReq)
  return target;
}

int SeekDonationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 propsid = 1;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeekDonationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeekDonationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeekDonationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeekDonationReq::MergeFrom(const SeekDonationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeekDonationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeekDonationReq::CopyFrom(const SeekDonationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekDonationReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SeekDonationReq::Swap(SeekDonationReq* other) {
  if (other != this) {
    std::swap(propsid_, other->propsid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeekDonationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeekDonationReq_descriptor_;
  metadata.reflection = SeekDonationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSeekDonationBC::kUidFieldNumber;
const int RequestSeekDonationBC::kCountFieldNumber;
const int RequestSeekDonationBC::kAidFieldNumber;
const int RequestSeekDonationBC::kPropsidFieldNumber;
const int RequestSeekDonationBC::kCdtimeFieldNumber;
const int RequestSeekDonationBC::kNameFieldNumber;
const int RequestSeekDonationBC::kLevelFieldNumber;
#endif  // !_MSC_VER

RequestSeekDonationBC::RequestSeekDonationBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestSeekDonationBC)
}

void RequestSeekDonationBC::InitAsDefaultInstance() {
}

RequestSeekDonationBC::RequestSeekDonationBC(const RequestSeekDonationBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestSeekDonationBC)
}

void RequestSeekDonationBC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  count_ = 0u;
  aid_ = 0u;
  propsid_ = 0u;
  cdtime_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSeekDonationBC::~RequestSeekDonationBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestSeekDonationBC)
  SharedDtor();
}

void RequestSeekDonationBC::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RequestSeekDonationBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSeekDonationBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSeekDonationBC_descriptor_;
}

const RequestSeekDonationBC& RequestSeekDonationBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestSeekDonationBC* RequestSeekDonationBC::default_instance_ = NULL;

RequestSeekDonationBC* RequestSeekDonationBC::New() const {
  return new RequestSeekDonationBC;
}

void RequestSeekDonationBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestSeekDonationBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, propsid_);
    ZR_(cdtime_, level_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSeekDonationBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestSeekDonationBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_aid;
        break;
      }

      // required uint32 aid = 3;
      case 3: {
        if (tag == 24) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_propsid;
        break;
      }

      // required uint32 propsid = 4;
      case 4: {
        if (tag == 32) {
         parse_propsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cdtime;
        break;
      }

      // required uint32 cdtime = 5;
      case 5: {
        if (tag == 40) {
         parse_cdtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // required bytes name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // required uint32 level = 7;
      case 7: {
        if (tag == 56) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestSeekDonationBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestSeekDonationBC)
  return false;
#undef DO_
}

void RequestSeekDonationBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestSeekDonationBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 aid = 3;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->aid(), output);
  }

  // required uint32 propsid = 4;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->propsid(), output);
  }

  // required uint32 cdtime = 5;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cdtime(), output);
  }

  // required bytes name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->name(), output);
  }

  // required uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestSeekDonationBC)
}

::google::protobuf::uint8* RequestSeekDonationBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestSeekDonationBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 aid = 3;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->aid(), target);
  }

  // required uint32 propsid = 4;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->propsid(), target);
  }

  // required uint32 cdtime = 5;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cdtime(), target);
  }

  // required bytes name = 6;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->name(), target);
  }

  // required uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestSeekDonationBC)
  return target;
}

int RequestSeekDonationBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 aid = 3;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 propsid = 4;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 cdtime = 5;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdtime());
    }

    // required bytes name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSeekDonationBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSeekDonationBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSeekDonationBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSeekDonationBC::MergeFrom(const RequestSeekDonationBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSeekDonationBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSeekDonationBC::CopyFrom(const RequestSeekDonationBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSeekDonationBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void RequestSeekDonationBC::Swap(RequestSeekDonationBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(count_, other->count_);
    std::swap(aid_, other->aid_);
    std::swap(propsid_, other->propsid_);
    std::swap(cdtime_, other->cdtime_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSeekDonationBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSeekDonationBC_descriptor_;
  metadata.reflection = RequestSeekDonationBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplySeekDonationBC::kUidFieldNumber;
const int ReplySeekDonationBC::kCdtimeFieldNumber;
const int ReplySeekDonationBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplySeekDonationBC::ReplySeekDonationBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplySeekDonationBC)
}

void ReplySeekDonationBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::SeekDonationResp*>(&::ProtoAlliance::SeekDonationResp::default_instance());
}

ReplySeekDonationBC::ReplySeekDonationBC(const ReplySeekDonationBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplySeekDonationBC)
}

void ReplySeekDonationBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  cdtime_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplySeekDonationBC::~ReplySeekDonationBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplySeekDonationBC)
  SharedDtor();
}

void ReplySeekDonationBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplySeekDonationBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplySeekDonationBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplySeekDonationBC_descriptor_;
}

const ReplySeekDonationBC& ReplySeekDonationBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplySeekDonationBC* ReplySeekDonationBC::default_instance_ = NULL;

ReplySeekDonationBC* ReplySeekDonationBC::New() const {
  return new ReplySeekDonationBC;
}

void ReplySeekDonationBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplySeekDonationBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, cdtime_);
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::SeekDonationResp::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplySeekDonationBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplySeekDonationBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cdtime;
        break;
      }

      // required uint32 cdtime = 2;
      case 2: {
        if (tag == 16) {
         parse_cdtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.SeekDonationResp alliance = 3;
      case 3: {
        if (tag == 26) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplySeekDonationBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplySeekDonationBC)
  return false;
#undef DO_
}

void ReplySeekDonationBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplySeekDonationBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 cdtime = 2;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cdtime(), output);
  }

  // optional .ProtoAlliance.SeekDonationResp alliance = 3;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplySeekDonationBC)
}

::google::protobuf::uint8* ReplySeekDonationBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplySeekDonationBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 cdtime = 2;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cdtime(), target);
  }

  // optional .ProtoAlliance.SeekDonationResp alliance = 3;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplySeekDonationBC)
  return target;
}

int ReplySeekDonationBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 cdtime = 2;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdtime());
    }

    // optional .ProtoAlliance.SeekDonationResp alliance = 3;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplySeekDonationBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplySeekDonationBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplySeekDonationBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplySeekDonationBC::MergeFrom(const ReplySeekDonationBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::SeekDonationResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplySeekDonationBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplySeekDonationBC::CopyFrom(const ReplySeekDonationBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplySeekDonationBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplySeekDonationBC::Swap(ReplySeekDonationBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cdtime_, other->cdtime_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplySeekDonationBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplySeekDonationBC_descriptor_;
  metadata.reflection = ReplySeekDonationBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeekDonationResp::kDonationFieldNumber;
const int SeekDonationResp::kNextDonationTsFieldNumber;
#endif  // !_MSC_VER

SeekDonationResp::SeekDonationResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.SeekDonationResp)
}

void SeekDonationResp::InitAsDefaultInstance() {
  donation_ = const_cast< ::ProtoAlliance::AllianceDonationCPP*>(&::ProtoAlliance::AllianceDonationCPP::default_instance());
}

SeekDonationResp::SeekDonationResp(const SeekDonationResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.SeekDonationResp)
}

void SeekDonationResp::SharedCtor() {
  _cached_size_ = 0;
  donation_ = NULL;
  nextdonationts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeekDonationResp::~SeekDonationResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.SeekDonationResp)
  SharedDtor();
}

void SeekDonationResp::SharedDtor() {
  if (this != default_instance_) {
    delete donation_;
  }
}

void SeekDonationResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeekDonationResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeekDonationResp_descriptor_;
}

const SeekDonationResp& SeekDonationResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

SeekDonationResp* SeekDonationResp::default_instance_ = NULL;

SeekDonationResp* SeekDonationResp::New() const {
  return new SeekDonationResp;
}

void SeekDonationResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_donation()) {
      if (donation_ != NULL) donation_->::ProtoAlliance::AllianceDonationCPP::Clear();
    }
    nextdonationts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeekDonationResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.SeekDonationResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoAlliance.AllianceDonationCPP donation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_donation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nextDonationTs;
        break;
      }

      // required uint32 nextDonationTs = 2;
      case 2: {
        if (tag == 16) {
         parse_nextDonationTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextdonationts_)));
          set_has_nextdonationts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.SeekDonationResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.SeekDonationResp)
  return false;
#undef DO_
}

void SeekDonationResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.SeekDonationResp)
  // required .ProtoAlliance.AllianceDonationCPP donation = 1;
  if (has_donation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->donation(), output);
  }

  // required uint32 nextDonationTs = 2;
  if (has_nextdonationts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nextdonationts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.SeekDonationResp)
}

::google::protobuf::uint8* SeekDonationResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.SeekDonationResp)
  // required .ProtoAlliance.AllianceDonationCPP donation = 1;
  if (has_donation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->donation(), target);
  }

  // required uint32 nextDonationTs = 2;
  if (has_nextdonationts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nextdonationts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.SeekDonationResp)
  return target;
}

int SeekDonationResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoAlliance.AllianceDonationCPP donation = 1;
    if (has_donation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->donation());
    }

    // required uint32 nextDonationTs = 2;
    if (has_nextdonationts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextdonationts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeekDonationResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeekDonationResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeekDonationResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeekDonationResp::MergeFrom(const SeekDonationResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_donation()) {
      mutable_donation()->::ProtoAlliance::AllianceDonationCPP::MergeFrom(from.donation());
    }
    if (from.has_nextdonationts()) {
      set_nextdonationts(from.nextdonationts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeekDonationResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeekDonationResp::CopyFrom(const SeekDonationResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekDonationResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_donation()) {
    if (!this->donation().IsInitialized()) return false;
  }
  return true;
}

void SeekDonationResp::Swap(SeekDonationResp* other) {
  if (other != this) {
    std::swap(donation_, other->donation_);
    std::swap(nextdonationts_, other->nextdonationts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeekDonationResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeekDonationResp_descriptor_;
  metadata.reflection = SeekDonationResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CutUpDonationCDReq::kTypeFieldNumber;
#endif  // !_MSC_VER

CutUpDonationCDReq::CutUpDonationCDReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.CutUpDonationCDReq)
}

void CutUpDonationCDReq::InitAsDefaultInstance() {
}

CutUpDonationCDReq::CutUpDonationCDReq(const CutUpDonationCDReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.CutUpDonationCDReq)
}

void CutUpDonationCDReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CutUpDonationCDReq::~CutUpDonationCDReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.CutUpDonationCDReq)
  SharedDtor();
}

void CutUpDonationCDReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CutUpDonationCDReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CutUpDonationCDReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CutUpDonationCDReq_descriptor_;
}

const CutUpDonationCDReq& CutUpDonationCDReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

CutUpDonationCDReq* CutUpDonationCDReq::default_instance_ = NULL;

CutUpDonationCDReq* CutUpDonationCDReq::New() const {
  return new CutUpDonationCDReq;
}

void CutUpDonationCDReq::Clear() {
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CutUpDonationCDReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.CutUpDonationCDReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.CutUpDonationCDReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.CutUpDonationCDReq)
  return false;
#undef DO_
}

void CutUpDonationCDReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.CutUpDonationCDReq)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.CutUpDonationCDReq)
}

::google::protobuf::uint8* CutUpDonationCDReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.CutUpDonationCDReq)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.CutUpDonationCDReq)
  return target;
}

int CutUpDonationCDReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CutUpDonationCDReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CutUpDonationCDReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CutUpDonationCDReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CutUpDonationCDReq::MergeFrom(const CutUpDonationCDReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CutUpDonationCDReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CutUpDonationCDReq::CopyFrom(const CutUpDonationCDReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CutUpDonationCDReq::IsInitialized() const {

  return true;
}

void CutUpDonationCDReq::Swap(CutUpDonationCDReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CutUpDonationCDReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CutUpDonationCDReq_descriptor_;
  metadata.reflection = CutUpDonationCDReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CutUpDonationCDResp::kNextDonationTsFieldNumber;
const int CutUpDonationCDResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

CutUpDonationCDResp::CutUpDonationCDResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.CutUpDonationCDResp)
}

void CutUpDonationCDResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

CutUpDonationCDResp::CutUpDonationCDResp(const CutUpDonationCDResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.CutUpDonationCDResp)
}

void CutUpDonationCDResp::SharedCtor() {
  _cached_size_ = 0;
  nextdonationts_ = 0u;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CutUpDonationCDResp::~CutUpDonationCDResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.CutUpDonationCDResp)
  SharedDtor();
}

void CutUpDonationCDResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void CutUpDonationCDResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CutUpDonationCDResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CutUpDonationCDResp_descriptor_;
}

const CutUpDonationCDResp& CutUpDonationCDResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

CutUpDonationCDResp* CutUpDonationCDResp::default_instance_ = NULL;

CutUpDonationCDResp* CutUpDonationCDResp::New() const {
  return new CutUpDonationCDResp;
}

void CutUpDonationCDResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    nextdonationts_ = 0u;
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CutUpDonationCDResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.CutUpDonationCDResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nextDonationTs = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextdonationts_)));
          set_has_nextdonationts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.CutUpDonationCDResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.CutUpDonationCDResp)
  return false;
#undef DO_
}

void CutUpDonationCDResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.CutUpDonationCDResp)
  // required uint32 nextDonationTs = 1;
  if (has_nextdonationts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nextdonationts(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.CutUpDonationCDResp)
}

::google::protobuf::uint8* CutUpDonationCDResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.CutUpDonationCDResp)
  // required uint32 nextDonationTs = 1;
  if (has_nextdonationts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nextdonationts(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.CutUpDonationCDResp)
  return target;
}

int CutUpDonationCDResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nextDonationTs = 1;
    if (has_nextdonationts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextdonationts());
    }

    // optional .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CutUpDonationCDResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CutUpDonationCDResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CutUpDonationCDResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CutUpDonationCDResp::MergeFrom(const CutUpDonationCDResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nextdonationts()) {
      set_nextdonationts(from.nextdonationts());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CutUpDonationCDResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CutUpDonationCDResp::CopyFrom(const CutUpDonationCDResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CutUpDonationCDResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void CutUpDonationCDResp::Swap(CutUpDonationCDResp* other) {
  if (other != this) {
    std::swap(nextdonationts_, other->nextdonationts_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CutUpDonationCDResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CutUpDonationCDResp_descriptor_;
  metadata.reflection = CutUpDonationCDResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferDonationReq::kApplyUidFieldNumber;
const int OfferDonationReq::kPropsidFieldNumber;
#endif  // !_MSC_VER

OfferDonationReq::OfferDonationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.OfferDonationReq)
}

void OfferDonationReq::InitAsDefaultInstance() {
}

OfferDonationReq::OfferDonationReq(const OfferDonationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.OfferDonationReq)
}

void OfferDonationReq::SharedCtor() {
  _cached_size_ = 0;
  applyuid_ = 0u;
  propsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferDonationReq::~OfferDonationReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.OfferDonationReq)
  SharedDtor();
}

void OfferDonationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfferDonationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferDonationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferDonationReq_descriptor_;
}

const OfferDonationReq& OfferDonationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

OfferDonationReq* OfferDonationReq::default_instance_ = NULL;

OfferDonationReq* OfferDonationReq::New() const {
  return new OfferDonationReq;
}

void OfferDonationReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OfferDonationReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(applyuid_, propsid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferDonationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.OfferDonationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 applyUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applyuid_)));
          set_has_applyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsid;
        break;
      }

      // required uint32 propsid = 2;
      case 2: {
        if (tag == 16) {
         parse_propsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.OfferDonationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.OfferDonationReq)
  return false;
#undef DO_
}

void OfferDonationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.OfferDonationReq)
  // required uint32 applyUid = 1;
  if (has_applyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->applyuid(), output);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.OfferDonationReq)
}

::google::protobuf::uint8* OfferDonationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.OfferDonationReq)
  // required uint32 applyUid = 1;
  if (has_applyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->applyuid(), target);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.OfferDonationReq)
  return target;
}

int OfferDonationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 applyUid = 1;
    if (has_applyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applyuid());
    }

    // required uint32 propsid = 2;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferDonationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferDonationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferDonationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferDonationReq::MergeFrom(const OfferDonationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applyuid()) {
      set_applyuid(from.applyuid());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferDonationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferDonationReq::CopyFrom(const OfferDonationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferDonationReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OfferDonationReq::Swap(OfferDonationReq* other) {
  if (other != this) {
    std::swap(applyuid_, other->applyuid_);
    std::swap(propsid_, other->propsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferDonationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferDonationReq_descriptor_;
  metadata.reflection = OfferDonationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestOfferDonationBC::kUidFieldNumber;
const int RequestOfferDonationBC::kApplyUidFieldNumber;
const int RequestOfferDonationBC::kAidFieldNumber;
const int RequestOfferDonationBC::kPropsidFieldNumber;
const int RequestOfferDonationBC::kNameFieldNumber;
const int RequestOfferDonationBC::kCommonsFieldNumber;
#endif  // !_MSC_VER

RequestOfferDonationBC::RequestOfferDonationBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestOfferDonationBC)
}

void RequestOfferDonationBC::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

RequestOfferDonationBC::RequestOfferDonationBC(const RequestOfferDonationBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestOfferDonationBC)
}

void RequestOfferDonationBC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  applyuid_ = 0u;
  aid_ = 0u;
  propsid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestOfferDonationBC::~RequestOfferDonationBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestOfferDonationBC)
  SharedDtor();
}

void RequestOfferDonationBC::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete commons_;
  }
}

void RequestOfferDonationBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestOfferDonationBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestOfferDonationBC_descriptor_;
}

const RequestOfferDonationBC& RequestOfferDonationBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestOfferDonationBC* RequestOfferDonationBC::default_instance_ = NULL;

RequestOfferDonationBC* RequestOfferDonationBC::New() const {
  return new RequestOfferDonationBC;
}

void RequestOfferDonationBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestOfferDonationBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uid_, propsid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestOfferDonationBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestOfferDonationBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_applyUid;
        break;
      }

      // required uint32 applyUid = 2;
      case 2: {
        if (tag == 16) {
         parse_applyUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applyuid_)));
          set_has_applyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_aid;
        break;
      }

      // required uint32 aid = 3;
      case 3: {
        if (tag == 24) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_propsid;
        break;
      }

      // required uint32 propsid = 4;
      case 4: {
        if (tag == 32) {
         parse_propsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required bytes name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 6;
      case 6: {
        if (tag == 50) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestOfferDonationBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestOfferDonationBC)
  return false;
#undef DO_
}

void RequestOfferDonationBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestOfferDonationBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 applyUid = 2;
  if (has_applyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->applyuid(), output);
  }

  // required uint32 aid = 3;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->aid(), output);
  }

  // required uint32 propsid = 4;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->propsid(), output);
  }

  // required bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->name(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 6;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestOfferDonationBC)
}

::google::protobuf::uint8* RequestOfferDonationBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestOfferDonationBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 applyUid = 2;
  if (has_applyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->applyuid(), target);
  }

  // required uint32 aid = 3;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->aid(), target);
  }

  // required uint32 propsid = 4;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->propsid(), target);
  }

  // required bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 6;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestOfferDonationBC)
  return target;
}

int RequestOfferDonationBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 applyUid = 2;
    if (has_applyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applyuid());
    }

    // required uint32 aid = 3;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 propsid = 4;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required .DataCommon.CommonItemsCPP commons = 6;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestOfferDonationBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestOfferDonationBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestOfferDonationBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestOfferDonationBC::MergeFrom(const RequestOfferDonationBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_applyuid()) {
      set_applyuid(from.applyuid());
    }
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestOfferDonationBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestOfferDonationBC::CopyFrom(const RequestOfferDonationBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOfferDonationBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void RequestOfferDonationBC::Swap(RequestOfferDonationBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(applyuid_, other->applyuid_);
    std::swap(aid_, other->aid_);
    std::swap(propsid_, other->propsid_);
    std::swap(name_, other->name_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestOfferDonationBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestOfferDonationBC_descriptor_;
  metadata.reflection = RequestOfferDonationBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyOfferDonationBC::kUidFieldNumber;
const int ReplyOfferDonationBC::kAidFieldNumber;
const int ReplyOfferDonationBC::kPropsidFieldNumber;
const int ReplyOfferDonationBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyOfferDonationBC::ReplyOfferDonationBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyOfferDonationBC)
}

void ReplyOfferDonationBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::OfferDonationResp*>(&::ProtoAlliance::OfferDonationResp::default_instance());
}

ReplyOfferDonationBC::ReplyOfferDonationBC(const ReplyOfferDonationBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyOfferDonationBC)
}

void ReplyOfferDonationBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  aid_ = 0u;
  propsid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyOfferDonationBC::~ReplyOfferDonationBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyOfferDonationBC)
  SharedDtor();
}

void ReplyOfferDonationBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyOfferDonationBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyOfferDonationBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyOfferDonationBC_descriptor_;
}

const ReplyOfferDonationBC& ReplyOfferDonationBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyOfferDonationBC* ReplyOfferDonationBC::default_instance_ = NULL;

ReplyOfferDonationBC* ReplyOfferDonationBC::New() const {
  return new ReplyOfferDonationBC;
}

void ReplyOfferDonationBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyOfferDonationBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(uid_, aid_);
    propsid_ = 0u;
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::OfferDonationResp::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyOfferDonationBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyOfferDonationBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_aid;
        break;
      }

      // required uint32 aid = 2;
      case 2: {
        if (tag == 16) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_propsid;
        break;
      }

      // required uint32 propsid = 3;
      case 3: {
        if (tag == 24) {
         parse_propsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.OfferDonationResp alliance = 4;
      case 4: {
        if (tag == 34) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyOfferDonationBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyOfferDonationBC)
  return false;
#undef DO_
}

void ReplyOfferDonationBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyOfferDonationBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 aid = 2;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aid(), output);
  }

  // required uint32 propsid = 3;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->propsid(), output);
  }

  // optional .ProtoAlliance.OfferDonationResp alliance = 4;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyOfferDonationBC)
}

::google::protobuf::uint8* ReplyOfferDonationBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyOfferDonationBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 aid = 2;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->aid(), target);
  }

  // required uint32 propsid = 3;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->propsid(), target);
  }

  // optional .ProtoAlliance.OfferDonationResp alliance = 4;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyOfferDonationBC)
  return target;
}

int ReplyOfferDonationBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 aid = 2;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 propsid = 3;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // optional .ProtoAlliance.OfferDonationResp alliance = 4;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyOfferDonationBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyOfferDonationBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyOfferDonationBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyOfferDonationBC::MergeFrom(const ReplyOfferDonationBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::OfferDonationResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyOfferDonationBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyOfferDonationBC::CopyFrom(const ReplyOfferDonationBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyOfferDonationBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyOfferDonationBC::Swap(ReplyOfferDonationBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(aid_, other->aid_);
    std::swap(propsid_, other->propsid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyOfferDonationBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyOfferDonationBC_descriptor_;
  metadata.reflection = ReplyOfferDonationBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferDonationResp::kCommonsFieldNumber;
const int OfferDonationResp::kDonationFieldNumber;
#endif  // !_MSC_VER

OfferDonationResp::OfferDonationResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.OfferDonationResp)
}

void OfferDonationResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  donation_ = const_cast< ::ProtoAlliance::AllianceDonationCPP*>(&::ProtoAlliance::AllianceDonationCPP::default_instance());
}

OfferDonationResp::OfferDonationResp(const OfferDonationResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.OfferDonationResp)
}

void OfferDonationResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  donation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferDonationResp::~OfferDonationResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.OfferDonationResp)
  SharedDtor();
}

void OfferDonationResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete donation_;
  }
}

void OfferDonationResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferDonationResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferDonationResp_descriptor_;
}

const OfferDonationResp& OfferDonationResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

OfferDonationResp* OfferDonationResp::default_instance_ = NULL;

OfferDonationResp* OfferDonationResp::New() const {
  return new OfferDonationResp;
}

void OfferDonationResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_donation()) {
      if (donation_ != NULL) donation_->::ProtoAlliance::AllianceDonationCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferDonationResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.OfferDonationResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_donation;
        break;
      }

      // required .ProtoAlliance.AllianceDonationCPP donation = 2;
      case 2: {
        if (tag == 18) {
         parse_donation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_donation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.OfferDonationResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.OfferDonationResp)
  return false;
#undef DO_
}

void OfferDonationResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.OfferDonationResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  // required .ProtoAlliance.AllianceDonationCPP donation = 2;
  if (has_donation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->donation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.OfferDonationResp)
}

::google::protobuf::uint8* OfferDonationResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.OfferDonationResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  // required .ProtoAlliance.AllianceDonationCPP donation = 2;
  if (has_donation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->donation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.OfferDonationResp)
  return target;
}

int OfferDonationResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required .ProtoAlliance.AllianceDonationCPP donation = 2;
    if (has_donation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->donation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferDonationResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferDonationResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferDonationResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferDonationResp::MergeFrom(const OfferDonationResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_donation()) {
      mutable_donation()->::ProtoAlliance::AllianceDonationCPP::MergeFrom(from.donation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferDonationResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferDonationResp::CopyFrom(const OfferDonationResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferDonationResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_donation()) {
    if (!this->donation().IsInitialized()) return false;
  }
  return true;
}

void OfferDonationResp::Swap(OfferDonationResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(donation_, other->donation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferDonationResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferDonationResp_descriptor_;
  metadata.reflection = OfferDonationResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FetchDonationReq::FetchDonationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.FetchDonationReq)
}

void FetchDonationReq::InitAsDefaultInstance() {
}

FetchDonationReq::FetchDonationReq(const FetchDonationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.FetchDonationReq)
}

void FetchDonationReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchDonationReq::~FetchDonationReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.FetchDonationReq)
  SharedDtor();
}

void FetchDonationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FetchDonationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchDonationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchDonationReq_descriptor_;
}

const FetchDonationReq& FetchDonationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

FetchDonationReq* FetchDonationReq::default_instance_ = NULL;

FetchDonationReq* FetchDonationReq::New() const {
  return new FetchDonationReq;
}

void FetchDonationReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchDonationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.FetchDonationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.FetchDonationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.FetchDonationReq)
  return false;
#undef DO_
}

void FetchDonationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.FetchDonationReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.FetchDonationReq)
}

::google::protobuf::uint8* FetchDonationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.FetchDonationReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.FetchDonationReq)
  return target;
}

int FetchDonationReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchDonationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchDonationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchDonationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchDonationReq::MergeFrom(const FetchDonationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchDonationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDonationReq::CopyFrom(const FetchDonationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDonationReq::IsInitialized() const {

  return true;
}

void FetchDonationReq::Swap(FetchDonationReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchDonationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchDonationReq_descriptor_;
  metadata.reflection = FetchDonationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFetchDonationBC::kAidFieldNumber;
const int RequestFetchDonationBC::kUidFieldNumber;
#endif  // !_MSC_VER

RequestFetchDonationBC::RequestFetchDonationBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestFetchDonationBC)
}

void RequestFetchDonationBC::InitAsDefaultInstance() {
}

RequestFetchDonationBC::RequestFetchDonationBC(const RequestFetchDonationBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestFetchDonationBC)
}

void RequestFetchDonationBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFetchDonationBC::~RequestFetchDonationBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestFetchDonationBC)
  SharedDtor();
}

void RequestFetchDonationBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestFetchDonationBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFetchDonationBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFetchDonationBC_descriptor_;
}

const RequestFetchDonationBC& RequestFetchDonationBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestFetchDonationBC* RequestFetchDonationBC::default_instance_ = NULL;

RequestFetchDonationBC* RequestFetchDonationBC::New() const {
  return new RequestFetchDonationBC;
}

void RequestFetchDonationBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestFetchDonationBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFetchDonationBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestFetchDonationBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestFetchDonationBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestFetchDonationBC)
  return false;
#undef DO_
}

void RequestFetchDonationBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestFetchDonationBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestFetchDonationBC)
}

::google::protobuf::uint8* RequestFetchDonationBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestFetchDonationBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestFetchDonationBC)
  return target;
}

int RequestFetchDonationBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFetchDonationBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFetchDonationBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFetchDonationBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFetchDonationBC::MergeFrom(const RequestFetchDonationBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFetchDonationBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFetchDonationBC::CopyFrom(const RequestFetchDonationBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFetchDonationBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestFetchDonationBC::Swap(RequestFetchDonationBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFetchDonationBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFetchDonationBC_descriptor_;
  metadata.reflection = RequestFetchDonationBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyFetchDonationBC::kUidFieldNumber;
const int ReplyFetchDonationBC::kPropsidFieldNumber;
const int ReplyFetchDonationBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyFetchDonationBC::ReplyFetchDonationBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyFetchDonationBC)
}

void ReplyFetchDonationBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::FetchDonationResp*>(&::ProtoAlliance::FetchDonationResp::default_instance());
}

ReplyFetchDonationBC::ReplyFetchDonationBC(const ReplyFetchDonationBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyFetchDonationBC)
}

void ReplyFetchDonationBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  propsid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyFetchDonationBC::~ReplyFetchDonationBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyFetchDonationBC)
  SharedDtor();
}

void ReplyFetchDonationBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyFetchDonationBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyFetchDonationBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyFetchDonationBC_descriptor_;
}

const ReplyFetchDonationBC& ReplyFetchDonationBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyFetchDonationBC* ReplyFetchDonationBC::default_instance_ = NULL;

ReplyFetchDonationBC* ReplyFetchDonationBC::New() const {
  return new ReplyFetchDonationBC;
}

void ReplyFetchDonationBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyFetchDonationBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, propsid_);
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::FetchDonationResp::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyFetchDonationBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyFetchDonationBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsid;
        break;
      }

      // required uint32 propsid = 2;
      case 2: {
        if (tag == 16) {
         parse_propsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.FetchDonationResp alliance = 3;
      case 3: {
        if (tag == 26) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyFetchDonationBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyFetchDonationBC)
  return false;
#undef DO_
}

void ReplyFetchDonationBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyFetchDonationBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propsid(), output);
  }

  // optional .ProtoAlliance.FetchDonationResp alliance = 3;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyFetchDonationBC)
}

::google::protobuf::uint8* ReplyFetchDonationBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyFetchDonationBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propsid(), target);
  }

  // optional .ProtoAlliance.FetchDonationResp alliance = 3;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyFetchDonationBC)
  return target;
}

int ReplyFetchDonationBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 propsid = 2;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // optional .ProtoAlliance.FetchDonationResp alliance = 3;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyFetchDonationBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyFetchDonationBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyFetchDonationBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyFetchDonationBC::MergeFrom(const ReplyFetchDonationBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::FetchDonationResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyFetchDonationBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyFetchDonationBC::CopyFrom(const ReplyFetchDonationBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyFetchDonationBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyFetchDonationBC::Swap(ReplyFetchDonationBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(propsid_, other->propsid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyFetchDonationBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyFetchDonationBC_descriptor_;
  metadata.reflection = ReplyFetchDonationBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchDonationResp::kCommonsFieldNumber;
const int FetchDonationResp::kDonationFieldNumber;
#endif  // !_MSC_VER

FetchDonationResp::FetchDonationResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.FetchDonationResp)
}

void FetchDonationResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  donation_ = const_cast< ::ProtoAlliance::AllianceDonationCPP*>(&::ProtoAlliance::AllianceDonationCPP::default_instance());
}

FetchDonationResp::FetchDonationResp(const FetchDonationResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.FetchDonationResp)
}

void FetchDonationResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  donation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchDonationResp::~FetchDonationResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.FetchDonationResp)
  SharedDtor();
}

void FetchDonationResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete donation_;
  }
}

void FetchDonationResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchDonationResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchDonationResp_descriptor_;
}

const FetchDonationResp& FetchDonationResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

FetchDonationResp* FetchDonationResp::default_instance_ = NULL;

FetchDonationResp* FetchDonationResp::New() const {
  return new FetchDonationResp;
}

void FetchDonationResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_donation()) {
      if (donation_ != NULL) donation_->::ProtoAlliance::AllianceDonationCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchDonationResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.FetchDonationResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_donation;
        break;
      }

      // optional .ProtoAlliance.AllianceDonationCPP donation = 2;
      case 2: {
        if (tag == 18) {
         parse_donation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_donation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.FetchDonationResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.FetchDonationResp)
  return false;
#undef DO_
}

void FetchDonationResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.FetchDonationResp)
  // optional .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  // optional .ProtoAlliance.AllianceDonationCPP donation = 2;
  if (has_donation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->donation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.FetchDonationResp)
}

::google::protobuf::uint8* FetchDonationResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.FetchDonationResp)
  // optional .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  // optional .ProtoAlliance.AllianceDonationCPP donation = 2;
  if (has_donation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->donation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.FetchDonationResp)
  return target;
}

int FetchDonationResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // optional .ProtoAlliance.AllianceDonationCPP donation = 2;
    if (has_donation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->donation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchDonationResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchDonationResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchDonationResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchDonationResp::MergeFrom(const FetchDonationResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_donation()) {
      mutable_donation()->::ProtoAlliance::AllianceDonationCPP::MergeFrom(from.donation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchDonationResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchDonationResp::CopyFrom(const FetchDonationResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchDonationResp::IsInitialized() const {

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_donation()) {
    if (!this->donation().IsInitialized()) return false;
  }
  return true;
}

void FetchDonationResp::Swap(FetchDonationResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(donation_, other->donation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchDonationResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchDonationResp_descriptor_;
  metadata.reflection = FetchDonationResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceNotifyCPP::kIdFieldNumber;
const int AllianceNotifyCPP::kAnnouncerFieldNumber;
const int AllianceNotifyCPP::kNameFieldNumber;
const int AllianceNotifyCPP::kContentFieldNumber;
const int AllianceNotifyCPP::kCreatetsFieldNumber;
#endif  // !_MSC_VER

AllianceNotifyCPP::AllianceNotifyCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.AllianceNotifyCPP)
}

void AllianceNotifyCPP::InitAsDefaultInstance() {
}

AllianceNotifyCPP::AllianceNotifyCPP(const AllianceNotifyCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.AllianceNotifyCPP)
}

void AllianceNotifyCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  announcer_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceNotifyCPP::~AllianceNotifyCPP() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.AllianceNotifyCPP)
  SharedDtor();
}

void AllianceNotifyCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void AllianceNotifyCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceNotifyCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceNotifyCPP_descriptor_;
}

const AllianceNotifyCPP& AllianceNotifyCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

AllianceNotifyCPP* AllianceNotifyCPP::default_instance_ = NULL;

AllianceNotifyCPP* AllianceNotifyCPP::New() const {
  return new AllianceNotifyCPP;
}

void AllianceNotifyCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllianceNotifyCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, announcer_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    createts_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceNotifyCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.AllianceNotifyCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_announcer;
        break;
      }

      // required uint32 announcer = 2;
      case 2: {
        if (tag == 16) {
         parse_announcer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &announcer_)));
          set_has_announcer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // required bytes content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_createts;
        break;
      }

      // required uint32 createts = 5;
      case 5: {
        if (tag == 40) {
         parse_createts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createts_)));
          set_has_createts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.AllianceNotifyCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.AllianceNotifyCPP)
  return false;
#undef DO_
}

void AllianceNotifyCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.AllianceNotifyCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 announcer = 2;
  if (has_announcer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->announcer(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // required uint32 createts = 5;
  if (has_createts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->createts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.AllianceNotifyCPP)
}

::google::protobuf::uint8* AllianceNotifyCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.AllianceNotifyCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 announcer = 2;
  if (has_announcer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->announcer(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // required uint32 createts = 5;
  if (has_createts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->createts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.AllianceNotifyCPP)
  return target;
}

int AllianceNotifyCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 announcer = 2;
    if (has_announcer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->announcer());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // required uint32 createts = 5;
    if (has_createts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceNotifyCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceNotifyCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceNotifyCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceNotifyCPP::MergeFrom(const AllianceNotifyCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_announcer()) {
      set_announcer(from.announcer());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_createts()) {
      set_createts(from.createts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceNotifyCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceNotifyCPP::CopyFrom(const AllianceNotifyCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceNotifyCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AllianceNotifyCPP::Swap(AllianceNotifyCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(announcer_, other->announcer_);
    std::swap(name_, other->name_);
    std::swap(content_, other->content_);
    std::swap(createts_, other->createts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceNotifyCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceNotifyCPP_descriptor_;
  metadata.reflection = AllianceNotifyCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendNotifyReq::kContentFieldNumber;
#endif  // !_MSC_VER

SendNotifyReq::SendNotifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.SendNotifyReq)
}

void SendNotifyReq::InitAsDefaultInstance() {
}

SendNotifyReq::SendNotifyReq(const SendNotifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.SendNotifyReq)
}

void SendNotifyReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendNotifyReq::~SendNotifyReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.SendNotifyReq)
  SharedDtor();
}

void SendNotifyReq::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SendNotifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendNotifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendNotifyReq_descriptor_;
}

const SendNotifyReq& SendNotifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

SendNotifyReq* SendNotifyReq::default_instance_ = NULL;

SendNotifyReq* SendNotifyReq::New() const {
  return new SendNotifyReq;
}

void SendNotifyReq::Clear() {
  if (has_content()) {
    if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      content_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendNotifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.SendNotifyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.SendNotifyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.SendNotifyReq)
  return false;
#undef DO_
}

void SendNotifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.SendNotifyReq)
  // required bytes content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.SendNotifyReq)
}

::google::protobuf::uint8* SendNotifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.SendNotifyReq)
  // required bytes content = 1;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.SendNotifyReq)
  return target;
}

int SendNotifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendNotifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendNotifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendNotifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendNotifyReq::MergeFrom(const SendNotifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendNotifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendNotifyReq::CopyFrom(const SendNotifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendNotifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SendNotifyReq::Swap(SendNotifyReq* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendNotifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendNotifyReq_descriptor_;
  metadata.reflection = SendNotifyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestSendNotifyBC::kAidFieldNumber;
const int RequestSendNotifyBC::kUidFieldNumber;
const int RequestSendNotifyBC::kContentFieldNumber;
const int RequestSendNotifyBC::kNameFieldNumber;
#endif  // !_MSC_VER

RequestSendNotifyBC::RequestSendNotifyBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestSendNotifyBC)
}

void RequestSendNotifyBC::InitAsDefaultInstance() {
}

RequestSendNotifyBC::RequestSendNotifyBC(const RequestSendNotifyBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestSendNotifyBC)
}

void RequestSendNotifyBC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSendNotifyBC::~RequestSendNotifyBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestSendNotifyBC)
  SharedDtor();
}

void RequestSendNotifyBC::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RequestSendNotifyBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSendNotifyBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSendNotifyBC_descriptor_;
}

const RequestSendNotifyBC& RequestSendNotifyBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestSendNotifyBC* RequestSendNotifyBC::default_instance_ = NULL;

RequestSendNotifyBC* RequestSendNotifyBC::New() const {
  return new RequestSendNotifyBC;
}

void RequestSendNotifyBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestSendNotifyBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(aid_, uid_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSendNotifyBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestSendNotifyBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // required bytes content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required bytes name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestSendNotifyBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestSendNotifyBC)
  return false;
#undef DO_
}

void RequestSendNotifyBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestSendNotifyBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // required bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestSendNotifyBC)
}

::google::protobuf::uint8* RequestSendNotifyBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestSendNotifyBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required bytes content = 3;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // required bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestSendNotifyBC)
  return target;
}

int RequestSendNotifyBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // required bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSendNotifyBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSendNotifyBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSendNotifyBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSendNotifyBC::MergeFrom(const RequestSendNotifyBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSendNotifyBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSendNotifyBC::CopyFrom(const RequestSendNotifyBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSendNotifyBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestSendNotifyBC::Swap(RequestSendNotifyBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(content_, other->content_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSendNotifyBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSendNotifyBC_descriptor_;
  metadata.reflection = RequestSendNotifyBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplySendNotifyBC::kUidFieldNumber;
const int ReplySendNotifyBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplySendNotifyBC::ReplySendNotifyBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplySendNotifyBC)
}

void ReplySendNotifyBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::SendNotifyResp*>(&::ProtoAlliance::SendNotifyResp::default_instance());
}

ReplySendNotifyBC::ReplySendNotifyBC(const ReplySendNotifyBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplySendNotifyBC)
}

void ReplySendNotifyBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplySendNotifyBC::~ReplySendNotifyBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplySendNotifyBC)
  SharedDtor();
}

void ReplySendNotifyBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplySendNotifyBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplySendNotifyBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplySendNotifyBC_descriptor_;
}

const ReplySendNotifyBC& ReplySendNotifyBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplySendNotifyBC* ReplySendNotifyBC::default_instance_ = NULL;

ReplySendNotifyBC* ReplySendNotifyBC::New() const {
  return new ReplySendNotifyBC;
}

void ReplySendNotifyBC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::SendNotifyResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplySendNotifyBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplySendNotifyBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.SendNotifyResp alliance = 2;
      case 2: {
        if (tag == 18) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplySendNotifyBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplySendNotifyBC)
  return false;
#undef DO_
}

void ReplySendNotifyBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplySendNotifyBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .ProtoAlliance.SendNotifyResp alliance = 2;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplySendNotifyBC)
}

::google::protobuf::uint8* ReplySendNotifyBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplySendNotifyBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional .ProtoAlliance.SendNotifyResp alliance = 2;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplySendNotifyBC)
  return target;
}

int ReplySendNotifyBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .ProtoAlliance.SendNotifyResp alliance = 2;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplySendNotifyBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplySendNotifyBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplySendNotifyBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplySendNotifyBC::MergeFrom(const ReplySendNotifyBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::SendNotifyResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplySendNotifyBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplySendNotifyBC::CopyFrom(const ReplySendNotifyBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplySendNotifyBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplySendNotifyBC::Swap(ReplySendNotifyBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplySendNotifyBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplySendNotifyBC_descriptor_;
  metadata.reflection = ReplySendNotifyBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendNotifyResp::kNotifyFieldNumber;
#endif  // !_MSC_VER

SendNotifyResp::SendNotifyResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.SendNotifyResp)
}

void SendNotifyResp::InitAsDefaultInstance() {
  notify_ = const_cast< ::ProtoAlliance::AllianceNotifyCPP*>(&::ProtoAlliance::AllianceNotifyCPP::default_instance());
}

SendNotifyResp::SendNotifyResp(const SendNotifyResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.SendNotifyResp)
}

void SendNotifyResp::SharedCtor() {
  _cached_size_ = 0;
  notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendNotifyResp::~SendNotifyResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.SendNotifyResp)
  SharedDtor();
}

void SendNotifyResp::SharedDtor() {
  if (this != default_instance_) {
    delete notify_;
  }
}

void SendNotifyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendNotifyResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendNotifyResp_descriptor_;
}

const SendNotifyResp& SendNotifyResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

SendNotifyResp* SendNotifyResp::default_instance_ = NULL;

SendNotifyResp* SendNotifyResp::New() const {
  return new SendNotifyResp;
}

void SendNotifyResp::Clear() {
  if (has_notify()) {
    if (notify_ != NULL) notify_->::ProtoAlliance::AllianceNotifyCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendNotifyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.SendNotifyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoAlliance.AllianceNotifyCPP notify = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.SendNotifyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.SendNotifyResp)
  return false;
#undef DO_
}

void SendNotifyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.SendNotifyResp)
  // required .ProtoAlliance.AllianceNotifyCPP notify = 1;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.SendNotifyResp)
}

::google::protobuf::uint8* SendNotifyResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.SendNotifyResp)
  // required .ProtoAlliance.AllianceNotifyCPP notify = 1;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.SendNotifyResp)
  return target;
}

int SendNotifyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoAlliance.AllianceNotifyCPP notify = 1;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendNotifyResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendNotifyResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendNotifyResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendNotifyResp::MergeFrom(const SendNotifyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify()) {
      mutable_notify()->::ProtoAlliance::AllianceNotifyCPP::MergeFrom(from.notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendNotifyResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendNotifyResp::CopyFrom(const SendNotifyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendNotifyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_notify()) {
    if (!this->notify().IsInitialized()) return false;
  }
  return true;
}

void SendNotifyResp::Swap(SendNotifyResp* other) {
  if (other != this) {
    std::swap(notify_, other->notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendNotifyResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendNotifyResp_descriptor_;
  metadata.reflection = SendNotifyResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelNotifyReq::kIdFieldNumber;
#endif  // !_MSC_VER

DelNotifyReq::DelNotifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.DelNotifyReq)
}

void DelNotifyReq::InitAsDefaultInstance() {
}

DelNotifyReq::DelNotifyReq(const DelNotifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.DelNotifyReq)
}

void DelNotifyReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelNotifyReq::~DelNotifyReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.DelNotifyReq)
  SharedDtor();
}

void DelNotifyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelNotifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelNotifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelNotifyReq_descriptor_;
}

const DelNotifyReq& DelNotifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

DelNotifyReq* DelNotifyReq::default_instance_ = NULL;

DelNotifyReq* DelNotifyReq::New() const {
  return new DelNotifyReq;
}

void DelNotifyReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelNotifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.DelNotifyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.DelNotifyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.DelNotifyReq)
  return false;
#undef DO_
}

void DelNotifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.DelNotifyReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.DelNotifyReq)
}

::google::protobuf::uint8* DelNotifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.DelNotifyReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.DelNotifyReq)
  return target;
}

int DelNotifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelNotifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelNotifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelNotifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelNotifyReq::MergeFrom(const DelNotifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelNotifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelNotifyReq::CopyFrom(const DelNotifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelNotifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DelNotifyReq::Swap(DelNotifyReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelNotifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelNotifyReq_descriptor_;
  metadata.reflection = DelNotifyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestDelNotifyBC::kAidFieldNumber;
const int RequestDelNotifyBC::kUidFieldNumber;
const int RequestDelNotifyBC::kIdFieldNumber;
#endif  // !_MSC_VER

RequestDelNotifyBC::RequestDelNotifyBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestDelNotifyBC)
}

void RequestDelNotifyBC::InitAsDefaultInstance() {
}

RequestDelNotifyBC::RequestDelNotifyBC(const RequestDelNotifyBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestDelNotifyBC)
}

void RequestDelNotifyBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestDelNotifyBC::~RequestDelNotifyBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestDelNotifyBC)
  SharedDtor();
}

void RequestDelNotifyBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestDelNotifyBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestDelNotifyBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestDelNotifyBC_descriptor_;
}

const RequestDelNotifyBC& RequestDelNotifyBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestDelNotifyBC* RequestDelNotifyBC::default_instance_ = NULL;

RequestDelNotifyBC* RequestDelNotifyBC::New() const {
  return new RequestDelNotifyBC;
}

void RequestDelNotifyBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestDelNotifyBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestDelNotifyBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestDelNotifyBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestDelNotifyBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestDelNotifyBC)
  return false;
#undef DO_
}

void RequestDelNotifyBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestDelNotifyBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestDelNotifyBC)
}

::google::protobuf::uint8* RequestDelNotifyBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestDelNotifyBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestDelNotifyBC)
  return target;
}

int RequestDelNotifyBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDelNotifyBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestDelNotifyBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestDelNotifyBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestDelNotifyBC::MergeFrom(const RequestDelNotifyBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestDelNotifyBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDelNotifyBC::CopyFrom(const RequestDelNotifyBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDelNotifyBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestDelNotifyBC::Swap(RequestDelNotifyBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestDelNotifyBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestDelNotifyBC_descriptor_;
  metadata.reflection = RequestDelNotifyBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyDelNotifyBC::kUidFieldNumber;
const int ReplyDelNotifyBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyDelNotifyBC::ReplyDelNotifyBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyDelNotifyBC)
}

void ReplyDelNotifyBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::DelNotifyResp*>(&::ProtoAlliance::DelNotifyResp::default_instance());
}

ReplyDelNotifyBC::ReplyDelNotifyBC(const ReplyDelNotifyBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyDelNotifyBC)
}

void ReplyDelNotifyBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyDelNotifyBC::~ReplyDelNotifyBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyDelNotifyBC)
  SharedDtor();
}

void ReplyDelNotifyBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyDelNotifyBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyDelNotifyBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyDelNotifyBC_descriptor_;
}

const ReplyDelNotifyBC& ReplyDelNotifyBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyDelNotifyBC* ReplyDelNotifyBC::default_instance_ = NULL;

ReplyDelNotifyBC* ReplyDelNotifyBC::New() const {
  return new ReplyDelNotifyBC;
}

void ReplyDelNotifyBC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::DelNotifyResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyDelNotifyBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyDelNotifyBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.DelNotifyResp alliance = 2;
      case 2: {
        if (tag == 18) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyDelNotifyBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyDelNotifyBC)
  return false;
#undef DO_
}

void ReplyDelNotifyBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyDelNotifyBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .ProtoAlliance.DelNotifyResp alliance = 2;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyDelNotifyBC)
}

::google::protobuf::uint8* ReplyDelNotifyBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyDelNotifyBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional .ProtoAlliance.DelNotifyResp alliance = 2;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyDelNotifyBC)
  return target;
}

int ReplyDelNotifyBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .ProtoAlliance.DelNotifyResp alliance = 2;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyDelNotifyBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyDelNotifyBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyDelNotifyBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyDelNotifyBC::MergeFrom(const ReplyDelNotifyBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::DelNotifyResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyDelNotifyBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyDelNotifyBC::CopyFrom(const ReplyDelNotifyBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyDelNotifyBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyDelNotifyBC::Swap(ReplyDelNotifyBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyDelNotifyBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyDelNotifyBC_descriptor_;
  metadata.reflection = ReplyDelNotifyBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelNotifyResp::kIdFieldNumber;
#endif  // !_MSC_VER

DelNotifyResp::DelNotifyResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.DelNotifyResp)
}

void DelNotifyResp::InitAsDefaultInstance() {
}

DelNotifyResp::DelNotifyResp(const DelNotifyResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.DelNotifyResp)
}

void DelNotifyResp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelNotifyResp::~DelNotifyResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.DelNotifyResp)
  SharedDtor();
}

void DelNotifyResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelNotifyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelNotifyResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelNotifyResp_descriptor_;
}

const DelNotifyResp& DelNotifyResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

DelNotifyResp* DelNotifyResp::default_instance_ = NULL;

DelNotifyResp* DelNotifyResp::New() const {
  return new DelNotifyResp;
}

void DelNotifyResp::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelNotifyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.DelNotifyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.DelNotifyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.DelNotifyResp)
  return false;
#undef DO_
}

void DelNotifyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.DelNotifyResp)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.DelNotifyResp)
}

::google::protobuf::uint8* DelNotifyResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.DelNotifyResp)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.DelNotifyResp)
  return target;
}

int DelNotifyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelNotifyResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelNotifyResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelNotifyResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelNotifyResp::MergeFrom(const DelNotifyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelNotifyResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelNotifyResp::CopyFrom(const DelNotifyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelNotifyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DelNotifyResp::Swap(DelNotifyResp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelNotifyResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelNotifyResp_descriptor_;
  metadata.reflection = DelNotifyResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AidInfoCPP::kUidFieldNumber;
const int AidInfoCPP::kNameFieldNumber;
#endif  // !_MSC_VER

AidInfoCPP::AidInfoCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.AidInfoCPP)
}

void AidInfoCPP::InitAsDefaultInstance() {
}

AidInfoCPP::AidInfoCPP(const AidInfoCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.AidInfoCPP)
}

void AidInfoCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AidInfoCPP::~AidInfoCPP() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.AidInfoCPP)
  SharedDtor();
}

void AidInfoCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AidInfoCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AidInfoCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AidInfoCPP_descriptor_;
}

const AidInfoCPP& AidInfoCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

AidInfoCPP* AidInfoCPP::default_instance_ = NULL;

AidInfoCPP* AidInfoCPP::New() const {
  return new AidInfoCPP;
}

void AidInfoCPP::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AidInfoCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.AidInfoCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.AidInfoCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.AidInfoCPP)
  return false;
#undef DO_
}

void AidInfoCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.AidInfoCPP)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.AidInfoCPP)
}

::google::protobuf::uint8* AidInfoCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.AidInfoCPP)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.AidInfoCPP)
  return target;
}

int AidInfoCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AidInfoCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AidInfoCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AidInfoCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AidInfoCPP::MergeFrom(const AidInfoCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AidInfoCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AidInfoCPP::CopyFrom(const AidInfoCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AidInfoCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AidInfoCPP::Swap(AidInfoCPP* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AidInfoCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AidInfoCPP_descriptor_;
  metadata.reflection = AidInfoCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllianceFunctionReq::kTypeFieldNumber;
#endif  // !_MSC_VER

GetAllianceFunctionReq::GetAllianceFunctionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.GetAllianceFunctionReq)
}

void GetAllianceFunctionReq::InitAsDefaultInstance() {
}

GetAllianceFunctionReq::GetAllianceFunctionReq(const GetAllianceFunctionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.GetAllianceFunctionReq)
}

void GetAllianceFunctionReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllianceFunctionReq::~GetAllianceFunctionReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.GetAllianceFunctionReq)
  SharedDtor();
}

void GetAllianceFunctionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllianceFunctionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllianceFunctionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllianceFunctionReq_descriptor_;
}

const GetAllianceFunctionReq& GetAllianceFunctionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

GetAllianceFunctionReq* GetAllianceFunctionReq::default_instance_ = NULL;

GetAllianceFunctionReq* GetAllianceFunctionReq::New() const {
  return new GetAllianceFunctionReq;
}

void GetAllianceFunctionReq::Clear() {
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllianceFunctionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.GetAllianceFunctionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.GetAllianceFunctionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.GetAllianceFunctionReq)
  return false;
#undef DO_
}

void GetAllianceFunctionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.GetAllianceFunctionReq)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.GetAllianceFunctionReq)
}

::google::protobuf::uint8* GetAllianceFunctionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.GetAllianceFunctionReq)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.GetAllianceFunctionReq)
  return target;
}

int GetAllianceFunctionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllianceFunctionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllianceFunctionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllianceFunctionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllianceFunctionReq::MergeFrom(const GetAllianceFunctionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllianceFunctionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllianceFunctionReq::CopyFrom(const GetAllianceFunctionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllianceFunctionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetAllianceFunctionReq::Swap(GetAllianceFunctionReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllianceFunctionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllianceFunctionReq_descriptor_;
  metadata.reflection = GetAllianceFunctionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllianceFunctionResp::kApplyListFieldNumber;
const int GetAllianceFunctionResp::kDonationsFieldNumber;
const int GetAllianceFunctionResp::kAidlistFieldNumber;
const int GetAllianceFunctionResp::kInvitelistFieldNumber;
#endif  // !_MSC_VER

GetAllianceFunctionResp::GetAllianceFunctionResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.GetAllianceFunctionResp)
}

void GetAllianceFunctionResp::InitAsDefaultInstance() {
}

GetAllianceFunctionResp::GetAllianceFunctionResp(const GetAllianceFunctionResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.GetAllianceFunctionResp)
}

void GetAllianceFunctionResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllianceFunctionResp::~GetAllianceFunctionResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.GetAllianceFunctionResp)
  SharedDtor();
}

void GetAllianceFunctionResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllianceFunctionResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllianceFunctionResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllianceFunctionResp_descriptor_;
}

const GetAllianceFunctionResp& GetAllianceFunctionResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

GetAllianceFunctionResp* GetAllianceFunctionResp::default_instance_ = NULL;

GetAllianceFunctionResp* GetAllianceFunctionResp::New() const {
  return new GetAllianceFunctionResp;
}

void GetAllianceFunctionResp::Clear() {
  applylist_.Clear();
  donations_.Clear();
  aidlist_.Clear();
  invitelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllianceFunctionResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.GetAllianceFunctionResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoAlliance.AllianceApplyCPP applyList = 1;
      case 1: {
        if (tag == 10) {
         parse_applyList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_applyList;
        if (input->ExpectTag(18)) goto parse_donations;
        break;
      }

      // repeated .ProtoAlliance.AllianceDonationCPP donations = 2;
      case 2: {
        if (tag == 18) {
         parse_donations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_donations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_donations;
        if (input->ExpectTag(26)) goto parse_aidlist;
        break;
      }

      // repeated .ProtoAlliance.AidInfoCPP aidlist = 3;
      case 3: {
        if (tag == 26) {
         parse_aidlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aidlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_aidlist;
        if (input->ExpectTag(34)) goto parse_invitelist;
        break;
      }

      // repeated .ProtoAlliance.AllianceInvitedCPP invitelist = 4;
      case 4: {
        if (tag == 34) {
         parse_invitelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_invitelist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.GetAllianceFunctionResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.GetAllianceFunctionResp)
  return false;
#undef DO_
}

void GetAllianceFunctionResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.GetAllianceFunctionResp)
  // repeated .ProtoAlliance.AllianceApplyCPP applyList = 1;
  for (int i = 0; i < this->applylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applylist(i), output);
  }

  // repeated .ProtoAlliance.AllianceDonationCPP donations = 2;
  for (int i = 0; i < this->donations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->donations(i), output);
  }

  // repeated .ProtoAlliance.AidInfoCPP aidlist = 3;
  for (int i = 0; i < this->aidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->aidlist(i), output);
  }

  // repeated .ProtoAlliance.AllianceInvitedCPP invitelist = 4;
  for (int i = 0; i < this->invitelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->invitelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.GetAllianceFunctionResp)
}

::google::protobuf::uint8* GetAllianceFunctionResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.GetAllianceFunctionResp)
  // repeated .ProtoAlliance.AllianceApplyCPP applyList = 1;
  for (int i = 0; i < this->applylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applylist(i), target);
  }

  // repeated .ProtoAlliance.AllianceDonationCPP donations = 2;
  for (int i = 0; i < this->donations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->donations(i), target);
  }

  // repeated .ProtoAlliance.AidInfoCPP aidlist = 3;
  for (int i = 0; i < this->aidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->aidlist(i), target);
  }

  // repeated .ProtoAlliance.AllianceInvitedCPP invitelist = 4;
  for (int i = 0; i < this->invitelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->invitelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.GetAllianceFunctionResp)
  return target;
}

int GetAllianceFunctionResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoAlliance.AllianceApplyCPP applyList = 1;
  total_size += 1 * this->applylist_size();
  for (int i = 0; i < this->applylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applylist(i));
  }

  // repeated .ProtoAlliance.AllianceDonationCPP donations = 2;
  total_size += 1 * this->donations_size();
  for (int i = 0; i < this->donations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->donations(i));
  }

  // repeated .ProtoAlliance.AidInfoCPP aidlist = 3;
  total_size += 1 * this->aidlist_size();
  for (int i = 0; i < this->aidlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aidlist(i));
  }

  // repeated .ProtoAlliance.AllianceInvitedCPP invitelist = 4;
  total_size += 1 * this->invitelist_size();
  for (int i = 0; i < this->invitelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invitelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllianceFunctionResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllianceFunctionResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllianceFunctionResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllianceFunctionResp::MergeFrom(const GetAllianceFunctionResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  applylist_.MergeFrom(from.applylist_);
  donations_.MergeFrom(from.donations_);
  aidlist_.MergeFrom(from.aidlist_);
  invitelist_.MergeFrom(from.invitelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllianceFunctionResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllianceFunctionResp::CopyFrom(const GetAllianceFunctionResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllianceFunctionResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->applylist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->donations())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->aidlist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->invitelist())) return false;
  return true;
}

void GetAllianceFunctionResp::Swap(GetAllianceFunctionResp* other) {
  if (other != this) {
    applylist_.Swap(&other->applylist_);
    donations_.Swap(&other->donations_);
    aidlist_.Swap(&other->aidlist_);
    invitelist_.Swap(&other->invitelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllianceFunctionResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllianceFunctionResp_descriptor_;
  metadata.reflection = GetAllianceFunctionResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceFunctionBC::kAidFieldNumber;
const int RequestAllianceFunctionBC::kUidFieldNumber;
const int RequestAllianceFunctionBC::kTypeFieldNumber;
#endif  // !_MSC_VER

RequestAllianceFunctionBC::RequestAllianceFunctionBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceFunctionBC)
}

void RequestAllianceFunctionBC::InitAsDefaultInstance() {
}

RequestAllianceFunctionBC::RequestAllianceFunctionBC(const RequestAllianceFunctionBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceFunctionBC)
}

void RequestAllianceFunctionBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceFunctionBC::~RequestAllianceFunctionBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceFunctionBC)
  SharedDtor();
}

void RequestAllianceFunctionBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceFunctionBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceFunctionBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceFunctionBC_descriptor_;
}

const RequestAllianceFunctionBC& RequestAllianceFunctionBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceFunctionBC* RequestAllianceFunctionBC::default_instance_ = NULL;

RequestAllianceFunctionBC* RequestAllianceFunctionBC::New() const {
  return new RequestAllianceFunctionBC;
}

void RequestAllianceFunctionBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceFunctionBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceFunctionBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceFunctionBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceFunctionBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceFunctionBC)
  return false;
#undef DO_
}

void RequestAllianceFunctionBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceFunctionBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceFunctionBC)
}

::google::protobuf::uint8* RequestAllianceFunctionBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceFunctionBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceFunctionBC)
  return target;
}

int RequestAllianceFunctionBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceFunctionBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceFunctionBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceFunctionBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceFunctionBC::MergeFrom(const RequestAllianceFunctionBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceFunctionBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceFunctionBC::CopyFrom(const RequestAllianceFunctionBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceFunctionBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestAllianceFunctionBC::Swap(RequestAllianceFunctionBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceFunctionBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceFunctionBC_descriptor_;
  metadata.reflection = RequestAllianceFunctionBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceFunctionBC::kUidFieldNumber;
const int ReplyAllianceFunctionBC::kTypeFieldNumber;
const int ReplyAllianceFunctionBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceFunctionBC::ReplyAllianceFunctionBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceFunctionBC)
}

void ReplyAllianceFunctionBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::GetAllianceFunctionResp*>(&::ProtoAlliance::GetAllianceFunctionResp::default_instance());
}

ReplyAllianceFunctionBC::ReplyAllianceFunctionBC(const ReplyAllianceFunctionBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceFunctionBC)
}

void ReplyAllianceFunctionBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  type_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceFunctionBC::~ReplyAllianceFunctionBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceFunctionBC)
  SharedDtor();
}

void ReplyAllianceFunctionBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyAllianceFunctionBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceFunctionBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceFunctionBC_descriptor_;
}

const ReplyAllianceFunctionBC& ReplyAllianceFunctionBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceFunctionBC* ReplyAllianceFunctionBC::default_instance_ = NULL;

ReplyAllianceFunctionBC* ReplyAllianceFunctionBC::New() const {
  return new ReplyAllianceFunctionBC;
}

void ReplyAllianceFunctionBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyAllianceFunctionBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, type_);
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::GetAllianceFunctionResp::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceFunctionBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceFunctionBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.GetAllianceFunctionResp alliance = 3;
      case 3: {
        if (tag == 26) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceFunctionBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceFunctionBC)
  return false;
#undef DO_
}

void ReplyAllianceFunctionBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceFunctionBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional .ProtoAlliance.GetAllianceFunctionResp alliance = 3;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceFunctionBC)
}

::google::protobuf::uint8* ReplyAllianceFunctionBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceFunctionBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional .ProtoAlliance.GetAllianceFunctionResp alliance = 3;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceFunctionBC)
  return target;
}

int ReplyAllianceFunctionBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .ProtoAlliance.GetAllianceFunctionResp alliance = 3;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceFunctionBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceFunctionBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceFunctionBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceFunctionBC::MergeFrom(const ReplyAllianceFunctionBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::GetAllianceFunctionResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceFunctionBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceFunctionBC::CopyFrom(const ReplyAllianceFunctionBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceFunctionBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyAllianceFunctionBC::Swap(ReplyAllianceFunctionBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceFunctionBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceFunctionBC_descriptor_;
  metadata.reflection = ReplyAllianceFunctionBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetNotifyReq::GetNotifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.GetNotifyReq)
}

void GetNotifyReq::InitAsDefaultInstance() {
}

GetNotifyReq::GetNotifyReq(const GetNotifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.GetNotifyReq)
}

void GetNotifyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNotifyReq::~GetNotifyReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.GetNotifyReq)
  SharedDtor();
}

void GetNotifyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNotifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNotifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNotifyReq_descriptor_;
}

const GetNotifyReq& GetNotifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

GetNotifyReq* GetNotifyReq::default_instance_ = NULL;

GetNotifyReq* GetNotifyReq::New() const {
  return new GetNotifyReq;
}

void GetNotifyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNotifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.GetNotifyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.GetNotifyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.GetNotifyReq)
  return false;
#undef DO_
}

void GetNotifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.GetNotifyReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.GetNotifyReq)
}

::google::protobuf::uint8* GetNotifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.GetNotifyReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.GetNotifyReq)
  return target;
}

int GetNotifyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNotifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNotifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNotifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNotifyReq::MergeFrom(const GetNotifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNotifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNotifyReq::CopyFrom(const GetNotifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNotifyReq::IsInitialized() const {

  return true;
}

void GetNotifyReq::Swap(GetNotifyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNotifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNotifyReq_descriptor_;
  metadata.reflection = GetNotifyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNotifyResp::kNotifiesFieldNumber;
#endif  // !_MSC_VER

GetNotifyResp::GetNotifyResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.GetNotifyResp)
}

void GetNotifyResp::InitAsDefaultInstance() {
}

GetNotifyResp::GetNotifyResp(const GetNotifyResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.GetNotifyResp)
}

void GetNotifyResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNotifyResp::~GetNotifyResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.GetNotifyResp)
  SharedDtor();
}

void GetNotifyResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNotifyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNotifyResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNotifyResp_descriptor_;
}

const GetNotifyResp& GetNotifyResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

GetNotifyResp* GetNotifyResp::default_instance_ = NULL;

GetNotifyResp* GetNotifyResp::New() const {
  return new GetNotifyResp;
}

void GetNotifyResp::Clear() {
  notifies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNotifyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.GetNotifyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoAlliance.AllianceNotifyCPP notifies = 1;
      case 1: {
        if (tag == 10) {
         parse_notifies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notifies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_notifies;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.GetNotifyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.GetNotifyResp)
  return false;
#undef DO_
}

void GetNotifyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.GetNotifyResp)
  // repeated .ProtoAlliance.AllianceNotifyCPP notifies = 1;
  for (int i = 0; i < this->notifies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notifies(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.GetNotifyResp)
}

::google::protobuf::uint8* GetNotifyResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.GetNotifyResp)
  // repeated .ProtoAlliance.AllianceNotifyCPP notifies = 1;
  for (int i = 0; i < this->notifies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notifies(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.GetNotifyResp)
  return target;
}

int GetNotifyResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoAlliance.AllianceNotifyCPP notifies = 1;
  total_size += 1 * this->notifies_size();
  for (int i = 0; i < this->notifies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notifies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNotifyResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNotifyResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNotifyResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNotifyResp::MergeFrom(const GetNotifyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  notifies_.MergeFrom(from.notifies_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNotifyResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNotifyResp::CopyFrom(const GetNotifyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNotifyResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->notifies())) return false;
  return true;
}

void GetNotifyResp::Swap(GetNotifyResp* other) {
  if (other != this) {
    notifies_.Swap(&other->notifies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNotifyResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNotifyResp_descriptor_;
  metadata.reflection = GetNotifyResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceNotifyBC::kAidFieldNumber;
const int RequestAllianceNotifyBC::kUidFieldNumber;
#endif  // !_MSC_VER

RequestAllianceNotifyBC::RequestAllianceNotifyBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceNotifyBC)
}

void RequestAllianceNotifyBC::InitAsDefaultInstance() {
}

RequestAllianceNotifyBC::RequestAllianceNotifyBC(const RequestAllianceNotifyBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceNotifyBC)
}

void RequestAllianceNotifyBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceNotifyBC::~RequestAllianceNotifyBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceNotifyBC)
  SharedDtor();
}

void RequestAllianceNotifyBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceNotifyBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceNotifyBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceNotifyBC_descriptor_;
}

const RequestAllianceNotifyBC& RequestAllianceNotifyBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceNotifyBC* RequestAllianceNotifyBC::default_instance_ = NULL;

RequestAllianceNotifyBC* RequestAllianceNotifyBC::New() const {
  return new RequestAllianceNotifyBC;
}

void RequestAllianceNotifyBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceNotifyBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceNotifyBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceNotifyBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceNotifyBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceNotifyBC)
  return false;
#undef DO_
}

void RequestAllianceNotifyBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceNotifyBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceNotifyBC)
}

::google::protobuf::uint8* RequestAllianceNotifyBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceNotifyBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceNotifyBC)
  return target;
}

int RequestAllianceNotifyBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceNotifyBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceNotifyBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceNotifyBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceNotifyBC::MergeFrom(const RequestAllianceNotifyBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceNotifyBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceNotifyBC::CopyFrom(const RequestAllianceNotifyBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceNotifyBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAllianceNotifyBC::Swap(RequestAllianceNotifyBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceNotifyBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceNotifyBC_descriptor_;
  metadata.reflection = RequestAllianceNotifyBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceNotifyBC::kUidFieldNumber;
const int ReplyAllianceNotifyBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceNotifyBC::ReplyAllianceNotifyBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceNotifyBC)
}

void ReplyAllianceNotifyBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::GetNotifyResp*>(&::ProtoAlliance::GetNotifyResp::default_instance());
}

ReplyAllianceNotifyBC::ReplyAllianceNotifyBC(const ReplyAllianceNotifyBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceNotifyBC)
}

void ReplyAllianceNotifyBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceNotifyBC::~ReplyAllianceNotifyBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceNotifyBC)
  SharedDtor();
}

void ReplyAllianceNotifyBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyAllianceNotifyBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceNotifyBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceNotifyBC_descriptor_;
}

const ReplyAllianceNotifyBC& ReplyAllianceNotifyBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceNotifyBC* ReplyAllianceNotifyBC::default_instance_ = NULL;

ReplyAllianceNotifyBC* ReplyAllianceNotifyBC::New() const {
  return new ReplyAllianceNotifyBC;
}

void ReplyAllianceNotifyBC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::GetNotifyResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceNotifyBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceNotifyBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.GetNotifyResp alliance = 2;
      case 2: {
        if (tag == 18) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceNotifyBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceNotifyBC)
  return false;
#undef DO_
}

void ReplyAllianceNotifyBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceNotifyBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .ProtoAlliance.GetNotifyResp alliance = 2;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceNotifyBC)
}

::google::protobuf::uint8* ReplyAllianceNotifyBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceNotifyBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional .ProtoAlliance.GetNotifyResp alliance = 2;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceNotifyBC)
  return target;
}

int ReplyAllianceNotifyBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .ProtoAlliance.GetNotifyResp alliance = 2;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceNotifyBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceNotifyBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceNotifyBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceNotifyBC::MergeFrom(const ReplyAllianceNotifyBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::GetNotifyResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceNotifyBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceNotifyBC::CopyFrom(const ReplyAllianceNotifyBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceNotifyBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyAllianceNotifyBC::Swap(ReplyAllianceNotifyBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceNotifyBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceNotifyBC_descriptor_;
  metadata.reflection = ReplyAllianceNotifyBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMemberReq::kAllianceIdFieldNumber;
#endif  // !_MSC_VER

GetMemberReq::GetMemberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.GetMemberReq)
}

void GetMemberReq::InitAsDefaultInstance() {
}

GetMemberReq::GetMemberReq(const GetMemberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.GetMemberReq)
}

void GetMemberReq::SharedCtor() {
  _cached_size_ = 0;
  allianceid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMemberReq::~GetMemberReq() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.GetMemberReq)
  SharedDtor();
}

void GetMemberReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMemberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMemberReq_descriptor_;
}

const GetMemberReq& GetMemberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

GetMemberReq* GetMemberReq::default_instance_ = NULL;

GetMemberReq* GetMemberReq::New() const {
  return new GetMemberReq;
}

void GetMemberReq::Clear() {
  allianceid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.GetMemberReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 allianceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.GetMemberReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.GetMemberReq)
  return false;
#undef DO_
}

void GetMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.GetMemberReq)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->allianceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.GetMemberReq)
}

::google::protobuf::uint8* GetMemberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.GetMemberReq)
  // required uint32 allianceId = 1;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->allianceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.GetMemberReq)
  return target;
}

int GetMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 allianceId = 1;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMemberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMemberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMemberReq::MergeFrom(const GetMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMemberReq::CopyFrom(const GetMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetMemberReq::Swap(GetMemberReq* other) {
  if (other != this) {
    std::swap(allianceid_, other->allianceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMemberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMemberReq_descriptor_;
  metadata.reflection = GetMemberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceMemberBC::kAidFieldNumber;
const int RequestAllianceMemberBC::kUidFieldNumber;
#endif  // !_MSC_VER

RequestAllianceMemberBC::RequestAllianceMemberBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceMemberBC)
}

void RequestAllianceMemberBC::InitAsDefaultInstance() {
}

RequestAllianceMemberBC::RequestAllianceMemberBC(const RequestAllianceMemberBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceMemberBC)
}

void RequestAllianceMemberBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceMemberBC::~RequestAllianceMemberBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceMemberBC)
  SharedDtor();
}

void RequestAllianceMemberBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceMemberBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceMemberBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceMemberBC_descriptor_;
}

const RequestAllianceMemberBC& RequestAllianceMemberBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceMemberBC* RequestAllianceMemberBC::default_instance_ = NULL;

RequestAllianceMemberBC* RequestAllianceMemberBC::New() const {
  return new RequestAllianceMemberBC;
}

void RequestAllianceMemberBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceMemberBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceMemberBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceMemberBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceMemberBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceMemberBC)
  return false;
#undef DO_
}

void RequestAllianceMemberBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceMemberBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceMemberBC)
}

::google::protobuf::uint8* RequestAllianceMemberBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceMemberBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceMemberBC)
  return target;
}

int RequestAllianceMemberBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceMemberBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceMemberBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceMemberBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceMemberBC::MergeFrom(const RequestAllianceMemberBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceMemberBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceMemberBC::CopyFrom(const RequestAllianceMemberBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceMemberBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAllianceMemberBC::Swap(RequestAllianceMemberBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceMemberBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceMemberBC_descriptor_;
  metadata.reflection = RequestAllianceMemberBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceMemberBC::kUidFieldNumber;
const int ReplyAllianceMemberBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceMemberBC::ReplyAllianceMemberBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceMemberBC)
}

void ReplyAllianceMemberBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::GetMemberResp*>(&::ProtoAlliance::GetMemberResp::default_instance());
}

ReplyAllianceMemberBC::ReplyAllianceMemberBC(const ReplyAllianceMemberBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceMemberBC)
}

void ReplyAllianceMemberBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceMemberBC::~ReplyAllianceMemberBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceMemberBC)
  SharedDtor();
}

void ReplyAllianceMemberBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyAllianceMemberBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceMemberBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceMemberBC_descriptor_;
}

const ReplyAllianceMemberBC& ReplyAllianceMemberBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceMemberBC* ReplyAllianceMemberBC::default_instance_ = NULL;

ReplyAllianceMemberBC* ReplyAllianceMemberBC::New() const {
  return new ReplyAllianceMemberBC;
}

void ReplyAllianceMemberBC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::GetMemberResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceMemberBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceMemberBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.GetMemberResp alliance = 2;
      case 2: {
        if (tag == 18) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceMemberBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceMemberBC)
  return false;
#undef DO_
}

void ReplyAllianceMemberBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceMemberBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .ProtoAlliance.GetMemberResp alliance = 2;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceMemberBC)
}

::google::protobuf::uint8* ReplyAllianceMemberBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceMemberBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional .ProtoAlliance.GetMemberResp alliance = 2;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceMemberBC)
  return target;
}

int ReplyAllianceMemberBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .ProtoAlliance.GetMemberResp alliance = 2;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceMemberBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceMemberBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceMemberBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceMemberBC::MergeFrom(const ReplyAllianceMemberBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::GetMemberResp::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceMemberBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceMemberBC::CopyFrom(const ReplyAllianceMemberBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceMemberBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyAllianceMemberBC::Swap(ReplyAllianceMemberBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceMemberBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceMemberBC_descriptor_;
  metadata.reflection = ReplyAllianceMemberBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMemberResp::kMembersFieldNumber;
const int GetMemberResp::kAllianceIdFieldNumber;
#endif  // !_MSC_VER

GetMemberResp::GetMemberResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.GetMemberResp)
}

void GetMemberResp::InitAsDefaultInstance() {
}

GetMemberResp::GetMemberResp(const GetMemberResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.GetMemberResp)
}

void GetMemberResp::SharedCtor() {
  _cached_size_ = 0;
  allianceid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMemberResp::~GetMemberResp() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.GetMemberResp)
  SharedDtor();
}

void GetMemberResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMemberResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMemberResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMemberResp_descriptor_;
}

const GetMemberResp& GetMemberResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

GetMemberResp* GetMemberResp::default_instance_ = NULL;

GetMemberResp* GetMemberResp::New() const {
  return new GetMemberResp;
}

void GetMemberResp::Clear() {
  allianceid_ = 0u;
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMemberResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.GetMemberResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoAlliance.AllianceMemberCPP members = 1;
      case 1: {
        if (tag == 10) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_members;
        if (input->ExpectTag(16)) goto parse_allianceId;
        break;
      }

      // required uint32 allianceId = 2;
      case 2: {
        if (tag == 16) {
         parse_allianceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.GetMemberResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.GetMemberResp)
  return false;
#undef DO_
}

void GetMemberResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.GetMemberResp)
  // repeated .ProtoAlliance.AllianceMemberCPP members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->members(i), output);
  }

  // required uint32 allianceId = 2;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->allianceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.GetMemberResp)
}

::google::protobuf::uint8* GetMemberResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.GetMemberResp)
  // repeated .ProtoAlliance.AllianceMemberCPP members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->members(i), target);
  }

  // required uint32 allianceId = 2;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->allianceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.GetMemberResp)
  return target;
}

int GetMemberResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 allianceId = 2;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

  }
  // repeated .ProtoAlliance.AllianceMemberCPP members = 1;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMemberResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMemberResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMemberResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMemberResp::MergeFrom(const GetMemberResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMemberResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMemberResp::CopyFrom(const GetMemberResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMemberResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->members())) return false;
  return true;
}

void GetMemberResp::Swap(GetMemberResp* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    std::swap(allianceid_, other->allianceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMemberResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMemberResp_descriptor_;
  metadata.reflection = GetMemberResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestAlliance::RequestAlliance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAlliance)
}

void RequestAlliance::InitAsDefaultInstance() {
}

RequestAlliance::RequestAlliance(const RequestAlliance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAlliance)
}

void RequestAlliance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAlliance::~RequestAlliance() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAlliance)
  SharedDtor();
}

void RequestAlliance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAlliance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAlliance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAlliance_descriptor_;
}

const RequestAlliance& RequestAlliance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAlliance* RequestAlliance::default_instance_ = NULL;

RequestAlliance* RequestAlliance::New() const {
  return new RequestAlliance;
}

void RequestAlliance::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAlliance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAlliance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAlliance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAlliance)
  return false;
#undef DO_
}

void RequestAlliance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAlliance)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAlliance)
}

::google::protobuf::uint8* RequestAlliance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAlliance)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAlliance)
  return target;
}

int RequestAlliance::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAlliance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAlliance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAlliance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAlliance::MergeFrom(const RequestAlliance& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAlliance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAlliance::CopyFrom(const RequestAlliance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAlliance::IsInitialized() const {

  return true;
}

void RequestAlliance::Swap(RequestAlliance* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAlliance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAlliance_descriptor_;
  metadata.reflection = RequestAlliance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceBC::kAidFieldNumber;
const int RequestAllianceBC::kUidFieldNumber;
#endif  // !_MSC_VER

RequestAllianceBC::RequestAllianceBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceBC)
}

void RequestAllianceBC::InitAsDefaultInstance() {
}

RequestAllianceBC::RequestAllianceBC(const RequestAllianceBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceBC)
}

void RequestAllianceBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceBC::~RequestAllianceBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceBC)
  SharedDtor();
}

void RequestAllianceBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceBC_descriptor_;
}

const RequestAllianceBC& RequestAllianceBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceBC* RequestAllianceBC::default_instance_ = NULL;

RequestAllianceBC* RequestAllianceBC::New() const {
  return new RequestAllianceBC;
}

void RequestAllianceBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceBC)
  return false;
#undef DO_
}

void RequestAllianceBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceBC)
}

::google::protobuf::uint8* RequestAllianceBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceBC)
  return target;
}

int RequestAllianceBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceBC::MergeFrom(const RequestAllianceBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceBC::CopyFrom(const RequestAllianceBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAllianceBC::Swap(RequestAllianceBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceBC_descriptor_;
  metadata.reflection = RequestAllianceBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceBC::kUidFieldNumber;
const int ReplyAllianceBC::kAllianceFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceBC::ReplyAllianceBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceBC)
}

void ReplyAllianceBC::InitAsDefaultInstance() {
  alliance_ = const_cast< ::ProtoAlliance::AllianceCPP*>(&::ProtoAlliance::AllianceCPP::default_instance());
}

ReplyAllianceBC::ReplyAllianceBC(const ReplyAllianceBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceBC)
}

void ReplyAllianceBC::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  alliance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceBC::~ReplyAllianceBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceBC)
  SharedDtor();
}

void ReplyAllianceBC::SharedDtor() {
  if (this != default_instance_) {
    delete alliance_;
  }
}

void ReplyAllianceBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceBC_descriptor_;
}

const ReplyAllianceBC& ReplyAllianceBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceBC* ReplyAllianceBC::default_instance_ = NULL;

ReplyAllianceBC* ReplyAllianceBC::New() const {
  return new ReplyAllianceBC;
}

void ReplyAllianceBC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0u;
    if (has_alliance()) {
      if (alliance_ != NULL) alliance_->::ProtoAlliance::AllianceCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alliance;
        break;
      }

      // optional .ProtoAlliance.AllianceCPP alliance = 2;
      case 2: {
        if (tag == 18) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceBC)
  return false;
#undef DO_
}

void ReplyAllianceBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional .ProtoAlliance.AllianceCPP alliance = 2;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alliance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceBC)
}

::google::protobuf::uint8* ReplyAllianceBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceBC)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional .ProtoAlliance.AllianceCPP alliance = 2;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alliance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceBC)
  return target;
}

int ReplyAllianceBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .ProtoAlliance.AllianceCPP alliance = 2;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceBC::MergeFrom(const ReplyAllianceBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_alliance()) {
      mutable_alliance()->::ProtoAlliance::AllianceCPP::MergeFrom(from.alliance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceBC::CopyFrom(const ReplyAllianceBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alliance()) {
    if (!this->alliance().IsInitialized()) return false;
  }
  return true;
}

void ReplyAllianceBC::Swap(ReplyAllianceBC* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(alliance_, other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceBC_descriptor_;
  metadata.reflection = ReplyAllianceBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUpdateMemberBC::kAidFieldNumber;
const int RequestUpdateMemberBC::kUidFieldNumber;
const int RequestUpdateMemberBC::kOnlineTsFieldNumber;
const int RequestUpdateMemberBC::kHelpTsFieldNumber;
const int RequestUpdateMemberBC::kLevelFieldNumber;
const int RequestUpdateMemberBC::kNameFieldNumber;
const int RequestUpdateMemberBC::kVipLevelFieldNumber;
#endif  // !_MSC_VER

RequestUpdateMemberBC::RequestUpdateMemberBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestUpdateMemberBC)
}

void RequestUpdateMemberBC::InitAsDefaultInstance() {
}

RequestUpdateMemberBC::RequestUpdateMemberBC(const RequestUpdateMemberBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestUpdateMemberBC)
}

void RequestUpdateMemberBC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  onlinets_ = 0u;
  helpts_ = 0u;
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  viplevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpdateMemberBC::~RequestUpdateMemberBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestUpdateMemberBC)
  SharedDtor();
}

void RequestUpdateMemberBC::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RequestUpdateMemberBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUpdateMemberBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUpdateMemberBC_descriptor_;
}

const RequestUpdateMemberBC& RequestUpdateMemberBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestUpdateMemberBC* RequestUpdateMemberBC::default_instance_ = NULL;

RequestUpdateMemberBC* RequestUpdateMemberBC::New() const {
  return new RequestUpdateMemberBC;
}

void RequestUpdateMemberBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestUpdateMemberBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(aid_, helpts_);
    ZR_(level_, viplevel_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUpdateMemberBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestUpdateMemberBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_onlineTs;
        break;
      }

      // optional uint32 onlineTs = 3;
      case 3: {
        if (tag == 24) {
         parse_onlineTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinets_)));
          set_has_onlinets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_helpTs;
        break;
      }

      // optional uint32 helpTs = 4;
      case 4: {
        if (tag == 32) {
         parse_helpTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &helpts_)));
          set_has_helpts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional bytes name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_vipLevel;
        break;
      }

      // optional uint32 vipLevel = 7;
      case 7: {
        if (tag == 56) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestUpdateMemberBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestUpdateMemberBC)
  return false;
#undef DO_
}

void RequestUpdateMemberBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestUpdateMemberBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional uint32 onlineTs = 3;
  if (has_onlinets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->onlinets(), output);
  }

  // optional uint32 helpTs = 4;
  if (has_helpts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->helpts(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional bytes name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->name(), output);
  }

  // optional uint32 vipLevel = 7;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->viplevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestUpdateMemberBC)
}

::google::protobuf::uint8* RequestUpdateMemberBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestUpdateMemberBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional uint32 onlineTs = 3;
  if (has_onlinets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->onlinets(), target);
  }

  // optional uint32 helpTs = 4;
  if (has_helpts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->helpts(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional bytes name = 6;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->name(), target);
  }

  // optional uint32 vipLevel = 7;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->viplevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestUpdateMemberBC)
  return target;
}

int RequestUpdateMemberBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 onlineTs = 3;
    if (has_onlinets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinets());
    }

    // optional uint32 helpTs = 4;
    if (has_helpts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->helpts());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional bytes name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 vipLevel = 7;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpdateMemberBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUpdateMemberBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUpdateMemberBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUpdateMemberBC::MergeFrom(const RequestUpdateMemberBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_onlinets()) {
      set_onlinets(from.onlinets());
    }
    if (from.has_helpts()) {
      set_helpts(from.helpts());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUpdateMemberBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUpdateMemberBC::CopyFrom(const RequestUpdateMemberBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdateMemberBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestUpdateMemberBC::Swap(RequestUpdateMemberBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(onlinets_, other->onlinets_);
    std::swap(helpts_, other->helpts_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUpdateMemberBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUpdateMemberBC_descriptor_;
  metadata.reflection = RequestUpdateMemberBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAddMemberHelpTimesBC::kAidFieldNumber;
const int RequestAddMemberHelpTimesBC::kUidFieldNumber;
#endif  // !_MSC_VER

RequestAddMemberHelpTimesBC::RequestAddMemberHelpTimesBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAddMemberHelpTimesBC)
}

void RequestAddMemberHelpTimesBC::InitAsDefaultInstance() {
}

RequestAddMemberHelpTimesBC::RequestAddMemberHelpTimesBC(const RequestAddMemberHelpTimesBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAddMemberHelpTimesBC)
}

void RequestAddMemberHelpTimesBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAddMemberHelpTimesBC::~RequestAddMemberHelpTimesBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAddMemberHelpTimesBC)
  SharedDtor();
}

void RequestAddMemberHelpTimesBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAddMemberHelpTimesBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAddMemberHelpTimesBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAddMemberHelpTimesBC_descriptor_;
}

const RequestAddMemberHelpTimesBC& RequestAddMemberHelpTimesBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAddMemberHelpTimesBC* RequestAddMemberHelpTimesBC::default_instance_ = NULL;

RequestAddMemberHelpTimesBC* RequestAddMemberHelpTimesBC::New() const {
  return new RequestAddMemberHelpTimesBC;
}

void RequestAddMemberHelpTimesBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAddMemberHelpTimesBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAddMemberHelpTimesBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAddMemberHelpTimesBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAddMemberHelpTimesBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAddMemberHelpTimesBC)
  return false;
#undef DO_
}

void RequestAddMemberHelpTimesBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAddMemberHelpTimesBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAddMemberHelpTimesBC)
}

::google::protobuf::uint8* RequestAddMemberHelpTimesBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAddMemberHelpTimesBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAddMemberHelpTimesBC)
  return target;
}

int RequestAddMemberHelpTimesBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAddMemberHelpTimesBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAddMemberHelpTimesBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAddMemberHelpTimesBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAddMemberHelpTimesBC::MergeFrom(const RequestAddMemberHelpTimesBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAddMemberHelpTimesBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAddMemberHelpTimesBC::CopyFrom(const RequestAddMemberHelpTimesBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAddMemberHelpTimesBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAddMemberHelpTimesBC::Swap(RequestAddMemberHelpTimesBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAddMemberHelpTimesBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAddMemberHelpTimesBC_descriptor_;
  metadata.reflection = RequestAddMemberHelpTimesBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceSetFlag::kIdFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceSetFlag::RequestAllianceRaceSetFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceSetFlag)
}

void RequestAllianceRaceSetFlag::InitAsDefaultInstance() {
}

RequestAllianceRaceSetFlag::RequestAllianceRaceSetFlag(const RequestAllianceRaceSetFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceSetFlag)
}

void RequestAllianceRaceSetFlag::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceSetFlag::~RequestAllianceRaceSetFlag() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceSetFlag)
  SharedDtor();
}

void RequestAllianceRaceSetFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceSetFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceSetFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceSetFlag_descriptor_;
}

const RequestAllianceRaceSetFlag& RequestAllianceRaceSetFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceSetFlag* RequestAllianceRaceSetFlag::default_instance_ = NULL;

RequestAllianceRaceSetFlag* RequestAllianceRaceSetFlag::New() const {
  return new RequestAllianceRaceSetFlag;
}

void RequestAllianceRaceSetFlag::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceSetFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceSetFlag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceSetFlag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceSetFlag)
  return false;
#undef DO_
}

void RequestAllianceRaceSetFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceSetFlag)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceSetFlag)
}

::google::protobuf::uint8* RequestAllianceRaceSetFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceSetFlag)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceSetFlag)
  return target;
}

int RequestAllianceRaceSetFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceSetFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceSetFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceSetFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceSetFlag::MergeFrom(const RequestAllianceRaceSetFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceSetFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceSetFlag::CopyFrom(const RequestAllianceRaceSetFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceSetFlag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestAllianceRaceSetFlag::Swap(RequestAllianceRaceSetFlag* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceSetFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceSetFlag_descriptor_;
  metadata.reflection = RequestAllianceRaceSetFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceSetFlagBC::kAidFieldNumber;
const int RequestAllianceRaceSetFlagBC::kUidFieldNumber;
const int RequestAllianceRaceSetFlagBC::kIdFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceSetFlagBC::RequestAllianceRaceSetFlagBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceSetFlagBC)
}

void RequestAllianceRaceSetFlagBC::InitAsDefaultInstance() {
}

RequestAllianceRaceSetFlagBC::RequestAllianceRaceSetFlagBC(const RequestAllianceRaceSetFlagBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceSetFlagBC)
}

void RequestAllianceRaceSetFlagBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceSetFlagBC::~RequestAllianceRaceSetFlagBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceSetFlagBC)
  SharedDtor();
}

void RequestAllianceRaceSetFlagBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceSetFlagBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceSetFlagBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceSetFlagBC_descriptor_;
}

const RequestAllianceRaceSetFlagBC& RequestAllianceRaceSetFlagBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceSetFlagBC* RequestAllianceRaceSetFlagBC::default_instance_ = NULL;

RequestAllianceRaceSetFlagBC* RequestAllianceRaceSetFlagBC::New() const {
  return new RequestAllianceRaceSetFlagBC;
}

void RequestAllianceRaceSetFlagBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceSetFlagBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceSetFlagBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceSetFlagBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceSetFlagBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceSetFlagBC)
  return false;
#undef DO_
}

void RequestAllianceRaceSetFlagBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceSetFlagBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceSetFlagBC)
}

::google::protobuf::uint8* RequestAllianceRaceSetFlagBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceSetFlagBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceSetFlagBC)
  return target;
}

int RequestAllianceRaceSetFlagBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceSetFlagBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceSetFlagBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceSetFlagBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceSetFlagBC::MergeFrom(const RequestAllianceRaceSetFlagBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceSetFlagBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceSetFlagBC::CopyFrom(const RequestAllianceRaceSetFlagBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceSetFlagBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestAllianceRaceSetFlagBC::Swap(RequestAllianceRaceSetFlagBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceSetFlagBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceSetFlagBC_descriptor_;
  metadata.reflection = RequestAllianceRaceSetFlagBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestAllianceRaceMemberProgress::RequestAllianceRaceMemberProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceMemberProgress)
}

void RequestAllianceRaceMemberProgress::InitAsDefaultInstance() {
}

RequestAllianceRaceMemberProgress::RequestAllianceRaceMemberProgress(const RequestAllianceRaceMemberProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceMemberProgress)
}

void RequestAllianceRaceMemberProgress::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceMemberProgress::~RequestAllianceRaceMemberProgress() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceMemberProgress)
  SharedDtor();
}

void RequestAllianceRaceMemberProgress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceMemberProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceMemberProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceMemberProgress_descriptor_;
}

const RequestAllianceRaceMemberProgress& RequestAllianceRaceMemberProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceMemberProgress* RequestAllianceRaceMemberProgress::default_instance_ = NULL;

RequestAllianceRaceMemberProgress* RequestAllianceRaceMemberProgress::New() const {
  return new RequestAllianceRaceMemberProgress;
}

void RequestAllianceRaceMemberProgress::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceMemberProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceMemberProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceMemberProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceMemberProgress)
  return false;
#undef DO_
}

void RequestAllianceRaceMemberProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceMemberProgress)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceMemberProgress)
}

::google::protobuf::uint8* RequestAllianceRaceMemberProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceMemberProgress)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceMemberProgress)
  return target;
}

int RequestAllianceRaceMemberProgress::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceMemberProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceMemberProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceMemberProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceMemberProgress::MergeFrom(const RequestAllianceRaceMemberProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceMemberProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceMemberProgress::CopyFrom(const RequestAllianceRaceMemberProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceMemberProgress::IsInitialized() const {

  return true;
}

void RequestAllianceRaceMemberProgress::Swap(RequestAllianceRaceMemberProgress* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceMemberProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceMemberProgress_descriptor_;
  metadata.reflection = RequestAllianceRaceMemberProgress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceMemberProgressBC::kAidFieldNumber;
const int RequestAllianceRaceMemberProgressBC::kUidFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceMemberProgressBC::RequestAllianceRaceMemberProgressBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceMemberProgressBC)
}

void RequestAllianceRaceMemberProgressBC::InitAsDefaultInstance() {
}

RequestAllianceRaceMemberProgressBC::RequestAllianceRaceMemberProgressBC(const RequestAllianceRaceMemberProgressBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceMemberProgressBC)
}

void RequestAllianceRaceMemberProgressBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceMemberProgressBC::~RequestAllianceRaceMemberProgressBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceMemberProgressBC)
  SharedDtor();
}

void RequestAllianceRaceMemberProgressBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceMemberProgressBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceMemberProgressBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceMemberProgressBC_descriptor_;
}

const RequestAllianceRaceMemberProgressBC& RequestAllianceRaceMemberProgressBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceMemberProgressBC* RequestAllianceRaceMemberProgressBC::default_instance_ = NULL;

RequestAllianceRaceMemberProgressBC* RequestAllianceRaceMemberProgressBC::New() const {
  return new RequestAllianceRaceMemberProgressBC;
}

void RequestAllianceRaceMemberProgressBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceMemberProgressBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceMemberProgressBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceMemberProgressBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceMemberProgressBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceMemberProgressBC)
  return false;
#undef DO_
}

void RequestAllianceRaceMemberProgressBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceMemberProgressBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceMemberProgressBC)
}

::google::protobuf::uint8* RequestAllianceRaceMemberProgressBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceMemberProgressBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceMemberProgressBC)
  return target;
}

int RequestAllianceRaceMemberProgressBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceMemberProgressBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceMemberProgressBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceMemberProgressBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceMemberProgressBC::MergeFrom(const RequestAllianceRaceMemberProgressBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceMemberProgressBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceMemberProgressBC::CopyFrom(const RequestAllianceRaceMemberProgressBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceMemberProgressBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAllianceRaceMemberProgressBC::Swap(RequestAllianceRaceMemberProgressBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceMemberProgressBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceMemberProgressBC_descriptor_;
  metadata.reflection = RequestAllianceRaceMemberProgressBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceRaceMemberProgress::kOrderIdFieldNumber;
const int ReplyAllianceRaceMemberProgress::kFinishFieldNumber;
const int ReplyAllianceRaceMemberProgress::kTsFieldNumber;
const int ReplyAllianceRaceMemberProgress::kProgressFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceRaceMemberProgress::ReplyAllianceRaceMemberProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceRaceMemberProgress)
}

void ReplyAllianceRaceMemberProgress::InitAsDefaultInstance() {
}

ReplyAllianceRaceMemberProgress::ReplyAllianceRaceMemberProgress(const ReplyAllianceRaceMemberProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceRaceMemberProgress)
}

void ReplyAllianceRaceMemberProgress::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = 0u;
  finish_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceRaceMemberProgress::~ReplyAllianceRaceMemberProgress() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceRaceMemberProgress)
  SharedDtor();
}

void ReplyAllianceRaceMemberProgress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyAllianceRaceMemberProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceRaceMemberProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceRaceMemberProgress_descriptor_;
}

const ReplyAllianceRaceMemberProgress& ReplyAllianceRaceMemberProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceRaceMemberProgress* ReplyAllianceRaceMemberProgress::default_instance_ = NULL;

ReplyAllianceRaceMemberProgress* ReplyAllianceRaceMemberProgress::New() const {
  return new ReplyAllianceRaceMemberProgress;
}

void ReplyAllianceRaceMemberProgress::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyAllianceRaceMemberProgress*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(orderid_, finish_);
    ts_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  progress_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceRaceMemberProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceRaceMemberProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 orderId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_finish;
        break;
      }

      // required uint32 finish = 2;
      case 2: {
        if (tag == 16) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ts;
        break;
      }

      // required uint32 ts = 3;
      case 3: {
        if (tag == 24) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_progress;
        break;
      }

      // repeated uint32 progress = 4;
      case 4: {
        if (tag == 32) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_progress())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_progress())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_progress;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceRaceMemberProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceRaceMemberProgress)
  return false;
#undef DO_
}

void ReplyAllianceRaceMemberProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceRaceMemberProgress)
  // required uint32 orderId = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->orderid(), output);
  }

  // required uint32 finish = 2;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finish(), output);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ts(), output);
  }

  // repeated uint32 progress = 4;
  for (int i = 0; i < this->progress_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->progress(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceRaceMemberProgress)
}

::google::protobuf::uint8* ReplyAllianceRaceMemberProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceRaceMemberProgress)
  // required uint32 orderId = 1;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->orderid(), target);
  }

  // required uint32 finish = 2;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finish(), target);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ts(), target);
  }

  // repeated uint32 progress = 4;
  for (int i = 0; i < this->progress_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->progress(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceRaceMemberProgress)
  return target;
}

int ReplyAllianceRaceMemberProgress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 orderId = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orderid());
    }

    // required uint32 finish = 2;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finish());
    }

    // required uint32 ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  // repeated uint32 progress = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->progress_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->progress(i));
    }
    total_size += 1 * this->progress_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceRaceMemberProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceRaceMemberProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceRaceMemberProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceRaceMemberProgress::MergeFrom(const ReplyAllianceRaceMemberProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  progress_.MergeFrom(from.progress_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceRaceMemberProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceRaceMemberProgress::CopyFrom(const ReplyAllianceRaceMemberProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceRaceMemberProgress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReplyAllianceRaceMemberProgress::Swap(ReplyAllianceRaceMemberProgress* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(finish_, other->finish_);
    std::swap(ts_, other->ts_);
    progress_.Swap(&other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceRaceMemberProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceRaceMemberProgress_descriptor_;
  metadata.reflection = ReplyAllianceRaceMemberProgress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestAllianceRaceInfo::RequestAllianceRaceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceInfo)
}

void RequestAllianceRaceInfo::InitAsDefaultInstance() {
}

RequestAllianceRaceInfo::RequestAllianceRaceInfo(const RequestAllianceRaceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceInfo)
}

void RequestAllianceRaceInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceInfo::~RequestAllianceRaceInfo() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceInfo)
  SharedDtor();
}

void RequestAllianceRaceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceInfo_descriptor_;
}

const RequestAllianceRaceInfo& RequestAllianceRaceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceInfo* RequestAllianceRaceInfo::default_instance_ = NULL;

RequestAllianceRaceInfo* RequestAllianceRaceInfo::New() const {
  return new RequestAllianceRaceInfo;
}

void RequestAllianceRaceInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceInfo)
  return false;
#undef DO_
}

void RequestAllianceRaceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceInfo)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceInfo)
}

::google::protobuf::uint8* RequestAllianceRaceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceInfo)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceInfo)
  return target;
}

int RequestAllianceRaceInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceInfo::MergeFrom(const RequestAllianceRaceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceInfo::CopyFrom(const RequestAllianceRaceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceInfo::IsInitialized() const {

  return true;
}

void RequestAllianceRaceInfo::Swap(RequestAllianceRaceInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceInfo_descriptor_;
  metadata.reflection = RequestAllianceRaceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceInfoBC::kAidFieldNumber;
const int RequestAllianceRaceInfoBC::kUidFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceInfoBC::RequestAllianceRaceInfoBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceInfoBC)
}

void RequestAllianceRaceInfoBC::InitAsDefaultInstance() {
}

RequestAllianceRaceInfoBC::RequestAllianceRaceInfoBC(const RequestAllianceRaceInfoBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceInfoBC)
}

void RequestAllianceRaceInfoBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceInfoBC::~RequestAllianceRaceInfoBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceInfoBC)
  SharedDtor();
}

void RequestAllianceRaceInfoBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceInfoBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceInfoBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceInfoBC_descriptor_;
}

const RequestAllianceRaceInfoBC& RequestAllianceRaceInfoBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceInfoBC* RequestAllianceRaceInfoBC::default_instance_ = NULL;

RequestAllianceRaceInfoBC* RequestAllianceRaceInfoBC::New() const {
  return new RequestAllianceRaceInfoBC;
}

void RequestAllianceRaceInfoBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceInfoBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceInfoBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceInfoBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceInfoBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceInfoBC)
  return false;
#undef DO_
}

void RequestAllianceRaceInfoBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceInfoBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceInfoBC)
}

::google::protobuf::uint8* RequestAllianceRaceInfoBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceInfoBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceInfoBC)
  return target;
}

int RequestAllianceRaceInfoBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceInfoBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceInfoBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceInfoBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceInfoBC::MergeFrom(const RequestAllianceRaceInfoBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceInfoBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceInfoBC::CopyFrom(const RequestAllianceRaceInfoBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceInfoBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAllianceRaceInfoBC::Swap(RequestAllianceRaceInfoBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceInfoBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceInfoBC_descriptor_;
  metadata.reflection = RequestAllianceRaceInfoBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceRaceInfo::kPointFieldNumber;
const int ReplyAllianceRaceInfo::kRaceLevelFieldNumber;
const int ReplyAllianceRaceInfo::kOverTsFieldNumber;
const int ReplyAllianceRaceInfo::kFlagFieldNumber;
const int ReplyAllianceRaceInfo::kInRaceFieldNumber;
const int ReplyAllianceRaceInfo::kMemberPointFieldNumber;
const int ReplyAllianceRaceInfo::kOpenRaceFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceRaceInfo::ReplyAllianceRaceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceRaceInfo)
}

void ReplyAllianceRaceInfo::InitAsDefaultInstance() {
}

ReplyAllianceRaceInfo::ReplyAllianceRaceInfo(const ReplyAllianceRaceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceRaceInfo)
}

void ReplyAllianceRaceInfo::SharedCtor() {
  _cached_size_ = 0;
  point_ = 0u;
  racelevel_ = 0u;
  overts_ = 0u;
  flag_ = 0u;
  inrace_ = 0u;
  memberpoint_ = 0u;
  openrace_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceRaceInfo::~ReplyAllianceRaceInfo() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceRaceInfo)
  SharedDtor();
}

void ReplyAllianceRaceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyAllianceRaceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceRaceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceRaceInfo_descriptor_;
}

const ReplyAllianceRaceInfo& ReplyAllianceRaceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceRaceInfo* ReplyAllianceRaceInfo::default_instance_ = NULL;

ReplyAllianceRaceInfo* ReplyAllianceRaceInfo::New() const {
  return new ReplyAllianceRaceInfo;
}

void ReplyAllianceRaceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyAllianceRaceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(point_, openrace_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceRaceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceRaceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_raceLevel;
        break;
      }

      // required uint32 raceLevel = 2;
      case 2: {
        if (tag == 16) {
         parse_raceLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &racelevel_)));
          set_has_racelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_overTs;
        break;
      }

      // required uint32 overTs = 3;
      case 3: {
        if (tag == 24) {
         parse_overTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overts_)));
          set_has_overts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 4;
      case 4: {
        if (tag == 32) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_inRace;
        break;
      }

      // optional uint32 inRace = 5;
      case 5: {
        if (tag == 40) {
         parse_inRace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inrace_)));
          set_has_inrace();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_memberPoint;
        break;
      }

      // optional uint32 memberPoint = 6;
      case 6: {
        if (tag == 48) {
         parse_memberPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberpoint_)));
          set_has_memberpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_openRace;
        break;
      }

      // required uint32 openRace = 7;
      case 7: {
        if (tag == 56) {
         parse_openRace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openrace_)));
          set_has_openrace();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceRaceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceRaceInfo)
  return false;
#undef DO_
}

void ReplyAllianceRaceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceRaceInfo)
  // required uint32 point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->point(), output);
  }

  // required uint32 raceLevel = 2;
  if (has_racelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->racelevel(), output);
  }

  // required uint32 overTs = 3;
  if (has_overts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->overts(), output);
  }

  // optional uint32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flag(), output);
  }

  // optional uint32 inRace = 5;
  if (has_inrace()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->inrace(), output);
  }

  // optional uint32 memberPoint = 6;
  if (has_memberpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->memberpoint(), output);
  }

  // required uint32 openRace = 7;
  if (has_openrace()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->openrace(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceRaceInfo)
}

::google::protobuf::uint8* ReplyAllianceRaceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceRaceInfo)
  // required uint32 point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->point(), target);
  }

  // required uint32 raceLevel = 2;
  if (has_racelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->racelevel(), target);
  }

  // required uint32 overTs = 3;
  if (has_overts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->overts(), target);
  }

  // optional uint32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flag(), target);
  }

  // optional uint32 inRace = 5;
  if (has_inrace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->inrace(), target);
  }

  // optional uint32 memberPoint = 6;
  if (has_memberpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->memberpoint(), target);
  }

  // required uint32 openRace = 7;
  if (has_openrace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->openrace(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceRaceInfo)
  return target;
}

int ReplyAllianceRaceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

    // required uint32 raceLevel = 2;
    if (has_racelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->racelevel());
    }

    // required uint32 overTs = 3;
    if (has_overts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->overts());
    }

    // optional uint32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional uint32 inRace = 5;
    if (has_inrace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inrace());
    }

    // optional uint32 memberPoint = 6;
    if (has_memberpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberpoint());
    }

    // required uint32 openRace = 7;
    if (has_openrace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openrace());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceRaceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceRaceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceRaceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceRaceInfo::MergeFrom(const ReplyAllianceRaceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_racelevel()) {
      set_racelevel(from.racelevel());
    }
    if (from.has_overts()) {
      set_overts(from.overts());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_inrace()) {
      set_inrace(from.inrace());
    }
    if (from.has_memberpoint()) {
      set_memberpoint(from.memberpoint());
    }
    if (from.has_openrace()) {
      set_openrace(from.openrace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceRaceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceRaceInfo::CopyFrom(const ReplyAllianceRaceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceRaceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000047) != 0x00000047) return false;

  return true;
}

void ReplyAllianceRaceInfo::Swap(ReplyAllianceRaceInfo* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(racelevel_, other->racelevel_);
    std::swap(overts_, other->overts_);
    std::swap(flag_, other->flag_);
    std::swap(inrace_, other->inrace_);
    std::swap(memberpoint_, other->memberpoint_);
    std::swap(openrace_, other->openrace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceRaceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceRaceInfo_descriptor_;
  metadata.reflection = ReplyAllianceRaceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceRaceOrder::kIdFieldNumber;
const int AllianceRaceOrder::kCdTsFieldNumber;
#endif  // !_MSC_VER

AllianceRaceOrder::AllianceRaceOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.AllianceRaceOrder)
}

void AllianceRaceOrder::InitAsDefaultInstance() {
}

AllianceRaceOrder::AllianceRaceOrder(const AllianceRaceOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.AllianceRaceOrder)
}

void AllianceRaceOrder::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cdts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceRaceOrder::~AllianceRaceOrder() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.AllianceRaceOrder)
  SharedDtor();
}

void AllianceRaceOrder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceRaceOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceRaceOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceRaceOrder_descriptor_;
}

const AllianceRaceOrder& AllianceRaceOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

AllianceRaceOrder* AllianceRaceOrder::default_instance_ = NULL;

AllianceRaceOrder* AllianceRaceOrder::New() const {
  return new AllianceRaceOrder;
}

void AllianceRaceOrder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllianceRaceOrder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, cdts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceRaceOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.AllianceRaceOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cdTs;
        break;
      }

      // required uint32 cdTs = 2;
      case 2: {
        if (tag == 16) {
         parse_cdTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdts_)));
          set_has_cdts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.AllianceRaceOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.AllianceRaceOrder)
  return false;
#undef DO_
}

void AllianceRaceOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.AllianceRaceOrder)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 cdTs = 2;
  if (has_cdts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cdts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.AllianceRaceOrder)
}

::google::protobuf::uint8* AllianceRaceOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.AllianceRaceOrder)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 cdTs = 2;
  if (has_cdts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cdts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.AllianceRaceOrder)
  return target;
}

int AllianceRaceOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 cdTs = 2;
    if (has_cdts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceRaceOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceRaceOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceRaceOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceRaceOrder::MergeFrom(const AllianceRaceOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cdts()) {
      set_cdts(from.cdts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceRaceOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceRaceOrder::CopyFrom(const AllianceRaceOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceRaceOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllianceRaceOrder::Swap(AllianceRaceOrder* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cdts_, other->cdts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceRaceOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceRaceOrder_descriptor_;
  metadata.reflection = AllianceRaceOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceRaceMemberOrder::kUidFieldNumber;
const int AllianceRaceMemberOrder::kIdFieldNumber;
const int AllianceRaceMemberOrder::kTsFieldNumber;
const int AllianceRaceMemberOrder::kLevelFieldNumber;
const int AllianceRaceMemberOrder::kNameFieldNumber;
const int AllianceRaceMemberOrder::kFigFieldNumber;
#endif  // !_MSC_VER

AllianceRaceMemberOrder::AllianceRaceMemberOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.AllianceRaceMemberOrder)
}

void AllianceRaceMemberOrder::InitAsDefaultInstance() {
}

AllianceRaceMemberOrder::AllianceRaceMemberOrder(const AllianceRaceMemberOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.AllianceRaceMemberOrder)
}

void AllianceRaceMemberOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  id_ = 0u;
  ts_ = 0u;
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceRaceMemberOrder::~AllianceRaceMemberOrder() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.AllianceRaceMemberOrder)
  SharedDtor();
}

void AllianceRaceMemberOrder::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (this != default_instance_) {
  }
}

void AllianceRaceMemberOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceRaceMemberOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceRaceMemberOrder_descriptor_;
}

const AllianceRaceMemberOrder& AllianceRaceMemberOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

AllianceRaceMemberOrder* AllianceRaceMemberOrder::default_instance_ = NULL;

AllianceRaceMemberOrder* AllianceRaceMemberOrder::New() const {
  return new AllianceRaceMemberOrder;
}

void AllianceRaceMemberOrder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllianceRaceMemberOrder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uid_, level_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceRaceMemberOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.AllianceRaceMemberOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ts;
        break;
      }

      // required uint32 ts = 3;
      case 3: {
        if (tag == 24) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required bytes name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fig;
        break;
      }

      // required bytes fig = 6;
      case 6: {
        if (tag == 50) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.AllianceRaceMemberOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.AllianceRaceMemberOrder)
  return false;
#undef DO_
}

void AllianceRaceMemberOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.AllianceRaceMemberOrder)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ts(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->name(), output);
  }

  // required bytes fig = 6;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->fig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.AllianceRaceMemberOrder)
}

::google::protobuf::uint8* AllianceRaceMemberOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.AllianceRaceMemberOrder)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ts(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  // required bytes fig = 6;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->fig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.AllianceRaceMemberOrder)
  return target;
}

int AllianceRaceMemberOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes fig = 6;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceRaceMemberOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceRaceMemberOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceRaceMemberOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceRaceMemberOrder::MergeFrom(const AllianceRaceMemberOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceRaceMemberOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceRaceMemberOrder::CopyFrom(const AllianceRaceMemberOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceRaceMemberOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void AllianceRaceMemberOrder::Swap(AllianceRaceMemberOrder* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(id_, other->id_);
    std::swap(ts_, other->ts_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(fig_, other->fig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceRaceMemberOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceRaceMemberOrder_descriptor_;
  metadata.reflection = AllianceRaceMemberOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestAllianceRaceOrder::RequestAllianceRaceOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceOrder)
}

void RequestAllianceRaceOrder::InitAsDefaultInstance() {
}

RequestAllianceRaceOrder::RequestAllianceRaceOrder(const RequestAllianceRaceOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceOrder)
}

void RequestAllianceRaceOrder::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceOrder::~RequestAllianceRaceOrder() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceOrder)
  SharedDtor();
}

void RequestAllianceRaceOrder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceOrder_descriptor_;
}

const RequestAllianceRaceOrder& RequestAllianceRaceOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceOrder* RequestAllianceRaceOrder::default_instance_ = NULL;

RequestAllianceRaceOrder* RequestAllianceRaceOrder::New() const {
  return new RequestAllianceRaceOrder;
}

void RequestAllianceRaceOrder::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceOrder)
  return false;
#undef DO_
}

void RequestAllianceRaceOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceOrder)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceOrder)
}

::google::protobuf::uint8* RequestAllianceRaceOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceOrder)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceOrder)
  return target;
}

int RequestAllianceRaceOrder::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceOrder::MergeFrom(const RequestAllianceRaceOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceOrder::CopyFrom(const RequestAllianceRaceOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceOrder::IsInitialized() const {

  return true;
}

void RequestAllianceRaceOrder::Swap(RequestAllianceRaceOrder* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceOrder_descriptor_;
  metadata.reflection = RequestAllianceRaceOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceOrderBC::kAidFieldNumber;
const int RequestAllianceRaceOrderBC::kUidFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceOrderBC::RequestAllianceRaceOrderBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceOrderBC)
}

void RequestAllianceRaceOrderBC::InitAsDefaultInstance() {
}

RequestAllianceRaceOrderBC::RequestAllianceRaceOrderBC(const RequestAllianceRaceOrderBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceOrderBC)
}

void RequestAllianceRaceOrderBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceOrderBC::~RequestAllianceRaceOrderBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceOrderBC)
  SharedDtor();
}

void RequestAllianceRaceOrderBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceOrderBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceOrderBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceOrderBC_descriptor_;
}

const RequestAllianceRaceOrderBC& RequestAllianceRaceOrderBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceOrderBC* RequestAllianceRaceOrderBC::default_instance_ = NULL;

RequestAllianceRaceOrderBC* RequestAllianceRaceOrderBC::New() const {
  return new RequestAllianceRaceOrderBC;
}

void RequestAllianceRaceOrderBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceOrderBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceOrderBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceOrderBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceOrderBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceOrderBC)
  return false;
#undef DO_
}

void RequestAllianceRaceOrderBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceOrderBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceOrderBC)
}

::google::protobuf::uint8* RequestAllianceRaceOrderBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceOrderBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceOrderBC)
  return target;
}

int RequestAllianceRaceOrderBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceOrderBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceOrderBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceOrderBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceOrderBC::MergeFrom(const RequestAllianceRaceOrderBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceOrderBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceOrderBC::CopyFrom(const RequestAllianceRaceOrderBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceOrderBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAllianceRaceOrderBC::Swap(RequestAllianceRaceOrderBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceOrderBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceOrderBC_descriptor_;
  metadata.reflection = RequestAllianceRaceOrderBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceRaceOrder::kPointFieldNumber;
const int ReplyAllianceRaceOrder::kOrderRecvFieldNumber;
const int ReplyAllianceRaceOrder::kMaxOrderRecvFieldNumber;
const int ReplyAllianceRaceOrder::kFlagFieldNumber;
const int ReplyAllianceRaceOrder::kOrderFieldNumber;
const int ReplyAllianceRaceOrder::kMemberOrderFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceRaceOrder::ReplyAllianceRaceOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceRaceOrder)
}

void ReplyAllianceRaceOrder::InitAsDefaultInstance() {
}

ReplyAllianceRaceOrder::ReplyAllianceRaceOrder(const ReplyAllianceRaceOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceRaceOrder)
}

void ReplyAllianceRaceOrder::SharedCtor() {
  _cached_size_ = 0;
  point_ = 0u;
  orderrecv_ = 0u;
  maxorderrecv_ = 0u;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceRaceOrder::~ReplyAllianceRaceOrder() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceRaceOrder)
  SharedDtor();
}

void ReplyAllianceRaceOrder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyAllianceRaceOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceRaceOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceRaceOrder_descriptor_;
}

const ReplyAllianceRaceOrder& ReplyAllianceRaceOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceRaceOrder* ReplyAllianceRaceOrder::default_instance_ = NULL;

ReplyAllianceRaceOrder* ReplyAllianceRaceOrder::New() const {
  return new ReplyAllianceRaceOrder;
}

void ReplyAllianceRaceOrder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyAllianceRaceOrder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(point_, flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  order_.Clear();
  memberorder_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceRaceOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceRaceOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_orderRecv;
        break;
      }

      // required uint32 orderRecv = 2;
      case 2: {
        if (tag == 16) {
         parse_orderRecv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orderrecv_)));
          set_has_orderrecv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxOrderRecv;
        break;
      }

      // required uint32 maxOrderRecv = 3;
      case 3: {
        if (tag == 24) {
         parse_maxOrderRecv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxorderrecv_)));
          set_has_maxorderrecv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // required uint32 flag = 4;
      case 4: {
        if (tag == 32) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_order;
        break;
      }

      // repeated .ProtoAlliance.AllianceRaceOrder order = 5;
      case 5: {
        if (tag == 42) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_order;
        if (input->ExpectTag(50)) goto parse_memberOrder;
        break;
      }

      // repeated .ProtoAlliance.AllianceRaceMemberOrder memberOrder = 6;
      case 6: {
        if (tag == 50) {
         parse_memberOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberorder()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_memberOrder;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceRaceOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceRaceOrder)
  return false;
#undef DO_
}

void ReplyAllianceRaceOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceRaceOrder)
  // required uint32 point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->point(), output);
  }

  // required uint32 orderRecv = 2;
  if (has_orderrecv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->orderrecv(), output);
  }

  // required uint32 maxOrderRecv = 3;
  if (has_maxorderrecv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxorderrecv(), output);
  }

  // required uint32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flag(), output);
  }

  // repeated .ProtoAlliance.AllianceRaceOrder order = 5;
  for (int i = 0; i < this->order_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->order(i), output);
  }

  // repeated .ProtoAlliance.AllianceRaceMemberOrder memberOrder = 6;
  for (int i = 0; i < this->memberorder_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->memberorder(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceRaceOrder)
}

::google::protobuf::uint8* ReplyAllianceRaceOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceRaceOrder)
  // required uint32 point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->point(), target);
  }

  // required uint32 orderRecv = 2;
  if (has_orderrecv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->orderrecv(), target);
  }

  // required uint32 maxOrderRecv = 3;
  if (has_maxorderrecv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxorderrecv(), target);
  }

  // required uint32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flag(), target);
  }

  // repeated .ProtoAlliance.AllianceRaceOrder order = 5;
  for (int i = 0; i < this->order_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->order(i), target);
  }

  // repeated .ProtoAlliance.AllianceRaceMemberOrder memberOrder = 6;
  for (int i = 0; i < this->memberorder_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->memberorder(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceRaceOrder)
  return target;
}

int ReplyAllianceRaceOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

    // required uint32 orderRecv = 2;
    if (has_orderrecv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orderrecv());
    }

    // required uint32 maxOrderRecv = 3;
    if (has_maxorderrecv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxorderrecv());
    }

    // required uint32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  // repeated .ProtoAlliance.AllianceRaceOrder order = 5;
  total_size += 1 * this->order_size();
  for (int i = 0; i < this->order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->order(i));
  }

  // repeated .ProtoAlliance.AllianceRaceMemberOrder memberOrder = 6;
  total_size += 1 * this->memberorder_size();
  for (int i = 0; i < this->memberorder_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberorder(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceRaceOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceRaceOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceRaceOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceRaceOrder::MergeFrom(const ReplyAllianceRaceOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  order_.MergeFrom(from.order_);
  memberorder_.MergeFrom(from.memberorder_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_orderrecv()) {
      set_orderrecv(from.orderrecv());
    }
    if (from.has_maxorderrecv()) {
      set_maxorderrecv(from.maxorderrecv());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceRaceOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceRaceOrder::CopyFrom(const ReplyAllianceRaceOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceRaceOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->order())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->memberorder())) return false;
  return true;
}

void ReplyAllianceRaceOrder::Swap(ReplyAllianceRaceOrder* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(orderrecv_, other->orderrecv_);
    std::swap(maxorderrecv_, other->maxorderrecv_);
    std::swap(flag_, other->flag_);
    order_.Swap(&other->order_);
    memberorder_.Swap(&other->memberorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceRaceOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceRaceOrder_descriptor_;
  metadata.reflection = ReplyAllianceRaceOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceOperateOrder::kSlotFieldNumber;
const int RequestAllianceRaceOperateOrder::kOperateFieldNumber;
const int RequestAllianceRaceOperateOrder::kCdTsFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceOperateOrder::RequestAllianceRaceOperateOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceOperateOrder)
}

void RequestAllianceRaceOperateOrder::InitAsDefaultInstance() {
}

RequestAllianceRaceOperateOrder::RequestAllianceRaceOperateOrder(const RequestAllianceRaceOperateOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceOperateOrder)
}

void RequestAllianceRaceOperateOrder::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  operate_ = 0u;
  cdts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceOperateOrder::~RequestAllianceRaceOperateOrder() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceOperateOrder)
  SharedDtor();
}

void RequestAllianceRaceOperateOrder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceOperateOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceOperateOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceOperateOrder_descriptor_;
}

const RequestAllianceRaceOperateOrder& RequestAllianceRaceOperateOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceOperateOrder* RequestAllianceRaceOperateOrder::default_instance_ = NULL;

RequestAllianceRaceOperateOrder* RequestAllianceRaceOperateOrder::New() const {
  return new RequestAllianceRaceOperateOrder;
}

void RequestAllianceRaceOperateOrder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceOperateOrder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(slot_, cdts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceOperateOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceOperateOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // required uint32 operate = 2;
      case 2: {
        if (tag == 16) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cdTs;
        break;
      }

      // required uint32 cdTs = 3;
      case 3: {
        if (tag == 24) {
         parse_cdTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdts_)));
          set_has_cdts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceOperateOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceOperateOrder)
  return false;
#undef DO_
}

void RequestAllianceRaceOperateOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceOperateOrder)
  // required uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // required uint32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operate(), output);
  }

  // required uint32 cdTs = 3;
  if (has_cdts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cdts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceOperateOrder)
}

::google::protobuf::uint8* RequestAllianceRaceOperateOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceOperateOrder)
  // required uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // required uint32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operate(), target);
  }

  // required uint32 cdTs = 3;
  if (has_cdts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cdts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceOperateOrder)
  return target;
}

int RequestAllianceRaceOperateOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // required uint32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate());
    }

    // required uint32 cdTs = 3;
    if (has_cdts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceOperateOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceOperateOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceOperateOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceOperateOrder::MergeFrom(const RequestAllianceRaceOperateOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_cdts()) {
      set_cdts(from.cdts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceOperateOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceOperateOrder::CopyFrom(const RequestAllianceRaceOperateOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceOperateOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestAllianceRaceOperateOrder::Swap(RequestAllianceRaceOperateOrder* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(operate_, other->operate_);
    std::swap(cdts_, other->cdts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceOperateOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceOperateOrder_descriptor_;
  metadata.reflection = RequestAllianceRaceOperateOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceOperateOrderBC::kAidFieldNumber;
const int RequestAllianceRaceOperateOrderBC::kUidFieldNumber;
const int RequestAllianceRaceOperateOrderBC::kSlotFieldNumber;
const int RequestAllianceRaceOperateOrderBC::kOperateFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceOperateOrderBC::RequestAllianceRaceOperateOrderBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceOperateOrderBC)
}

void RequestAllianceRaceOperateOrderBC::InitAsDefaultInstance() {
}

RequestAllianceRaceOperateOrderBC::RequestAllianceRaceOperateOrderBC(const RequestAllianceRaceOperateOrderBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceOperateOrderBC)
}

void RequestAllianceRaceOperateOrderBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  slot_ = 0u;
  operate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceOperateOrderBC::~RequestAllianceRaceOperateOrderBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceOperateOrderBC)
  SharedDtor();
}

void RequestAllianceRaceOperateOrderBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceOperateOrderBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceOperateOrderBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceOperateOrderBC_descriptor_;
}

const RequestAllianceRaceOperateOrderBC& RequestAllianceRaceOperateOrderBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceOperateOrderBC* RequestAllianceRaceOperateOrderBC::default_instance_ = NULL;

RequestAllianceRaceOperateOrderBC* RequestAllianceRaceOperateOrderBC::New() const {
  return new RequestAllianceRaceOperateOrderBC;
}

void RequestAllianceRaceOperateOrderBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceOperateOrderBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, operate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceOperateOrderBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceOperateOrderBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_slot;
        break;
      }

      // required uint32 slot = 3;
      case 3: {
        if (tag == 24) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_operate;
        break;
      }

      // required uint32 operate = 4;
      case 4: {
        if (tag == 32) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceOperateOrderBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceOperateOrderBC)
  return false;
#undef DO_
}

void RequestAllianceRaceOperateOrderBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceOperateOrderBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 slot = 3;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot(), output);
  }

  // required uint32 operate = 4;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->operate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceOperateOrderBC)
}

::google::protobuf::uint8* RequestAllianceRaceOperateOrderBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceOperateOrderBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 slot = 3;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot(), target);
  }

  // required uint32 operate = 4;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->operate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceOperateOrderBC)
  return target;
}

int RequestAllianceRaceOperateOrderBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 slot = 3;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // required uint32 operate = 4;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceOperateOrderBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceOperateOrderBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceOperateOrderBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceOperateOrderBC::MergeFrom(const RequestAllianceRaceOperateOrderBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceOperateOrderBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceOperateOrderBC::CopyFrom(const RequestAllianceRaceOperateOrderBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceOperateOrderBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestAllianceRaceOperateOrderBC::Swap(RequestAllianceRaceOperateOrderBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(slot_, other->slot_);
    std::swap(operate_, other->operate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceOperateOrderBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceOperateOrderBC_descriptor_;
  metadata.reflection = RequestAllianceRaceOperateOrderBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceRaceOperateOrder::kRetFieldNumber;
const int ReplyAllianceRaceOperateOrder::kUidFieldNumber;
const int ReplyAllianceRaceOperateOrder::kOperateFieldNumber;
const int ReplyAllianceRaceOperateOrder::kCdTsFieldNumber;
const int ReplyAllianceRaceOperateOrder::kCommonsFieldNumber;
const int ReplyAllianceRaceOperateOrder::kOrderFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceRaceOperateOrder::ReplyAllianceRaceOperateOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceRaceOperateOrder)
}

void ReplyAllianceRaceOperateOrder::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  order_ = const_cast< ::ProtoAlliance::ReplyAllianceRaceOrder*>(&::ProtoAlliance::ReplyAllianceRaceOrder::default_instance());
}

ReplyAllianceRaceOperateOrder::ReplyAllianceRaceOperateOrder(const ReplyAllianceRaceOperateOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceRaceOperateOrder)
}

void ReplyAllianceRaceOperateOrder::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  uid_ = 0u;
  operate_ = 0u;
  cdts_ = 0u;
  commons_ = NULL;
  order_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceRaceOperateOrder::~ReplyAllianceRaceOperateOrder() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceRaceOperateOrder)
  SharedDtor();
}

void ReplyAllianceRaceOperateOrder::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete order_;
  }
}

void ReplyAllianceRaceOperateOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceRaceOperateOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceRaceOperateOrder_descriptor_;
}

const ReplyAllianceRaceOperateOrder& ReplyAllianceRaceOperateOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceRaceOperateOrder* ReplyAllianceRaceOperateOrder::default_instance_ = NULL;

ReplyAllianceRaceOperateOrder* ReplyAllianceRaceOperateOrder::New() const {
  return new ReplyAllianceRaceOperateOrder;
}

void ReplyAllianceRaceOperateOrder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyAllianceRaceOperateOrder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ret_, cdts_);
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_order()) {
      if (order_ != NULL) order_->::ProtoAlliance::ReplyAllianceRaceOrder::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceRaceOperateOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceRaceOperateOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operate;
        break;
      }

      // required uint32 operate = 3;
      case 3: {
        if (tag == 24) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cdTs;
        break;
      }

      // required uint32 cdTs = 4;
      case 4: {
        if (tag == 32) {
         parse_cdTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdts_)));
          set_has_cdts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 5;
      case 5: {
        if (tag == 42) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_order;
        break;
      }

      // optional .ProtoAlliance.ReplyAllianceRaceOrder order = 6;
      case 6: {
        if (tag == 50) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceRaceOperateOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceRaceOperateOrder)
  return false;
#undef DO_
}

void ReplyAllianceRaceOperateOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceRaceOperateOrder)
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 operate = 3;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operate(), output);
  }

  // required uint32 cdTs = 4;
  if (has_cdts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cdts(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 5;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->commons(), output);
  }

  // optional .ProtoAlliance.ReplyAllianceRaceOrder order = 6;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceRaceOperateOrder)
}

::google::protobuf::uint8* ReplyAllianceRaceOperateOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceRaceOperateOrder)
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 operate = 3;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operate(), target);
  }

  // required uint32 cdTs = 4;
  if (has_cdts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cdts(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 5;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->commons(), target);
  }

  // optional .ProtoAlliance.ReplyAllianceRaceOrder order = 6;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceRaceOperateOrder)
  return target;
}

int ReplyAllianceRaceOperateOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 operate = 3;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate());
    }

    // required uint32 cdTs = 4;
    if (has_cdts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdts());
    }

    // optional .DataCommon.CommonItemsCPP commons = 5;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // optional .ProtoAlliance.ReplyAllianceRaceOrder order = 6;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceRaceOperateOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceRaceOperateOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceRaceOperateOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceRaceOperateOrder::MergeFrom(const ReplyAllianceRaceOperateOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_cdts()) {
      set_cdts(from.cdts());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_order()) {
      mutable_order()->::ProtoAlliance::ReplyAllianceRaceOrder::MergeFrom(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceRaceOperateOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceRaceOperateOrder::CopyFrom(const ReplyAllianceRaceOperateOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceRaceOperateOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_order()) {
    if (!this->order().IsInitialized()) return false;
  }
  return true;
}

void ReplyAllianceRaceOperateOrder::Swap(ReplyAllianceRaceOperateOrder* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(uid_, other->uid_);
    std::swap(operate_, other->operate_);
    std::swap(cdts_, other->cdts_);
    std::swap(commons_, other->commons_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceRaceOperateOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceRaceOperateOrder_descriptor_;
  metadata.reflection = ReplyAllianceRaceOperateOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceMemberDelOrder::kTypeFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceMemberDelOrder::RequestAllianceRaceMemberDelOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceMemberDelOrder)
}

void RequestAllianceRaceMemberDelOrder::InitAsDefaultInstance() {
}

RequestAllianceRaceMemberDelOrder::RequestAllianceRaceMemberDelOrder(const RequestAllianceRaceMemberDelOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceMemberDelOrder)
}

void RequestAllianceRaceMemberDelOrder::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceMemberDelOrder::~RequestAllianceRaceMemberDelOrder() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceMemberDelOrder)
  SharedDtor();
}

void RequestAllianceRaceMemberDelOrder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceMemberDelOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceMemberDelOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceMemberDelOrder_descriptor_;
}

const RequestAllianceRaceMemberDelOrder& RequestAllianceRaceMemberDelOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceMemberDelOrder* RequestAllianceRaceMemberDelOrder::default_instance_ = NULL;

RequestAllianceRaceMemberDelOrder* RequestAllianceRaceMemberDelOrder::New() const {
  return new RequestAllianceRaceMemberDelOrder;
}

void RequestAllianceRaceMemberDelOrder::Clear() {
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceMemberDelOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceMemberDelOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceMemberDelOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceMemberDelOrder)
  return false;
#undef DO_
}

void RequestAllianceRaceMemberDelOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceMemberDelOrder)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceMemberDelOrder)
}

::google::protobuf::uint8* RequestAllianceRaceMemberDelOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceMemberDelOrder)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceMemberDelOrder)
  return target;
}

int RequestAllianceRaceMemberDelOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceMemberDelOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceMemberDelOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceMemberDelOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceMemberDelOrder::MergeFrom(const RequestAllianceRaceMemberDelOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceMemberDelOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceMemberDelOrder::CopyFrom(const RequestAllianceRaceMemberDelOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceMemberDelOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestAllianceRaceMemberDelOrder::Swap(RequestAllianceRaceMemberDelOrder* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceMemberDelOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceMemberDelOrder_descriptor_;
  metadata.reflection = RequestAllianceRaceMemberDelOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceMemberDelOrderBC::kAidFieldNumber;
const int RequestAllianceRaceMemberDelOrderBC::kUidFieldNumber;
const int RequestAllianceRaceMemberDelOrderBC::kTypeFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceMemberDelOrderBC::RequestAllianceRaceMemberDelOrderBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceMemberDelOrderBC)
}

void RequestAllianceRaceMemberDelOrderBC::InitAsDefaultInstance() {
}

RequestAllianceRaceMemberDelOrderBC::RequestAllianceRaceMemberDelOrderBC(const RequestAllianceRaceMemberDelOrderBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceMemberDelOrderBC)
}

void RequestAllianceRaceMemberDelOrderBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceMemberDelOrderBC::~RequestAllianceRaceMemberDelOrderBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceMemberDelOrderBC)
  SharedDtor();
}

void RequestAllianceRaceMemberDelOrderBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceMemberDelOrderBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceMemberDelOrderBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceMemberDelOrderBC_descriptor_;
}

const RequestAllianceRaceMemberDelOrderBC& RequestAllianceRaceMemberDelOrderBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceMemberDelOrderBC* RequestAllianceRaceMemberDelOrderBC::default_instance_ = NULL;

RequestAllianceRaceMemberDelOrderBC* RequestAllianceRaceMemberDelOrderBC::New() const {
  return new RequestAllianceRaceMemberDelOrderBC;
}

void RequestAllianceRaceMemberDelOrderBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceMemberDelOrderBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceMemberDelOrderBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceMemberDelOrderBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceMemberDelOrderBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceMemberDelOrderBC)
  return false;
#undef DO_
}

void RequestAllianceRaceMemberDelOrderBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceMemberDelOrderBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceMemberDelOrderBC)
}

::google::protobuf::uint8* RequestAllianceRaceMemberDelOrderBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceMemberDelOrderBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceMemberDelOrderBC)
  return target;
}

int RequestAllianceRaceMemberDelOrderBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceMemberDelOrderBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceMemberDelOrderBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceMemberDelOrderBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceMemberDelOrderBC::MergeFrom(const RequestAllianceRaceMemberDelOrderBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceMemberDelOrderBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceMemberDelOrderBC::CopyFrom(const RequestAllianceRaceMemberDelOrderBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceMemberDelOrderBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestAllianceRaceMemberDelOrderBC::Swap(RequestAllianceRaceMemberDelOrderBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceMemberDelOrderBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceMemberDelOrderBC_descriptor_;
  metadata.reflection = RequestAllianceRaceMemberDelOrderBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceMemberUpdateOrderBC::kAidFieldNumber;
const int RequestAllianceRaceMemberUpdateOrderBC::kUidFieldNumber;
const int RequestAllianceRaceMemberUpdateOrderBC::kOrderTypeFieldNumber;
const int RequestAllianceRaceMemberUpdateOrderBC::kCountFieldNumber;
const int RequestAllianceRaceMemberUpdateOrderBC::kTargetFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceMemberUpdateOrderBC::RequestAllianceRaceMemberUpdateOrderBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceMemberUpdateOrderBC)
}

void RequestAllianceRaceMemberUpdateOrderBC::InitAsDefaultInstance() {
}

RequestAllianceRaceMemberUpdateOrderBC::RequestAllianceRaceMemberUpdateOrderBC(const RequestAllianceRaceMemberUpdateOrderBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceMemberUpdateOrderBC)
}

void RequestAllianceRaceMemberUpdateOrderBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ordertype_ = 0u;
  count_ = 0u;
  target_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceMemberUpdateOrderBC::~RequestAllianceRaceMemberUpdateOrderBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceMemberUpdateOrderBC)
  SharedDtor();
}

void RequestAllianceRaceMemberUpdateOrderBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceMemberUpdateOrderBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceMemberUpdateOrderBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceMemberUpdateOrderBC_descriptor_;
}

const RequestAllianceRaceMemberUpdateOrderBC& RequestAllianceRaceMemberUpdateOrderBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceMemberUpdateOrderBC* RequestAllianceRaceMemberUpdateOrderBC::default_instance_ = NULL;

RequestAllianceRaceMemberUpdateOrderBC* RequestAllianceRaceMemberUpdateOrderBC::New() const {
  return new RequestAllianceRaceMemberUpdateOrderBC;
}

void RequestAllianceRaceMemberUpdateOrderBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceMemberUpdateOrderBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(aid_, target_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceMemberUpdateOrderBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceMemberUpdateOrderBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_orderType;
        break;
      }

      // required uint32 orderType = 3;
      case 3: {
        if (tag == 24) {
         parse_orderType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ordertype_)));
          set_has_ordertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required uint32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_target;
        break;
      }

      // required uint32 target = 5;
      case 5: {
        if (tag == 40) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceMemberUpdateOrderBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceMemberUpdateOrderBC)
  return false;
#undef DO_
}

void RequestAllianceRaceMemberUpdateOrderBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceMemberUpdateOrderBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 orderType = 3;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ordertype(), output);
  }

  // required uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // required uint32 target = 5;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceMemberUpdateOrderBC)
}

::google::protobuf::uint8* RequestAllianceRaceMemberUpdateOrderBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceMemberUpdateOrderBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 orderType = 3;
  if (has_ordertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ordertype(), target);
  }

  // required uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // required uint32 target = 5;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceMemberUpdateOrderBC)
  return target;
}

int RequestAllianceRaceMemberUpdateOrderBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 orderType = 3;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ordertype());
    }

    // required uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 target = 5;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceMemberUpdateOrderBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceMemberUpdateOrderBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceMemberUpdateOrderBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceMemberUpdateOrderBC::MergeFrom(const RequestAllianceRaceMemberUpdateOrderBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceMemberUpdateOrderBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceMemberUpdateOrderBC::CopyFrom(const RequestAllianceRaceMemberUpdateOrderBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceMemberUpdateOrderBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RequestAllianceRaceMemberUpdateOrderBC::Swap(RequestAllianceRaceMemberUpdateOrderBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(ordertype_, other->ordertype_);
    std::swap(count_, other->count_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceMemberUpdateOrderBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceMemberUpdateOrderBC_descriptor_;
  metadata.reflection = RequestAllianceRaceMemberUpdateOrderBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestAllianceRaceBuyOrder::RequestAllianceRaceBuyOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceBuyOrder)
}

void RequestAllianceRaceBuyOrder::InitAsDefaultInstance() {
}

RequestAllianceRaceBuyOrder::RequestAllianceRaceBuyOrder(const RequestAllianceRaceBuyOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceBuyOrder)
}

void RequestAllianceRaceBuyOrder::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceBuyOrder::~RequestAllianceRaceBuyOrder() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceBuyOrder)
  SharedDtor();
}

void RequestAllianceRaceBuyOrder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceBuyOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceBuyOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceBuyOrder_descriptor_;
}

const RequestAllianceRaceBuyOrder& RequestAllianceRaceBuyOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceBuyOrder* RequestAllianceRaceBuyOrder::default_instance_ = NULL;

RequestAllianceRaceBuyOrder* RequestAllianceRaceBuyOrder::New() const {
  return new RequestAllianceRaceBuyOrder;
}

void RequestAllianceRaceBuyOrder::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceBuyOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceBuyOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceBuyOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceBuyOrder)
  return false;
#undef DO_
}

void RequestAllianceRaceBuyOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceBuyOrder)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceBuyOrder)
}

::google::protobuf::uint8* RequestAllianceRaceBuyOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceBuyOrder)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceBuyOrder)
  return target;
}

int RequestAllianceRaceBuyOrder::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceBuyOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceBuyOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceBuyOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceBuyOrder::MergeFrom(const RequestAllianceRaceBuyOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceBuyOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceBuyOrder::CopyFrom(const RequestAllianceRaceBuyOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceBuyOrder::IsInitialized() const {

  return true;
}

void RequestAllianceRaceBuyOrder::Swap(RequestAllianceRaceBuyOrder* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceBuyOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceBuyOrder_descriptor_;
  metadata.reflection = RequestAllianceRaceBuyOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceBuyOrderBC::kAidFieldNumber;
const int RequestAllianceRaceBuyOrderBC::kUidFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceBuyOrderBC::RequestAllianceRaceBuyOrderBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceBuyOrderBC)
}

void RequestAllianceRaceBuyOrderBC::InitAsDefaultInstance() {
}

RequestAllianceRaceBuyOrderBC::RequestAllianceRaceBuyOrderBC(const RequestAllianceRaceBuyOrderBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceBuyOrderBC)
}

void RequestAllianceRaceBuyOrderBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceBuyOrderBC::~RequestAllianceRaceBuyOrderBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceBuyOrderBC)
  SharedDtor();
}

void RequestAllianceRaceBuyOrderBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceBuyOrderBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceBuyOrderBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceBuyOrderBC_descriptor_;
}

const RequestAllianceRaceBuyOrderBC& RequestAllianceRaceBuyOrderBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceBuyOrderBC* RequestAllianceRaceBuyOrderBC::default_instance_ = NULL;

RequestAllianceRaceBuyOrderBC* RequestAllianceRaceBuyOrderBC::New() const {
  return new RequestAllianceRaceBuyOrderBC;
}

void RequestAllianceRaceBuyOrderBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceBuyOrderBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceBuyOrderBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceBuyOrderBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceBuyOrderBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceBuyOrderBC)
  return false;
#undef DO_
}

void RequestAllianceRaceBuyOrderBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceBuyOrderBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceBuyOrderBC)
}

::google::protobuf::uint8* RequestAllianceRaceBuyOrderBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceBuyOrderBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceBuyOrderBC)
  return target;
}

int RequestAllianceRaceBuyOrderBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceBuyOrderBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceBuyOrderBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceBuyOrderBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceBuyOrderBC::MergeFrom(const RequestAllianceRaceBuyOrderBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceBuyOrderBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceBuyOrderBC::CopyFrom(const RequestAllianceRaceBuyOrderBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceBuyOrderBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAllianceRaceBuyOrderBC::Swap(RequestAllianceRaceBuyOrderBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceBuyOrderBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceBuyOrderBC_descriptor_;
  metadata.reflection = RequestAllianceRaceBuyOrderBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceRaceBuyOrder::kRetFieldNumber;
const int ReplyAllianceRaceBuyOrder::kUidFieldNumber;
const int ReplyAllianceRaceBuyOrder::kCommonsFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceRaceBuyOrder::ReplyAllianceRaceBuyOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceRaceBuyOrder)
}

void ReplyAllianceRaceBuyOrder::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ReplyAllianceRaceBuyOrder::ReplyAllianceRaceBuyOrder(const ReplyAllianceRaceBuyOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceRaceBuyOrder)
}

void ReplyAllianceRaceBuyOrder::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  uid_ = 0u;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceRaceBuyOrder::~ReplyAllianceRaceBuyOrder() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceRaceBuyOrder)
  SharedDtor();
}

void ReplyAllianceRaceBuyOrder::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void ReplyAllianceRaceBuyOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceRaceBuyOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceRaceBuyOrder_descriptor_;
}

const ReplyAllianceRaceBuyOrder& ReplyAllianceRaceBuyOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceRaceBuyOrder* ReplyAllianceRaceBuyOrder::default_instance_ = NULL;

ReplyAllianceRaceBuyOrder* ReplyAllianceRaceBuyOrder::New() const {
  return new ReplyAllianceRaceBuyOrder;
}

void ReplyAllianceRaceBuyOrder::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyAllianceRaceBuyOrder*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(ret_, uid_);
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceRaceBuyOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceRaceBuyOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceRaceBuyOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceRaceBuyOrder)
  return false;
#undef DO_
}

void ReplyAllianceRaceBuyOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceRaceBuyOrder)
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceRaceBuyOrder)
}

::google::protobuf::uint8* ReplyAllianceRaceBuyOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceRaceBuyOrder)
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceRaceBuyOrder)
  return target;
}

int ReplyAllianceRaceBuyOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceRaceBuyOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceRaceBuyOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceRaceBuyOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceRaceBuyOrder::MergeFrom(const ReplyAllianceRaceBuyOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceRaceBuyOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceRaceBuyOrder::CopyFrom(const ReplyAllianceRaceBuyOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceRaceBuyOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ReplyAllianceRaceBuyOrder::Swap(ReplyAllianceRaceBuyOrder* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(uid_, other->uid_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceRaceBuyOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceRaceBuyOrder_descriptor_;
  metadata.reflection = ReplyAllianceRaceBuyOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceWatchAd::kTypeFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceWatchAd::RequestAllianceRaceWatchAd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceWatchAd)
}

void RequestAllianceRaceWatchAd::InitAsDefaultInstance() {
}

RequestAllianceRaceWatchAd::RequestAllianceRaceWatchAd(const RequestAllianceRaceWatchAd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceWatchAd)
}

void RequestAllianceRaceWatchAd::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceWatchAd::~RequestAllianceRaceWatchAd() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceWatchAd)
  SharedDtor();
}

void RequestAllianceRaceWatchAd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceWatchAd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceWatchAd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceWatchAd_descriptor_;
}

const RequestAllianceRaceWatchAd& RequestAllianceRaceWatchAd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceWatchAd* RequestAllianceRaceWatchAd::default_instance_ = NULL;

RequestAllianceRaceWatchAd* RequestAllianceRaceWatchAd::New() const {
  return new RequestAllianceRaceWatchAd;
}

void RequestAllianceRaceWatchAd::Clear() {
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceWatchAd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceWatchAd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceWatchAd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceWatchAd)
  return false;
#undef DO_
}

void RequestAllianceRaceWatchAd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceWatchAd)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceWatchAd)
}

::google::protobuf::uint8* RequestAllianceRaceWatchAd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceWatchAd)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceWatchAd)
  return target;
}

int RequestAllianceRaceWatchAd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceWatchAd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceWatchAd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceWatchAd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceWatchAd::MergeFrom(const RequestAllianceRaceWatchAd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceWatchAd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceWatchAd::CopyFrom(const RequestAllianceRaceWatchAd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceWatchAd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestAllianceRaceWatchAd::Swap(RequestAllianceRaceWatchAd* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceWatchAd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceWatchAd_descriptor_;
  metadata.reflection = RequestAllianceRaceWatchAd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceRaceWatchAd::kRetFieldNumber;
const int ReplyAllianceRaceWatchAd::kCommonsFieldNumber;
const int ReplyAllianceRaceWatchAd::kPointFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceRaceWatchAd::ReplyAllianceRaceWatchAd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceRaceWatchAd)
}

void ReplyAllianceRaceWatchAd::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ReplyAllianceRaceWatchAd::ReplyAllianceRaceWatchAd(const ReplyAllianceRaceWatchAd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceRaceWatchAd)
}

void ReplyAllianceRaceWatchAd::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  commons_ = NULL;
  point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceRaceWatchAd::~ReplyAllianceRaceWatchAd() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceRaceWatchAd)
  SharedDtor();
}

void ReplyAllianceRaceWatchAd::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void ReplyAllianceRaceWatchAd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceRaceWatchAd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceRaceWatchAd_descriptor_;
}

const ReplyAllianceRaceWatchAd& ReplyAllianceRaceWatchAd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceRaceWatchAd* ReplyAllianceRaceWatchAd::default_instance_ = NULL;

ReplyAllianceRaceWatchAd* ReplyAllianceRaceWatchAd::New() const {
  return new ReplyAllianceRaceWatchAd;
}

void ReplyAllianceRaceWatchAd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyAllianceRaceWatchAd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(ret_, point_);
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceRaceWatchAd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceRaceWatchAd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }

      // optional uint32 point = 3;
      case 3: {
        if (tag == 24) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceRaceWatchAd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceRaceWatchAd)
  return false;
#undef DO_
}

void ReplyAllianceRaceWatchAd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceRaceWatchAd)
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  // optional uint32 point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceRaceWatchAd)
}

::google::protobuf::uint8* ReplyAllianceRaceWatchAd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceRaceWatchAd)
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  // optional uint32 point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceRaceWatchAd)
  return target;
}

int ReplyAllianceRaceWatchAd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // optional uint32 point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceRaceWatchAd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceRaceWatchAd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceRaceWatchAd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceRaceWatchAd::MergeFrom(const ReplyAllianceRaceWatchAd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceRaceWatchAd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceRaceWatchAd::CopyFrom(const ReplyAllianceRaceWatchAd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceRaceWatchAd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ReplyAllianceRaceWatchAd::Swap(ReplyAllianceRaceWatchAd* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(commons_, other->commons_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceRaceWatchAd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceRaceWatchAd_descriptor_;
  metadata.reflection = ReplyAllianceRaceWatchAd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceWatchAdBC::kAidFieldNumber;
const int RequestAllianceRaceWatchAdBC::kUidFieldNumber;
const int RequestAllianceRaceWatchAdBC::kPointFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceWatchAdBC::RequestAllianceRaceWatchAdBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceWatchAdBC)
}

void RequestAllianceRaceWatchAdBC::InitAsDefaultInstance() {
}

RequestAllianceRaceWatchAdBC::RequestAllianceRaceWatchAdBC(const RequestAllianceRaceWatchAdBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceWatchAdBC)
}

void RequestAllianceRaceWatchAdBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceWatchAdBC::~RequestAllianceRaceWatchAdBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceWatchAdBC)
  SharedDtor();
}

void RequestAllianceRaceWatchAdBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceWatchAdBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceWatchAdBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceWatchAdBC_descriptor_;
}

const RequestAllianceRaceWatchAdBC& RequestAllianceRaceWatchAdBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceWatchAdBC* RequestAllianceRaceWatchAdBC::default_instance_ = NULL;

RequestAllianceRaceWatchAdBC* RequestAllianceRaceWatchAdBC::New() const {
  return new RequestAllianceRaceWatchAdBC;
}

void RequestAllianceRaceWatchAdBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceWatchAdBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, point_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceWatchAdBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceWatchAdBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }

      // required uint32 point = 3;
      case 3: {
        if (tag == 24) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceWatchAdBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceWatchAdBC)
  return false;
#undef DO_
}

void RequestAllianceRaceWatchAdBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceWatchAdBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceWatchAdBC)
}

::google::protobuf::uint8* RequestAllianceRaceWatchAdBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceWatchAdBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceWatchAdBC)
  return target;
}

int RequestAllianceRaceWatchAdBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceWatchAdBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceWatchAdBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceWatchAdBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceWatchAdBC::MergeFrom(const RequestAllianceRaceWatchAdBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceWatchAdBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceWatchAdBC::CopyFrom(const RequestAllianceRaceWatchAdBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceWatchAdBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RequestAllianceRaceWatchAdBC::Swap(RequestAllianceRaceWatchAdBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceWatchAdBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceWatchAdBC_descriptor_;
  metadata.reflection = RequestAllianceRaceWatchAdBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestAllianceRaceReward::RequestAllianceRaceReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceReward)
}

void RequestAllianceRaceReward::InitAsDefaultInstance() {
}

RequestAllianceRaceReward::RequestAllianceRaceReward(const RequestAllianceRaceReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceReward)
}

void RequestAllianceRaceReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceReward::~RequestAllianceRaceReward() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceReward)
  SharedDtor();
}

void RequestAllianceRaceReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceReward_descriptor_;
}

const RequestAllianceRaceReward& RequestAllianceRaceReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceReward* RequestAllianceRaceReward::default_instance_ = NULL;

RequestAllianceRaceReward* RequestAllianceRaceReward::New() const {
  return new RequestAllianceRaceReward;
}

void RequestAllianceRaceReward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceReward)
  return false;
#undef DO_
}

void RequestAllianceRaceReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceReward)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceReward)
}

::google::protobuf::uint8* RequestAllianceRaceReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceReward)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceReward)
  return target;
}

int RequestAllianceRaceReward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceReward::MergeFrom(const RequestAllianceRaceReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceReward::CopyFrom(const RequestAllianceRaceReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceReward::IsInitialized() const {

  return true;
}

void RequestAllianceRaceReward::Swap(RequestAllianceRaceReward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceReward_descriptor_;
  metadata.reflection = RequestAllianceRaceReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceRewardBC::kAidFieldNumber;
const int RequestAllianceRaceRewardBC::kUidFieldNumber;
const int RequestAllianceRaceRewardBC::kIdFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceRewardBC::RequestAllianceRaceRewardBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceRewardBC)
}

void RequestAllianceRaceRewardBC::InitAsDefaultInstance() {
}

RequestAllianceRaceRewardBC::RequestAllianceRaceRewardBC(const RequestAllianceRaceRewardBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceRewardBC)
}

void RequestAllianceRaceRewardBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceRewardBC::~RequestAllianceRaceRewardBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceRewardBC)
  SharedDtor();
}

void RequestAllianceRaceRewardBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceRewardBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceRewardBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceRewardBC_descriptor_;
}

const RequestAllianceRaceRewardBC& RequestAllianceRaceRewardBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceRewardBC* RequestAllianceRaceRewardBC::default_instance_ = NULL;

RequestAllianceRaceRewardBC* RequestAllianceRaceRewardBC::New() const {
  return new RequestAllianceRaceRewardBC;
}

void RequestAllianceRaceRewardBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceRewardBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceRewardBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceRewardBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // repeated uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceRewardBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceRewardBC)
  return false;
#undef DO_
}

void RequestAllianceRaceRewardBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceRewardBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // repeated uint32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceRewardBC)
}

::google::protobuf::uint8* RequestAllianceRaceRewardBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceRewardBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // repeated uint32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceRewardBC)
  return target;
}

int RequestAllianceRaceRewardBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  // repeated uint32 id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceRewardBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceRewardBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceRewardBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceRewardBC::MergeFrom(const RequestAllianceRaceRewardBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceRewardBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceRewardBC::CopyFrom(const RequestAllianceRaceRewardBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceRewardBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAllianceRaceRewardBC::Swap(RequestAllianceRaceRewardBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceRewardBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceRewardBC_descriptor_;
  metadata.reflection = RequestAllianceRaceRewardBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceRaceReward::kRetFieldNumber;
const int ReplyAllianceRaceReward::kUidFieldNumber;
const int ReplyAllianceRaceReward::kRankIdFieldNumber;
const int ReplyAllianceRaceReward::kUserLevelFieldNumber;
const int ReplyAllianceRaceReward::kOlevelFieldNumber;
const int ReplyAllianceRaceReward::kOpointFieldNumber;
const int ReplyAllianceRaceReward::kGradeIdFieldNumber;
const int ReplyAllianceRaceReward::kStageIdFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceRaceReward::ReplyAllianceRaceReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceRaceReward)
}

void ReplyAllianceRaceReward::InitAsDefaultInstance() {
}

ReplyAllianceRaceReward::ReplyAllianceRaceReward(const ReplyAllianceRaceReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceRaceReward)
}

void ReplyAllianceRaceReward::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  uid_ = 0u;
  rankid_ = 0u;
  userlevel_ = 0u;
  olevel_ = 0u;
  opoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceRaceReward::~ReplyAllianceRaceReward() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceRaceReward)
  SharedDtor();
}

void ReplyAllianceRaceReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyAllianceRaceReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceRaceReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceRaceReward_descriptor_;
}

const ReplyAllianceRaceReward& ReplyAllianceRaceReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceRaceReward* ReplyAllianceRaceReward::default_instance_ = NULL;

ReplyAllianceRaceReward* ReplyAllianceRaceReward::New() const {
  return new ReplyAllianceRaceReward;
}

void ReplyAllianceRaceReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyAllianceRaceReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ret_, opoint_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  gradeid_.Clear();
  stageid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceRaceReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceRaceReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rankId;
        break;
      }

      // required uint32 rankId = 3;
      case 3: {
        if (tag == 24) {
         parse_rankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userLevel;
        break;
      }

      // required uint32 userLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_userLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userlevel_)));
          set_has_userlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_olevel;
        break;
      }

      // required uint32 olevel = 5;
      case 5: {
        if (tag == 40) {
         parse_olevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &olevel_)));
          set_has_olevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_opoint;
        break;
      }

      // required uint32 opoint = 6;
      case 6: {
        if (tag == 48) {
         parse_opoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opoint_)));
          set_has_opoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gradeId;
        break;
      }

      // repeated uint32 gradeId = 7;
      case 7: {
        if (tag == 56) {
         parse_gradeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_gradeid())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gradeid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gradeId;
        if (input->ExpectTag(64)) goto parse_stageId;
        break;
      }

      // repeated uint32 stageId = 8;
      case 8: {
        if (tag == 64) {
         parse_stageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_stageid())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stageid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_stageId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceRaceReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceRaceReward)
  return false;
#undef DO_
}

void ReplyAllianceRaceReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceRaceReward)
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 rankId = 3;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rankid(), output);
  }

  // required uint32 userLevel = 4;
  if (has_userlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->userlevel(), output);
  }

  // required uint32 olevel = 5;
  if (has_olevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->olevel(), output);
  }

  // required uint32 opoint = 6;
  if (has_opoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->opoint(), output);
  }

  // repeated uint32 gradeId = 7;
  for (int i = 0; i < this->gradeid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->gradeid(i), output);
  }

  // repeated uint32 stageId = 8;
  for (int i = 0; i < this->stageid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->stageid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceRaceReward)
}

::google::protobuf::uint8* ReplyAllianceRaceReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceRaceReward)
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 rankId = 3;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rankid(), target);
  }

  // required uint32 userLevel = 4;
  if (has_userlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->userlevel(), target);
  }

  // required uint32 olevel = 5;
  if (has_olevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->olevel(), target);
  }

  // required uint32 opoint = 6;
  if (has_opoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->opoint(), target);
  }

  // repeated uint32 gradeId = 7;
  for (int i = 0; i < this->gradeid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->gradeid(i), target);
  }

  // repeated uint32 stageId = 8;
  for (int i = 0; i < this->stageid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->stageid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceRaceReward)
  return target;
}

int ReplyAllianceRaceReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 rankId = 3;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // required uint32 userLevel = 4;
    if (has_userlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userlevel());
    }

    // required uint32 olevel = 5;
    if (has_olevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->olevel());
    }

    // required uint32 opoint = 6;
    if (has_opoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opoint());
    }

  }
  // repeated uint32 gradeId = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->gradeid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gradeid(i));
    }
    total_size += 1 * this->gradeid_size() + data_size;
  }

  // repeated uint32 stageId = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->stageid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stageid(i));
    }
    total_size += 1 * this->stageid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceRaceReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceRaceReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceRaceReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceRaceReward::MergeFrom(const ReplyAllianceRaceReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  gradeid_.MergeFrom(from.gradeid_);
  stageid_.MergeFrom(from.stageid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_userlevel()) {
      set_userlevel(from.userlevel());
    }
    if (from.has_olevel()) {
      set_olevel(from.olevel());
    }
    if (from.has_opoint()) {
      set_opoint(from.opoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceRaceReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceRaceReward::CopyFrom(const ReplyAllianceRaceReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceRaceReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ReplyAllianceRaceReward::Swap(ReplyAllianceRaceReward* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(uid_, other->uid_);
    std::swap(rankid_, other->rankid_);
    std::swap(userlevel_, other->userlevel_);
    std::swap(olevel_, other->olevel_);
    std::swap(opoint_, other->opoint_);
    gradeid_.Swap(&other->gradeid_);
    stageid_.Swap(&other->stageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceRaceReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceRaceReward_descriptor_;
  metadata.reflection = ReplyAllianceRaceReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestAllianceRaceTakeGradeReward::RequestAllianceRaceTakeGradeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceTakeGradeReward)
}

void RequestAllianceRaceTakeGradeReward::InitAsDefaultInstance() {
}

RequestAllianceRaceTakeGradeReward::RequestAllianceRaceTakeGradeReward(const RequestAllianceRaceTakeGradeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceTakeGradeReward)
}

void RequestAllianceRaceTakeGradeReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceTakeGradeReward::~RequestAllianceRaceTakeGradeReward() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceTakeGradeReward)
  SharedDtor();
}

void RequestAllianceRaceTakeGradeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceTakeGradeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceTakeGradeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceTakeGradeReward_descriptor_;
}

const RequestAllianceRaceTakeGradeReward& RequestAllianceRaceTakeGradeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceTakeGradeReward* RequestAllianceRaceTakeGradeReward::default_instance_ = NULL;

RequestAllianceRaceTakeGradeReward* RequestAllianceRaceTakeGradeReward::New() const {
  return new RequestAllianceRaceTakeGradeReward;
}

void RequestAllianceRaceTakeGradeReward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceTakeGradeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceTakeGradeReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceTakeGradeReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceTakeGradeReward)
  return false;
#undef DO_
}

void RequestAllianceRaceTakeGradeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceTakeGradeReward)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceTakeGradeReward)
}

::google::protobuf::uint8* RequestAllianceRaceTakeGradeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceTakeGradeReward)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceTakeGradeReward)
  return target;
}

int RequestAllianceRaceTakeGradeReward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceTakeGradeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceTakeGradeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceTakeGradeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceTakeGradeReward::MergeFrom(const RequestAllianceRaceTakeGradeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceTakeGradeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceTakeGradeReward::CopyFrom(const RequestAllianceRaceTakeGradeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceTakeGradeReward::IsInitialized() const {

  return true;
}

void RequestAllianceRaceTakeGradeReward::Swap(RequestAllianceRaceTakeGradeReward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceTakeGradeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceTakeGradeReward_descriptor_;
  metadata.reflection = RequestAllianceRaceTakeGradeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceTakeGradeRewardBC::kAidFieldNumber;
const int RequestAllianceRaceTakeGradeRewardBC::kUidFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceTakeGradeRewardBC::RequestAllianceRaceTakeGradeRewardBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceTakeGradeRewardBC)
}

void RequestAllianceRaceTakeGradeRewardBC::InitAsDefaultInstance() {
}

RequestAllianceRaceTakeGradeRewardBC::RequestAllianceRaceTakeGradeRewardBC(const RequestAllianceRaceTakeGradeRewardBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceTakeGradeRewardBC)
}

void RequestAllianceRaceTakeGradeRewardBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceTakeGradeRewardBC::~RequestAllianceRaceTakeGradeRewardBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceTakeGradeRewardBC)
  SharedDtor();
}

void RequestAllianceRaceTakeGradeRewardBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceTakeGradeRewardBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceTakeGradeRewardBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceTakeGradeRewardBC_descriptor_;
}

const RequestAllianceRaceTakeGradeRewardBC& RequestAllianceRaceTakeGradeRewardBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceTakeGradeRewardBC* RequestAllianceRaceTakeGradeRewardBC::default_instance_ = NULL;

RequestAllianceRaceTakeGradeRewardBC* RequestAllianceRaceTakeGradeRewardBC::New() const {
  return new RequestAllianceRaceTakeGradeRewardBC;
}

void RequestAllianceRaceTakeGradeRewardBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceTakeGradeRewardBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceTakeGradeRewardBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceTakeGradeRewardBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceTakeGradeRewardBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceTakeGradeRewardBC)
  return false;
#undef DO_
}

void RequestAllianceRaceTakeGradeRewardBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceTakeGradeRewardBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceTakeGradeRewardBC)
}

::google::protobuf::uint8* RequestAllianceRaceTakeGradeRewardBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceTakeGradeRewardBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceTakeGradeRewardBC)
  return target;
}

int RequestAllianceRaceTakeGradeRewardBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceTakeGradeRewardBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceTakeGradeRewardBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceTakeGradeRewardBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceTakeGradeRewardBC::MergeFrom(const RequestAllianceRaceTakeGradeRewardBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceTakeGradeRewardBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceTakeGradeRewardBC::CopyFrom(const RequestAllianceRaceTakeGradeRewardBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceTakeGradeRewardBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAllianceRaceTakeGradeRewardBC::Swap(RequestAllianceRaceTakeGradeRewardBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceTakeGradeRewardBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceTakeGradeRewardBC_descriptor_;
  metadata.reflection = RequestAllianceRaceTakeGradeRewardBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceRaceTakeGradeReward::kRetFieldNumber;
const int ReplyAllianceRaceTakeGradeReward::kUidFieldNumber;
const int ReplyAllianceRaceTakeGradeReward::kCommonsFieldNumber;
const int ReplyAllianceRaceTakeGradeReward::kUserLevelFieldNumber;
const int ReplyAllianceRaceTakeGradeReward::kRankIdFieldNumber;
const int ReplyAllianceRaceTakeGradeReward::kIdFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceRaceTakeGradeReward::ReplyAllianceRaceTakeGradeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceRaceTakeGradeReward)
}

void ReplyAllianceRaceTakeGradeReward::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ReplyAllianceRaceTakeGradeReward::ReplyAllianceRaceTakeGradeReward(const ReplyAllianceRaceTakeGradeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceRaceTakeGradeReward)
}

void ReplyAllianceRaceTakeGradeReward::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  uid_ = 0u;
  commons_ = NULL;
  userlevel_ = 0u;
  rankid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceRaceTakeGradeReward::~ReplyAllianceRaceTakeGradeReward() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceRaceTakeGradeReward)
  SharedDtor();
}

void ReplyAllianceRaceTakeGradeReward::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void ReplyAllianceRaceTakeGradeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceRaceTakeGradeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceRaceTakeGradeReward_descriptor_;
}

const ReplyAllianceRaceTakeGradeReward& ReplyAllianceRaceTakeGradeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceRaceTakeGradeReward* ReplyAllianceRaceTakeGradeReward::default_instance_ = NULL;

ReplyAllianceRaceTakeGradeReward* ReplyAllianceRaceTakeGradeReward::New() const {
  return new ReplyAllianceRaceTakeGradeReward;
}

void ReplyAllianceRaceTakeGradeReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyAllianceRaceTakeGradeReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ret_, uid_);
    ZR_(userlevel_, rankid_);
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceRaceTakeGradeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceRaceTakeGradeReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userLevel;
        break;
      }

      // optional uint32 userLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_userLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userlevel_)));
          set_has_userlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rankId;
        break;
      }

      // optional uint32 rankId = 5;
      case 5: {
        if (tag == 40) {
         parse_rankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }

      // repeated uint32 id = 6;
      case 6: {
        if (tag == 48) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_id())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceRaceTakeGradeReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceRaceTakeGradeReward)
  return false;
#undef DO_
}

void ReplyAllianceRaceTakeGradeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceRaceTakeGradeReward)
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  // optional uint32 userLevel = 4;
  if (has_userlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->userlevel(), output);
  }

  // optional uint32 rankId = 5;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rankid(), output);
  }

  // repeated uint32 id = 6;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceRaceTakeGradeReward)
}

::google::protobuf::uint8* ReplyAllianceRaceTakeGradeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceRaceTakeGradeReward)
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  // optional uint32 userLevel = 4;
  if (has_userlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->userlevel(), target);
  }

  // optional uint32 rankId = 5;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rankid(), target);
  }

  // repeated uint32 id = 6;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceRaceTakeGradeReward)
  return target;
}

int ReplyAllianceRaceTakeGradeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // optional uint32 userLevel = 4;
    if (has_userlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userlevel());
    }

    // optional uint32 rankId = 5;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

  }
  // repeated uint32 id = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceRaceTakeGradeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceRaceTakeGradeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceRaceTakeGradeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceRaceTakeGradeReward::MergeFrom(const ReplyAllianceRaceTakeGradeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_userlevel()) {
      set_userlevel(from.userlevel());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceRaceTakeGradeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceRaceTakeGradeReward::CopyFrom(const ReplyAllianceRaceTakeGradeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceRaceTakeGradeReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ReplyAllianceRaceTakeGradeReward::Swap(ReplyAllianceRaceTakeGradeReward* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(uid_, other->uid_);
    std::swap(commons_, other->commons_);
    std::swap(userlevel_, other->userlevel_);
    std::swap(rankid_, other->rankid_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceRaceTakeGradeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceRaceTakeGradeReward_descriptor_;
  metadata.reflection = ReplyAllianceRaceTakeGradeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceTakeStageReward::kIdFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceTakeStageReward::RequestAllianceRaceTakeStageReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceTakeStageReward)
}

void RequestAllianceRaceTakeStageReward::InitAsDefaultInstance() {
}

RequestAllianceRaceTakeStageReward::RequestAllianceRaceTakeStageReward(const RequestAllianceRaceTakeStageReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceTakeStageReward)
}

void RequestAllianceRaceTakeStageReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceTakeStageReward::~RequestAllianceRaceTakeStageReward() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceTakeStageReward)
  SharedDtor();
}

void RequestAllianceRaceTakeStageReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceTakeStageReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceTakeStageReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceTakeStageReward_descriptor_;
}

const RequestAllianceRaceTakeStageReward& RequestAllianceRaceTakeStageReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceTakeStageReward* RequestAllianceRaceTakeStageReward::default_instance_ = NULL;

RequestAllianceRaceTakeStageReward* RequestAllianceRaceTakeStageReward::New() const {
  return new RequestAllianceRaceTakeStageReward;
}

void RequestAllianceRaceTakeStageReward::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceTakeStageReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceTakeStageReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (tag == 8) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceTakeStageReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceTakeStageReward)
  return false;
#undef DO_
}

void RequestAllianceRaceTakeStageReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceTakeStageReward)
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceTakeStageReward)
}

::google::protobuf::uint8* RequestAllianceRaceTakeStageReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceTakeStageReward)
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceTakeStageReward)
  return target;
}

int RequestAllianceRaceTakeStageReward::ByteSize() const {
  int total_size = 0;

  // repeated uint32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceTakeStageReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceTakeStageReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceTakeStageReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceTakeStageReward::MergeFrom(const RequestAllianceRaceTakeStageReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceTakeStageReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceTakeStageReward::CopyFrom(const RequestAllianceRaceTakeStageReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceTakeStageReward::IsInitialized() const {

  return true;
}

void RequestAllianceRaceTakeStageReward::Swap(RequestAllianceRaceTakeStageReward* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceTakeStageReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceTakeStageReward_descriptor_;
  metadata.reflection = RequestAllianceRaceTakeStageReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceTakeStageRewardBC::kAidFieldNumber;
const int RequestAllianceRaceTakeStageRewardBC::kUidFieldNumber;
const int RequestAllianceRaceTakeStageRewardBC::kIdFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceTakeStageRewardBC::RequestAllianceRaceTakeStageRewardBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceTakeStageRewardBC)
}

void RequestAllianceRaceTakeStageRewardBC::InitAsDefaultInstance() {
}

RequestAllianceRaceTakeStageRewardBC::RequestAllianceRaceTakeStageRewardBC(const RequestAllianceRaceTakeStageRewardBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceTakeStageRewardBC)
}

void RequestAllianceRaceTakeStageRewardBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceTakeStageRewardBC::~RequestAllianceRaceTakeStageRewardBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceTakeStageRewardBC)
  SharedDtor();
}

void RequestAllianceRaceTakeStageRewardBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceTakeStageRewardBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceTakeStageRewardBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceTakeStageRewardBC_descriptor_;
}

const RequestAllianceRaceTakeStageRewardBC& RequestAllianceRaceTakeStageRewardBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceTakeStageRewardBC* RequestAllianceRaceTakeStageRewardBC::default_instance_ = NULL;

RequestAllianceRaceTakeStageRewardBC* RequestAllianceRaceTakeStageRewardBC::New() const {
  return new RequestAllianceRaceTakeStageRewardBC;
}

void RequestAllianceRaceTakeStageRewardBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceTakeStageRewardBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceTakeStageRewardBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceTakeStageRewardBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // repeated uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceTakeStageRewardBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceTakeStageRewardBC)
  return false;
#undef DO_
}

void RequestAllianceRaceTakeStageRewardBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceTakeStageRewardBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // repeated uint32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceTakeStageRewardBC)
}

::google::protobuf::uint8* RequestAllianceRaceTakeStageRewardBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceTakeStageRewardBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // repeated uint32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceTakeStageRewardBC)
  return target;
}

int RequestAllianceRaceTakeStageRewardBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  // repeated uint32 id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceTakeStageRewardBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceTakeStageRewardBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceTakeStageRewardBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceTakeStageRewardBC::MergeFrom(const RequestAllianceRaceTakeStageRewardBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceTakeStageRewardBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceTakeStageRewardBC::CopyFrom(const RequestAllianceRaceTakeStageRewardBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceTakeStageRewardBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAllianceRaceTakeStageRewardBC::Swap(RequestAllianceRaceTakeStageRewardBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceTakeStageRewardBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceTakeStageRewardBC_descriptor_;
  metadata.reflection = RequestAllianceRaceTakeStageRewardBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceRaceTakeStageReward::kRetFieldNumber;
const int ReplyAllianceRaceTakeStageReward::kUidFieldNumber;
const int ReplyAllianceRaceTakeStageReward::kCommonsFieldNumber;
const int ReplyAllianceRaceTakeStageReward::kUserLevelFieldNumber;
const int ReplyAllianceRaceTakeStageReward::kIdFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceRaceTakeStageReward::ReplyAllianceRaceTakeStageReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceRaceTakeStageReward)
}

void ReplyAllianceRaceTakeStageReward::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ReplyAllianceRaceTakeStageReward::ReplyAllianceRaceTakeStageReward(const ReplyAllianceRaceTakeStageReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceRaceTakeStageReward)
}

void ReplyAllianceRaceTakeStageReward::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  uid_ = 0u;
  commons_ = NULL;
  userlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceRaceTakeStageReward::~ReplyAllianceRaceTakeStageReward() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceRaceTakeStageReward)
  SharedDtor();
}

void ReplyAllianceRaceTakeStageReward::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void ReplyAllianceRaceTakeStageReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceRaceTakeStageReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceRaceTakeStageReward_descriptor_;
}

const ReplyAllianceRaceTakeStageReward& ReplyAllianceRaceTakeStageReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceRaceTakeStageReward* ReplyAllianceRaceTakeStageReward::default_instance_ = NULL;

ReplyAllianceRaceTakeStageReward* ReplyAllianceRaceTakeStageReward::New() const {
  return new ReplyAllianceRaceTakeStageReward;
}

void ReplyAllianceRaceTakeStageReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyAllianceRaceTakeStageReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(ret_, uid_);
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    userlevel_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceRaceTakeStageReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceRaceTakeStageReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userLevel;
        break;
      }

      // optional uint32 userLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_userLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userlevel_)));
          set_has_userlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // repeated uint32 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_id())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceRaceTakeStageReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceRaceTakeStageReward)
  return false;
#undef DO_
}

void ReplyAllianceRaceTakeStageReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceRaceTakeStageReward)
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  // optional uint32 userLevel = 4;
  if (has_userlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->userlevel(), output);
  }

  // repeated uint32 id = 5;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceRaceTakeStageReward)
}

::google::protobuf::uint8* ReplyAllianceRaceTakeStageReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceRaceTakeStageReward)
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  // optional uint32 userLevel = 4;
  if (has_userlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->userlevel(), target);
  }

  // repeated uint32 id = 5;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceRaceTakeStageReward)
  return target;
}

int ReplyAllianceRaceTakeStageReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // optional uint32 userLevel = 4;
    if (has_userlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userlevel());
    }

  }
  // repeated uint32 id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceRaceTakeStageReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceRaceTakeStageReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceRaceTakeStageReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceRaceTakeStageReward::MergeFrom(const ReplyAllianceRaceTakeStageReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_userlevel()) {
      set_userlevel(from.userlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceRaceTakeStageReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceRaceTakeStageReward::CopyFrom(const ReplyAllianceRaceTakeStageReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceRaceTakeStageReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ReplyAllianceRaceTakeStageReward::Swap(ReplyAllianceRaceTakeStageReward* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(uid_, other->uid_);
    std::swap(commons_, other->commons_);
    std::swap(userlevel_, other->userlevel_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceRaceTakeStageReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceRaceTakeStageReward_descriptor_;
  metadata.reflection = ReplyAllianceRaceTakeStageReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceRefreshStageReward::kIdFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceRefreshStageReward::RequestAllianceRaceRefreshStageReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceRefreshStageReward)
}

void RequestAllianceRaceRefreshStageReward::InitAsDefaultInstance() {
}

RequestAllianceRaceRefreshStageReward::RequestAllianceRaceRefreshStageReward(const RequestAllianceRaceRefreshStageReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceRefreshStageReward)
}

void RequestAllianceRaceRefreshStageReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceRefreshStageReward::~RequestAllianceRaceRefreshStageReward() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceRefreshStageReward)
  SharedDtor();
}

void RequestAllianceRaceRefreshStageReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceRefreshStageReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceRefreshStageReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceRefreshStageReward_descriptor_;
}

const RequestAllianceRaceRefreshStageReward& RequestAllianceRaceRefreshStageReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceRefreshStageReward* RequestAllianceRaceRefreshStageReward::default_instance_ = NULL;

RequestAllianceRaceRefreshStageReward* RequestAllianceRaceRefreshStageReward::New() const {
  return new RequestAllianceRaceRefreshStageReward;
}

void RequestAllianceRaceRefreshStageReward::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceRefreshStageReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceRefreshStageReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (tag == 8) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceRefreshStageReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceRefreshStageReward)
  return false;
#undef DO_
}

void RequestAllianceRaceRefreshStageReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceRefreshStageReward)
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceRefreshStageReward)
}

::google::protobuf::uint8* RequestAllianceRaceRefreshStageReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceRefreshStageReward)
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceRefreshStageReward)
  return target;
}

int RequestAllianceRaceRefreshStageReward::ByteSize() const {
  int total_size = 0;

  // repeated uint32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceRefreshStageReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceRefreshStageReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceRefreshStageReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceRefreshStageReward::MergeFrom(const RequestAllianceRaceRefreshStageReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceRefreshStageReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceRefreshStageReward::CopyFrom(const RequestAllianceRaceRefreshStageReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceRefreshStageReward::IsInitialized() const {

  return true;
}

void RequestAllianceRaceRefreshStageReward::Swap(RequestAllianceRaceRefreshStageReward* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceRefreshStageReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceRefreshStageReward_descriptor_;
  metadata.reflection = RequestAllianceRaceRefreshStageReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceRefreshStageRewardBC::kAidFieldNumber;
const int RequestAllianceRaceRefreshStageRewardBC::kUidFieldNumber;
const int RequestAllianceRaceRefreshStageRewardBC::kIdFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceRefreshStageRewardBC::RequestAllianceRaceRefreshStageRewardBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceRefreshStageRewardBC)
}

void RequestAllianceRaceRefreshStageRewardBC::InitAsDefaultInstance() {
}

RequestAllianceRaceRefreshStageRewardBC::RequestAllianceRaceRefreshStageRewardBC(const RequestAllianceRaceRefreshStageRewardBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceRefreshStageRewardBC)
}

void RequestAllianceRaceRefreshStageRewardBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceRefreshStageRewardBC::~RequestAllianceRaceRefreshStageRewardBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceRefreshStageRewardBC)
  SharedDtor();
}

void RequestAllianceRaceRefreshStageRewardBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceRefreshStageRewardBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceRefreshStageRewardBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceRefreshStageRewardBC_descriptor_;
}

const RequestAllianceRaceRefreshStageRewardBC& RequestAllianceRaceRefreshStageRewardBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceRefreshStageRewardBC* RequestAllianceRaceRefreshStageRewardBC::default_instance_ = NULL;

RequestAllianceRaceRefreshStageRewardBC* RequestAllianceRaceRefreshStageRewardBC::New() const {
  return new RequestAllianceRaceRefreshStageRewardBC;
}

void RequestAllianceRaceRefreshStageRewardBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceRefreshStageRewardBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceRefreshStageRewardBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceRefreshStageRewardBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // repeated uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceRefreshStageRewardBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceRefreshStageRewardBC)
  return false;
#undef DO_
}

void RequestAllianceRaceRefreshStageRewardBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceRefreshStageRewardBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // repeated uint32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceRefreshStageRewardBC)
}

::google::protobuf::uint8* RequestAllianceRaceRefreshStageRewardBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceRefreshStageRewardBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // repeated uint32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceRefreshStageRewardBC)
  return target;
}

int RequestAllianceRaceRefreshStageRewardBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  // repeated uint32 id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceRefreshStageRewardBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceRefreshStageRewardBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceRefreshStageRewardBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceRefreshStageRewardBC::MergeFrom(const RequestAllianceRaceRefreshStageRewardBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceRefreshStageRewardBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceRefreshStageRewardBC::CopyFrom(const RequestAllianceRaceRefreshStageRewardBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceRefreshStageRewardBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAllianceRaceRefreshStageRewardBC::Swap(RequestAllianceRaceRefreshStageRewardBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceRefreshStageRewardBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceRefreshStageRewardBC_descriptor_;
  metadata.reflection = RequestAllianceRaceRefreshStageRewardBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceRaceRefreshStageReward::kRetFieldNumber;
const int ReplyAllianceRaceRefreshStageReward::kUidFieldNumber;
const int ReplyAllianceRaceRefreshStageReward::kCommonsFieldNumber;
const int ReplyAllianceRaceRefreshStageReward::kLevelIdFieldNumber;
const int ReplyAllianceRaceRefreshStageReward::kIdFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceRaceRefreshStageReward::ReplyAllianceRaceRefreshStageReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceRaceRefreshStageReward)
}

void ReplyAllianceRaceRefreshStageReward::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ReplyAllianceRaceRefreshStageReward::ReplyAllianceRaceRefreshStageReward(const ReplyAllianceRaceRefreshStageReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceRaceRefreshStageReward)
}

void ReplyAllianceRaceRefreshStageReward::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  uid_ = 0u;
  commons_ = NULL;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceRaceRefreshStageReward::~ReplyAllianceRaceRefreshStageReward() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceRaceRefreshStageReward)
  SharedDtor();
}

void ReplyAllianceRaceRefreshStageReward::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void ReplyAllianceRaceRefreshStageReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceRaceRefreshStageReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceRaceRefreshStageReward_descriptor_;
}

const ReplyAllianceRaceRefreshStageReward& ReplyAllianceRaceRefreshStageReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceRaceRefreshStageReward* ReplyAllianceRaceRefreshStageReward::default_instance_ = NULL;

ReplyAllianceRaceRefreshStageReward* ReplyAllianceRaceRefreshStageReward::New() const {
  return new ReplyAllianceRaceRefreshStageReward;
}

void ReplyAllianceRaceRefreshStageReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyAllianceRaceRefreshStageReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(ret_, uid_);
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    levelid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceRaceRefreshStageReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceRaceRefreshStageReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_levelId;
        break;
      }

      // optional uint32 levelId = 4;
      case 4: {
        if (tag == 32) {
         parse_levelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // repeated uint32 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_id())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceRaceRefreshStageReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceRaceRefreshStageReward)
  return false;
#undef DO_
}

void ReplyAllianceRaceRefreshStageReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceRaceRefreshStageReward)
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  // optional uint32 levelId = 4;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->levelid(), output);
  }

  // repeated uint32 id = 5;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceRaceRefreshStageReward)
}

::google::protobuf::uint8* ReplyAllianceRaceRefreshStageReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceRaceRefreshStageReward)
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  // optional uint32 levelId = 4;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->levelid(), target);
  }

  // repeated uint32 id = 5;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceRaceRefreshStageReward)
  return target;
}

int ReplyAllianceRaceRefreshStageReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // optional uint32 levelId = 4;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  // repeated uint32 id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceRaceRefreshStageReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceRaceRefreshStageReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceRaceRefreshStageReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceRaceRefreshStageReward::MergeFrom(const ReplyAllianceRaceRefreshStageReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceRaceRefreshStageReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceRaceRefreshStageReward::CopyFrom(const ReplyAllianceRaceRefreshStageReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceRaceRefreshStageReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ReplyAllianceRaceRefreshStageReward::Swap(ReplyAllianceRaceRefreshStageReward* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(uid_, other->uid_);
    std::swap(commons_, other->commons_);
    std::swap(levelid_, other->levelid_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceRaceRefreshStageReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceRaceRefreshStageReward_descriptor_;
  metadata.reflection = ReplyAllianceRaceRefreshStageReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceRaceMemberOrderLogItem::kUidFieldNumber;
const int AllianceRaceMemberOrderLogItem::kFinishFieldNumber;
const int AllianceRaceMemberOrderLogItem::kMaxFieldNumber;
const int AllianceRaceMemberOrderLogItem::kCancelFieldNumber;
const int AllianceRaceMemberOrderLogItem::kPointFieldNumber;
const int AllianceRaceMemberOrderLogItem::kLevelFieldNumber;
const int AllianceRaceMemberOrderLogItem::kFigFieldNumber;
#endif  // !_MSC_VER

AllianceRaceMemberOrderLogItem::AllianceRaceMemberOrderLogItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.AllianceRaceMemberOrderLogItem)
}

void AllianceRaceMemberOrderLogItem::InitAsDefaultInstance() {
}

AllianceRaceMemberOrderLogItem::AllianceRaceMemberOrderLogItem(const AllianceRaceMemberOrderLogItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.AllianceRaceMemberOrderLogItem)
}

void AllianceRaceMemberOrderLogItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  finish_ = 0u;
  max_ = 0u;
  cancel_ = 0u;
  point_ = 0u;
  level_ = 0u;
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceRaceMemberOrderLogItem::~AllianceRaceMemberOrderLogItem() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.AllianceRaceMemberOrderLogItem)
  SharedDtor();
}

void AllianceRaceMemberOrderLogItem::SharedDtor() {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (this != default_instance_) {
  }
}

void AllianceRaceMemberOrderLogItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceRaceMemberOrderLogItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceRaceMemberOrderLogItem_descriptor_;
}

const AllianceRaceMemberOrderLogItem& AllianceRaceMemberOrderLogItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

AllianceRaceMemberOrderLogItem* AllianceRaceMemberOrderLogItem::default_instance_ = NULL;

AllianceRaceMemberOrderLogItem* AllianceRaceMemberOrderLogItem::New() const {
  return new AllianceRaceMemberOrderLogItem;
}

void AllianceRaceMemberOrderLogItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllianceRaceMemberOrderLogItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, level_);
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceRaceMemberOrderLogItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.AllianceRaceMemberOrderLogItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_finish;
        break;
      }

      // required uint32 finish = 2;
      case 2: {
        if (tag == 16) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max;
        break;
      }

      // required uint32 max = 3;
      case 3: {
        if (tag == 24) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cancel;
        break;
      }

      // required uint32 cancel = 4;
      case 4: {
        if (tag == 32) {
         parse_cancel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cancel_)));
          set_has_cancel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_point;
        break;
      }

      // required uint32 point = 5;
      case 5: {
        if (tag == 40) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_fig;
        break;
      }

      // optional bytes fig = 7;
      case 7: {
        if (tag == 58) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.AllianceRaceMemberOrderLogItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.AllianceRaceMemberOrderLogItem)
  return false;
#undef DO_
}

void AllianceRaceMemberOrderLogItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.AllianceRaceMemberOrderLogItem)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 finish = 2;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finish(), output);
  }

  // required uint32 max = 3;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max(), output);
  }

  // required uint32 cancel = 4;
  if (has_cancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cancel(), output);
  }

  // required uint32 point = 5;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->point(), output);
  }

  // required uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional bytes fig = 7;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->fig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.AllianceRaceMemberOrderLogItem)
}

::google::protobuf::uint8* AllianceRaceMemberOrderLogItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.AllianceRaceMemberOrderLogItem)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 finish = 2;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finish(), target);
  }

  // required uint32 max = 3;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max(), target);
  }

  // required uint32 cancel = 4;
  if (has_cancel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cancel(), target);
  }

  // required uint32 point = 5;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->point(), target);
  }

  // required uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional bytes fig = 7;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->fig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.AllianceRaceMemberOrderLogItem)
  return target;
}

int AllianceRaceMemberOrderLogItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 finish = 2;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finish());
    }

    // required uint32 max = 3;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max());
    }

    // required uint32 cancel = 4;
    if (has_cancel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cancel());
    }

    // required uint32 point = 5;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

    // required uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional bytes fig = 7;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceRaceMemberOrderLogItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceRaceMemberOrderLogItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceRaceMemberOrderLogItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceRaceMemberOrderLogItem::MergeFrom(const AllianceRaceMemberOrderLogItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_cancel()) {
      set_cancel(from.cancel());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceRaceMemberOrderLogItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceRaceMemberOrderLogItem::CopyFrom(const AllianceRaceMemberOrderLogItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceRaceMemberOrderLogItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void AllianceRaceMemberOrderLogItem::Swap(AllianceRaceMemberOrderLogItem* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(finish_, other->finish_);
    std::swap(max_, other->max_);
    std::swap(cancel_, other->cancel_);
    std::swap(point_, other->point_);
    std::swap(level_, other->level_);
    std::swap(fig_, other->fig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceRaceMemberOrderLogItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceRaceMemberOrderLogItem_descriptor_;
  metadata.reflection = AllianceRaceMemberOrderLogItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestAllianceRaceMemberOrderLog::RequestAllianceRaceMemberOrderLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceMemberOrderLog)
}

void RequestAllianceRaceMemberOrderLog::InitAsDefaultInstance() {
}

RequestAllianceRaceMemberOrderLog::RequestAllianceRaceMemberOrderLog(const RequestAllianceRaceMemberOrderLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceMemberOrderLog)
}

void RequestAllianceRaceMemberOrderLog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceMemberOrderLog::~RequestAllianceRaceMemberOrderLog() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceMemberOrderLog)
  SharedDtor();
}

void RequestAllianceRaceMemberOrderLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceMemberOrderLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceMemberOrderLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceMemberOrderLog_descriptor_;
}

const RequestAllianceRaceMemberOrderLog& RequestAllianceRaceMemberOrderLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceMemberOrderLog* RequestAllianceRaceMemberOrderLog::default_instance_ = NULL;

RequestAllianceRaceMemberOrderLog* RequestAllianceRaceMemberOrderLog::New() const {
  return new RequestAllianceRaceMemberOrderLog;
}

void RequestAllianceRaceMemberOrderLog::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceMemberOrderLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceMemberOrderLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceMemberOrderLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceMemberOrderLog)
  return false;
#undef DO_
}

void RequestAllianceRaceMemberOrderLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceMemberOrderLog)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceMemberOrderLog)
}

::google::protobuf::uint8* RequestAllianceRaceMemberOrderLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceMemberOrderLog)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceMemberOrderLog)
  return target;
}

int RequestAllianceRaceMemberOrderLog::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceMemberOrderLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceMemberOrderLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceMemberOrderLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceMemberOrderLog::MergeFrom(const RequestAllianceRaceMemberOrderLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceMemberOrderLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceMemberOrderLog::CopyFrom(const RequestAllianceRaceMemberOrderLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceMemberOrderLog::IsInitialized() const {

  return true;
}

void RequestAllianceRaceMemberOrderLog::Swap(RequestAllianceRaceMemberOrderLog* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceMemberOrderLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceMemberOrderLog_descriptor_;
  metadata.reflection = RequestAllianceRaceMemberOrderLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceMemberOrderLogBC::kAidFieldNumber;
const int RequestAllianceRaceMemberOrderLogBC::kUidFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceMemberOrderLogBC::RequestAllianceRaceMemberOrderLogBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceMemberOrderLogBC)
}

void RequestAllianceRaceMemberOrderLogBC::InitAsDefaultInstance() {
}

RequestAllianceRaceMemberOrderLogBC::RequestAllianceRaceMemberOrderLogBC(const RequestAllianceRaceMemberOrderLogBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceMemberOrderLogBC)
}

void RequestAllianceRaceMemberOrderLogBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceMemberOrderLogBC::~RequestAllianceRaceMemberOrderLogBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceMemberOrderLogBC)
  SharedDtor();
}

void RequestAllianceRaceMemberOrderLogBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceMemberOrderLogBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceMemberOrderLogBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceMemberOrderLogBC_descriptor_;
}

const RequestAllianceRaceMemberOrderLogBC& RequestAllianceRaceMemberOrderLogBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceMemberOrderLogBC* RequestAllianceRaceMemberOrderLogBC::default_instance_ = NULL;

RequestAllianceRaceMemberOrderLogBC* RequestAllianceRaceMemberOrderLogBC::New() const {
  return new RequestAllianceRaceMemberOrderLogBC;
}

void RequestAllianceRaceMemberOrderLogBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceMemberOrderLogBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceMemberOrderLogBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceMemberOrderLogBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceMemberOrderLogBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceMemberOrderLogBC)
  return false;
#undef DO_
}

void RequestAllianceRaceMemberOrderLogBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceMemberOrderLogBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceMemberOrderLogBC)
}

::google::protobuf::uint8* RequestAllianceRaceMemberOrderLogBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceMemberOrderLogBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceMemberOrderLogBC)
  return target;
}

int RequestAllianceRaceMemberOrderLogBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceMemberOrderLogBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceMemberOrderLogBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceMemberOrderLogBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceMemberOrderLogBC::MergeFrom(const RequestAllianceRaceMemberOrderLogBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceMemberOrderLogBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceMemberOrderLogBC::CopyFrom(const RequestAllianceRaceMemberOrderLogBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceMemberOrderLogBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAllianceRaceMemberOrderLogBC::Swap(RequestAllianceRaceMemberOrderLogBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceMemberOrderLogBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceMemberOrderLogBC_descriptor_;
  metadata.reflection = RequestAllianceRaceMemberOrderLogBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceRaceMemberOrderLog::kMemberFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceRaceMemberOrderLog::ReplyAllianceRaceMemberOrderLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceRaceMemberOrderLog)
}

void ReplyAllianceRaceMemberOrderLog::InitAsDefaultInstance() {
}

ReplyAllianceRaceMemberOrderLog::ReplyAllianceRaceMemberOrderLog(const ReplyAllianceRaceMemberOrderLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceRaceMemberOrderLog)
}

void ReplyAllianceRaceMemberOrderLog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceRaceMemberOrderLog::~ReplyAllianceRaceMemberOrderLog() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceRaceMemberOrderLog)
  SharedDtor();
}

void ReplyAllianceRaceMemberOrderLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyAllianceRaceMemberOrderLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceRaceMemberOrderLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceRaceMemberOrderLog_descriptor_;
}

const ReplyAllianceRaceMemberOrderLog& ReplyAllianceRaceMemberOrderLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceRaceMemberOrderLog* ReplyAllianceRaceMemberOrderLog::default_instance_ = NULL;

ReplyAllianceRaceMemberOrderLog* ReplyAllianceRaceMemberOrderLog::New() const {
  return new ReplyAllianceRaceMemberOrderLog;
}

void ReplyAllianceRaceMemberOrderLog::Clear() {
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceRaceMemberOrderLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceRaceMemberOrderLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoAlliance.AllianceRaceMemberOrderLogItem member = 1;
      case 1: {
        if (tag == 10) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_member;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceRaceMemberOrderLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceRaceMemberOrderLog)
  return false;
#undef DO_
}

void ReplyAllianceRaceMemberOrderLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceRaceMemberOrderLog)
  // repeated .ProtoAlliance.AllianceRaceMemberOrderLogItem member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceRaceMemberOrderLog)
}

::google::protobuf::uint8* ReplyAllianceRaceMemberOrderLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceRaceMemberOrderLog)
  // repeated .ProtoAlliance.AllianceRaceMemberOrderLogItem member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceRaceMemberOrderLog)
  return target;
}

int ReplyAllianceRaceMemberOrderLog::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoAlliance.AllianceRaceMemberOrderLogItem member = 1;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceRaceMemberOrderLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceRaceMemberOrderLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceRaceMemberOrderLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceRaceMemberOrderLog::MergeFrom(const ReplyAllianceRaceMemberOrderLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceRaceMemberOrderLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceRaceMemberOrderLog::CopyFrom(const ReplyAllianceRaceMemberOrderLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceRaceMemberOrderLog::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->member())) return false;
  return true;
}

void ReplyAllianceRaceMemberOrderLog::Swap(ReplyAllianceRaceMemberOrderLog* other) {
  if (other != this) {
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceRaceMemberOrderLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceRaceMemberOrderLog_descriptor_;
  metadata.reflection = ReplyAllianceRaceMemberOrderLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceRacePersonOrderLogItem::kIdFieldNumber;
const int AllianceRacePersonOrderLogItem::kStatusFieldNumber;
#endif  // !_MSC_VER

AllianceRacePersonOrderLogItem::AllianceRacePersonOrderLogItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.AllianceRacePersonOrderLogItem)
}

void AllianceRacePersonOrderLogItem::InitAsDefaultInstance() {
}

AllianceRacePersonOrderLogItem::AllianceRacePersonOrderLogItem(const AllianceRacePersonOrderLogItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.AllianceRacePersonOrderLogItem)
}

void AllianceRacePersonOrderLogItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceRacePersonOrderLogItem::~AllianceRacePersonOrderLogItem() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.AllianceRacePersonOrderLogItem)
  SharedDtor();
}

void AllianceRacePersonOrderLogItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceRacePersonOrderLogItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceRacePersonOrderLogItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceRacePersonOrderLogItem_descriptor_;
}

const AllianceRacePersonOrderLogItem& AllianceRacePersonOrderLogItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

AllianceRacePersonOrderLogItem* AllianceRacePersonOrderLogItem::default_instance_ = NULL;

AllianceRacePersonOrderLogItem* AllianceRacePersonOrderLogItem::New() const {
  return new AllianceRacePersonOrderLogItem;
}

void AllianceRacePersonOrderLogItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllianceRacePersonOrderLogItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceRacePersonOrderLogItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.AllianceRacePersonOrderLogItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.AllianceRacePersonOrderLogItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.AllianceRacePersonOrderLogItem)
  return false;
#undef DO_
}

void AllianceRacePersonOrderLogItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.AllianceRacePersonOrderLogItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.AllianceRacePersonOrderLogItem)
}

::google::protobuf::uint8* AllianceRacePersonOrderLogItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.AllianceRacePersonOrderLogItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.AllianceRacePersonOrderLogItem)
  return target;
}

int AllianceRacePersonOrderLogItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceRacePersonOrderLogItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceRacePersonOrderLogItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceRacePersonOrderLogItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceRacePersonOrderLogItem::MergeFrom(const AllianceRacePersonOrderLogItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceRacePersonOrderLogItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceRacePersonOrderLogItem::CopyFrom(const AllianceRacePersonOrderLogItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceRacePersonOrderLogItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllianceRacePersonOrderLogItem::Swap(AllianceRacePersonOrderLogItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceRacePersonOrderLogItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceRacePersonOrderLogItem_descriptor_;
  metadata.reflection = AllianceRacePersonOrderLogItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestAllianceRacePersonOrderLog::RequestAllianceRacePersonOrderLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRacePersonOrderLog)
}

void RequestAllianceRacePersonOrderLog::InitAsDefaultInstance() {
}

RequestAllianceRacePersonOrderLog::RequestAllianceRacePersonOrderLog(const RequestAllianceRacePersonOrderLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRacePersonOrderLog)
}

void RequestAllianceRacePersonOrderLog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRacePersonOrderLog::~RequestAllianceRacePersonOrderLog() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRacePersonOrderLog)
  SharedDtor();
}

void RequestAllianceRacePersonOrderLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRacePersonOrderLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRacePersonOrderLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRacePersonOrderLog_descriptor_;
}

const RequestAllianceRacePersonOrderLog& RequestAllianceRacePersonOrderLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRacePersonOrderLog* RequestAllianceRacePersonOrderLog::default_instance_ = NULL;

RequestAllianceRacePersonOrderLog* RequestAllianceRacePersonOrderLog::New() const {
  return new RequestAllianceRacePersonOrderLog;
}

void RequestAllianceRacePersonOrderLog::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRacePersonOrderLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRacePersonOrderLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRacePersonOrderLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRacePersonOrderLog)
  return false;
#undef DO_
}

void RequestAllianceRacePersonOrderLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRacePersonOrderLog)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRacePersonOrderLog)
}

::google::protobuf::uint8* RequestAllianceRacePersonOrderLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRacePersonOrderLog)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRacePersonOrderLog)
  return target;
}

int RequestAllianceRacePersonOrderLog::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRacePersonOrderLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRacePersonOrderLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRacePersonOrderLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRacePersonOrderLog::MergeFrom(const RequestAllianceRacePersonOrderLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRacePersonOrderLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRacePersonOrderLog::CopyFrom(const RequestAllianceRacePersonOrderLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRacePersonOrderLog::IsInitialized() const {

  return true;
}

void RequestAllianceRacePersonOrderLog::Swap(RequestAllianceRacePersonOrderLog* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRacePersonOrderLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRacePersonOrderLog_descriptor_;
  metadata.reflection = RequestAllianceRacePersonOrderLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRacePersonOrderLogBC::kAidFieldNumber;
const int RequestAllianceRacePersonOrderLogBC::kUidFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRacePersonOrderLogBC::RequestAllianceRacePersonOrderLogBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRacePersonOrderLogBC)
}

void RequestAllianceRacePersonOrderLogBC::InitAsDefaultInstance() {
}

RequestAllianceRacePersonOrderLogBC::RequestAllianceRacePersonOrderLogBC(const RequestAllianceRacePersonOrderLogBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRacePersonOrderLogBC)
}

void RequestAllianceRacePersonOrderLogBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRacePersonOrderLogBC::~RequestAllianceRacePersonOrderLogBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRacePersonOrderLogBC)
  SharedDtor();
}

void RequestAllianceRacePersonOrderLogBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRacePersonOrderLogBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRacePersonOrderLogBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRacePersonOrderLogBC_descriptor_;
}

const RequestAllianceRacePersonOrderLogBC& RequestAllianceRacePersonOrderLogBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRacePersonOrderLogBC* RequestAllianceRacePersonOrderLogBC::default_instance_ = NULL;

RequestAllianceRacePersonOrderLogBC* RequestAllianceRacePersonOrderLogBC::New() const {
  return new RequestAllianceRacePersonOrderLogBC;
}

void RequestAllianceRacePersonOrderLogBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRacePersonOrderLogBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRacePersonOrderLogBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRacePersonOrderLogBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRacePersonOrderLogBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRacePersonOrderLogBC)
  return false;
#undef DO_
}

void RequestAllianceRacePersonOrderLogBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRacePersonOrderLogBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRacePersonOrderLogBC)
}

::google::protobuf::uint8* RequestAllianceRacePersonOrderLogBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRacePersonOrderLogBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRacePersonOrderLogBC)
  return target;
}

int RequestAllianceRacePersonOrderLogBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRacePersonOrderLogBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRacePersonOrderLogBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRacePersonOrderLogBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRacePersonOrderLogBC::MergeFrom(const RequestAllianceRacePersonOrderLogBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRacePersonOrderLogBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRacePersonOrderLogBC::CopyFrom(const RequestAllianceRacePersonOrderLogBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRacePersonOrderLogBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAllianceRacePersonOrderLogBC::Swap(RequestAllianceRacePersonOrderLogBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRacePersonOrderLogBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRacePersonOrderLogBC_descriptor_;
  metadata.reflection = RequestAllianceRacePersonOrderLogBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceRacePersonOrderLog::kMemberFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceRacePersonOrderLog::ReplyAllianceRacePersonOrderLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceRacePersonOrderLog)
}

void ReplyAllianceRacePersonOrderLog::InitAsDefaultInstance() {
}

ReplyAllianceRacePersonOrderLog::ReplyAllianceRacePersonOrderLog(const ReplyAllianceRacePersonOrderLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceRacePersonOrderLog)
}

void ReplyAllianceRacePersonOrderLog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceRacePersonOrderLog::~ReplyAllianceRacePersonOrderLog() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceRacePersonOrderLog)
  SharedDtor();
}

void ReplyAllianceRacePersonOrderLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyAllianceRacePersonOrderLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceRacePersonOrderLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceRacePersonOrderLog_descriptor_;
}

const ReplyAllianceRacePersonOrderLog& ReplyAllianceRacePersonOrderLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceRacePersonOrderLog* ReplyAllianceRacePersonOrderLog::default_instance_ = NULL;

ReplyAllianceRacePersonOrderLog* ReplyAllianceRacePersonOrderLog::New() const {
  return new ReplyAllianceRacePersonOrderLog;
}

void ReplyAllianceRacePersonOrderLog::Clear() {
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceRacePersonOrderLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceRacePersonOrderLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoAlliance.AllianceRacePersonOrderLogItem member = 1;
      case 1: {
        if (tag == 10) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_member;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceRacePersonOrderLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceRacePersonOrderLog)
  return false;
#undef DO_
}

void ReplyAllianceRacePersonOrderLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceRacePersonOrderLog)
  // repeated .ProtoAlliance.AllianceRacePersonOrderLogItem member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceRacePersonOrderLog)
}

::google::protobuf::uint8* ReplyAllianceRacePersonOrderLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceRacePersonOrderLog)
  // repeated .ProtoAlliance.AllianceRacePersonOrderLogItem member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceRacePersonOrderLog)
  return target;
}

int ReplyAllianceRacePersonOrderLog::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoAlliance.AllianceRacePersonOrderLogItem member = 1;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceRacePersonOrderLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceRacePersonOrderLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceRacePersonOrderLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceRacePersonOrderLog::MergeFrom(const ReplyAllianceRacePersonOrderLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceRacePersonOrderLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceRacePersonOrderLog::CopyFrom(const ReplyAllianceRacePersonOrderLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceRacePersonOrderLog::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->member())) return false;
  return true;
}

void ReplyAllianceRacePersonOrderLog::Swap(ReplyAllianceRacePersonOrderLog* other) {
  if (other != this) {
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceRacePersonOrderLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceRacePersonOrderLog_descriptor_;
  metadata.reflection = ReplyAllianceRacePersonOrderLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetAllianceRaceGroupPointBC::kAidFieldNumber;
const int SetAllianceRaceGroupPointBC::kPointFieldNumber;
#endif  // !_MSC_VER

SetAllianceRaceGroupPointBC::SetAllianceRaceGroupPointBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.SetAllianceRaceGroupPointBC)
}

void SetAllianceRaceGroupPointBC::InitAsDefaultInstance() {
}

SetAllianceRaceGroupPointBC::SetAllianceRaceGroupPointBC(const SetAllianceRaceGroupPointBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.SetAllianceRaceGroupPointBC)
}

void SetAllianceRaceGroupPointBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetAllianceRaceGroupPointBC::~SetAllianceRaceGroupPointBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.SetAllianceRaceGroupPointBC)
  SharedDtor();
}

void SetAllianceRaceGroupPointBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetAllianceRaceGroupPointBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAllianceRaceGroupPointBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetAllianceRaceGroupPointBC_descriptor_;
}

const SetAllianceRaceGroupPointBC& SetAllianceRaceGroupPointBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

SetAllianceRaceGroupPointBC* SetAllianceRaceGroupPointBC::default_instance_ = NULL;

SetAllianceRaceGroupPointBC* SetAllianceRaceGroupPointBC::New() const {
  return new SetAllianceRaceGroupPointBC;
}

void SetAllianceRaceGroupPointBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetAllianceRaceGroupPointBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, point_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetAllianceRaceGroupPointBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.SetAllianceRaceGroupPointBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // required uint32 point = 2;
      case 2: {
        if (tag == 16) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.SetAllianceRaceGroupPointBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.SetAllianceRaceGroupPointBC)
  return false;
#undef DO_
}

void SetAllianceRaceGroupPointBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.SetAllianceRaceGroupPointBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.SetAllianceRaceGroupPointBC)
}

::google::protobuf::uint8* SetAllianceRaceGroupPointBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.SetAllianceRaceGroupPointBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.SetAllianceRaceGroupPointBC)
  return target;
}

int SetAllianceRaceGroupPointBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAllianceRaceGroupPointBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetAllianceRaceGroupPointBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetAllianceRaceGroupPointBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetAllianceRaceGroupPointBC::MergeFrom(const SetAllianceRaceGroupPointBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetAllianceRaceGroupPointBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAllianceRaceGroupPointBC::CopyFrom(const SetAllianceRaceGroupPointBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAllianceRaceGroupPointBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetAllianceRaceGroupPointBC::Swap(SetAllianceRaceGroupPointBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetAllianceRaceGroupPointBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetAllianceRaceGroupPointBC_descriptor_;
  metadata.reflection = SetAllianceRaceGroupPointBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceRaceGroupMember::kAidFieldNumber;
const int AllianceRaceGroupMember::kPointFieldNumber;
const int AllianceRaceGroupMember::kCountFieldNumber;
#endif  // !_MSC_VER

AllianceRaceGroupMember::AllianceRaceGroupMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.AllianceRaceGroupMember)
}

void AllianceRaceGroupMember::InitAsDefaultInstance() {
}

AllianceRaceGroupMember::AllianceRaceGroupMember(const AllianceRaceGroupMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.AllianceRaceGroupMember)
}

void AllianceRaceGroupMember::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  point_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceRaceGroupMember::~AllianceRaceGroupMember() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.AllianceRaceGroupMember)
  SharedDtor();
}

void AllianceRaceGroupMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceRaceGroupMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceRaceGroupMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceRaceGroupMember_descriptor_;
}

const AllianceRaceGroupMember& AllianceRaceGroupMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

AllianceRaceGroupMember* AllianceRaceGroupMember::default_instance_ = NULL;

AllianceRaceGroupMember* AllianceRaceGroupMember::New() const {
  return new AllianceRaceGroupMember;
}

void AllianceRaceGroupMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllianceRaceGroupMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceRaceGroupMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.AllianceRaceGroupMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // required uint32 point = 2;
      case 2: {
        if (tag == 16) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.AllianceRaceGroupMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.AllianceRaceGroupMember)
  return false;
#undef DO_
}

void AllianceRaceGroupMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.AllianceRaceGroupMember)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.AllianceRaceGroupMember)
}

::google::protobuf::uint8* AllianceRaceGroupMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.AllianceRaceGroupMember)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.AllianceRaceGroupMember)
  return target;
}

int AllianceRaceGroupMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceRaceGroupMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceRaceGroupMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceRaceGroupMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceRaceGroupMember::MergeFrom(const AllianceRaceGroupMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceRaceGroupMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceRaceGroupMember::CopyFrom(const AllianceRaceGroupMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceRaceGroupMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AllianceRaceGroupMember::Swap(AllianceRaceGroupMember* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(point_, other->point_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceRaceGroupMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceRaceGroupMember_descriptor_;
  metadata.reflection = AllianceRaceGroupMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestAllianceRaceGroupMember::RequestAllianceRaceGroupMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceGroupMember)
}

void RequestAllianceRaceGroupMember::InitAsDefaultInstance() {
}

RequestAllianceRaceGroupMember::RequestAllianceRaceGroupMember(const RequestAllianceRaceGroupMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceGroupMember)
}

void RequestAllianceRaceGroupMember::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceGroupMember::~RequestAllianceRaceGroupMember() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceGroupMember)
  SharedDtor();
}

void RequestAllianceRaceGroupMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceGroupMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceGroupMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceGroupMember_descriptor_;
}

const RequestAllianceRaceGroupMember& RequestAllianceRaceGroupMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceGroupMember* RequestAllianceRaceGroupMember::default_instance_ = NULL;

RequestAllianceRaceGroupMember* RequestAllianceRaceGroupMember::New() const {
  return new RequestAllianceRaceGroupMember;
}

void RequestAllianceRaceGroupMember::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceGroupMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceGroupMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceGroupMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceGroupMember)
  return false;
#undef DO_
}

void RequestAllianceRaceGroupMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceGroupMember)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceGroupMember)
}

::google::protobuf::uint8* RequestAllianceRaceGroupMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceGroupMember)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceGroupMember)
  return target;
}

int RequestAllianceRaceGroupMember::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceGroupMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceGroupMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceGroupMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceGroupMember::MergeFrom(const RequestAllianceRaceGroupMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceGroupMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceGroupMember::CopyFrom(const RequestAllianceRaceGroupMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceGroupMember::IsInitialized() const {

  return true;
}

void RequestAllianceRaceGroupMember::Swap(RequestAllianceRaceGroupMember* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceGroupMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceGroupMember_descriptor_;
  metadata.reflection = RequestAllianceRaceGroupMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAllianceRaceGroupMemberBC::kAidFieldNumber;
const int RequestAllianceRaceGroupMemberBC::kUidFieldNumber;
#endif  // !_MSC_VER

RequestAllianceRaceGroupMemberBC::RequestAllianceRaceGroupMemberBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.RequestAllianceRaceGroupMemberBC)
}

void RequestAllianceRaceGroupMemberBC::InitAsDefaultInstance() {
}

RequestAllianceRaceGroupMemberBC::RequestAllianceRaceGroupMemberBC(const RequestAllianceRaceGroupMemberBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.RequestAllianceRaceGroupMemberBC)
}

void RequestAllianceRaceGroupMemberBC::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAllianceRaceGroupMemberBC::~RequestAllianceRaceGroupMemberBC() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.RequestAllianceRaceGroupMemberBC)
  SharedDtor();
}

void RequestAllianceRaceGroupMemberBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAllianceRaceGroupMemberBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAllianceRaceGroupMemberBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAllianceRaceGroupMemberBC_descriptor_;
}

const RequestAllianceRaceGroupMemberBC& RequestAllianceRaceGroupMemberBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

RequestAllianceRaceGroupMemberBC* RequestAllianceRaceGroupMemberBC::default_instance_ = NULL;

RequestAllianceRaceGroupMemberBC* RequestAllianceRaceGroupMemberBC::New() const {
  return new RequestAllianceRaceGroupMemberBC;
}

void RequestAllianceRaceGroupMemberBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestAllianceRaceGroupMemberBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAllianceRaceGroupMemberBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.RequestAllianceRaceGroupMemberBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.RequestAllianceRaceGroupMemberBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.RequestAllianceRaceGroupMemberBC)
  return false;
#undef DO_
}

void RequestAllianceRaceGroupMemberBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.RequestAllianceRaceGroupMemberBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.RequestAllianceRaceGroupMemberBC)
}

::google::protobuf::uint8* RequestAllianceRaceGroupMemberBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.RequestAllianceRaceGroupMemberBC)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.RequestAllianceRaceGroupMemberBC)
  return target;
}

int RequestAllianceRaceGroupMemberBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAllianceRaceGroupMemberBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAllianceRaceGroupMemberBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAllianceRaceGroupMemberBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAllianceRaceGroupMemberBC::MergeFrom(const RequestAllianceRaceGroupMemberBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAllianceRaceGroupMemberBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAllianceRaceGroupMemberBC::CopyFrom(const RequestAllianceRaceGroupMemberBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAllianceRaceGroupMemberBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RequestAllianceRaceGroupMemberBC::Swap(RequestAllianceRaceGroupMemberBC* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAllianceRaceGroupMemberBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAllianceRaceGroupMemberBC_descriptor_;
  metadata.reflection = RequestAllianceRaceGroupMemberBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAllianceRaceGroupMember::kMemberFieldNumber;
#endif  // !_MSC_VER

ReplyAllianceRaceGroupMember::ReplyAllianceRaceGroupMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAlliance.ReplyAllianceRaceGroupMember)
}

void ReplyAllianceRaceGroupMember::InitAsDefaultInstance() {
}

ReplyAllianceRaceGroupMember::ReplyAllianceRaceGroupMember(const ReplyAllianceRaceGroupMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAlliance.ReplyAllianceRaceGroupMember)
}

void ReplyAllianceRaceGroupMember::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAllianceRaceGroupMember::~ReplyAllianceRaceGroupMember() {
  // @@protoc_insertion_point(destructor:ProtoAlliance.ReplyAllianceRaceGroupMember)
  SharedDtor();
}

void ReplyAllianceRaceGroupMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyAllianceRaceGroupMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAllianceRaceGroupMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAllianceRaceGroupMember_descriptor_;
}

const ReplyAllianceRaceGroupMember& ReplyAllianceRaceGroupMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAlliance_2eproto();
  return *default_instance_;
}

ReplyAllianceRaceGroupMember* ReplyAllianceRaceGroupMember::default_instance_ = NULL;

ReplyAllianceRaceGroupMember* ReplyAllianceRaceGroupMember::New() const {
  return new ReplyAllianceRaceGroupMember;
}

void ReplyAllianceRaceGroupMember::Clear() {
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAllianceRaceGroupMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAlliance.ReplyAllianceRaceGroupMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoAlliance.AllianceRaceGroupMember member = 1;
      case 1: {
        if (tag == 10) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_member;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAlliance.ReplyAllianceRaceGroupMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAlliance.ReplyAllianceRaceGroupMember)
  return false;
#undef DO_
}

void ReplyAllianceRaceGroupMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAlliance.ReplyAllianceRaceGroupMember)
  // repeated .ProtoAlliance.AllianceRaceGroupMember member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAlliance.ReplyAllianceRaceGroupMember)
}

::google::protobuf::uint8* ReplyAllianceRaceGroupMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAlliance.ReplyAllianceRaceGroupMember)
  // repeated .ProtoAlliance.AllianceRaceGroupMember member = 1;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAlliance.ReplyAllianceRaceGroupMember)
  return target;
}

int ReplyAllianceRaceGroupMember::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoAlliance.AllianceRaceGroupMember member = 1;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAllianceRaceGroupMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAllianceRaceGroupMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAllianceRaceGroupMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAllianceRaceGroupMember::MergeFrom(const ReplyAllianceRaceGroupMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAllianceRaceGroupMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAllianceRaceGroupMember::CopyFrom(const ReplyAllianceRaceGroupMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAllianceRaceGroupMember::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->member())) return false;
  return true;
}

void ReplyAllianceRaceGroupMember::Swap(ReplyAllianceRaceGroupMember* other) {
  if (other != this) {
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAllianceRaceGroupMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAllianceRaceGroupMember_descriptor_;
  metadata.reflection = ReplyAllianceRaceGroupMember_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoAlliance

// @@protoc_insertion_point(global_scope)
