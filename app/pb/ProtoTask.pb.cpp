// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoTask.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoTask.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoTask {

namespace {

const ::google::protobuf::Descriptor* TaskCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTaskResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTaskResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardTaskResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardTaskResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushComplteTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushComplteTask_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoTask_2eproto() {
  protobuf_AddDesc_ProtoTask_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoTask.proto");
  GOOGLE_CHECK(file != NULL);
  TaskCPP_descriptor_ = file->message_type(0);
  static const int TaskCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, curtaskvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, curtaskstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, rewardstatus_),
  };
  TaskCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskCPP_descriptor_,
      TaskCPP::default_instance_,
      TaskCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskCPP));
  GetTaskReq_descriptor_ = file->message_type(1);
  static const int GetTaskReq_offsets_[1] = {
  };
  GetTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTaskReq_descriptor_,
      GetTaskReq::default_instance_,
      GetTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTaskReq));
  GetTaskResp_descriptor_ = file->message_type(2);
  static const int GetTaskResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTaskResp, task_),
  };
  GetTaskResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTaskResp_descriptor_,
      GetTaskResp::default_instance_,
      GetTaskResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTaskResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTaskResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTaskResp));
  RewardTaskReq_descriptor_ = file->message_type(3);
  static const int RewardTaskReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardTaskReq, id_),
  };
  RewardTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardTaskReq_descriptor_,
      RewardTaskReq::default_instance_,
      RewardTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardTaskReq));
  RewardTaskResp_descriptor_ = file->message_type(4);
  static const int RewardTaskResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardTaskResp, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardTaskResp, commons_),
  };
  RewardTaskResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardTaskResp_descriptor_,
      RewardTaskResp::default_instance_,
      RewardTaskResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardTaskResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardTaskResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardTaskResp));
  PushComplteTask_descriptor_ = file->message_type(5);
  static const int PushComplteTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushComplteTask, task_),
  };
  PushComplteTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushComplteTask_descriptor_,
      PushComplteTask::default_instance_,
      PushComplteTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushComplteTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushComplteTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushComplteTask));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoTask_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskCPP_descriptor_, &TaskCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTaskReq_descriptor_, &GetTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTaskResp_descriptor_, &GetTaskResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardTaskReq_descriptor_, &RewardTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardTaskResp_descriptor_, &RewardTaskResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushComplteTask_descriptor_, &PushComplteTask::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoTask_2eproto() {
  delete TaskCPP::default_instance_;
  delete TaskCPP_reflection_;
  delete GetTaskReq::default_instance_;
  delete GetTaskReq_reflection_;
  delete GetTaskResp::default_instance_;
  delete GetTaskResp_reflection_;
  delete RewardTaskReq::default_instance_;
  delete RewardTaskReq_reflection_;
  delete RewardTaskResp::default_instance_;
  delete RewardTaskResp_reflection_;
  delete PushComplteTask::default_instance_;
  delete PushComplteTask_reflection_;
}

void protobuf_AddDesc_ProtoTask_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ProtoTask.proto\022\tProtoTask\032\020DataCommon"
    ".proto\"V\n\007TaskCPP\022\n\n\002id\030\001 \002(\r\022\024\n\014curtask"
    "value\030\002 \002(\r\022\023\n\013curtaskstar\030\003 \002(\r\022\024\n\014rewa"
    "rdstatus\030\004 \002(\r\"\014\n\nGetTaskReq\"/\n\013GetTaskR"
    "esp\022 \n\004task\030\001 \003(\0132\022.ProtoTask.TaskCPP\"\033\n"
    "\rRewardTaskReq\022\n\n\002id\030\001 \002(\r\"_\n\016RewardTask"
    "Resp\022 \n\004task\030\001 \002(\0132\022.ProtoTask.TaskCPP\022+"
    "\n\007commons\030\002 \002(\0132\032.DataCommon.CommonItems"
    "CPP\"3\n\017PushComplteTask\022 \n\004task\030\001 \002(\0132\022.P"
    "rotoTask.TaskCPP", 376);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoTask.proto", &protobuf_RegisterTypes);
  TaskCPP::default_instance_ = new TaskCPP();
  GetTaskReq::default_instance_ = new GetTaskReq();
  GetTaskResp::default_instance_ = new GetTaskResp();
  RewardTaskReq::default_instance_ = new RewardTaskReq();
  RewardTaskResp::default_instance_ = new RewardTaskResp();
  PushComplteTask::default_instance_ = new PushComplteTask();
  TaskCPP::default_instance_->InitAsDefaultInstance();
  GetTaskReq::default_instance_->InitAsDefaultInstance();
  GetTaskResp::default_instance_->InitAsDefaultInstance();
  RewardTaskReq::default_instance_->InitAsDefaultInstance();
  RewardTaskResp::default_instance_->InitAsDefaultInstance();
  PushComplteTask::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoTask_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoTask_2eproto {
  StaticDescriptorInitializer_ProtoTask_2eproto() {
    protobuf_AddDesc_ProtoTask_2eproto();
  }
} static_descriptor_initializer_ProtoTask_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TaskCPP::kIdFieldNumber;
const int TaskCPP::kCurtaskvalueFieldNumber;
const int TaskCPP::kCurtaskstarFieldNumber;
const int TaskCPP::kRewardstatusFieldNumber;
#endif  // !_MSC_VER

TaskCPP::TaskCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTask.TaskCPP)
}

void TaskCPP::InitAsDefaultInstance() {
}

TaskCPP::TaskCPP(const TaskCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoTask.TaskCPP)
}

void TaskCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  curtaskvalue_ = 0u;
  curtaskstar_ = 0u;
  rewardstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskCPP::~TaskCPP() {
  // @@protoc_insertion_point(destructor:ProtoTask.TaskCPP)
  SharedDtor();
}

void TaskCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskCPP_descriptor_;
}

const TaskCPP& TaskCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTask_2eproto();
  return *default_instance_;
}

TaskCPP* TaskCPP::default_instance_ = NULL;

TaskCPP* TaskCPP::New() const {
  return new TaskCPP;
}

void TaskCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaskCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, rewardstatus_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTask.TaskCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curtaskvalue;
        break;
      }

      // required uint32 curtaskvalue = 2;
      case 2: {
        if (tag == 16) {
         parse_curtaskvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtaskvalue_)));
          set_has_curtaskvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curtaskstar;
        break;
      }

      // required uint32 curtaskstar = 3;
      case 3: {
        if (tag == 24) {
         parse_curtaskstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtaskstar_)));
          set_has_curtaskstar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rewardstatus;
        break;
      }

      // required uint32 rewardstatus = 4;
      case 4: {
        if (tag == 32) {
         parse_rewardstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardstatus_)));
          set_has_rewardstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTask.TaskCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTask.TaskCPP)
  return false;
#undef DO_
}

void TaskCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTask.TaskCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 curtaskvalue = 2;
  if (has_curtaskvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curtaskvalue(), output);
  }

  // required uint32 curtaskstar = 3;
  if (has_curtaskstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curtaskstar(), output);
  }

  // required uint32 rewardstatus = 4;
  if (has_rewardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rewardstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTask.TaskCPP)
}

::google::protobuf::uint8* TaskCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTask.TaskCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 curtaskvalue = 2;
  if (has_curtaskvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curtaskvalue(), target);
  }

  // required uint32 curtaskstar = 3;
  if (has_curtaskstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curtaskstar(), target);
  }

  // required uint32 rewardstatus = 4;
  if (has_rewardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rewardstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTask.TaskCPP)
  return target;
}

int TaskCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 curtaskvalue = 2;
    if (has_curtaskvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtaskvalue());
    }

    // required uint32 curtaskstar = 3;
    if (has_curtaskstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtaskstar());
    }

    // required uint32 rewardstatus = 4;
    if (has_rewardstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskCPP::MergeFrom(const TaskCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_curtaskvalue()) {
      set_curtaskvalue(from.curtaskvalue());
    }
    if (from.has_curtaskstar()) {
      set_curtaskstar(from.curtaskstar());
    }
    if (from.has_rewardstatus()) {
      set_rewardstatus(from.rewardstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskCPP::CopyFrom(const TaskCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TaskCPP::Swap(TaskCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(curtaskvalue_, other->curtaskvalue_);
    std::swap(curtaskstar_, other->curtaskstar_);
    std::swap(rewardstatus_, other->rewardstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskCPP_descriptor_;
  metadata.reflection = TaskCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetTaskReq::GetTaskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTask.GetTaskReq)
}

void GetTaskReq::InitAsDefaultInstance() {
}

GetTaskReq::GetTaskReq(const GetTaskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoTask.GetTaskReq)
}

void GetTaskReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTaskReq::~GetTaskReq() {
  // @@protoc_insertion_point(destructor:ProtoTask.GetTaskReq)
  SharedDtor();
}

void GetTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTaskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTaskReq_descriptor_;
}

const GetTaskReq& GetTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTask_2eproto();
  return *default_instance_;
}

GetTaskReq* GetTaskReq::default_instance_ = NULL;

GetTaskReq* GetTaskReq::New() const {
  return new GetTaskReq;
}

void GetTaskReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTask.GetTaskReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTask.GetTaskReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTask.GetTaskReq)
  return false;
#undef DO_
}

void GetTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTask.GetTaskReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTask.GetTaskReq)
}

::google::protobuf::uint8* GetTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTask.GetTaskReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTask.GetTaskReq)
  return target;
}

int GetTaskReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTaskReq::MergeFrom(const GetTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTaskReq::CopyFrom(const GetTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskReq::IsInitialized() const {

  return true;
}

void GetTaskReq::Swap(GetTaskReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTaskReq_descriptor_;
  metadata.reflection = GetTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTaskResp::kTaskFieldNumber;
#endif  // !_MSC_VER

GetTaskResp::GetTaskResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTask.GetTaskResp)
}

void GetTaskResp::InitAsDefaultInstance() {
}

GetTaskResp::GetTaskResp(const GetTaskResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoTask.GetTaskResp)
}

void GetTaskResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTaskResp::~GetTaskResp() {
  // @@protoc_insertion_point(destructor:ProtoTask.GetTaskResp)
  SharedDtor();
}

void GetTaskResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTaskResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTaskResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTaskResp_descriptor_;
}

const GetTaskResp& GetTaskResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTask_2eproto();
  return *default_instance_;
}

GetTaskResp* GetTaskResp::default_instance_ = NULL;

GetTaskResp* GetTaskResp::New() const {
  return new GetTaskResp;
}

void GetTaskResp::Clear() {
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTaskResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTask.GetTaskResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoTask.TaskCPP task = 1;
      case 1: {
        if (tag == 10) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_task;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTask.GetTaskResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTask.GetTaskResp)
  return false;
#undef DO_
}

void GetTaskResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTask.GetTaskResp)
  // repeated .ProtoTask.TaskCPP task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTask.GetTaskResp)
}

::google::protobuf::uint8* GetTaskResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTask.GetTaskResp)
  // repeated .ProtoTask.TaskCPP task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTask.GetTaskResp)
  return target;
}

int GetTaskResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoTask.TaskCPP task = 1;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTaskResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTaskResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTaskResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTaskResp::MergeFrom(const GetTaskResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTaskResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTaskResp::CopyFrom(const GetTaskResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->task())) return false;
  return true;
}

void GetTaskResp::Swap(GetTaskResp* other) {
  if (other != this) {
    task_.Swap(&other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTaskResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTaskResp_descriptor_;
  metadata.reflection = GetTaskResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardTaskReq::kIdFieldNumber;
#endif  // !_MSC_VER

RewardTaskReq::RewardTaskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTask.RewardTaskReq)
}

void RewardTaskReq::InitAsDefaultInstance() {
}

RewardTaskReq::RewardTaskReq(const RewardTaskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoTask.RewardTaskReq)
}

void RewardTaskReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardTaskReq::~RewardTaskReq() {
  // @@protoc_insertion_point(destructor:ProtoTask.RewardTaskReq)
  SharedDtor();
}

void RewardTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardTaskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardTaskReq_descriptor_;
}

const RewardTaskReq& RewardTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTask_2eproto();
  return *default_instance_;
}

RewardTaskReq* RewardTaskReq::default_instance_ = NULL;

RewardTaskReq* RewardTaskReq::New() const {
  return new RewardTaskReq;
}

void RewardTaskReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTask.RewardTaskReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTask.RewardTaskReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTask.RewardTaskReq)
  return false;
#undef DO_
}

void RewardTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTask.RewardTaskReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTask.RewardTaskReq)
}

::google::protobuf::uint8* RewardTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTask.RewardTaskReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTask.RewardTaskReq)
  return target;
}

int RewardTaskReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardTaskReq::MergeFrom(const RewardTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardTaskReq::CopyFrom(const RewardTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardTaskReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RewardTaskReq::Swap(RewardTaskReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardTaskReq_descriptor_;
  metadata.reflection = RewardTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardTaskResp::kTaskFieldNumber;
const int RewardTaskResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

RewardTaskResp::RewardTaskResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTask.RewardTaskResp)
}

void RewardTaskResp::InitAsDefaultInstance() {
  task_ = const_cast< ::ProtoTask::TaskCPP*>(&::ProtoTask::TaskCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

RewardTaskResp::RewardTaskResp(const RewardTaskResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoTask.RewardTaskResp)
}

void RewardTaskResp::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardTaskResp::~RewardTaskResp() {
  // @@protoc_insertion_point(destructor:ProtoTask.RewardTaskResp)
  SharedDtor();
}

void RewardTaskResp::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
    delete commons_;
  }
}

void RewardTaskResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardTaskResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardTaskResp_descriptor_;
}

const RewardTaskResp& RewardTaskResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTask_2eproto();
  return *default_instance_;
}

RewardTaskResp* RewardTaskResp::default_instance_ = NULL;

RewardTaskResp* RewardTaskResp::New() const {
  return new RewardTaskResp;
}

void RewardTaskResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_task()) {
      if (task_ != NULL) task_->::ProtoTask::TaskCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardTaskResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTask.RewardTaskResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoTask.TaskCPP task = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTask.RewardTaskResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTask.RewardTaskResp)
  return false;
#undef DO_
}

void RewardTaskResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTask.RewardTaskResp)
  // required .ProtoTask.TaskCPP task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTask.RewardTaskResp)
}

::google::protobuf::uint8* RewardTaskResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTask.RewardTaskResp)
  // required .ProtoTask.TaskCPP task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTask.RewardTaskResp)
  return target;
}

int RewardTaskResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoTask.TaskCPP task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardTaskResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardTaskResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardTaskResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardTaskResp::MergeFrom(const RewardTaskResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::ProtoTask::TaskCPP::MergeFrom(from.task());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardTaskResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardTaskResp::CopyFrom(const RewardTaskResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardTaskResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void RewardTaskResp::Swap(RewardTaskResp* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardTaskResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardTaskResp_descriptor_;
  metadata.reflection = RewardTaskResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushComplteTask::kTaskFieldNumber;
#endif  // !_MSC_VER

PushComplteTask::PushComplteTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTask.PushComplteTask)
}

void PushComplteTask::InitAsDefaultInstance() {
  task_ = const_cast< ::ProtoTask::TaskCPP*>(&::ProtoTask::TaskCPP::default_instance());
}

PushComplteTask::PushComplteTask(const PushComplteTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoTask.PushComplteTask)
}

void PushComplteTask::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushComplteTask::~PushComplteTask() {
  // @@protoc_insertion_point(destructor:ProtoTask.PushComplteTask)
  SharedDtor();
}

void PushComplteTask::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void PushComplteTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushComplteTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushComplteTask_descriptor_;
}

const PushComplteTask& PushComplteTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTask_2eproto();
  return *default_instance_;
}

PushComplteTask* PushComplteTask::default_instance_ = NULL;

PushComplteTask* PushComplteTask::New() const {
  return new PushComplteTask;
}

void PushComplteTask::Clear() {
  if (has_task()) {
    if (task_ != NULL) task_->::ProtoTask::TaskCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushComplteTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTask.PushComplteTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoTask.TaskCPP task = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTask.PushComplteTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTask.PushComplteTask)
  return false;
#undef DO_
}

void PushComplteTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTask.PushComplteTask)
  // required .ProtoTask.TaskCPP task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTask.PushComplteTask)
}

::google::protobuf::uint8* PushComplteTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTask.PushComplteTask)
  // required .ProtoTask.TaskCPP task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTask.PushComplteTask)
  return target;
}

int PushComplteTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoTask.TaskCPP task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushComplteTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushComplteTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushComplteTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushComplteTask::MergeFrom(const PushComplteTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::ProtoTask::TaskCPP::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushComplteTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushComplteTask::CopyFrom(const PushComplteTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushComplteTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  return true;
}

void PushComplteTask::Swap(PushComplteTask* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushComplteTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushComplteTask_descriptor_;
  metadata.reflection = PushComplteTask_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoTask

// @@protoc_insertion_point(global_scope)
