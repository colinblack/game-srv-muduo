// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoFriendlyTree.proto

#ifndef PROTOBUF_ProtoFriendlyTree_2eproto__INCLUDED
#define PROTOBUF_ProtoFriendlyTree_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ProtoFriendlyTree {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoFriendlyTree_2eproto();
void protobuf_AssignDesc_ProtoFriendlyTree_2eproto();
void protobuf_ShutdownFile_ProtoFriendlyTree_2eproto();

class FriendlyTreeBasicCPP;
class FriendlyTreeStatusCPP;
class FriendlyTreeCPP;
class GetFriendlyTreeReq;
class GetFriendlyTreeResp;
class WaterFriendlyTreeReq;
class WaterFriendlyTreeResp;
class CSWaterFriendlyTreeReq;
class CSWaterFriendlyTreeResp;
class RewardFriendlyTreeReq;
class RewardFriendlyTreeResp;
class PushFriendlyTreeMsg;

// ===================================================================

class FriendlyTreeBasicCPP : public ::google::protobuf::Message {
 public:
  FriendlyTreeBasicCPP();
  virtual ~FriendlyTreeBasicCPP();

  FriendlyTreeBasicCPP(const FriendlyTreeBasicCPP& from);

  inline FriendlyTreeBasicCPP& operator=(const FriendlyTreeBasicCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendlyTreeBasicCPP& default_instance();

  void Swap(FriendlyTreeBasicCPP* other);

  // implements Message ----------------------------------------------

  FriendlyTreeBasicCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendlyTreeBasicCPP& from);
  void MergeFrom(const FriendlyTreeBasicCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 othuid = 2;
  inline bool has_othuid() const;
  inline void clear_othuid();
  static const int kOthuidFieldNumber = 2;
  inline ::google::protobuf::uint32 othuid() const;
  inline void set_othuid(::google::protobuf::uint32 value);

  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes head = 4;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 4;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const void* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // required uint32 ts = 5;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 5;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoFriendlyTree.FriendlyTreeBasicCPP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_othuid();
  inline void clear_has_othuid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 othuid_;
  ::std::string* name_;
  ::std::string* head_;
  ::google::protobuf::uint32 ts_;
  friend void  protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_AssignDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_ShutdownFile_ProtoFriendlyTree_2eproto();

  void InitAsDefaultInstance();
  static FriendlyTreeBasicCPP* default_instance_;
};
// -------------------------------------------------------------------

class FriendlyTreeStatusCPP : public ::google::protobuf::Message {
 public:
  FriendlyTreeStatusCPP();
  virtual ~FriendlyTreeStatusCPP();

  FriendlyTreeStatusCPP(const FriendlyTreeStatusCPP& from);

  inline FriendlyTreeStatusCPP& operator=(const FriendlyTreeStatusCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendlyTreeStatusCPP& default_instance();

  void Swap(FriendlyTreeStatusCPP* other);

  // implements Message ----------------------------------------------

  FriendlyTreeStatusCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendlyTreeStatusCPP& from);
  void MergeFrom(const FriendlyTreeStatusCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 treestatus = 1;
  inline bool has_treestatus() const;
  inline void clear_treestatus();
  static const int kTreestatusFieldNumber = 1;
  inline ::google::protobuf::uint32 treestatus() const;
  inline void set_treestatus(::google::protobuf::uint32 value);

  // optional uint32 nextwaterts = 2;
  inline bool has_nextwaterts() const;
  inline void clear_nextwaterts();
  static const int kNextwatertsFieldNumber = 2;
  inline ::google::protobuf::uint32 nextwaterts() const;
  inline void set_nextwaterts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoFriendlyTree.FriendlyTreeStatusCPP)
 private:
  inline void set_has_treestatus();
  inline void clear_has_treestatus();
  inline void set_has_nextwaterts();
  inline void clear_has_nextwaterts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 treestatus_;
  ::google::protobuf::uint32 nextwaterts_;
  friend void  protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_AssignDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_ShutdownFile_ProtoFriendlyTree_2eproto();

  void InitAsDefaultInstance();
  static FriendlyTreeStatusCPP* default_instance_;
};
// -------------------------------------------------------------------

class FriendlyTreeCPP : public ::google::protobuf::Message {
 public:
  FriendlyTreeCPP();
  virtual ~FriendlyTreeCPP();

  FriendlyTreeCPP(const FriendlyTreeCPP& from);

  inline FriendlyTreeCPP& operator=(const FriendlyTreeCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendlyTreeCPP& default_instance();

  void Swap(FriendlyTreeCPP* other);

  // implements Message ----------------------------------------------

  FriendlyTreeCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendlyTreeCPP& from);
  void MergeFrom(const FriendlyTreeCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  inline int basictreeinfo_size() const;
  inline void clear_basictreeinfo();
  static const int kBasictreeinfoFieldNumber = 1;
  inline const ::ProtoFriendlyTree::FriendlyTreeBasicCPP& basictreeinfo(int index) const;
  inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* mutable_basictreeinfo(int index);
  inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* add_basictreeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >&
      basictreeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >*
      mutable_basictreeinfo();

  // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  inline bool has_statustreeinfo() const;
  inline void clear_statustreeinfo();
  static const int kStatustreeinfoFieldNumber = 2;
  inline const ::ProtoFriendlyTree::FriendlyTreeStatusCPP& statustreeinfo() const;
  inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* mutable_statustreeinfo();
  inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* release_statustreeinfo();
  inline void set_allocated_statustreeinfo(::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo);

  // @@protoc_insertion_point(class_scope:ProtoFriendlyTree.FriendlyTreeCPP)
 private:
  inline void set_has_statustreeinfo();
  inline void clear_has_statustreeinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP > basictreeinfo_;
  ::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo_;
  friend void  protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_AssignDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_ShutdownFile_ProtoFriendlyTree_2eproto();

  void InitAsDefaultInstance();
  static FriendlyTreeCPP* default_instance_;
};
// -------------------------------------------------------------------

class GetFriendlyTreeReq : public ::google::protobuf::Message {
 public:
  GetFriendlyTreeReq();
  virtual ~GetFriendlyTreeReq();

  GetFriendlyTreeReq(const GetFriendlyTreeReq& from);

  inline GetFriendlyTreeReq& operator=(const GetFriendlyTreeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFriendlyTreeReq& default_instance();

  void Swap(GetFriendlyTreeReq* other);

  // implements Message ----------------------------------------------

  GetFriendlyTreeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFriendlyTreeReq& from);
  void MergeFrom(const GetFriendlyTreeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoFriendlyTree.GetFriendlyTreeReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_AssignDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_ShutdownFile_ProtoFriendlyTree_2eproto();

  void InitAsDefaultInstance();
  static GetFriendlyTreeReq* default_instance_;
};
// -------------------------------------------------------------------

class GetFriendlyTreeResp : public ::google::protobuf::Message {
 public:
  GetFriendlyTreeResp();
  virtual ~GetFriendlyTreeResp();

  GetFriendlyTreeResp(const GetFriendlyTreeResp& from);

  inline GetFriendlyTreeResp& operator=(const GetFriendlyTreeResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFriendlyTreeResp& default_instance();

  void Swap(GetFriendlyTreeResp* other);

  // implements Message ----------------------------------------------

  GetFriendlyTreeResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFriendlyTreeResp& from);
  void MergeFrom(const GetFriendlyTreeResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  inline int basictreeinfo_size() const;
  inline void clear_basictreeinfo();
  static const int kBasictreeinfoFieldNumber = 1;
  inline const ::ProtoFriendlyTree::FriendlyTreeBasicCPP& basictreeinfo(int index) const;
  inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* mutable_basictreeinfo(int index);
  inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* add_basictreeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >&
      basictreeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >*
      mutable_basictreeinfo();

  // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  inline bool has_statustreeinfo() const;
  inline void clear_statustreeinfo();
  static const int kStatustreeinfoFieldNumber = 2;
  inline const ::ProtoFriendlyTree::FriendlyTreeStatusCPP& statustreeinfo() const;
  inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* mutable_statustreeinfo();
  inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* release_statustreeinfo();
  inline void set_allocated_statustreeinfo(::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo);

  // @@protoc_insertion_point(class_scope:ProtoFriendlyTree.GetFriendlyTreeResp)
 private:
  inline void set_has_statustreeinfo();
  inline void clear_has_statustreeinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP > basictreeinfo_;
  ::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo_;
  friend void  protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_AssignDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_ShutdownFile_ProtoFriendlyTree_2eproto();

  void InitAsDefaultInstance();
  static GetFriendlyTreeResp* default_instance_;
};
// -------------------------------------------------------------------

class WaterFriendlyTreeReq : public ::google::protobuf::Message {
 public:
  WaterFriendlyTreeReq();
  virtual ~WaterFriendlyTreeReq();

  WaterFriendlyTreeReq(const WaterFriendlyTreeReq& from);

  inline WaterFriendlyTreeReq& operator=(const WaterFriendlyTreeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WaterFriendlyTreeReq& default_instance();

  void Swap(WaterFriendlyTreeReq* other);

  // implements Message ----------------------------------------------

  WaterFriendlyTreeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WaterFriendlyTreeReq& from);
  void MergeFrom(const WaterFriendlyTreeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 othuid = 1;
  inline bool has_othuid() const;
  inline void clear_othuid();
  static const int kOthuidFieldNumber = 1;
  inline ::google::protobuf::uint32 othuid() const;
  inline void set_othuid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoFriendlyTree.WaterFriendlyTreeReq)
 private:
  inline void set_has_othuid();
  inline void clear_has_othuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 othuid_;
  friend void  protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_AssignDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_ShutdownFile_ProtoFriendlyTree_2eproto();

  void InitAsDefaultInstance();
  static WaterFriendlyTreeReq* default_instance_;
};
// -------------------------------------------------------------------

class WaterFriendlyTreeResp : public ::google::protobuf::Message {
 public:
  WaterFriendlyTreeResp();
  virtual ~WaterFriendlyTreeResp();

  WaterFriendlyTreeResp(const WaterFriendlyTreeResp& from);

  inline WaterFriendlyTreeResp& operator=(const WaterFriendlyTreeResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WaterFriendlyTreeResp& default_instance();

  void Swap(WaterFriendlyTreeResp* other);

  // implements Message ----------------------------------------------

  WaterFriendlyTreeResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WaterFriendlyTreeResp& from);
  void MergeFrom(const WaterFriendlyTreeResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 1;
  inline bool has_statustreeinfo() const;
  inline void clear_statustreeinfo();
  static const int kStatustreeinfoFieldNumber = 1;
  inline const ::ProtoFriendlyTree::FriendlyTreeStatusCPP& statustreeinfo() const;
  inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* mutable_statustreeinfo();
  inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* release_statustreeinfo();
  inline void set_allocated_statustreeinfo(::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo);

  // optional uint32 curfriendlyvalue = 2;
  inline bool has_curfriendlyvalue() const;
  inline void clear_curfriendlyvalue();
  static const int kCurfriendlyvalueFieldNumber = 2;
  inline ::google::protobuf::uint32 curfriendlyvalue() const;
  inline void set_curfriendlyvalue(::google::protobuf::uint32 value);

  // optional .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 3;
  inline bool has_basictreeinfo() const;
  inline void clear_basictreeinfo();
  static const int kBasictreeinfoFieldNumber = 3;
  inline const ::ProtoFriendlyTree::FriendlyTreeBasicCPP& basictreeinfo() const;
  inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* mutable_basictreeinfo();
  inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* release_basictreeinfo();
  inline void set_allocated_basictreeinfo(::ProtoFriendlyTree::FriendlyTreeBasicCPP* basictreeinfo);

  // required uint32 code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 code() const;
  inline void set_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoFriendlyTree.WaterFriendlyTreeResp)
 private:
  inline void set_has_statustreeinfo();
  inline void clear_has_statustreeinfo();
  inline void set_has_curfriendlyvalue();
  inline void clear_has_curfriendlyvalue();
  inline void set_has_basictreeinfo();
  inline void clear_has_basictreeinfo();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo_;
  ::ProtoFriendlyTree::FriendlyTreeBasicCPP* basictreeinfo_;
  ::google::protobuf::uint32 curfriendlyvalue_;
  ::google::protobuf::uint32 code_;
  friend void  protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_AssignDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_ShutdownFile_ProtoFriendlyTree_2eproto();

  void InitAsDefaultInstance();
  static WaterFriendlyTreeResp* default_instance_;
};
// -------------------------------------------------------------------

class CSWaterFriendlyTreeReq : public ::google::protobuf::Message {
 public:
  CSWaterFriendlyTreeReq();
  virtual ~CSWaterFriendlyTreeReq();

  CSWaterFriendlyTreeReq(const CSWaterFriendlyTreeReq& from);

  inline CSWaterFriendlyTreeReq& operator=(const CSWaterFriendlyTreeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSWaterFriendlyTreeReq& default_instance();

  void Swap(CSWaterFriendlyTreeReq* other);

  // implements Message ----------------------------------------------

  CSWaterFriendlyTreeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSWaterFriendlyTreeReq& from);
  void MergeFrom(const CSWaterFriendlyTreeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 myuid = 1;
  inline bool has_myuid() const;
  inline void clear_myuid();
  static const int kMyuidFieldNumber = 1;
  inline ::google::protobuf::uint32 myuid() const;
  inline void set_myuid(::google::protobuf::uint32 value);

  // required bytes myname = 2;
  inline bool has_myname() const;
  inline void clear_myname();
  static const int kMynameFieldNumber = 2;
  inline const ::std::string& myname() const;
  inline void set_myname(const ::std::string& value);
  inline void set_myname(const char* value);
  inline void set_myname(const void* value, size_t size);
  inline ::std::string* mutable_myname();
  inline ::std::string* release_myname();
  inline void set_allocated_myname(::std::string* myname);

  // required bytes myhead = 3;
  inline bool has_myhead() const;
  inline void clear_myhead();
  static const int kMyheadFieldNumber = 3;
  inline const ::std::string& myhead() const;
  inline void set_myhead(const ::std::string& value);
  inline void set_myhead(const char* value);
  inline void set_myhead(const void* value, size_t size);
  inline ::std::string* mutable_myhead();
  inline ::std::string* release_myhead();
  inline void set_allocated_myhead(::std::string* myhead);

  // required uint32 othuid = 4;
  inline bool has_othuid() const;
  inline void clear_othuid();
  static const int kOthuidFieldNumber = 4;
  inline ::google::protobuf::uint32 othuid() const;
  inline void set_othuid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoFriendlyTree.CSWaterFriendlyTreeReq)
 private:
  inline void set_has_myuid();
  inline void clear_has_myuid();
  inline void set_has_myname();
  inline void clear_has_myname();
  inline void set_has_myhead();
  inline void clear_has_myhead();
  inline void set_has_othuid();
  inline void clear_has_othuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* myname_;
  ::google::protobuf::uint32 myuid_;
  ::google::protobuf::uint32 othuid_;
  ::std::string* myhead_;
  friend void  protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_AssignDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_ShutdownFile_ProtoFriendlyTree_2eproto();

  void InitAsDefaultInstance();
  static CSWaterFriendlyTreeReq* default_instance_;
};
// -------------------------------------------------------------------

class CSWaterFriendlyTreeResp : public ::google::protobuf::Message {
 public:
  CSWaterFriendlyTreeResp();
  virtual ~CSWaterFriendlyTreeResp();

  CSWaterFriendlyTreeResp(const CSWaterFriendlyTreeResp& from);

  inline CSWaterFriendlyTreeResp& operator=(const CSWaterFriendlyTreeResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSWaterFriendlyTreeResp& default_instance();

  void Swap(CSWaterFriendlyTreeResp* other);

  // implements Message ----------------------------------------------

  CSWaterFriendlyTreeResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSWaterFriendlyTreeResp& from);
  void MergeFrom(const CSWaterFriendlyTreeResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 myuid = 1;
  inline bool has_myuid() const;
  inline void clear_myuid();
  static const int kMyuidFieldNumber = 1;
  inline ::google::protobuf::uint32 myuid() const;
  inline void set_myuid(::google::protobuf::uint32 value);

  // optional .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  inline bool has_statustreeinfo() const;
  inline void clear_statustreeinfo();
  static const int kStatustreeinfoFieldNumber = 2;
  inline const ::ProtoFriendlyTree::FriendlyTreeStatusCPP& statustreeinfo() const;
  inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* mutable_statustreeinfo();
  inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* release_statustreeinfo();
  inline void set_allocated_statustreeinfo(::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo);

  // optional .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 3;
  inline bool has_basictreeinfo() const;
  inline void clear_basictreeinfo();
  static const int kBasictreeinfoFieldNumber = 3;
  inline const ::ProtoFriendlyTree::FriendlyTreeBasicCPP& basictreeinfo() const;
  inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* mutable_basictreeinfo();
  inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* release_basictreeinfo();
  inline void set_allocated_basictreeinfo(::ProtoFriendlyTree::FriendlyTreeBasicCPP* basictreeinfo);

  // required uint32 code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 code() const;
  inline void set_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoFriendlyTree.CSWaterFriendlyTreeResp)
 private:
  inline void set_has_myuid();
  inline void clear_has_myuid();
  inline void set_has_statustreeinfo();
  inline void clear_has_statustreeinfo();
  inline void set_has_basictreeinfo();
  inline void clear_has_basictreeinfo();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo_;
  ::google::protobuf::uint32 myuid_;
  ::google::protobuf::uint32 code_;
  ::ProtoFriendlyTree::FriendlyTreeBasicCPP* basictreeinfo_;
  friend void  protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_AssignDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_ShutdownFile_ProtoFriendlyTree_2eproto();

  void InitAsDefaultInstance();
  static CSWaterFriendlyTreeResp* default_instance_;
};
// -------------------------------------------------------------------

class RewardFriendlyTreeReq : public ::google::protobuf::Message {
 public:
  RewardFriendlyTreeReq();
  virtual ~RewardFriendlyTreeReq();

  RewardFriendlyTreeReq(const RewardFriendlyTreeReq& from);

  inline RewardFriendlyTreeReq& operator=(const RewardFriendlyTreeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardFriendlyTreeReq& default_instance();

  void Swap(RewardFriendlyTreeReq* other);

  // implements Message ----------------------------------------------

  RewardFriendlyTreeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardFriendlyTreeReq& from);
  void MergeFrom(const RewardFriendlyTreeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoFriendlyTree.RewardFriendlyTreeReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_AssignDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_ShutdownFile_ProtoFriendlyTree_2eproto();

  void InitAsDefaultInstance();
  static RewardFriendlyTreeReq* default_instance_;
};
// -------------------------------------------------------------------

class RewardFriendlyTreeResp : public ::google::protobuf::Message {
 public:
  RewardFriendlyTreeResp();
  virtual ~RewardFriendlyTreeResp();

  RewardFriendlyTreeResp(const RewardFriendlyTreeResp& from);

  inline RewardFriendlyTreeResp& operator=(const RewardFriendlyTreeResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardFriendlyTreeResp& default_instance();

  void Swap(RewardFriendlyTreeResp* other);

  // implements Message ----------------------------------------------

  RewardFriendlyTreeResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardFriendlyTreeResp& from);
  void MergeFrom(const RewardFriendlyTreeResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  inline int basictreeinfo_size() const;
  inline void clear_basictreeinfo();
  static const int kBasictreeinfoFieldNumber = 1;
  inline const ::ProtoFriendlyTree::FriendlyTreeBasicCPP& basictreeinfo(int index) const;
  inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* mutable_basictreeinfo(int index);
  inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* add_basictreeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >&
      basictreeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >*
      mutable_basictreeinfo();

  // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  inline bool has_statustreeinfo() const;
  inline void clear_statustreeinfo();
  static const int kStatustreeinfoFieldNumber = 2;
  inline const ::ProtoFriendlyTree::FriendlyTreeStatusCPP& statustreeinfo() const;
  inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* mutable_statustreeinfo();
  inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* release_statustreeinfo();
  inline void set_allocated_statustreeinfo(::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo);

  // required uint32 friendlyValue = 3;
  inline bool has_friendlyvalue() const;
  inline void clear_friendlyvalue();
  static const int kFriendlyValueFieldNumber = 3;
  inline ::google::protobuf::uint32 friendlyvalue() const;
  inline void set_friendlyvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoFriendlyTree.RewardFriendlyTreeResp)
 private:
  inline void set_has_statustreeinfo();
  inline void clear_has_statustreeinfo();
  inline void set_has_friendlyvalue();
  inline void clear_has_friendlyvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP > basictreeinfo_;
  ::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo_;
  ::google::protobuf::uint32 friendlyvalue_;
  friend void  protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_AssignDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_ShutdownFile_ProtoFriendlyTree_2eproto();

  void InitAsDefaultInstance();
  static RewardFriendlyTreeResp* default_instance_;
};
// -------------------------------------------------------------------

class PushFriendlyTreeMsg : public ::google::protobuf::Message {
 public:
  PushFriendlyTreeMsg();
  virtual ~PushFriendlyTreeMsg();

  PushFriendlyTreeMsg(const PushFriendlyTreeMsg& from);

  inline PushFriendlyTreeMsg& operator=(const PushFriendlyTreeMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushFriendlyTreeMsg& default_instance();

  void Swap(PushFriendlyTreeMsg* other);

  // implements Message ----------------------------------------------

  PushFriendlyTreeMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushFriendlyTreeMsg& from);
  void MergeFrom(const PushFriendlyTreeMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
  inline int basictreeinfo_size() const;
  inline void clear_basictreeinfo();
  static const int kBasictreeinfoFieldNumber = 1;
  inline const ::ProtoFriendlyTree::FriendlyTreeBasicCPP& basictreeinfo(int index) const;
  inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* mutable_basictreeinfo(int index);
  inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* add_basictreeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >&
      basictreeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >*
      mutable_basictreeinfo();

  // required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
  inline bool has_statustreeinfo() const;
  inline void clear_statustreeinfo();
  static const int kStatustreeinfoFieldNumber = 2;
  inline const ::ProtoFriendlyTree::FriendlyTreeStatusCPP& statustreeinfo() const;
  inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* mutable_statustreeinfo();
  inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* release_statustreeinfo();
  inline void set_allocated_statustreeinfo(::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo);

  // @@protoc_insertion_point(class_scope:ProtoFriendlyTree.PushFriendlyTreeMsg)
 private:
  inline void set_has_statustreeinfo();
  inline void clear_has_statustreeinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP > basictreeinfo_;
  ::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo_;
  friend void  protobuf_AddDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_AssignDesc_ProtoFriendlyTree_2eproto();
  friend void protobuf_ShutdownFile_ProtoFriendlyTree_2eproto();

  void InitAsDefaultInstance();
  static PushFriendlyTreeMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// FriendlyTreeBasicCPP

// required uint32 id = 1;
inline bool FriendlyTreeBasicCPP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendlyTreeBasicCPP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendlyTreeBasicCPP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendlyTreeBasicCPP::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FriendlyTreeBasicCPP::id() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.FriendlyTreeBasicCPP.id)
  return id_;
}
inline void FriendlyTreeBasicCPP::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.FriendlyTreeBasicCPP.id)
}

// required uint32 othuid = 2;
inline bool FriendlyTreeBasicCPP::has_othuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendlyTreeBasicCPP::set_has_othuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendlyTreeBasicCPP::clear_has_othuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendlyTreeBasicCPP::clear_othuid() {
  othuid_ = 0u;
  clear_has_othuid();
}
inline ::google::protobuf::uint32 FriendlyTreeBasicCPP::othuid() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.FriendlyTreeBasicCPP.othuid)
  return othuid_;
}
inline void FriendlyTreeBasicCPP::set_othuid(::google::protobuf::uint32 value) {
  set_has_othuid();
  othuid_ = value;
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.FriendlyTreeBasicCPP.othuid)
}

// required bytes name = 3;
inline bool FriendlyTreeBasicCPP::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendlyTreeBasicCPP::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendlyTreeBasicCPP::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendlyTreeBasicCPP::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FriendlyTreeBasicCPP::name() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.FriendlyTreeBasicCPP.name)
  return *name_;
}
inline void FriendlyTreeBasicCPP::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.FriendlyTreeBasicCPP.name)
}
inline void FriendlyTreeBasicCPP::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoFriendlyTree.FriendlyTreeBasicCPP.name)
}
inline void FriendlyTreeBasicCPP::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoFriendlyTree.FriendlyTreeBasicCPP.name)
}
inline ::std::string* FriendlyTreeBasicCPP::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.FriendlyTreeBasicCPP.name)
  return name_;
}
inline ::std::string* FriendlyTreeBasicCPP::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendlyTreeBasicCPP::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFriendlyTree.FriendlyTreeBasicCPP.name)
}

// required bytes head = 4;
inline bool FriendlyTreeBasicCPP::has_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendlyTreeBasicCPP::set_has_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendlyTreeBasicCPP::clear_has_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendlyTreeBasicCPP::clear_head() {
  if (head_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& FriendlyTreeBasicCPP::head() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.FriendlyTreeBasicCPP.head)
  return *head_;
}
inline void FriendlyTreeBasicCPP::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    head_ = new ::std::string;
  }
  head_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.FriendlyTreeBasicCPP.head)
}
inline void FriendlyTreeBasicCPP::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    head_ = new ::std::string;
  }
  head_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoFriendlyTree.FriendlyTreeBasicCPP.head)
}
inline void FriendlyTreeBasicCPP::set_head(const void* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoFriendlyTree.FriendlyTreeBasicCPP.head)
}
inline ::std::string* FriendlyTreeBasicCPP::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    head_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.FriendlyTreeBasicCPP.head)
  return head_;
}
inline ::std::string* FriendlyTreeBasicCPP::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendlyTreeBasicCPP::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFriendlyTree.FriendlyTreeBasicCPP.head)
}

// required uint32 ts = 5;
inline bool FriendlyTreeBasicCPP::has_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendlyTreeBasicCPP::set_has_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendlyTreeBasicCPP::clear_has_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendlyTreeBasicCPP::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 FriendlyTreeBasicCPP::ts() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.FriendlyTreeBasicCPP.ts)
  return ts_;
}
inline void FriendlyTreeBasicCPP::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.FriendlyTreeBasicCPP.ts)
}

// -------------------------------------------------------------------

// FriendlyTreeStatusCPP

// required uint32 treestatus = 1;
inline bool FriendlyTreeStatusCPP::has_treestatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendlyTreeStatusCPP::set_has_treestatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendlyTreeStatusCPP::clear_has_treestatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendlyTreeStatusCPP::clear_treestatus() {
  treestatus_ = 0u;
  clear_has_treestatus();
}
inline ::google::protobuf::uint32 FriendlyTreeStatusCPP::treestatus() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.FriendlyTreeStatusCPP.treestatus)
  return treestatus_;
}
inline void FriendlyTreeStatusCPP::set_treestatus(::google::protobuf::uint32 value) {
  set_has_treestatus();
  treestatus_ = value;
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.FriendlyTreeStatusCPP.treestatus)
}

// optional uint32 nextwaterts = 2;
inline bool FriendlyTreeStatusCPP::has_nextwaterts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendlyTreeStatusCPP::set_has_nextwaterts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendlyTreeStatusCPP::clear_has_nextwaterts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendlyTreeStatusCPP::clear_nextwaterts() {
  nextwaterts_ = 0u;
  clear_has_nextwaterts();
}
inline ::google::protobuf::uint32 FriendlyTreeStatusCPP::nextwaterts() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.FriendlyTreeStatusCPP.nextwaterts)
  return nextwaterts_;
}
inline void FriendlyTreeStatusCPP::set_nextwaterts(::google::protobuf::uint32 value) {
  set_has_nextwaterts();
  nextwaterts_ = value;
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.FriendlyTreeStatusCPP.nextwaterts)
}

// -------------------------------------------------------------------

// FriendlyTreeCPP

// repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
inline int FriendlyTreeCPP::basictreeinfo_size() const {
  return basictreeinfo_.size();
}
inline void FriendlyTreeCPP::clear_basictreeinfo() {
  basictreeinfo_.Clear();
}
inline const ::ProtoFriendlyTree::FriendlyTreeBasicCPP& FriendlyTreeCPP::basictreeinfo(int index) const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.FriendlyTreeCPP.basictreeinfo)
  return basictreeinfo_.Get(index);
}
inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* FriendlyTreeCPP::mutable_basictreeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.FriendlyTreeCPP.basictreeinfo)
  return basictreeinfo_.Mutable(index);
}
inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* FriendlyTreeCPP::add_basictreeinfo() {
  // @@protoc_insertion_point(field_add:ProtoFriendlyTree.FriendlyTreeCPP.basictreeinfo)
  return basictreeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >&
FriendlyTreeCPP::basictreeinfo() const {
  // @@protoc_insertion_point(field_list:ProtoFriendlyTree.FriendlyTreeCPP.basictreeinfo)
  return basictreeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >*
FriendlyTreeCPP::mutable_basictreeinfo() {
  // @@protoc_insertion_point(field_mutable_list:ProtoFriendlyTree.FriendlyTreeCPP.basictreeinfo)
  return &basictreeinfo_;
}

// required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
inline bool FriendlyTreeCPP::has_statustreeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendlyTreeCPP::set_has_statustreeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendlyTreeCPP::clear_has_statustreeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendlyTreeCPP::clear_statustreeinfo() {
  if (statustreeinfo_ != NULL) statustreeinfo_->::ProtoFriendlyTree::FriendlyTreeStatusCPP::Clear();
  clear_has_statustreeinfo();
}
inline const ::ProtoFriendlyTree::FriendlyTreeStatusCPP& FriendlyTreeCPP::statustreeinfo() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.FriendlyTreeCPP.statustreeinfo)
  return statustreeinfo_ != NULL ? *statustreeinfo_ : *default_instance_->statustreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* FriendlyTreeCPP::mutable_statustreeinfo() {
  set_has_statustreeinfo();
  if (statustreeinfo_ == NULL) statustreeinfo_ = new ::ProtoFriendlyTree::FriendlyTreeStatusCPP;
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.FriendlyTreeCPP.statustreeinfo)
  return statustreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* FriendlyTreeCPP::release_statustreeinfo() {
  clear_has_statustreeinfo();
  ::ProtoFriendlyTree::FriendlyTreeStatusCPP* temp = statustreeinfo_;
  statustreeinfo_ = NULL;
  return temp;
}
inline void FriendlyTreeCPP::set_allocated_statustreeinfo(::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo) {
  delete statustreeinfo_;
  statustreeinfo_ = statustreeinfo;
  if (statustreeinfo) {
    set_has_statustreeinfo();
  } else {
    clear_has_statustreeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFriendlyTree.FriendlyTreeCPP.statustreeinfo)
}

// -------------------------------------------------------------------

// GetFriendlyTreeReq

// -------------------------------------------------------------------

// GetFriendlyTreeResp

// repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
inline int GetFriendlyTreeResp::basictreeinfo_size() const {
  return basictreeinfo_.size();
}
inline void GetFriendlyTreeResp::clear_basictreeinfo() {
  basictreeinfo_.Clear();
}
inline const ::ProtoFriendlyTree::FriendlyTreeBasicCPP& GetFriendlyTreeResp::basictreeinfo(int index) const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.GetFriendlyTreeResp.basictreeinfo)
  return basictreeinfo_.Get(index);
}
inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* GetFriendlyTreeResp::mutable_basictreeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.GetFriendlyTreeResp.basictreeinfo)
  return basictreeinfo_.Mutable(index);
}
inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* GetFriendlyTreeResp::add_basictreeinfo() {
  // @@protoc_insertion_point(field_add:ProtoFriendlyTree.GetFriendlyTreeResp.basictreeinfo)
  return basictreeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >&
GetFriendlyTreeResp::basictreeinfo() const {
  // @@protoc_insertion_point(field_list:ProtoFriendlyTree.GetFriendlyTreeResp.basictreeinfo)
  return basictreeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >*
GetFriendlyTreeResp::mutable_basictreeinfo() {
  // @@protoc_insertion_point(field_mutable_list:ProtoFriendlyTree.GetFriendlyTreeResp.basictreeinfo)
  return &basictreeinfo_;
}

// required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
inline bool GetFriendlyTreeResp::has_statustreeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetFriendlyTreeResp::set_has_statustreeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetFriendlyTreeResp::clear_has_statustreeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetFriendlyTreeResp::clear_statustreeinfo() {
  if (statustreeinfo_ != NULL) statustreeinfo_->::ProtoFriendlyTree::FriendlyTreeStatusCPP::Clear();
  clear_has_statustreeinfo();
}
inline const ::ProtoFriendlyTree::FriendlyTreeStatusCPP& GetFriendlyTreeResp::statustreeinfo() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.GetFriendlyTreeResp.statustreeinfo)
  return statustreeinfo_ != NULL ? *statustreeinfo_ : *default_instance_->statustreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* GetFriendlyTreeResp::mutable_statustreeinfo() {
  set_has_statustreeinfo();
  if (statustreeinfo_ == NULL) statustreeinfo_ = new ::ProtoFriendlyTree::FriendlyTreeStatusCPP;
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.GetFriendlyTreeResp.statustreeinfo)
  return statustreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* GetFriendlyTreeResp::release_statustreeinfo() {
  clear_has_statustreeinfo();
  ::ProtoFriendlyTree::FriendlyTreeStatusCPP* temp = statustreeinfo_;
  statustreeinfo_ = NULL;
  return temp;
}
inline void GetFriendlyTreeResp::set_allocated_statustreeinfo(::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo) {
  delete statustreeinfo_;
  statustreeinfo_ = statustreeinfo;
  if (statustreeinfo) {
    set_has_statustreeinfo();
  } else {
    clear_has_statustreeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFriendlyTree.GetFriendlyTreeResp.statustreeinfo)
}

// -------------------------------------------------------------------

// WaterFriendlyTreeReq

// required uint32 othuid = 1;
inline bool WaterFriendlyTreeReq::has_othuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WaterFriendlyTreeReq::set_has_othuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WaterFriendlyTreeReq::clear_has_othuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WaterFriendlyTreeReq::clear_othuid() {
  othuid_ = 0u;
  clear_has_othuid();
}
inline ::google::protobuf::uint32 WaterFriendlyTreeReq::othuid() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.WaterFriendlyTreeReq.othuid)
  return othuid_;
}
inline void WaterFriendlyTreeReq::set_othuid(::google::protobuf::uint32 value) {
  set_has_othuid();
  othuid_ = value;
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.WaterFriendlyTreeReq.othuid)
}

// -------------------------------------------------------------------

// WaterFriendlyTreeResp

// optional .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 1;
inline bool WaterFriendlyTreeResp::has_statustreeinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WaterFriendlyTreeResp::set_has_statustreeinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WaterFriendlyTreeResp::clear_has_statustreeinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WaterFriendlyTreeResp::clear_statustreeinfo() {
  if (statustreeinfo_ != NULL) statustreeinfo_->::ProtoFriendlyTree::FriendlyTreeStatusCPP::Clear();
  clear_has_statustreeinfo();
}
inline const ::ProtoFriendlyTree::FriendlyTreeStatusCPP& WaterFriendlyTreeResp::statustreeinfo() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.WaterFriendlyTreeResp.statustreeinfo)
  return statustreeinfo_ != NULL ? *statustreeinfo_ : *default_instance_->statustreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* WaterFriendlyTreeResp::mutable_statustreeinfo() {
  set_has_statustreeinfo();
  if (statustreeinfo_ == NULL) statustreeinfo_ = new ::ProtoFriendlyTree::FriendlyTreeStatusCPP;
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.WaterFriendlyTreeResp.statustreeinfo)
  return statustreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* WaterFriendlyTreeResp::release_statustreeinfo() {
  clear_has_statustreeinfo();
  ::ProtoFriendlyTree::FriendlyTreeStatusCPP* temp = statustreeinfo_;
  statustreeinfo_ = NULL;
  return temp;
}
inline void WaterFriendlyTreeResp::set_allocated_statustreeinfo(::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo) {
  delete statustreeinfo_;
  statustreeinfo_ = statustreeinfo;
  if (statustreeinfo) {
    set_has_statustreeinfo();
  } else {
    clear_has_statustreeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFriendlyTree.WaterFriendlyTreeResp.statustreeinfo)
}

// optional uint32 curfriendlyvalue = 2;
inline bool WaterFriendlyTreeResp::has_curfriendlyvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WaterFriendlyTreeResp::set_has_curfriendlyvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WaterFriendlyTreeResp::clear_has_curfriendlyvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WaterFriendlyTreeResp::clear_curfriendlyvalue() {
  curfriendlyvalue_ = 0u;
  clear_has_curfriendlyvalue();
}
inline ::google::protobuf::uint32 WaterFriendlyTreeResp::curfriendlyvalue() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.WaterFriendlyTreeResp.curfriendlyvalue)
  return curfriendlyvalue_;
}
inline void WaterFriendlyTreeResp::set_curfriendlyvalue(::google::protobuf::uint32 value) {
  set_has_curfriendlyvalue();
  curfriendlyvalue_ = value;
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.WaterFriendlyTreeResp.curfriendlyvalue)
}

// optional .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 3;
inline bool WaterFriendlyTreeResp::has_basictreeinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WaterFriendlyTreeResp::set_has_basictreeinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WaterFriendlyTreeResp::clear_has_basictreeinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WaterFriendlyTreeResp::clear_basictreeinfo() {
  if (basictreeinfo_ != NULL) basictreeinfo_->::ProtoFriendlyTree::FriendlyTreeBasicCPP::Clear();
  clear_has_basictreeinfo();
}
inline const ::ProtoFriendlyTree::FriendlyTreeBasicCPP& WaterFriendlyTreeResp::basictreeinfo() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.WaterFriendlyTreeResp.basictreeinfo)
  return basictreeinfo_ != NULL ? *basictreeinfo_ : *default_instance_->basictreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* WaterFriendlyTreeResp::mutable_basictreeinfo() {
  set_has_basictreeinfo();
  if (basictreeinfo_ == NULL) basictreeinfo_ = new ::ProtoFriendlyTree::FriendlyTreeBasicCPP;
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.WaterFriendlyTreeResp.basictreeinfo)
  return basictreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* WaterFriendlyTreeResp::release_basictreeinfo() {
  clear_has_basictreeinfo();
  ::ProtoFriendlyTree::FriendlyTreeBasicCPP* temp = basictreeinfo_;
  basictreeinfo_ = NULL;
  return temp;
}
inline void WaterFriendlyTreeResp::set_allocated_basictreeinfo(::ProtoFriendlyTree::FriendlyTreeBasicCPP* basictreeinfo) {
  delete basictreeinfo_;
  basictreeinfo_ = basictreeinfo;
  if (basictreeinfo) {
    set_has_basictreeinfo();
  } else {
    clear_has_basictreeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFriendlyTree.WaterFriendlyTreeResp.basictreeinfo)
}

// required uint32 code = 4;
inline bool WaterFriendlyTreeResp::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WaterFriendlyTreeResp::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WaterFriendlyTreeResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WaterFriendlyTreeResp::clear_code() {
  code_ = 0u;
  clear_has_code();
}
inline ::google::protobuf::uint32 WaterFriendlyTreeResp::code() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.WaterFriendlyTreeResp.code)
  return code_;
}
inline void WaterFriendlyTreeResp::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.WaterFriendlyTreeResp.code)
}

// -------------------------------------------------------------------

// CSWaterFriendlyTreeReq

// required uint32 myuid = 1;
inline bool CSWaterFriendlyTreeReq::has_myuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSWaterFriendlyTreeReq::set_has_myuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSWaterFriendlyTreeReq::clear_has_myuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSWaterFriendlyTreeReq::clear_myuid() {
  myuid_ = 0u;
  clear_has_myuid();
}
inline ::google::protobuf::uint32 CSWaterFriendlyTreeReq::myuid() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.CSWaterFriendlyTreeReq.myuid)
  return myuid_;
}
inline void CSWaterFriendlyTreeReq::set_myuid(::google::protobuf::uint32 value) {
  set_has_myuid();
  myuid_ = value;
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.CSWaterFriendlyTreeReq.myuid)
}

// required bytes myname = 2;
inline bool CSWaterFriendlyTreeReq::has_myname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSWaterFriendlyTreeReq::set_has_myname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSWaterFriendlyTreeReq::clear_has_myname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSWaterFriendlyTreeReq::clear_myname() {
  if (myname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myname_->clear();
  }
  clear_has_myname();
}
inline const ::std::string& CSWaterFriendlyTreeReq::myname() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.CSWaterFriendlyTreeReq.myname)
  return *myname_;
}
inline void CSWaterFriendlyTreeReq::set_myname(const ::std::string& value) {
  set_has_myname();
  if (myname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myname_ = new ::std::string;
  }
  myname_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.CSWaterFriendlyTreeReq.myname)
}
inline void CSWaterFriendlyTreeReq::set_myname(const char* value) {
  set_has_myname();
  if (myname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myname_ = new ::std::string;
  }
  myname_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoFriendlyTree.CSWaterFriendlyTreeReq.myname)
}
inline void CSWaterFriendlyTreeReq::set_myname(const void* value, size_t size) {
  set_has_myname();
  if (myname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myname_ = new ::std::string;
  }
  myname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoFriendlyTree.CSWaterFriendlyTreeReq.myname)
}
inline ::std::string* CSWaterFriendlyTreeReq::mutable_myname() {
  set_has_myname();
  if (myname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.CSWaterFriendlyTreeReq.myname)
  return myname_;
}
inline ::std::string* CSWaterFriendlyTreeReq::release_myname() {
  clear_has_myname();
  if (myname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = myname_;
    myname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSWaterFriendlyTreeReq::set_allocated_myname(::std::string* myname) {
  if (myname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete myname_;
  }
  if (myname) {
    set_has_myname();
    myname_ = myname;
  } else {
    clear_has_myname();
    myname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFriendlyTree.CSWaterFriendlyTreeReq.myname)
}

// required bytes myhead = 3;
inline bool CSWaterFriendlyTreeReq::has_myhead() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSWaterFriendlyTreeReq::set_has_myhead() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSWaterFriendlyTreeReq::clear_has_myhead() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSWaterFriendlyTreeReq::clear_myhead() {
  if (myhead_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myhead_->clear();
  }
  clear_has_myhead();
}
inline const ::std::string& CSWaterFriendlyTreeReq::myhead() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.CSWaterFriendlyTreeReq.myhead)
  return *myhead_;
}
inline void CSWaterFriendlyTreeReq::set_myhead(const ::std::string& value) {
  set_has_myhead();
  if (myhead_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myhead_ = new ::std::string;
  }
  myhead_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.CSWaterFriendlyTreeReq.myhead)
}
inline void CSWaterFriendlyTreeReq::set_myhead(const char* value) {
  set_has_myhead();
  if (myhead_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myhead_ = new ::std::string;
  }
  myhead_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoFriendlyTree.CSWaterFriendlyTreeReq.myhead)
}
inline void CSWaterFriendlyTreeReq::set_myhead(const void* value, size_t size) {
  set_has_myhead();
  if (myhead_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myhead_ = new ::std::string;
  }
  myhead_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoFriendlyTree.CSWaterFriendlyTreeReq.myhead)
}
inline ::std::string* CSWaterFriendlyTreeReq::mutable_myhead() {
  set_has_myhead();
  if (myhead_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    myhead_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.CSWaterFriendlyTreeReq.myhead)
  return myhead_;
}
inline ::std::string* CSWaterFriendlyTreeReq::release_myhead() {
  clear_has_myhead();
  if (myhead_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = myhead_;
    myhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CSWaterFriendlyTreeReq::set_allocated_myhead(::std::string* myhead) {
  if (myhead_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete myhead_;
  }
  if (myhead) {
    set_has_myhead();
    myhead_ = myhead;
  } else {
    clear_has_myhead();
    myhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFriendlyTree.CSWaterFriendlyTreeReq.myhead)
}

// required uint32 othuid = 4;
inline bool CSWaterFriendlyTreeReq::has_othuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSWaterFriendlyTreeReq::set_has_othuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSWaterFriendlyTreeReq::clear_has_othuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSWaterFriendlyTreeReq::clear_othuid() {
  othuid_ = 0u;
  clear_has_othuid();
}
inline ::google::protobuf::uint32 CSWaterFriendlyTreeReq::othuid() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.CSWaterFriendlyTreeReq.othuid)
  return othuid_;
}
inline void CSWaterFriendlyTreeReq::set_othuid(::google::protobuf::uint32 value) {
  set_has_othuid();
  othuid_ = value;
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.CSWaterFriendlyTreeReq.othuid)
}

// -------------------------------------------------------------------

// CSWaterFriendlyTreeResp

// optional uint32 myuid = 1;
inline bool CSWaterFriendlyTreeResp::has_myuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSWaterFriendlyTreeResp::set_has_myuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSWaterFriendlyTreeResp::clear_has_myuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSWaterFriendlyTreeResp::clear_myuid() {
  myuid_ = 0u;
  clear_has_myuid();
}
inline ::google::protobuf::uint32 CSWaterFriendlyTreeResp::myuid() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.CSWaterFriendlyTreeResp.myuid)
  return myuid_;
}
inline void CSWaterFriendlyTreeResp::set_myuid(::google::protobuf::uint32 value) {
  set_has_myuid();
  myuid_ = value;
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.CSWaterFriendlyTreeResp.myuid)
}

// optional .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
inline bool CSWaterFriendlyTreeResp::has_statustreeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSWaterFriendlyTreeResp::set_has_statustreeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSWaterFriendlyTreeResp::clear_has_statustreeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSWaterFriendlyTreeResp::clear_statustreeinfo() {
  if (statustreeinfo_ != NULL) statustreeinfo_->::ProtoFriendlyTree::FriendlyTreeStatusCPP::Clear();
  clear_has_statustreeinfo();
}
inline const ::ProtoFriendlyTree::FriendlyTreeStatusCPP& CSWaterFriendlyTreeResp::statustreeinfo() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.CSWaterFriendlyTreeResp.statustreeinfo)
  return statustreeinfo_ != NULL ? *statustreeinfo_ : *default_instance_->statustreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* CSWaterFriendlyTreeResp::mutable_statustreeinfo() {
  set_has_statustreeinfo();
  if (statustreeinfo_ == NULL) statustreeinfo_ = new ::ProtoFriendlyTree::FriendlyTreeStatusCPP;
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.CSWaterFriendlyTreeResp.statustreeinfo)
  return statustreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* CSWaterFriendlyTreeResp::release_statustreeinfo() {
  clear_has_statustreeinfo();
  ::ProtoFriendlyTree::FriendlyTreeStatusCPP* temp = statustreeinfo_;
  statustreeinfo_ = NULL;
  return temp;
}
inline void CSWaterFriendlyTreeResp::set_allocated_statustreeinfo(::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo) {
  delete statustreeinfo_;
  statustreeinfo_ = statustreeinfo;
  if (statustreeinfo) {
    set_has_statustreeinfo();
  } else {
    clear_has_statustreeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFriendlyTree.CSWaterFriendlyTreeResp.statustreeinfo)
}

// optional .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 3;
inline bool CSWaterFriendlyTreeResp::has_basictreeinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSWaterFriendlyTreeResp::set_has_basictreeinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSWaterFriendlyTreeResp::clear_has_basictreeinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSWaterFriendlyTreeResp::clear_basictreeinfo() {
  if (basictreeinfo_ != NULL) basictreeinfo_->::ProtoFriendlyTree::FriendlyTreeBasicCPP::Clear();
  clear_has_basictreeinfo();
}
inline const ::ProtoFriendlyTree::FriendlyTreeBasicCPP& CSWaterFriendlyTreeResp::basictreeinfo() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.CSWaterFriendlyTreeResp.basictreeinfo)
  return basictreeinfo_ != NULL ? *basictreeinfo_ : *default_instance_->basictreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* CSWaterFriendlyTreeResp::mutable_basictreeinfo() {
  set_has_basictreeinfo();
  if (basictreeinfo_ == NULL) basictreeinfo_ = new ::ProtoFriendlyTree::FriendlyTreeBasicCPP;
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.CSWaterFriendlyTreeResp.basictreeinfo)
  return basictreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* CSWaterFriendlyTreeResp::release_basictreeinfo() {
  clear_has_basictreeinfo();
  ::ProtoFriendlyTree::FriendlyTreeBasicCPP* temp = basictreeinfo_;
  basictreeinfo_ = NULL;
  return temp;
}
inline void CSWaterFriendlyTreeResp::set_allocated_basictreeinfo(::ProtoFriendlyTree::FriendlyTreeBasicCPP* basictreeinfo) {
  delete basictreeinfo_;
  basictreeinfo_ = basictreeinfo;
  if (basictreeinfo) {
    set_has_basictreeinfo();
  } else {
    clear_has_basictreeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFriendlyTree.CSWaterFriendlyTreeResp.basictreeinfo)
}

// required uint32 code = 4;
inline bool CSWaterFriendlyTreeResp::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSWaterFriendlyTreeResp::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSWaterFriendlyTreeResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSWaterFriendlyTreeResp::clear_code() {
  code_ = 0u;
  clear_has_code();
}
inline ::google::protobuf::uint32 CSWaterFriendlyTreeResp::code() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.CSWaterFriendlyTreeResp.code)
  return code_;
}
inline void CSWaterFriendlyTreeResp::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.CSWaterFriendlyTreeResp.code)
}

// -------------------------------------------------------------------

// RewardFriendlyTreeReq

// -------------------------------------------------------------------

// RewardFriendlyTreeResp

// repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
inline int RewardFriendlyTreeResp::basictreeinfo_size() const {
  return basictreeinfo_.size();
}
inline void RewardFriendlyTreeResp::clear_basictreeinfo() {
  basictreeinfo_.Clear();
}
inline const ::ProtoFriendlyTree::FriendlyTreeBasicCPP& RewardFriendlyTreeResp::basictreeinfo(int index) const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.RewardFriendlyTreeResp.basictreeinfo)
  return basictreeinfo_.Get(index);
}
inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* RewardFriendlyTreeResp::mutable_basictreeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.RewardFriendlyTreeResp.basictreeinfo)
  return basictreeinfo_.Mutable(index);
}
inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* RewardFriendlyTreeResp::add_basictreeinfo() {
  // @@protoc_insertion_point(field_add:ProtoFriendlyTree.RewardFriendlyTreeResp.basictreeinfo)
  return basictreeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >&
RewardFriendlyTreeResp::basictreeinfo() const {
  // @@protoc_insertion_point(field_list:ProtoFriendlyTree.RewardFriendlyTreeResp.basictreeinfo)
  return basictreeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >*
RewardFriendlyTreeResp::mutable_basictreeinfo() {
  // @@protoc_insertion_point(field_mutable_list:ProtoFriendlyTree.RewardFriendlyTreeResp.basictreeinfo)
  return &basictreeinfo_;
}

// required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
inline bool RewardFriendlyTreeResp::has_statustreeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardFriendlyTreeResp::set_has_statustreeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardFriendlyTreeResp::clear_has_statustreeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardFriendlyTreeResp::clear_statustreeinfo() {
  if (statustreeinfo_ != NULL) statustreeinfo_->::ProtoFriendlyTree::FriendlyTreeStatusCPP::Clear();
  clear_has_statustreeinfo();
}
inline const ::ProtoFriendlyTree::FriendlyTreeStatusCPP& RewardFriendlyTreeResp::statustreeinfo() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.RewardFriendlyTreeResp.statustreeinfo)
  return statustreeinfo_ != NULL ? *statustreeinfo_ : *default_instance_->statustreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* RewardFriendlyTreeResp::mutable_statustreeinfo() {
  set_has_statustreeinfo();
  if (statustreeinfo_ == NULL) statustreeinfo_ = new ::ProtoFriendlyTree::FriendlyTreeStatusCPP;
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.RewardFriendlyTreeResp.statustreeinfo)
  return statustreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* RewardFriendlyTreeResp::release_statustreeinfo() {
  clear_has_statustreeinfo();
  ::ProtoFriendlyTree::FriendlyTreeStatusCPP* temp = statustreeinfo_;
  statustreeinfo_ = NULL;
  return temp;
}
inline void RewardFriendlyTreeResp::set_allocated_statustreeinfo(::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo) {
  delete statustreeinfo_;
  statustreeinfo_ = statustreeinfo;
  if (statustreeinfo) {
    set_has_statustreeinfo();
  } else {
    clear_has_statustreeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFriendlyTree.RewardFriendlyTreeResp.statustreeinfo)
}

// required uint32 friendlyValue = 3;
inline bool RewardFriendlyTreeResp::has_friendlyvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RewardFriendlyTreeResp::set_has_friendlyvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RewardFriendlyTreeResp::clear_has_friendlyvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RewardFriendlyTreeResp::clear_friendlyvalue() {
  friendlyvalue_ = 0u;
  clear_has_friendlyvalue();
}
inline ::google::protobuf::uint32 RewardFriendlyTreeResp::friendlyvalue() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.RewardFriendlyTreeResp.friendlyValue)
  return friendlyvalue_;
}
inline void RewardFriendlyTreeResp::set_friendlyvalue(::google::protobuf::uint32 value) {
  set_has_friendlyvalue();
  friendlyvalue_ = value;
  // @@protoc_insertion_point(field_set:ProtoFriendlyTree.RewardFriendlyTreeResp.friendlyValue)
}

// -------------------------------------------------------------------

// PushFriendlyTreeMsg

// repeated .ProtoFriendlyTree.FriendlyTreeBasicCPP basictreeinfo = 1;
inline int PushFriendlyTreeMsg::basictreeinfo_size() const {
  return basictreeinfo_.size();
}
inline void PushFriendlyTreeMsg::clear_basictreeinfo() {
  basictreeinfo_.Clear();
}
inline const ::ProtoFriendlyTree::FriendlyTreeBasicCPP& PushFriendlyTreeMsg::basictreeinfo(int index) const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.PushFriendlyTreeMsg.basictreeinfo)
  return basictreeinfo_.Get(index);
}
inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* PushFriendlyTreeMsg::mutable_basictreeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.PushFriendlyTreeMsg.basictreeinfo)
  return basictreeinfo_.Mutable(index);
}
inline ::ProtoFriendlyTree::FriendlyTreeBasicCPP* PushFriendlyTreeMsg::add_basictreeinfo() {
  // @@protoc_insertion_point(field_add:ProtoFriendlyTree.PushFriendlyTreeMsg.basictreeinfo)
  return basictreeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >&
PushFriendlyTreeMsg::basictreeinfo() const {
  // @@protoc_insertion_point(field_list:ProtoFriendlyTree.PushFriendlyTreeMsg.basictreeinfo)
  return basictreeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoFriendlyTree::FriendlyTreeBasicCPP >*
PushFriendlyTreeMsg::mutable_basictreeinfo() {
  // @@protoc_insertion_point(field_mutable_list:ProtoFriendlyTree.PushFriendlyTreeMsg.basictreeinfo)
  return &basictreeinfo_;
}

// required .ProtoFriendlyTree.FriendlyTreeStatusCPP statustreeinfo = 2;
inline bool PushFriendlyTreeMsg::has_statustreeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushFriendlyTreeMsg::set_has_statustreeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushFriendlyTreeMsg::clear_has_statustreeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushFriendlyTreeMsg::clear_statustreeinfo() {
  if (statustreeinfo_ != NULL) statustreeinfo_->::ProtoFriendlyTree::FriendlyTreeStatusCPP::Clear();
  clear_has_statustreeinfo();
}
inline const ::ProtoFriendlyTree::FriendlyTreeStatusCPP& PushFriendlyTreeMsg::statustreeinfo() const {
  // @@protoc_insertion_point(field_get:ProtoFriendlyTree.PushFriendlyTreeMsg.statustreeinfo)
  return statustreeinfo_ != NULL ? *statustreeinfo_ : *default_instance_->statustreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* PushFriendlyTreeMsg::mutable_statustreeinfo() {
  set_has_statustreeinfo();
  if (statustreeinfo_ == NULL) statustreeinfo_ = new ::ProtoFriendlyTree::FriendlyTreeStatusCPP;
  // @@protoc_insertion_point(field_mutable:ProtoFriendlyTree.PushFriendlyTreeMsg.statustreeinfo)
  return statustreeinfo_;
}
inline ::ProtoFriendlyTree::FriendlyTreeStatusCPP* PushFriendlyTreeMsg::release_statustreeinfo() {
  clear_has_statustreeinfo();
  ::ProtoFriendlyTree::FriendlyTreeStatusCPP* temp = statustreeinfo_;
  statustreeinfo_ = NULL;
  return temp;
}
inline void PushFriendlyTreeMsg::set_allocated_statustreeinfo(::ProtoFriendlyTree::FriendlyTreeStatusCPP* statustreeinfo) {
  delete statustreeinfo_;
  statustreeinfo_ = statustreeinfo;
  if (statustreeinfo) {
    set_has_statustreeinfo();
  } else {
    clear_has_statustreeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFriendlyTree.PushFriendlyTreeMsg.statustreeinfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoFriendlyTree

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoFriendlyTree_2eproto__INCLUDED
