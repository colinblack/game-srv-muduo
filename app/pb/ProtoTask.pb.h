// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoTask.proto

#ifndef PROTOBUF_ProtoTask_2eproto__INCLUDED
#define PROTOBUF_ProtoTask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "DataCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoTask {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoTask_2eproto();
void protobuf_AssignDesc_ProtoTask_2eproto();
void protobuf_ShutdownFile_ProtoTask_2eproto();

class TaskCPP;
class GetTaskReq;
class GetTaskResp;
class RewardTaskReq;
class RewardTaskResp;
class PushComplteTask;

// ===================================================================

class TaskCPP : public ::google::protobuf::Message {
 public:
  TaskCPP();
  virtual ~TaskCPP();

  TaskCPP(const TaskCPP& from);

  inline TaskCPP& operator=(const TaskCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskCPP& default_instance();

  void Swap(TaskCPP* other);

  // implements Message ----------------------------------------------

  TaskCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskCPP& from);
  void MergeFrom(const TaskCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 curtaskvalue = 2;
  inline bool has_curtaskvalue() const;
  inline void clear_curtaskvalue();
  static const int kCurtaskvalueFieldNumber = 2;
  inline ::google::protobuf::uint32 curtaskvalue() const;
  inline void set_curtaskvalue(::google::protobuf::uint32 value);

  // required uint32 curtaskstar = 3;
  inline bool has_curtaskstar() const;
  inline void clear_curtaskstar();
  static const int kCurtaskstarFieldNumber = 3;
  inline ::google::protobuf::uint32 curtaskstar() const;
  inline void set_curtaskstar(::google::protobuf::uint32 value);

  // required uint32 rewardstatus = 4;
  inline bool has_rewardstatus() const;
  inline void clear_rewardstatus();
  static const int kRewardstatusFieldNumber = 4;
  inline ::google::protobuf::uint32 rewardstatus() const;
  inline void set_rewardstatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoTask.TaskCPP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_curtaskvalue();
  inline void clear_has_curtaskvalue();
  inline void set_has_curtaskstar();
  inline void clear_has_curtaskstar();
  inline void set_has_rewardstatus();
  inline void clear_has_rewardstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 curtaskvalue_;
  ::google::protobuf::uint32 curtaskstar_;
  ::google::protobuf::uint32 rewardstatus_;
  friend void  protobuf_AddDesc_ProtoTask_2eproto();
  friend void protobuf_AssignDesc_ProtoTask_2eproto();
  friend void protobuf_ShutdownFile_ProtoTask_2eproto();

  void InitAsDefaultInstance();
  static TaskCPP* default_instance_;
};
// -------------------------------------------------------------------

class GetTaskReq : public ::google::protobuf::Message {
 public:
  GetTaskReq();
  virtual ~GetTaskReq();

  GetTaskReq(const GetTaskReq& from);

  inline GetTaskReq& operator=(const GetTaskReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTaskReq& default_instance();

  void Swap(GetTaskReq* other);

  // implements Message ----------------------------------------------

  GetTaskReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTaskReq& from);
  void MergeFrom(const GetTaskReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoTask.GetTaskReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoTask_2eproto();
  friend void protobuf_AssignDesc_ProtoTask_2eproto();
  friend void protobuf_ShutdownFile_ProtoTask_2eproto();

  void InitAsDefaultInstance();
  static GetTaskReq* default_instance_;
};
// -------------------------------------------------------------------

class GetTaskResp : public ::google::protobuf::Message {
 public:
  GetTaskResp();
  virtual ~GetTaskResp();

  GetTaskResp(const GetTaskResp& from);

  inline GetTaskResp& operator=(const GetTaskResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTaskResp& default_instance();

  void Swap(GetTaskResp* other);

  // implements Message ----------------------------------------------

  GetTaskResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTaskResp& from);
  void MergeFrom(const GetTaskResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoTask.TaskCPP task = 1;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::ProtoTask::TaskCPP& task(int index) const;
  inline ::ProtoTask::TaskCPP* mutable_task(int index);
  inline ::ProtoTask::TaskCPP* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoTask::TaskCPP >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoTask::TaskCPP >*
      mutable_task();

  // @@protoc_insertion_point(class_scope:ProtoTask.GetTaskResp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoTask::TaskCPP > task_;
  friend void  protobuf_AddDesc_ProtoTask_2eproto();
  friend void protobuf_AssignDesc_ProtoTask_2eproto();
  friend void protobuf_ShutdownFile_ProtoTask_2eproto();

  void InitAsDefaultInstance();
  static GetTaskResp* default_instance_;
};
// -------------------------------------------------------------------

class RewardTaskReq : public ::google::protobuf::Message {
 public:
  RewardTaskReq();
  virtual ~RewardTaskReq();

  RewardTaskReq(const RewardTaskReq& from);

  inline RewardTaskReq& operator=(const RewardTaskReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardTaskReq& default_instance();

  void Swap(RewardTaskReq* other);

  // implements Message ----------------------------------------------

  RewardTaskReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardTaskReq& from);
  void MergeFrom(const RewardTaskReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoTask.RewardTaskReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_ProtoTask_2eproto();
  friend void protobuf_AssignDesc_ProtoTask_2eproto();
  friend void protobuf_ShutdownFile_ProtoTask_2eproto();

  void InitAsDefaultInstance();
  static RewardTaskReq* default_instance_;
};
// -------------------------------------------------------------------

class RewardTaskResp : public ::google::protobuf::Message {
 public:
  RewardTaskResp();
  virtual ~RewardTaskResp();

  RewardTaskResp(const RewardTaskResp& from);

  inline RewardTaskResp& operator=(const RewardTaskResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardTaskResp& default_instance();

  void Swap(RewardTaskResp* other);

  // implements Message ----------------------------------------------

  RewardTaskResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardTaskResp& from);
  void MergeFrom(const RewardTaskResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoTask.TaskCPP task = 1;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::ProtoTask::TaskCPP& task() const;
  inline ::ProtoTask::TaskCPP* mutable_task();
  inline ::ProtoTask::TaskCPP* release_task();
  inline void set_allocated_task(::ProtoTask::TaskCPP* task);

  // required .DataCommon.CommonItemsCPP commons = 2;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 2;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  inline void set_allocated_commons(::DataCommon::CommonItemsCPP* commons);

  // @@protoc_insertion_point(class_scope:ProtoTask.RewardTaskResp)
 private:
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_commons();
  inline void clear_has_commons();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoTask::TaskCPP* task_;
  ::DataCommon::CommonItemsCPP* commons_;
  friend void  protobuf_AddDesc_ProtoTask_2eproto();
  friend void protobuf_AssignDesc_ProtoTask_2eproto();
  friend void protobuf_ShutdownFile_ProtoTask_2eproto();

  void InitAsDefaultInstance();
  static RewardTaskResp* default_instance_;
};
// -------------------------------------------------------------------

class PushComplteTask : public ::google::protobuf::Message {
 public:
  PushComplteTask();
  virtual ~PushComplteTask();

  PushComplteTask(const PushComplteTask& from);

  inline PushComplteTask& operator=(const PushComplteTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushComplteTask& default_instance();

  void Swap(PushComplteTask* other);

  // implements Message ----------------------------------------------

  PushComplteTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushComplteTask& from);
  void MergeFrom(const PushComplteTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoTask.TaskCPP task = 1;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::ProtoTask::TaskCPP& task() const;
  inline ::ProtoTask::TaskCPP* mutable_task();
  inline ::ProtoTask::TaskCPP* release_task();
  inline void set_allocated_task(::ProtoTask::TaskCPP* task);

  // @@protoc_insertion_point(class_scope:ProtoTask.PushComplteTask)
 private:
  inline void set_has_task();
  inline void clear_has_task();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoTask::TaskCPP* task_;
  friend void  protobuf_AddDesc_ProtoTask_2eproto();
  friend void protobuf_AssignDesc_ProtoTask_2eproto();
  friend void protobuf_ShutdownFile_ProtoTask_2eproto();

  void InitAsDefaultInstance();
  static PushComplteTask* default_instance_;
};
// ===================================================================


// ===================================================================

// TaskCPP

// required uint32 id = 1;
inline bool TaskCPP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskCPP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskCPP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskCPP::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TaskCPP::id() const {
  // @@protoc_insertion_point(field_get:ProtoTask.TaskCPP.id)
  return id_;
}
inline void TaskCPP::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProtoTask.TaskCPP.id)
}

// required uint32 curtaskvalue = 2;
inline bool TaskCPP::has_curtaskvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskCPP::set_has_curtaskvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskCPP::clear_has_curtaskvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskCPP::clear_curtaskvalue() {
  curtaskvalue_ = 0u;
  clear_has_curtaskvalue();
}
inline ::google::protobuf::uint32 TaskCPP::curtaskvalue() const {
  // @@protoc_insertion_point(field_get:ProtoTask.TaskCPP.curtaskvalue)
  return curtaskvalue_;
}
inline void TaskCPP::set_curtaskvalue(::google::protobuf::uint32 value) {
  set_has_curtaskvalue();
  curtaskvalue_ = value;
  // @@protoc_insertion_point(field_set:ProtoTask.TaskCPP.curtaskvalue)
}

// required uint32 curtaskstar = 3;
inline bool TaskCPP::has_curtaskstar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskCPP::set_has_curtaskstar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskCPP::clear_has_curtaskstar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskCPP::clear_curtaskstar() {
  curtaskstar_ = 0u;
  clear_has_curtaskstar();
}
inline ::google::protobuf::uint32 TaskCPP::curtaskstar() const {
  // @@protoc_insertion_point(field_get:ProtoTask.TaskCPP.curtaskstar)
  return curtaskstar_;
}
inline void TaskCPP::set_curtaskstar(::google::protobuf::uint32 value) {
  set_has_curtaskstar();
  curtaskstar_ = value;
  // @@protoc_insertion_point(field_set:ProtoTask.TaskCPP.curtaskstar)
}

// required uint32 rewardstatus = 4;
inline bool TaskCPP::has_rewardstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskCPP::set_has_rewardstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskCPP::clear_has_rewardstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskCPP::clear_rewardstatus() {
  rewardstatus_ = 0u;
  clear_has_rewardstatus();
}
inline ::google::protobuf::uint32 TaskCPP::rewardstatus() const {
  // @@protoc_insertion_point(field_get:ProtoTask.TaskCPP.rewardstatus)
  return rewardstatus_;
}
inline void TaskCPP::set_rewardstatus(::google::protobuf::uint32 value) {
  set_has_rewardstatus();
  rewardstatus_ = value;
  // @@protoc_insertion_point(field_set:ProtoTask.TaskCPP.rewardstatus)
}

// -------------------------------------------------------------------

// GetTaskReq

// -------------------------------------------------------------------

// GetTaskResp

// repeated .ProtoTask.TaskCPP task = 1;
inline int GetTaskResp::task_size() const {
  return task_.size();
}
inline void GetTaskResp::clear_task() {
  task_.Clear();
}
inline const ::ProtoTask::TaskCPP& GetTaskResp::task(int index) const {
  // @@protoc_insertion_point(field_get:ProtoTask.GetTaskResp.task)
  return task_.Get(index);
}
inline ::ProtoTask::TaskCPP* GetTaskResp::mutable_task(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoTask.GetTaskResp.task)
  return task_.Mutable(index);
}
inline ::ProtoTask::TaskCPP* GetTaskResp::add_task() {
  // @@protoc_insertion_point(field_add:ProtoTask.GetTaskResp.task)
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoTask::TaskCPP >&
GetTaskResp::task() const {
  // @@protoc_insertion_point(field_list:ProtoTask.GetTaskResp.task)
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoTask::TaskCPP >*
GetTaskResp::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:ProtoTask.GetTaskResp.task)
  return &task_;
}

// -------------------------------------------------------------------

// RewardTaskReq

// required uint32 id = 1;
inline bool RewardTaskReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardTaskReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardTaskReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardTaskReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RewardTaskReq::id() const {
  // @@protoc_insertion_point(field_get:ProtoTask.RewardTaskReq.id)
  return id_;
}
inline void RewardTaskReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProtoTask.RewardTaskReq.id)
}

// -------------------------------------------------------------------

// RewardTaskResp

// required .ProtoTask.TaskCPP task = 1;
inline bool RewardTaskResp::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardTaskResp::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardTaskResp::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardTaskResp::clear_task() {
  if (task_ != NULL) task_->::ProtoTask::TaskCPP::Clear();
  clear_has_task();
}
inline const ::ProtoTask::TaskCPP& RewardTaskResp::task() const {
  // @@protoc_insertion_point(field_get:ProtoTask.RewardTaskResp.task)
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::ProtoTask::TaskCPP* RewardTaskResp::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::ProtoTask::TaskCPP;
  // @@protoc_insertion_point(field_mutable:ProtoTask.RewardTaskResp.task)
  return task_;
}
inline ::ProtoTask::TaskCPP* RewardTaskResp::release_task() {
  clear_has_task();
  ::ProtoTask::TaskCPP* temp = task_;
  task_ = NULL;
  return temp;
}
inline void RewardTaskResp::set_allocated_task(::ProtoTask::TaskCPP* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoTask.RewardTaskResp.task)
}

// required .DataCommon.CommonItemsCPP commons = 2;
inline bool RewardTaskResp::has_commons() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardTaskResp::set_has_commons() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardTaskResp::clear_has_commons() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardTaskResp::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& RewardTaskResp::commons() const {
  // @@protoc_insertion_point(field_get:ProtoTask.RewardTaskResp.commons)
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* RewardTaskResp::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoTask.RewardTaskResp.commons)
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* RewardTaskResp::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}
inline void RewardTaskResp::set_allocated_commons(::DataCommon::CommonItemsCPP* commons) {
  delete commons_;
  commons_ = commons;
  if (commons) {
    set_has_commons();
  } else {
    clear_has_commons();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoTask.RewardTaskResp.commons)
}

// -------------------------------------------------------------------

// PushComplteTask

// required .ProtoTask.TaskCPP task = 1;
inline bool PushComplteTask::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushComplteTask::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushComplteTask::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushComplteTask::clear_task() {
  if (task_ != NULL) task_->::ProtoTask::TaskCPP::Clear();
  clear_has_task();
}
inline const ::ProtoTask::TaskCPP& PushComplteTask::task() const {
  // @@protoc_insertion_point(field_get:ProtoTask.PushComplteTask.task)
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::ProtoTask::TaskCPP* PushComplteTask::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::ProtoTask::TaskCPP;
  // @@protoc_insertion_point(field_mutable:ProtoTask.PushComplteTask.task)
  return task_;
}
inline ::ProtoTask::TaskCPP* PushComplteTask::release_task() {
  clear_has_task();
  ::ProtoTask::TaskCPP* temp = task_;
  task_ = NULL;
  return temp;
}
inline void PushComplteTask::set_allocated_task(::ProtoTask::TaskCPP* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoTask.PushComplteTask.task)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoTask

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoTask_2eproto__INCLUDED
