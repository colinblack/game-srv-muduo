// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoVIP.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoVIP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoVIP {

namespace {

const ::google::protobuf::Descriptor* VIPGiftCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPGiftCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomVIPGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomVIPGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomVIPGiftResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomVIPGiftResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetVIPGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetVIPGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetVIPGiftResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetVIPGiftResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIPProductSpeedUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPProductSpeedUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIPProductSpeedUpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPProductSpeedUpResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIPRemoveOrderCDReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPRemoveOrderCDReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIPRemoveOrderCDResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPRemoveOrderCDResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushVIPLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushVIPLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIPShelfUnLockReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPShelfUnLockReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIPShelfUnLockResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPShelfUnLockResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIPAddProductQueueReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPAddProductQueueReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIPAddProductQueueResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPAddProductQueueResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoVIP_2eproto() {
  protobuf_AddDesc_ProtoVIP_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoVIP.proto");
  GOOGLE_CHECK(file != NULL);
  VIPGiftCPP_descriptor_ = file->message_type(0);
  static const int VIPGiftCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPGiftCPP, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPGiftCPP, propscnt_),
  };
  VIPGiftCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPGiftCPP_descriptor_,
      VIPGiftCPP::default_instance_,
      VIPGiftCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPGiftCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPGiftCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPGiftCPP));
  RandomVIPGiftReq_descriptor_ = file->message_type(1);
  static const int RandomVIPGiftReq_offsets_[1] = {
  };
  RandomVIPGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomVIPGiftReq_descriptor_,
      RandomVIPGiftReq::default_instance_,
      RandomVIPGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomVIPGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomVIPGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomVIPGiftReq));
  RandomVIPGiftResp_descriptor_ = file->message_type(2);
  static const int RandomVIPGiftResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomVIPGiftResp, item_),
  };
  RandomVIPGiftResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomVIPGiftResp_descriptor_,
      RandomVIPGiftResp::default_instance_,
      RandomVIPGiftResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomVIPGiftResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomVIPGiftResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomVIPGiftResp));
  GetVIPGiftReq_descriptor_ = file->message_type(3);
  static const int GetVIPGiftReq_offsets_[1] = {
  };
  GetVIPGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetVIPGiftReq_descriptor_,
      GetVIPGiftReq::default_instance_,
      GetVIPGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVIPGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVIPGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetVIPGiftReq));
  GetVIPGiftResp_descriptor_ = file->message_type(4);
  static const int GetVIPGiftResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVIPGiftResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVIPGiftResp, rewardts_),
  };
  GetVIPGiftResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetVIPGiftResp_descriptor_,
      GetVIPGiftResp::default_instance_,
      GetVIPGiftResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVIPGiftResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVIPGiftResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetVIPGiftResp));
  VIPProductSpeedUpReq_descriptor_ = file->message_type(5);
  static const int VIPProductSpeedUpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPProductSpeedUpReq, ud_),
  };
  VIPProductSpeedUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPProductSpeedUpReq_descriptor_,
      VIPProductSpeedUpReq::default_instance_,
      VIPProductSpeedUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPProductSpeedUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPProductSpeedUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPProductSpeedUpReq));
  VIPProductSpeedUpResp_descriptor_ = file->message_type(6);
  static const int VIPProductSpeedUpResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPProductSpeedUpResp, speedupusecnt_),
  };
  VIPProductSpeedUpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPProductSpeedUpResp_descriptor_,
      VIPProductSpeedUpResp::default_instance_,
      VIPProductSpeedUpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPProductSpeedUpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPProductSpeedUpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPProductSpeedUpResp));
  VIPRemoveOrderCDReq_descriptor_ = file->message_type(7);
  static const int VIPRemoveOrderCDReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPRemoveOrderCDReq, orderud_),
  };
  VIPRemoveOrderCDReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPRemoveOrderCDReq_descriptor_,
      VIPRemoveOrderCDReq::default_instance_,
      VIPRemoveOrderCDReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPRemoveOrderCDReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPRemoveOrderCDReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPRemoveOrderCDReq));
  VIPRemoveOrderCDResp_descriptor_ = file->message_type(8);
  static const int VIPRemoveOrderCDResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPRemoveOrderCDResp, speedupusecnt_),
  };
  VIPRemoveOrderCDResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPRemoveOrderCDResp_descriptor_,
      VIPRemoveOrderCDResp::default_instance_,
      VIPRemoveOrderCDResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPRemoveOrderCDResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPRemoveOrderCDResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPRemoveOrderCDResp));
  PushVIPLevel_descriptor_ = file->message_type(9);
  static const int PushVIPLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushVIPLevel, newlevel_),
  };
  PushVIPLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushVIPLevel_descriptor_,
      PushVIPLevel::default_instance_,
      PushVIPLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushVIPLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushVIPLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushVIPLevel));
  VIPShelfUnLockReq_descriptor_ = file->message_type(10);
  static const int VIPShelfUnLockReq_offsets_[1] = {
  };
  VIPShelfUnLockReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPShelfUnLockReq_descriptor_,
      VIPShelfUnLockReq::default_instance_,
      VIPShelfUnLockReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPShelfUnLockReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPShelfUnLockReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPShelfUnLockReq));
  VIPShelfUnLockResp_descriptor_ = file->message_type(11);
  static const int VIPShelfUnLockResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPShelfUnLockResp, shop_),
  };
  VIPShelfUnLockResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPShelfUnLockResp_descriptor_,
      VIPShelfUnLockResp::default_instance_,
      VIPShelfUnLockResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPShelfUnLockResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPShelfUnLockResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPShelfUnLockResp));
  VIPAddProductQueueReq_descriptor_ = file->message_type(12);
  static const int VIPAddProductQueueReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPAddProductQueueReq, ud_),
  };
  VIPAddProductQueueReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPAddProductQueueReq_descriptor_,
      VIPAddProductQueueReq::default_instance_,
      VIPAddProductQueueReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPAddProductQueueReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPAddProductQueueReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPAddProductQueueReq));
  VIPAddProductQueueResp_descriptor_ = file->message_type(13);
  static const int VIPAddProductQueueResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPAddProductQueueResp, equip_),
  };
  VIPAddProductQueueResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPAddProductQueueResp_descriptor_,
      VIPAddProductQueueResp::default_instance_,
      VIPAddProductQueueResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPAddProductQueueResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPAddProductQueueResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPAddProductQueueResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoVIP_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPGiftCPP_descriptor_, &VIPGiftCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomVIPGiftReq_descriptor_, &RandomVIPGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomVIPGiftResp_descriptor_, &RandomVIPGiftResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetVIPGiftReq_descriptor_, &GetVIPGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetVIPGiftResp_descriptor_, &GetVIPGiftResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPProductSpeedUpReq_descriptor_, &VIPProductSpeedUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPProductSpeedUpResp_descriptor_, &VIPProductSpeedUpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPRemoveOrderCDReq_descriptor_, &VIPRemoveOrderCDReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPRemoveOrderCDResp_descriptor_, &VIPRemoveOrderCDResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushVIPLevel_descriptor_, &PushVIPLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPShelfUnLockReq_descriptor_, &VIPShelfUnLockReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPShelfUnLockResp_descriptor_, &VIPShelfUnLockResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPAddProductQueueReq_descriptor_, &VIPAddProductQueueReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPAddProductQueueResp_descriptor_, &VIPAddProductQueueResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoVIP_2eproto() {
  delete VIPGiftCPP::default_instance_;
  delete VIPGiftCPP_reflection_;
  delete RandomVIPGiftReq::default_instance_;
  delete RandomVIPGiftReq_reflection_;
  delete RandomVIPGiftResp::default_instance_;
  delete RandomVIPGiftResp_reflection_;
  delete GetVIPGiftReq::default_instance_;
  delete GetVIPGiftReq_reflection_;
  delete GetVIPGiftResp::default_instance_;
  delete GetVIPGiftResp_reflection_;
  delete VIPProductSpeedUpReq::default_instance_;
  delete VIPProductSpeedUpReq_reflection_;
  delete VIPProductSpeedUpResp::default_instance_;
  delete VIPProductSpeedUpResp_reflection_;
  delete VIPRemoveOrderCDReq::default_instance_;
  delete VIPRemoveOrderCDReq_reflection_;
  delete VIPRemoveOrderCDResp::default_instance_;
  delete VIPRemoveOrderCDResp_reflection_;
  delete PushVIPLevel::default_instance_;
  delete PushVIPLevel_reflection_;
  delete VIPShelfUnLockReq::default_instance_;
  delete VIPShelfUnLockReq_reflection_;
  delete VIPShelfUnLockResp::default_instance_;
  delete VIPShelfUnLockResp_reflection_;
  delete VIPAddProductQueueReq::default_instance_;
  delete VIPAddProductQueueReq_reflection_;
  delete VIPAddProductQueueResp::default_instance_;
  delete VIPAddProductQueueResp_reflection_;
}

void protobuf_AddDesc_ProtoVIP_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::ProtoShop::protobuf_AddDesc_ProtoShop_2eproto();
  ::ProtoProduce::protobuf_AddDesc_ProtoProduce_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ProtoVIP.proto\022\010ProtoVIP\032\020DataCommon.p"
    "roto\032\017ProtoShop.proto\032\022ProtoProduce.prot"
    "o\"/\n\nVIPGiftCPP\022\017\n\007propsid\030\001 \002(\r\022\020\n\010prop"
    "scnt\030\002 \002(\r\"\022\n\020RandomVIPGiftReq\"7\n\021Random"
    "VIPGiftResp\022\"\n\004item\030\001 \003(\0132\024.ProtoVIP.VIP"
    "GiftCPP\"\017\n\rGetVIPGiftReq\"O\n\016GetVIPGiftRe"
    "sp\022+\n\007commons\030\001 \002(\0132\032.DataCommon.CommonI"
    "temsCPP\022\020\n\010rewardts\030\002 \002(\r\"\"\n\024VIPProductS"
    "peedUpReq\022\n\n\002ud\030\001 \002(\r\".\n\025VIPProductSpeed"
    "UpResp\022\025\n\rspeedupUseCnt\030\001 \002(\r\"&\n\023VIPRemo"
    "veOrderCDReq\022\017\n\007orderud\030\001 \002(\r\"-\n\024VIPRemo"
    "veOrderCDResp\022\025\n\rspeedupUseCnt\030\001 \002(\r\" \n\014"
    "PushVIPLevel\022\020\n\010newLevel\030\001 \002(\r\"\023\n\021VIPShe"
    "lfUnLockReq\"6\n\022VIPShelfUnLockResp\022 \n\004sho"
    "p\030\001 \002(\0132\022.ProtoShop.ShopCPP\"#\n\025VIPAddPro"
    "ductQueueReq\022\n\n\002ud\030\001 \002(\r\"F\n\026VIPAddProduc"
    "tQueueResp\022,\n\005equip\030\001 \002(\0132\035.ProtoProduce"
    ".ProduceEquipCPP", 696);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoVIP.proto", &protobuf_RegisterTypes);
  VIPGiftCPP::default_instance_ = new VIPGiftCPP();
  RandomVIPGiftReq::default_instance_ = new RandomVIPGiftReq();
  RandomVIPGiftResp::default_instance_ = new RandomVIPGiftResp();
  GetVIPGiftReq::default_instance_ = new GetVIPGiftReq();
  GetVIPGiftResp::default_instance_ = new GetVIPGiftResp();
  VIPProductSpeedUpReq::default_instance_ = new VIPProductSpeedUpReq();
  VIPProductSpeedUpResp::default_instance_ = new VIPProductSpeedUpResp();
  VIPRemoveOrderCDReq::default_instance_ = new VIPRemoveOrderCDReq();
  VIPRemoveOrderCDResp::default_instance_ = new VIPRemoveOrderCDResp();
  PushVIPLevel::default_instance_ = new PushVIPLevel();
  VIPShelfUnLockReq::default_instance_ = new VIPShelfUnLockReq();
  VIPShelfUnLockResp::default_instance_ = new VIPShelfUnLockResp();
  VIPAddProductQueueReq::default_instance_ = new VIPAddProductQueueReq();
  VIPAddProductQueueResp::default_instance_ = new VIPAddProductQueueResp();
  VIPGiftCPP::default_instance_->InitAsDefaultInstance();
  RandomVIPGiftReq::default_instance_->InitAsDefaultInstance();
  RandomVIPGiftResp::default_instance_->InitAsDefaultInstance();
  GetVIPGiftReq::default_instance_->InitAsDefaultInstance();
  GetVIPGiftResp::default_instance_->InitAsDefaultInstance();
  VIPProductSpeedUpReq::default_instance_->InitAsDefaultInstance();
  VIPProductSpeedUpResp::default_instance_->InitAsDefaultInstance();
  VIPRemoveOrderCDReq::default_instance_->InitAsDefaultInstance();
  VIPRemoveOrderCDResp::default_instance_->InitAsDefaultInstance();
  PushVIPLevel::default_instance_->InitAsDefaultInstance();
  VIPShelfUnLockReq::default_instance_->InitAsDefaultInstance();
  VIPShelfUnLockResp::default_instance_->InitAsDefaultInstance();
  VIPAddProductQueueReq::default_instance_->InitAsDefaultInstance();
  VIPAddProductQueueResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoVIP_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoVIP_2eproto {
  StaticDescriptorInitializer_ProtoVIP_2eproto() {
    protobuf_AddDesc_ProtoVIP_2eproto();
  }
} static_descriptor_initializer_ProtoVIP_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VIPGiftCPP::kPropsidFieldNumber;
const int VIPGiftCPP::kPropscntFieldNumber;
#endif  // !_MSC_VER

VIPGiftCPP::VIPGiftCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoVIP.VIPGiftCPP)
}

void VIPGiftCPP::InitAsDefaultInstance() {
}

VIPGiftCPP::VIPGiftCPP(const VIPGiftCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoVIP.VIPGiftCPP)
}

void VIPGiftCPP::SharedCtor() {
  _cached_size_ = 0;
  propsid_ = 0u;
  propscnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPGiftCPP::~VIPGiftCPP() {
  // @@protoc_insertion_point(destructor:ProtoVIP.VIPGiftCPP)
  SharedDtor();
}

void VIPGiftCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VIPGiftCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPGiftCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPGiftCPP_descriptor_;
}

const VIPGiftCPP& VIPGiftCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoVIP_2eproto();
  return *default_instance_;
}

VIPGiftCPP* VIPGiftCPP::default_instance_ = NULL;

VIPGiftCPP* VIPGiftCPP::New() const {
  return new VIPGiftCPP;
}

void VIPGiftCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VIPGiftCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(propsid_, propscnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPGiftCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoVIP.VIPGiftCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 propsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propscnt;
        break;
      }

      // required uint32 propscnt = 2;
      case 2: {
        if (tag == 16) {
         parse_propscnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propscnt_)));
          set_has_propscnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoVIP.VIPGiftCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoVIP.VIPGiftCPP)
  return false;
#undef DO_
}

void VIPGiftCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoVIP.VIPGiftCPP)
  // required uint32 propsid = 1;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  // required uint32 propscnt = 2;
  if (has_propscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propscnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoVIP.VIPGiftCPP)
}

::google::protobuf::uint8* VIPGiftCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoVIP.VIPGiftCPP)
  // required uint32 propsid = 1;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  // required uint32 propscnt = 2;
  if (has_propscnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propscnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoVIP.VIPGiftCPP)
  return target;
}

int VIPGiftCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 propsid = 1;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 propscnt = 2;
    if (has_propscnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propscnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPGiftCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPGiftCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPGiftCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPGiftCPP::MergeFrom(const VIPGiftCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_propscnt()) {
      set_propscnt(from.propscnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPGiftCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPGiftCPP::CopyFrom(const VIPGiftCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPGiftCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VIPGiftCPP::Swap(VIPGiftCPP* other) {
  if (other != this) {
    std::swap(propsid_, other->propsid_);
    std::swap(propscnt_, other->propscnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPGiftCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPGiftCPP_descriptor_;
  metadata.reflection = VIPGiftCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RandomVIPGiftReq::RandomVIPGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoVIP.RandomVIPGiftReq)
}

void RandomVIPGiftReq::InitAsDefaultInstance() {
}

RandomVIPGiftReq::RandomVIPGiftReq(const RandomVIPGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoVIP.RandomVIPGiftReq)
}

void RandomVIPGiftReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomVIPGiftReq::~RandomVIPGiftReq() {
  // @@protoc_insertion_point(destructor:ProtoVIP.RandomVIPGiftReq)
  SharedDtor();
}

void RandomVIPGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandomVIPGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomVIPGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomVIPGiftReq_descriptor_;
}

const RandomVIPGiftReq& RandomVIPGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoVIP_2eproto();
  return *default_instance_;
}

RandomVIPGiftReq* RandomVIPGiftReq::default_instance_ = NULL;

RandomVIPGiftReq* RandomVIPGiftReq::New() const {
  return new RandomVIPGiftReq;
}

void RandomVIPGiftReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomVIPGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoVIP.RandomVIPGiftReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoVIP.RandomVIPGiftReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoVIP.RandomVIPGiftReq)
  return false;
#undef DO_
}

void RandomVIPGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoVIP.RandomVIPGiftReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoVIP.RandomVIPGiftReq)
}

::google::protobuf::uint8* RandomVIPGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoVIP.RandomVIPGiftReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoVIP.RandomVIPGiftReq)
  return target;
}

int RandomVIPGiftReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomVIPGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomVIPGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomVIPGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomVIPGiftReq::MergeFrom(const RandomVIPGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomVIPGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomVIPGiftReq::CopyFrom(const RandomVIPGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomVIPGiftReq::IsInitialized() const {

  return true;
}

void RandomVIPGiftReq::Swap(RandomVIPGiftReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomVIPGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomVIPGiftReq_descriptor_;
  metadata.reflection = RandomVIPGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomVIPGiftResp::kItemFieldNumber;
#endif  // !_MSC_VER

RandomVIPGiftResp::RandomVIPGiftResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoVIP.RandomVIPGiftResp)
}

void RandomVIPGiftResp::InitAsDefaultInstance() {
}

RandomVIPGiftResp::RandomVIPGiftResp(const RandomVIPGiftResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoVIP.RandomVIPGiftResp)
}

void RandomVIPGiftResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomVIPGiftResp::~RandomVIPGiftResp() {
  // @@protoc_insertion_point(destructor:ProtoVIP.RandomVIPGiftResp)
  SharedDtor();
}

void RandomVIPGiftResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandomVIPGiftResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomVIPGiftResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomVIPGiftResp_descriptor_;
}

const RandomVIPGiftResp& RandomVIPGiftResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoVIP_2eproto();
  return *default_instance_;
}

RandomVIPGiftResp* RandomVIPGiftResp::default_instance_ = NULL;

RandomVIPGiftResp* RandomVIPGiftResp::New() const {
  return new RandomVIPGiftResp;
}

void RandomVIPGiftResp::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomVIPGiftResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoVIP.RandomVIPGiftResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoVIP.VIPGiftCPP item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoVIP.RandomVIPGiftResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoVIP.RandomVIPGiftResp)
  return false;
#undef DO_
}

void RandomVIPGiftResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoVIP.RandomVIPGiftResp)
  // repeated .ProtoVIP.VIPGiftCPP item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoVIP.RandomVIPGiftResp)
}

::google::protobuf::uint8* RandomVIPGiftResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoVIP.RandomVIPGiftResp)
  // repeated .ProtoVIP.VIPGiftCPP item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoVIP.RandomVIPGiftResp)
  return target;
}

int RandomVIPGiftResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoVIP.VIPGiftCPP item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomVIPGiftResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomVIPGiftResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomVIPGiftResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomVIPGiftResp::MergeFrom(const RandomVIPGiftResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomVIPGiftResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomVIPGiftResp::CopyFrom(const RandomVIPGiftResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomVIPGiftResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void RandomVIPGiftResp::Swap(RandomVIPGiftResp* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomVIPGiftResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomVIPGiftResp_descriptor_;
  metadata.reflection = RandomVIPGiftResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetVIPGiftReq::GetVIPGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoVIP.GetVIPGiftReq)
}

void GetVIPGiftReq::InitAsDefaultInstance() {
}

GetVIPGiftReq::GetVIPGiftReq(const GetVIPGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoVIP.GetVIPGiftReq)
}

void GetVIPGiftReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetVIPGiftReq::~GetVIPGiftReq() {
  // @@protoc_insertion_point(destructor:ProtoVIP.GetVIPGiftReq)
  SharedDtor();
}

void GetVIPGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetVIPGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVIPGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetVIPGiftReq_descriptor_;
}

const GetVIPGiftReq& GetVIPGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoVIP_2eproto();
  return *default_instance_;
}

GetVIPGiftReq* GetVIPGiftReq::default_instance_ = NULL;

GetVIPGiftReq* GetVIPGiftReq::New() const {
  return new GetVIPGiftReq;
}

void GetVIPGiftReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetVIPGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoVIP.GetVIPGiftReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoVIP.GetVIPGiftReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoVIP.GetVIPGiftReq)
  return false;
#undef DO_
}

void GetVIPGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoVIP.GetVIPGiftReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoVIP.GetVIPGiftReq)
}

::google::protobuf::uint8* GetVIPGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoVIP.GetVIPGiftReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoVIP.GetVIPGiftReq)
  return target;
}

int GetVIPGiftReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVIPGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetVIPGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetVIPGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetVIPGiftReq::MergeFrom(const GetVIPGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetVIPGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVIPGiftReq::CopyFrom(const GetVIPGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVIPGiftReq::IsInitialized() const {

  return true;
}

void GetVIPGiftReq::Swap(GetVIPGiftReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetVIPGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetVIPGiftReq_descriptor_;
  metadata.reflection = GetVIPGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetVIPGiftResp::kCommonsFieldNumber;
const int GetVIPGiftResp::kRewardtsFieldNumber;
#endif  // !_MSC_VER

GetVIPGiftResp::GetVIPGiftResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoVIP.GetVIPGiftResp)
}

void GetVIPGiftResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

GetVIPGiftResp::GetVIPGiftResp(const GetVIPGiftResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoVIP.GetVIPGiftResp)
}

void GetVIPGiftResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  rewardts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetVIPGiftResp::~GetVIPGiftResp() {
  // @@protoc_insertion_point(destructor:ProtoVIP.GetVIPGiftResp)
  SharedDtor();
}

void GetVIPGiftResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void GetVIPGiftResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVIPGiftResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetVIPGiftResp_descriptor_;
}

const GetVIPGiftResp& GetVIPGiftResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoVIP_2eproto();
  return *default_instance_;
}

GetVIPGiftResp* GetVIPGiftResp::default_instance_ = NULL;

GetVIPGiftResp* GetVIPGiftResp::New() const {
  return new GetVIPGiftResp;
}

void GetVIPGiftResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    rewardts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetVIPGiftResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoVIP.GetVIPGiftResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rewardts;
        break;
      }

      // required uint32 rewardts = 2;
      case 2: {
        if (tag == 16) {
         parse_rewardts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardts_)));
          set_has_rewardts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoVIP.GetVIPGiftResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoVIP.GetVIPGiftResp)
  return false;
#undef DO_
}

void GetVIPGiftResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoVIP.GetVIPGiftResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  // required uint32 rewardts = 2;
  if (has_rewardts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rewardts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoVIP.GetVIPGiftResp)
}

::google::protobuf::uint8* GetVIPGiftResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoVIP.GetVIPGiftResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  // required uint32 rewardts = 2;
  if (has_rewardts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rewardts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoVIP.GetVIPGiftResp)
  return target;
}

int GetVIPGiftResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required uint32 rewardts = 2;
    if (has_rewardts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVIPGiftResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetVIPGiftResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetVIPGiftResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetVIPGiftResp::MergeFrom(const GetVIPGiftResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_rewardts()) {
      set_rewardts(from.rewardts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetVIPGiftResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVIPGiftResp::CopyFrom(const GetVIPGiftResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVIPGiftResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void GetVIPGiftResp::Swap(GetVIPGiftResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(rewardts_, other->rewardts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetVIPGiftResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetVIPGiftResp_descriptor_;
  metadata.reflection = GetVIPGiftResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIPProductSpeedUpReq::kUdFieldNumber;
#endif  // !_MSC_VER

VIPProductSpeedUpReq::VIPProductSpeedUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoVIP.VIPProductSpeedUpReq)
}

void VIPProductSpeedUpReq::InitAsDefaultInstance() {
}

VIPProductSpeedUpReq::VIPProductSpeedUpReq(const VIPProductSpeedUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoVIP.VIPProductSpeedUpReq)
}

void VIPProductSpeedUpReq::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPProductSpeedUpReq::~VIPProductSpeedUpReq() {
  // @@protoc_insertion_point(destructor:ProtoVIP.VIPProductSpeedUpReq)
  SharedDtor();
}

void VIPProductSpeedUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VIPProductSpeedUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPProductSpeedUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPProductSpeedUpReq_descriptor_;
}

const VIPProductSpeedUpReq& VIPProductSpeedUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoVIP_2eproto();
  return *default_instance_;
}

VIPProductSpeedUpReq* VIPProductSpeedUpReq::default_instance_ = NULL;

VIPProductSpeedUpReq* VIPProductSpeedUpReq::New() const {
  return new VIPProductSpeedUpReq;
}

void VIPProductSpeedUpReq::Clear() {
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPProductSpeedUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoVIP.VIPProductSpeedUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoVIP.VIPProductSpeedUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoVIP.VIPProductSpeedUpReq)
  return false;
#undef DO_
}

void VIPProductSpeedUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoVIP.VIPProductSpeedUpReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoVIP.VIPProductSpeedUpReq)
}

::google::protobuf::uint8* VIPProductSpeedUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoVIP.VIPProductSpeedUpReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoVIP.VIPProductSpeedUpReq)
  return target;
}

int VIPProductSpeedUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPProductSpeedUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPProductSpeedUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPProductSpeedUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPProductSpeedUpReq::MergeFrom(const VIPProductSpeedUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPProductSpeedUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPProductSpeedUpReq::CopyFrom(const VIPProductSpeedUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPProductSpeedUpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VIPProductSpeedUpReq::Swap(VIPProductSpeedUpReq* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPProductSpeedUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPProductSpeedUpReq_descriptor_;
  metadata.reflection = VIPProductSpeedUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIPProductSpeedUpResp::kSpeedupUseCntFieldNumber;
#endif  // !_MSC_VER

VIPProductSpeedUpResp::VIPProductSpeedUpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoVIP.VIPProductSpeedUpResp)
}

void VIPProductSpeedUpResp::InitAsDefaultInstance() {
}

VIPProductSpeedUpResp::VIPProductSpeedUpResp(const VIPProductSpeedUpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoVIP.VIPProductSpeedUpResp)
}

void VIPProductSpeedUpResp::SharedCtor() {
  _cached_size_ = 0;
  speedupusecnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPProductSpeedUpResp::~VIPProductSpeedUpResp() {
  // @@protoc_insertion_point(destructor:ProtoVIP.VIPProductSpeedUpResp)
  SharedDtor();
}

void VIPProductSpeedUpResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VIPProductSpeedUpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPProductSpeedUpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPProductSpeedUpResp_descriptor_;
}

const VIPProductSpeedUpResp& VIPProductSpeedUpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoVIP_2eproto();
  return *default_instance_;
}

VIPProductSpeedUpResp* VIPProductSpeedUpResp::default_instance_ = NULL;

VIPProductSpeedUpResp* VIPProductSpeedUpResp::New() const {
  return new VIPProductSpeedUpResp;
}

void VIPProductSpeedUpResp::Clear() {
  speedupusecnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPProductSpeedUpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoVIP.VIPProductSpeedUpResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 speedupUseCnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speedupusecnt_)));
          set_has_speedupusecnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoVIP.VIPProductSpeedUpResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoVIP.VIPProductSpeedUpResp)
  return false;
#undef DO_
}

void VIPProductSpeedUpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoVIP.VIPProductSpeedUpResp)
  // required uint32 speedupUseCnt = 1;
  if (has_speedupusecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->speedupusecnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoVIP.VIPProductSpeedUpResp)
}

::google::protobuf::uint8* VIPProductSpeedUpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoVIP.VIPProductSpeedUpResp)
  // required uint32 speedupUseCnt = 1;
  if (has_speedupusecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->speedupusecnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoVIP.VIPProductSpeedUpResp)
  return target;
}

int VIPProductSpeedUpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 speedupUseCnt = 1;
    if (has_speedupusecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speedupusecnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPProductSpeedUpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPProductSpeedUpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPProductSpeedUpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPProductSpeedUpResp::MergeFrom(const VIPProductSpeedUpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speedupusecnt()) {
      set_speedupusecnt(from.speedupusecnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPProductSpeedUpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPProductSpeedUpResp::CopyFrom(const VIPProductSpeedUpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPProductSpeedUpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VIPProductSpeedUpResp::Swap(VIPProductSpeedUpResp* other) {
  if (other != this) {
    std::swap(speedupusecnt_, other->speedupusecnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPProductSpeedUpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPProductSpeedUpResp_descriptor_;
  metadata.reflection = VIPProductSpeedUpResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIPRemoveOrderCDReq::kOrderudFieldNumber;
#endif  // !_MSC_VER

VIPRemoveOrderCDReq::VIPRemoveOrderCDReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoVIP.VIPRemoveOrderCDReq)
}

void VIPRemoveOrderCDReq::InitAsDefaultInstance() {
}

VIPRemoveOrderCDReq::VIPRemoveOrderCDReq(const VIPRemoveOrderCDReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoVIP.VIPRemoveOrderCDReq)
}

void VIPRemoveOrderCDReq::SharedCtor() {
  _cached_size_ = 0;
  orderud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPRemoveOrderCDReq::~VIPRemoveOrderCDReq() {
  // @@protoc_insertion_point(destructor:ProtoVIP.VIPRemoveOrderCDReq)
  SharedDtor();
}

void VIPRemoveOrderCDReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VIPRemoveOrderCDReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPRemoveOrderCDReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPRemoveOrderCDReq_descriptor_;
}

const VIPRemoveOrderCDReq& VIPRemoveOrderCDReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoVIP_2eproto();
  return *default_instance_;
}

VIPRemoveOrderCDReq* VIPRemoveOrderCDReq::default_instance_ = NULL;

VIPRemoveOrderCDReq* VIPRemoveOrderCDReq::New() const {
  return new VIPRemoveOrderCDReq;
}

void VIPRemoveOrderCDReq::Clear() {
  orderud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPRemoveOrderCDReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoVIP.VIPRemoveOrderCDReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 orderud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orderud_)));
          set_has_orderud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoVIP.VIPRemoveOrderCDReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoVIP.VIPRemoveOrderCDReq)
  return false;
#undef DO_
}

void VIPRemoveOrderCDReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoVIP.VIPRemoveOrderCDReq)
  // required uint32 orderud = 1;
  if (has_orderud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->orderud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoVIP.VIPRemoveOrderCDReq)
}

::google::protobuf::uint8* VIPRemoveOrderCDReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoVIP.VIPRemoveOrderCDReq)
  // required uint32 orderud = 1;
  if (has_orderud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->orderud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoVIP.VIPRemoveOrderCDReq)
  return target;
}

int VIPRemoveOrderCDReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 orderud = 1;
    if (has_orderud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orderud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPRemoveOrderCDReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPRemoveOrderCDReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPRemoveOrderCDReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPRemoveOrderCDReq::MergeFrom(const VIPRemoveOrderCDReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderud()) {
      set_orderud(from.orderud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPRemoveOrderCDReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPRemoveOrderCDReq::CopyFrom(const VIPRemoveOrderCDReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPRemoveOrderCDReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VIPRemoveOrderCDReq::Swap(VIPRemoveOrderCDReq* other) {
  if (other != this) {
    std::swap(orderud_, other->orderud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPRemoveOrderCDReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPRemoveOrderCDReq_descriptor_;
  metadata.reflection = VIPRemoveOrderCDReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIPRemoveOrderCDResp::kSpeedupUseCntFieldNumber;
#endif  // !_MSC_VER

VIPRemoveOrderCDResp::VIPRemoveOrderCDResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoVIP.VIPRemoveOrderCDResp)
}

void VIPRemoveOrderCDResp::InitAsDefaultInstance() {
}

VIPRemoveOrderCDResp::VIPRemoveOrderCDResp(const VIPRemoveOrderCDResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoVIP.VIPRemoveOrderCDResp)
}

void VIPRemoveOrderCDResp::SharedCtor() {
  _cached_size_ = 0;
  speedupusecnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPRemoveOrderCDResp::~VIPRemoveOrderCDResp() {
  // @@protoc_insertion_point(destructor:ProtoVIP.VIPRemoveOrderCDResp)
  SharedDtor();
}

void VIPRemoveOrderCDResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VIPRemoveOrderCDResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPRemoveOrderCDResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPRemoveOrderCDResp_descriptor_;
}

const VIPRemoveOrderCDResp& VIPRemoveOrderCDResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoVIP_2eproto();
  return *default_instance_;
}

VIPRemoveOrderCDResp* VIPRemoveOrderCDResp::default_instance_ = NULL;

VIPRemoveOrderCDResp* VIPRemoveOrderCDResp::New() const {
  return new VIPRemoveOrderCDResp;
}

void VIPRemoveOrderCDResp::Clear() {
  speedupusecnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPRemoveOrderCDResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoVIP.VIPRemoveOrderCDResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 speedupUseCnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speedupusecnt_)));
          set_has_speedupusecnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoVIP.VIPRemoveOrderCDResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoVIP.VIPRemoveOrderCDResp)
  return false;
#undef DO_
}

void VIPRemoveOrderCDResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoVIP.VIPRemoveOrderCDResp)
  // required uint32 speedupUseCnt = 1;
  if (has_speedupusecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->speedupusecnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoVIP.VIPRemoveOrderCDResp)
}

::google::protobuf::uint8* VIPRemoveOrderCDResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoVIP.VIPRemoveOrderCDResp)
  // required uint32 speedupUseCnt = 1;
  if (has_speedupusecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->speedupusecnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoVIP.VIPRemoveOrderCDResp)
  return target;
}

int VIPRemoveOrderCDResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 speedupUseCnt = 1;
    if (has_speedupusecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speedupusecnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPRemoveOrderCDResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPRemoveOrderCDResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPRemoveOrderCDResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPRemoveOrderCDResp::MergeFrom(const VIPRemoveOrderCDResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speedupusecnt()) {
      set_speedupusecnt(from.speedupusecnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPRemoveOrderCDResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPRemoveOrderCDResp::CopyFrom(const VIPRemoveOrderCDResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPRemoveOrderCDResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VIPRemoveOrderCDResp::Swap(VIPRemoveOrderCDResp* other) {
  if (other != this) {
    std::swap(speedupusecnt_, other->speedupusecnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPRemoveOrderCDResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPRemoveOrderCDResp_descriptor_;
  metadata.reflection = VIPRemoveOrderCDResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushVIPLevel::kNewLevelFieldNumber;
#endif  // !_MSC_VER

PushVIPLevel::PushVIPLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoVIP.PushVIPLevel)
}

void PushVIPLevel::InitAsDefaultInstance() {
}

PushVIPLevel::PushVIPLevel(const PushVIPLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoVIP.PushVIPLevel)
}

void PushVIPLevel::SharedCtor() {
  _cached_size_ = 0;
  newlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushVIPLevel::~PushVIPLevel() {
  // @@protoc_insertion_point(destructor:ProtoVIP.PushVIPLevel)
  SharedDtor();
}

void PushVIPLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PushVIPLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushVIPLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushVIPLevel_descriptor_;
}

const PushVIPLevel& PushVIPLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoVIP_2eproto();
  return *default_instance_;
}

PushVIPLevel* PushVIPLevel::default_instance_ = NULL;

PushVIPLevel* PushVIPLevel::New() const {
  return new PushVIPLevel;
}

void PushVIPLevel::Clear() {
  newlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushVIPLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoVIP.PushVIPLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 newLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newlevel_)));
          set_has_newlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoVIP.PushVIPLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoVIP.PushVIPLevel)
  return false;
#undef DO_
}

void PushVIPLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoVIP.PushVIPLevel)
  // required uint32 newLevel = 1;
  if (has_newlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->newlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoVIP.PushVIPLevel)
}

::google::protobuf::uint8* PushVIPLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoVIP.PushVIPLevel)
  // required uint32 newLevel = 1;
  if (has_newlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->newlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoVIP.PushVIPLevel)
  return target;
}

int PushVIPLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 newLevel = 1;
    if (has_newlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushVIPLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushVIPLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushVIPLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushVIPLevel::MergeFrom(const PushVIPLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newlevel()) {
      set_newlevel(from.newlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushVIPLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushVIPLevel::CopyFrom(const PushVIPLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushVIPLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PushVIPLevel::Swap(PushVIPLevel* other) {
  if (other != this) {
    std::swap(newlevel_, other->newlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushVIPLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushVIPLevel_descriptor_;
  metadata.reflection = PushVIPLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VIPShelfUnLockReq::VIPShelfUnLockReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoVIP.VIPShelfUnLockReq)
}

void VIPShelfUnLockReq::InitAsDefaultInstance() {
}

VIPShelfUnLockReq::VIPShelfUnLockReq(const VIPShelfUnLockReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoVIP.VIPShelfUnLockReq)
}

void VIPShelfUnLockReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPShelfUnLockReq::~VIPShelfUnLockReq() {
  // @@protoc_insertion_point(destructor:ProtoVIP.VIPShelfUnLockReq)
  SharedDtor();
}

void VIPShelfUnLockReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VIPShelfUnLockReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPShelfUnLockReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPShelfUnLockReq_descriptor_;
}

const VIPShelfUnLockReq& VIPShelfUnLockReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoVIP_2eproto();
  return *default_instance_;
}

VIPShelfUnLockReq* VIPShelfUnLockReq::default_instance_ = NULL;

VIPShelfUnLockReq* VIPShelfUnLockReq::New() const {
  return new VIPShelfUnLockReq;
}

void VIPShelfUnLockReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPShelfUnLockReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoVIP.VIPShelfUnLockReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoVIP.VIPShelfUnLockReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoVIP.VIPShelfUnLockReq)
  return false;
#undef DO_
}

void VIPShelfUnLockReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoVIP.VIPShelfUnLockReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoVIP.VIPShelfUnLockReq)
}

::google::protobuf::uint8* VIPShelfUnLockReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoVIP.VIPShelfUnLockReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoVIP.VIPShelfUnLockReq)
  return target;
}

int VIPShelfUnLockReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPShelfUnLockReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPShelfUnLockReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPShelfUnLockReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPShelfUnLockReq::MergeFrom(const VIPShelfUnLockReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPShelfUnLockReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPShelfUnLockReq::CopyFrom(const VIPShelfUnLockReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPShelfUnLockReq::IsInitialized() const {

  return true;
}

void VIPShelfUnLockReq::Swap(VIPShelfUnLockReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPShelfUnLockReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPShelfUnLockReq_descriptor_;
  metadata.reflection = VIPShelfUnLockReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIPShelfUnLockResp::kShopFieldNumber;
#endif  // !_MSC_VER

VIPShelfUnLockResp::VIPShelfUnLockResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoVIP.VIPShelfUnLockResp)
}

void VIPShelfUnLockResp::InitAsDefaultInstance() {
  shop_ = const_cast< ::ProtoShop::ShopCPP*>(&::ProtoShop::ShopCPP::default_instance());
}

VIPShelfUnLockResp::VIPShelfUnLockResp(const VIPShelfUnLockResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoVIP.VIPShelfUnLockResp)
}

void VIPShelfUnLockResp::SharedCtor() {
  _cached_size_ = 0;
  shop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPShelfUnLockResp::~VIPShelfUnLockResp() {
  // @@protoc_insertion_point(destructor:ProtoVIP.VIPShelfUnLockResp)
  SharedDtor();
}

void VIPShelfUnLockResp::SharedDtor() {
  if (this != default_instance_) {
    delete shop_;
  }
}

void VIPShelfUnLockResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPShelfUnLockResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPShelfUnLockResp_descriptor_;
}

const VIPShelfUnLockResp& VIPShelfUnLockResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoVIP_2eproto();
  return *default_instance_;
}

VIPShelfUnLockResp* VIPShelfUnLockResp::default_instance_ = NULL;

VIPShelfUnLockResp* VIPShelfUnLockResp::New() const {
  return new VIPShelfUnLockResp;
}

void VIPShelfUnLockResp::Clear() {
  if (has_shop()) {
    if (shop_ != NULL) shop_->::ProtoShop::ShopCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPShelfUnLockResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoVIP.VIPShelfUnLockResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoShop.ShopCPP shop = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoVIP.VIPShelfUnLockResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoVIP.VIPShelfUnLockResp)
  return false;
#undef DO_
}

void VIPShelfUnLockResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoVIP.VIPShelfUnLockResp)
  // required .ProtoShop.ShopCPP shop = 1;
  if (has_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoVIP.VIPShelfUnLockResp)
}

::google::protobuf::uint8* VIPShelfUnLockResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoVIP.VIPShelfUnLockResp)
  // required .ProtoShop.ShopCPP shop = 1;
  if (has_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoVIP.VIPShelfUnLockResp)
  return target;
}

int VIPShelfUnLockResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoShop.ShopCPP shop = 1;
    if (has_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPShelfUnLockResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPShelfUnLockResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPShelfUnLockResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPShelfUnLockResp::MergeFrom(const VIPShelfUnLockResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop()) {
      mutable_shop()->::ProtoShop::ShopCPP::MergeFrom(from.shop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPShelfUnLockResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPShelfUnLockResp::CopyFrom(const VIPShelfUnLockResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPShelfUnLockResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_shop()) {
    if (!this->shop().IsInitialized()) return false;
  }
  return true;
}

void VIPShelfUnLockResp::Swap(VIPShelfUnLockResp* other) {
  if (other != this) {
    std::swap(shop_, other->shop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPShelfUnLockResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPShelfUnLockResp_descriptor_;
  metadata.reflection = VIPShelfUnLockResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIPAddProductQueueReq::kUdFieldNumber;
#endif  // !_MSC_VER

VIPAddProductQueueReq::VIPAddProductQueueReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoVIP.VIPAddProductQueueReq)
}

void VIPAddProductQueueReq::InitAsDefaultInstance() {
}

VIPAddProductQueueReq::VIPAddProductQueueReq(const VIPAddProductQueueReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoVIP.VIPAddProductQueueReq)
}

void VIPAddProductQueueReq::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPAddProductQueueReq::~VIPAddProductQueueReq() {
  // @@protoc_insertion_point(destructor:ProtoVIP.VIPAddProductQueueReq)
  SharedDtor();
}

void VIPAddProductQueueReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VIPAddProductQueueReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPAddProductQueueReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPAddProductQueueReq_descriptor_;
}

const VIPAddProductQueueReq& VIPAddProductQueueReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoVIP_2eproto();
  return *default_instance_;
}

VIPAddProductQueueReq* VIPAddProductQueueReq::default_instance_ = NULL;

VIPAddProductQueueReq* VIPAddProductQueueReq::New() const {
  return new VIPAddProductQueueReq;
}

void VIPAddProductQueueReq::Clear() {
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPAddProductQueueReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoVIP.VIPAddProductQueueReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoVIP.VIPAddProductQueueReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoVIP.VIPAddProductQueueReq)
  return false;
#undef DO_
}

void VIPAddProductQueueReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoVIP.VIPAddProductQueueReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoVIP.VIPAddProductQueueReq)
}

::google::protobuf::uint8* VIPAddProductQueueReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoVIP.VIPAddProductQueueReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoVIP.VIPAddProductQueueReq)
  return target;
}

int VIPAddProductQueueReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPAddProductQueueReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPAddProductQueueReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPAddProductQueueReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPAddProductQueueReq::MergeFrom(const VIPAddProductQueueReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPAddProductQueueReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPAddProductQueueReq::CopyFrom(const VIPAddProductQueueReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPAddProductQueueReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VIPAddProductQueueReq::Swap(VIPAddProductQueueReq* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPAddProductQueueReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPAddProductQueueReq_descriptor_;
  metadata.reflection = VIPAddProductQueueReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIPAddProductQueueResp::kEquipFieldNumber;
#endif  // !_MSC_VER

VIPAddProductQueueResp::VIPAddProductQueueResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoVIP.VIPAddProductQueueResp)
}

void VIPAddProductQueueResp::InitAsDefaultInstance() {
  equip_ = const_cast< ::ProtoProduce::ProduceEquipCPP*>(&::ProtoProduce::ProduceEquipCPP::default_instance());
}

VIPAddProductQueueResp::VIPAddProductQueueResp(const VIPAddProductQueueResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoVIP.VIPAddProductQueueResp)
}

void VIPAddProductQueueResp::SharedCtor() {
  _cached_size_ = 0;
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPAddProductQueueResp::~VIPAddProductQueueResp() {
  // @@protoc_insertion_point(destructor:ProtoVIP.VIPAddProductQueueResp)
  SharedDtor();
}

void VIPAddProductQueueResp::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
  }
}

void VIPAddProductQueueResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPAddProductQueueResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPAddProductQueueResp_descriptor_;
}

const VIPAddProductQueueResp& VIPAddProductQueueResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoVIP_2eproto();
  return *default_instance_;
}

VIPAddProductQueueResp* VIPAddProductQueueResp::default_instance_ = NULL;

VIPAddProductQueueResp* VIPAddProductQueueResp::New() const {
  return new VIPAddProductQueueResp;
}

void VIPAddProductQueueResp::Clear() {
  if (has_equip()) {
    if (equip_ != NULL) equip_->::ProtoProduce::ProduceEquipCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPAddProductQueueResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoVIP.VIPAddProductQueueResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.ProduceEquipCPP equip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoVIP.VIPAddProductQueueResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoVIP.VIPAddProductQueueResp)
  return false;
#undef DO_
}

void VIPAddProductQueueResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoVIP.VIPAddProductQueueResp)
  // required .ProtoProduce.ProduceEquipCPP equip = 1;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoVIP.VIPAddProductQueueResp)
}

::google::protobuf::uint8* VIPAddProductQueueResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoVIP.VIPAddProductQueueResp)
  // required .ProtoProduce.ProduceEquipCPP equip = 1;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoVIP.VIPAddProductQueueResp)
  return target;
}

int VIPAddProductQueueResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.ProduceEquipCPP equip = 1;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPAddProductQueueResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPAddProductQueueResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPAddProductQueueResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPAddProductQueueResp::MergeFrom(const VIPAddProductQueueResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip()) {
      mutable_equip()->::ProtoProduce::ProduceEquipCPP::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPAddProductQueueResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPAddProductQueueResp::CopyFrom(const VIPAddProductQueueResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPAddProductQueueResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  return true;
}

void VIPAddProductQueueResp::Swap(VIPAddProductQueueResp* other) {
  if (other != this) {
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPAddProductQueueResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPAddProductQueueResp_descriptor_;
  metadata.reflection = VIPAddProductQueueResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoVIP

// @@protoc_insertion_point(global_scope)
