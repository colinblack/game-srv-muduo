// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoRotaryTable.proto

#ifndef PROTOBUF_ProtoRotaryTable_2eproto__INCLUDED
#define PROTOBUF_ProtoRotaryTable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "DataCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoRotaryTable {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoRotaryTable_2eproto();
void protobuf_AssignDesc_ProtoRotaryTable_2eproto();
void protobuf_ShutdownFile_ProtoRotaryTable_2eproto();

class RotaryTableCPP;
class DrawCntCPP;
class GetRotaryTableInfoReq;
class GetRotaryTableInfoResp;
class DrawRotaryTableReq;
class DrawRotaryTableResp;
class ShareReq;
class ShareResp;

// ===================================================================

class RotaryTableCPP : public ::google::protobuf::Message {
 public:
  RotaryTableCPP();
  virtual ~RotaryTableCPP();

  RotaryTableCPP(const RotaryTableCPP& from);

  inline RotaryTableCPP& operator=(const RotaryTableCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RotaryTableCPP& default_instance();

  void Swap(RotaryTableCPP* other);

  // implements Message ----------------------------------------------

  RotaryTableCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RotaryTableCPP& from);
  void MergeFrom(const RotaryTableCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gridid = 1;
  inline bool has_gridid() const;
  inline void clear_gridid();
  static const int kGrididFieldNumber = 1;
  inline ::google::protobuf::uint32 gridid() const;
  inline void set_gridid(::google::protobuf::uint32 value);

  // required uint32 griditemtype = 2;
  inline bool has_griditemtype() const;
  inline void clear_griditemtype();
  static const int kGriditemtypeFieldNumber = 2;
  inline ::google::protobuf::uint32 griditemtype() const;
  inline void set_griditemtype(::google::protobuf::uint32 value);

  // optional uint32 griditemid = 3;
  inline bool has_griditemid() const;
  inline void clear_griditemid();
  static const int kGriditemidFieldNumber = 3;
  inline ::google::protobuf::uint32 griditemid() const;
  inline void set_griditemid(::google::protobuf::uint32 value);

  // required uint32 griditemcnt = 4;
  inline bool has_griditemcnt() const;
  inline void clear_griditemcnt();
  static const int kGriditemcntFieldNumber = 4;
  inline ::google::protobuf::uint32 griditemcnt() const;
  inline void set_griditemcnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoRotaryTable.RotaryTableCPP)
 private:
  inline void set_has_gridid();
  inline void clear_has_gridid();
  inline void set_has_griditemtype();
  inline void clear_has_griditemtype();
  inline void set_has_griditemid();
  inline void clear_has_griditemid();
  inline void set_has_griditemcnt();
  inline void clear_has_griditemcnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gridid_;
  ::google::protobuf::uint32 griditemtype_;
  ::google::protobuf::uint32 griditemid_;
  ::google::protobuf::uint32 griditemcnt_;
  friend void  protobuf_AddDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_AssignDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_ShutdownFile_ProtoRotaryTable_2eproto();

  void InitAsDefaultInstance();
  static RotaryTableCPP* default_instance_;
};
// -------------------------------------------------------------------

class DrawCntCPP : public ::google::protobuf::Message {
 public:
  DrawCntCPP();
  virtual ~DrawCntCPP();

  DrawCntCPP(const DrawCntCPP& from);

  inline DrawCntCPP& operator=(const DrawCntCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrawCntCPP& default_instance();

  void Swap(DrawCntCPP* other);

  // implements Message ----------------------------------------------

  DrawCntCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrawCntCPP& from);
  void MergeFrom(const DrawCntCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 freeDrawCnt = 1;
  inline bool has_freedrawcnt() const;
  inline void clear_freedrawcnt();
  static const int kFreeDrawCntFieldNumber = 1;
  inline ::google::protobuf::uint32 freedrawcnt() const;
  inline void set_freedrawcnt(::google::protobuf::uint32 value);

  // required uint32 usedFreeDrawCnt = 2;
  inline bool has_usedfreedrawcnt() const;
  inline void clear_usedfreedrawcnt();
  static const int kUsedFreeDrawCntFieldNumber = 2;
  inline ::google::protobuf::uint32 usedfreedrawcnt() const;
  inline void set_usedfreedrawcnt(::google::protobuf::uint32 value);

  // required uint32 usedFriendlyDrawCnt = 3;
  inline bool has_usedfriendlydrawcnt() const;
  inline void clear_usedfriendlydrawcnt();
  static const int kUsedFriendlyDrawCntFieldNumber = 3;
  inline ::google::protobuf::uint32 usedfriendlydrawcnt() const;
  inline void set_usedfriendlydrawcnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoRotaryTable.DrawCntCPP)
 private:
  inline void set_has_freedrawcnt();
  inline void clear_has_freedrawcnt();
  inline void set_has_usedfreedrawcnt();
  inline void clear_has_usedfreedrawcnt();
  inline void set_has_usedfriendlydrawcnt();
  inline void clear_has_usedfriendlydrawcnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 freedrawcnt_;
  ::google::protobuf::uint32 usedfreedrawcnt_;
  ::google::protobuf::uint32 usedfriendlydrawcnt_;
  friend void  protobuf_AddDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_AssignDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_ShutdownFile_ProtoRotaryTable_2eproto();

  void InitAsDefaultInstance();
  static DrawCntCPP* default_instance_;
};
// -------------------------------------------------------------------

class GetRotaryTableInfoReq : public ::google::protobuf::Message {
 public:
  GetRotaryTableInfoReq();
  virtual ~GetRotaryTableInfoReq();

  GetRotaryTableInfoReq(const GetRotaryTableInfoReq& from);

  inline GetRotaryTableInfoReq& operator=(const GetRotaryTableInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRotaryTableInfoReq& default_instance();

  void Swap(GetRotaryTableInfoReq* other);

  // implements Message ----------------------------------------------

  GetRotaryTableInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRotaryTableInfoReq& from);
  void MergeFrom(const GetRotaryTableInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoRotaryTable.GetRotaryTableInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_AssignDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_ShutdownFile_ProtoRotaryTable_2eproto();

  void InitAsDefaultInstance();
  static GetRotaryTableInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class GetRotaryTableInfoResp : public ::google::protobuf::Message {
 public:
  GetRotaryTableInfoResp();
  virtual ~GetRotaryTableInfoResp();

  GetRotaryTableInfoResp(const GetRotaryTableInfoResp& from);

  inline GetRotaryTableInfoResp& operator=(const GetRotaryTableInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRotaryTableInfoResp& default_instance();

  void Swap(GetRotaryTableInfoResp* other);

  // implements Message ----------------------------------------------

  GetRotaryTableInfoResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRotaryTableInfoResp& from);
  void MergeFrom(const GetRotaryTableInfoResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoRotaryTable.RotaryTableCPP rotarytable = 1;
  inline int rotarytable_size() const;
  inline void clear_rotarytable();
  static const int kRotarytableFieldNumber = 1;
  inline const ::ProtoRotaryTable::RotaryTableCPP& rotarytable(int index) const;
  inline ::ProtoRotaryTable::RotaryTableCPP* mutable_rotarytable(int index);
  inline ::ProtoRotaryTable::RotaryTableCPP* add_rotarytable();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoRotaryTable::RotaryTableCPP >&
      rotarytable() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoRotaryTable::RotaryTableCPP >*
      mutable_rotarytable();

  // required .ProtoRotaryTable.DrawCntCPP drawinfo = 2;
  inline bool has_drawinfo() const;
  inline void clear_drawinfo();
  static const int kDrawinfoFieldNumber = 2;
  inline const ::ProtoRotaryTable::DrawCntCPP& drawinfo() const;
  inline ::ProtoRotaryTable::DrawCntCPP* mutable_drawinfo();
  inline ::ProtoRotaryTable::DrawCntCPP* release_drawinfo();
  inline void set_allocated_drawinfo(::ProtoRotaryTable::DrawCntCPP* drawinfo);

  // @@protoc_insertion_point(class_scope:ProtoRotaryTable.GetRotaryTableInfoResp)
 private:
  inline void set_has_drawinfo();
  inline void clear_has_drawinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoRotaryTable::RotaryTableCPP > rotarytable_;
  ::ProtoRotaryTable::DrawCntCPP* drawinfo_;
  friend void  protobuf_AddDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_AssignDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_ShutdownFile_ProtoRotaryTable_2eproto();

  void InitAsDefaultInstance();
  static GetRotaryTableInfoResp* default_instance_;
};
// -------------------------------------------------------------------

class DrawRotaryTableReq : public ::google::protobuf::Message {
 public:
  DrawRotaryTableReq();
  virtual ~DrawRotaryTableReq();

  DrawRotaryTableReq(const DrawRotaryTableReq& from);

  inline DrawRotaryTableReq& operator=(const DrawRotaryTableReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrawRotaryTableReq& default_instance();

  void Swap(DrawRotaryTableReq* other);

  // implements Message ----------------------------------------------

  DrawRotaryTableReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrawRotaryTableReq& from);
  void MergeFrom(const DrawRotaryTableReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoRotaryTable.DrawRotaryTableReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_AssignDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_ShutdownFile_ProtoRotaryTable_2eproto();

  void InitAsDefaultInstance();
  static DrawRotaryTableReq* default_instance_;
};
// -------------------------------------------------------------------

class DrawRotaryTableResp : public ::google::protobuf::Message {
 public:
  DrawRotaryTableResp();
  virtual ~DrawRotaryTableResp();

  DrawRotaryTableResp(const DrawRotaryTableResp& from);

  inline DrawRotaryTableResp& operator=(const DrawRotaryTableResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrawRotaryTableResp& default_instance();

  void Swap(DrawRotaryTableResp* other);

  // implements Message ----------------------------------------------

  DrawRotaryTableResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrawRotaryTableResp& from);
  void MergeFrom(const DrawRotaryTableResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gridid = 1;
  inline bool has_gridid() const;
  inline void clear_gridid();
  static const int kGrididFieldNumber = 1;
  inline ::google::protobuf::uint32 gridid() const;
  inline void set_gridid(::google::protobuf::uint32 value);

  // required .DataCommon.CommonItemsCPP commons = 2;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 2;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  inline void set_allocated_commons(::DataCommon::CommonItemsCPP* commons);

  // required .ProtoRotaryTable.DrawCntCPP drawinfo = 3;
  inline bool has_drawinfo() const;
  inline void clear_drawinfo();
  static const int kDrawinfoFieldNumber = 3;
  inline const ::ProtoRotaryTable::DrawCntCPP& drawinfo() const;
  inline ::ProtoRotaryTable::DrawCntCPP* mutable_drawinfo();
  inline ::ProtoRotaryTable::DrawCntCPP* release_drawinfo();
  inline void set_allocated_drawinfo(::ProtoRotaryTable::DrawCntCPP* drawinfo);

  // required uint32 curfriendlyvalue = 4;
  inline bool has_curfriendlyvalue() const;
  inline void clear_curfriendlyvalue();
  static const int kCurfriendlyvalueFieldNumber = 4;
  inline ::google::protobuf::uint32 curfriendlyvalue() const;
  inline void set_curfriendlyvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoRotaryTable.DrawRotaryTableResp)
 private:
  inline void set_has_gridid();
  inline void clear_has_gridid();
  inline void set_has_commons();
  inline void clear_has_commons();
  inline void set_has_drawinfo();
  inline void clear_has_drawinfo();
  inline void set_has_curfriendlyvalue();
  inline void clear_has_curfriendlyvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DataCommon::CommonItemsCPP* commons_;
  ::google::protobuf::uint32 gridid_;
  ::google::protobuf::uint32 curfriendlyvalue_;
  ::ProtoRotaryTable::DrawCntCPP* drawinfo_;
  friend void  protobuf_AddDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_AssignDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_ShutdownFile_ProtoRotaryTable_2eproto();

  void InitAsDefaultInstance();
  static DrawRotaryTableResp* default_instance_;
};
// -------------------------------------------------------------------

class ShareReq : public ::google::protobuf::Message {
 public:
  ShareReq();
  virtual ~ShareReq();

  ShareReq(const ShareReq& from);

  inline ShareReq& operator=(const ShareReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareReq& default_instance();

  void Swap(ShareReq* other);

  // implements Message ----------------------------------------------

  ShareReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShareReq& from);
  void MergeFrom(const ShareReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoRotaryTable.ShareReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_AssignDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_ShutdownFile_ProtoRotaryTable_2eproto();

  void InitAsDefaultInstance();
  static ShareReq* default_instance_;
};
// -------------------------------------------------------------------

class ShareResp : public ::google::protobuf::Message {
 public:
  ShareResp();
  virtual ~ShareResp();

  ShareResp(const ShareResp& from);

  inline ShareResp& operator=(const ShareResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareResp& default_instance();

  void Swap(ShareResp* other);

  // implements Message ----------------------------------------------

  ShareResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShareResp& from);
  void MergeFrom(const ShareResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoRotaryTable.DrawCntCPP drawinfo = 1;
  inline bool has_drawinfo() const;
  inline void clear_drawinfo();
  static const int kDrawinfoFieldNumber = 1;
  inline const ::ProtoRotaryTable::DrawCntCPP& drawinfo() const;
  inline ::ProtoRotaryTable::DrawCntCPP* mutable_drawinfo();
  inline ::ProtoRotaryTable::DrawCntCPP* release_drawinfo();
  inline void set_allocated_drawinfo(::ProtoRotaryTable::DrawCntCPP* drawinfo);

  // @@protoc_insertion_point(class_scope:ProtoRotaryTable.ShareResp)
 private:
  inline void set_has_drawinfo();
  inline void clear_has_drawinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoRotaryTable::DrawCntCPP* drawinfo_;
  friend void  protobuf_AddDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_AssignDesc_ProtoRotaryTable_2eproto();
  friend void protobuf_ShutdownFile_ProtoRotaryTable_2eproto();

  void InitAsDefaultInstance();
  static ShareResp* default_instance_;
};
// ===================================================================


// ===================================================================

// RotaryTableCPP

// required uint32 gridid = 1;
inline bool RotaryTableCPP::has_gridid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RotaryTableCPP::set_has_gridid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RotaryTableCPP::clear_has_gridid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RotaryTableCPP::clear_gridid() {
  gridid_ = 0u;
  clear_has_gridid();
}
inline ::google::protobuf::uint32 RotaryTableCPP::gridid() const {
  // @@protoc_insertion_point(field_get:ProtoRotaryTable.RotaryTableCPP.gridid)
  return gridid_;
}
inline void RotaryTableCPP::set_gridid(::google::protobuf::uint32 value) {
  set_has_gridid();
  gridid_ = value;
  // @@protoc_insertion_point(field_set:ProtoRotaryTable.RotaryTableCPP.gridid)
}

// required uint32 griditemtype = 2;
inline bool RotaryTableCPP::has_griditemtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RotaryTableCPP::set_has_griditemtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RotaryTableCPP::clear_has_griditemtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RotaryTableCPP::clear_griditemtype() {
  griditemtype_ = 0u;
  clear_has_griditemtype();
}
inline ::google::protobuf::uint32 RotaryTableCPP::griditemtype() const {
  // @@protoc_insertion_point(field_get:ProtoRotaryTable.RotaryTableCPP.griditemtype)
  return griditemtype_;
}
inline void RotaryTableCPP::set_griditemtype(::google::protobuf::uint32 value) {
  set_has_griditemtype();
  griditemtype_ = value;
  // @@protoc_insertion_point(field_set:ProtoRotaryTable.RotaryTableCPP.griditemtype)
}

// optional uint32 griditemid = 3;
inline bool RotaryTableCPP::has_griditemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RotaryTableCPP::set_has_griditemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RotaryTableCPP::clear_has_griditemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RotaryTableCPP::clear_griditemid() {
  griditemid_ = 0u;
  clear_has_griditemid();
}
inline ::google::protobuf::uint32 RotaryTableCPP::griditemid() const {
  // @@protoc_insertion_point(field_get:ProtoRotaryTable.RotaryTableCPP.griditemid)
  return griditemid_;
}
inline void RotaryTableCPP::set_griditemid(::google::protobuf::uint32 value) {
  set_has_griditemid();
  griditemid_ = value;
  // @@protoc_insertion_point(field_set:ProtoRotaryTable.RotaryTableCPP.griditemid)
}

// required uint32 griditemcnt = 4;
inline bool RotaryTableCPP::has_griditemcnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RotaryTableCPP::set_has_griditemcnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RotaryTableCPP::clear_has_griditemcnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RotaryTableCPP::clear_griditemcnt() {
  griditemcnt_ = 0u;
  clear_has_griditemcnt();
}
inline ::google::protobuf::uint32 RotaryTableCPP::griditemcnt() const {
  // @@protoc_insertion_point(field_get:ProtoRotaryTable.RotaryTableCPP.griditemcnt)
  return griditemcnt_;
}
inline void RotaryTableCPP::set_griditemcnt(::google::protobuf::uint32 value) {
  set_has_griditemcnt();
  griditemcnt_ = value;
  // @@protoc_insertion_point(field_set:ProtoRotaryTable.RotaryTableCPP.griditemcnt)
}

// -------------------------------------------------------------------

// DrawCntCPP

// required uint32 freeDrawCnt = 1;
inline bool DrawCntCPP::has_freedrawcnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrawCntCPP::set_has_freedrawcnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrawCntCPP::clear_has_freedrawcnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrawCntCPP::clear_freedrawcnt() {
  freedrawcnt_ = 0u;
  clear_has_freedrawcnt();
}
inline ::google::protobuf::uint32 DrawCntCPP::freedrawcnt() const {
  // @@protoc_insertion_point(field_get:ProtoRotaryTable.DrawCntCPP.freeDrawCnt)
  return freedrawcnt_;
}
inline void DrawCntCPP::set_freedrawcnt(::google::protobuf::uint32 value) {
  set_has_freedrawcnt();
  freedrawcnt_ = value;
  // @@protoc_insertion_point(field_set:ProtoRotaryTable.DrawCntCPP.freeDrawCnt)
}

// required uint32 usedFreeDrawCnt = 2;
inline bool DrawCntCPP::has_usedfreedrawcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DrawCntCPP::set_has_usedfreedrawcnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DrawCntCPP::clear_has_usedfreedrawcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DrawCntCPP::clear_usedfreedrawcnt() {
  usedfreedrawcnt_ = 0u;
  clear_has_usedfreedrawcnt();
}
inline ::google::protobuf::uint32 DrawCntCPP::usedfreedrawcnt() const {
  // @@protoc_insertion_point(field_get:ProtoRotaryTable.DrawCntCPP.usedFreeDrawCnt)
  return usedfreedrawcnt_;
}
inline void DrawCntCPP::set_usedfreedrawcnt(::google::protobuf::uint32 value) {
  set_has_usedfreedrawcnt();
  usedfreedrawcnt_ = value;
  // @@protoc_insertion_point(field_set:ProtoRotaryTable.DrawCntCPP.usedFreeDrawCnt)
}

// required uint32 usedFriendlyDrawCnt = 3;
inline bool DrawCntCPP::has_usedfriendlydrawcnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DrawCntCPP::set_has_usedfriendlydrawcnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DrawCntCPP::clear_has_usedfriendlydrawcnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DrawCntCPP::clear_usedfriendlydrawcnt() {
  usedfriendlydrawcnt_ = 0u;
  clear_has_usedfriendlydrawcnt();
}
inline ::google::protobuf::uint32 DrawCntCPP::usedfriendlydrawcnt() const {
  // @@protoc_insertion_point(field_get:ProtoRotaryTable.DrawCntCPP.usedFriendlyDrawCnt)
  return usedfriendlydrawcnt_;
}
inline void DrawCntCPP::set_usedfriendlydrawcnt(::google::protobuf::uint32 value) {
  set_has_usedfriendlydrawcnt();
  usedfriendlydrawcnt_ = value;
  // @@protoc_insertion_point(field_set:ProtoRotaryTable.DrawCntCPP.usedFriendlyDrawCnt)
}

// -------------------------------------------------------------------

// GetRotaryTableInfoReq

// -------------------------------------------------------------------

// GetRotaryTableInfoResp

// repeated .ProtoRotaryTable.RotaryTableCPP rotarytable = 1;
inline int GetRotaryTableInfoResp::rotarytable_size() const {
  return rotarytable_.size();
}
inline void GetRotaryTableInfoResp::clear_rotarytable() {
  rotarytable_.Clear();
}
inline const ::ProtoRotaryTable::RotaryTableCPP& GetRotaryTableInfoResp::rotarytable(int index) const {
  // @@protoc_insertion_point(field_get:ProtoRotaryTable.GetRotaryTableInfoResp.rotarytable)
  return rotarytable_.Get(index);
}
inline ::ProtoRotaryTable::RotaryTableCPP* GetRotaryTableInfoResp::mutable_rotarytable(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoRotaryTable.GetRotaryTableInfoResp.rotarytable)
  return rotarytable_.Mutable(index);
}
inline ::ProtoRotaryTable::RotaryTableCPP* GetRotaryTableInfoResp::add_rotarytable() {
  // @@protoc_insertion_point(field_add:ProtoRotaryTable.GetRotaryTableInfoResp.rotarytable)
  return rotarytable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoRotaryTable::RotaryTableCPP >&
GetRotaryTableInfoResp::rotarytable() const {
  // @@protoc_insertion_point(field_list:ProtoRotaryTable.GetRotaryTableInfoResp.rotarytable)
  return rotarytable_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoRotaryTable::RotaryTableCPP >*
GetRotaryTableInfoResp::mutable_rotarytable() {
  // @@protoc_insertion_point(field_mutable_list:ProtoRotaryTable.GetRotaryTableInfoResp.rotarytable)
  return &rotarytable_;
}

// required .ProtoRotaryTable.DrawCntCPP drawinfo = 2;
inline bool GetRotaryTableInfoResp::has_drawinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRotaryTableInfoResp::set_has_drawinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetRotaryTableInfoResp::clear_has_drawinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetRotaryTableInfoResp::clear_drawinfo() {
  if (drawinfo_ != NULL) drawinfo_->::ProtoRotaryTable::DrawCntCPP::Clear();
  clear_has_drawinfo();
}
inline const ::ProtoRotaryTable::DrawCntCPP& GetRotaryTableInfoResp::drawinfo() const {
  // @@protoc_insertion_point(field_get:ProtoRotaryTable.GetRotaryTableInfoResp.drawinfo)
  return drawinfo_ != NULL ? *drawinfo_ : *default_instance_->drawinfo_;
}
inline ::ProtoRotaryTable::DrawCntCPP* GetRotaryTableInfoResp::mutable_drawinfo() {
  set_has_drawinfo();
  if (drawinfo_ == NULL) drawinfo_ = new ::ProtoRotaryTable::DrawCntCPP;
  // @@protoc_insertion_point(field_mutable:ProtoRotaryTable.GetRotaryTableInfoResp.drawinfo)
  return drawinfo_;
}
inline ::ProtoRotaryTable::DrawCntCPP* GetRotaryTableInfoResp::release_drawinfo() {
  clear_has_drawinfo();
  ::ProtoRotaryTable::DrawCntCPP* temp = drawinfo_;
  drawinfo_ = NULL;
  return temp;
}
inline void GetRotaryTableInfoResp::set_allocated_drawinfo(::ProtoRotaryTable::DrawCntCPP* drawinfo) {
  delete drawinfo_;
  drawinfo_ = drawinfo;
  if (drawinfo) {
    set_has_drawinfo();
  } else {
    clear_has_drawinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoRotaryTable.GetRotaryTableInfoResp.drawinfo)
}

// -------------------------------------------------------------------

// DrawRotaryTableReq

// -------------------------------------------------------------------

// DrawRotaryTableResp

// required uint32 gridid = 1;
inline bool DrawRotaryTableResp::has_gridid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrawRotaryTableResp::set_has_gridid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrawRotaryTableResp::clear_has_gridid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrawRotaryTableResp::clear_gridid() {
  gridid_ = 0u;
  clear_has_gridid();
}
inline ::google::protobuf::uint32 DrawRotaryTableResp::gridid() const {
  // @@protoc_insertion_point(field_get:ProtoRotaryTable.DrawRotaryTableResp.gridid)
  return gridid_;
}
inline void DrawRotaryTableResp::set_gridid(::google::protobuf::uint32 value) {
  set_has_gridid();
  gridid_ = value;
  // @@protoc_insertion_point(field_set:ProtoRotaryTable.DrawRotaryTableResp.gridid)
}

// required .DataCommon.CommonItemsCPP commons = 2;
inline bool DrawRotaryTableResp::has_commons() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DrawRotaryTableResp::set_has_commons() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DrawRotaryTableResp::clear_has_commons() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DrawRotaryTableResp::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& DrawRotaryTableResp::commons() const {
  // @@protoc_insertion_point(field_get:ProtoRotaryTable.DrawRotaryTableResp.commons)
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* DrawRotaryTableResp::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoRotaryTable.DrawRotaryTableResp.commons)
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* DrawRotaryTableResp::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}
inline void DrawRotaryTableResp::set_allocated_commons(::DataCommon::CommonItemsCPP* commons) {
  delete commons_;
  commons_ = commons;
  if (commons) {
    set_has_commons();
  } else {
    clear_has_commons();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoRotaryTable.DrawRotaryTableResp.commons)
}

// required .ProtoRotaryTable.DrawCntCPP drawinfo = 3;
inline bool DrawRotaryTableResp::has_drawinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DrawRotaryTableResp::set_has_drawinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DrawRotaryTableResp::clear_has_drawinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DrawRotaryTableResp::clear_drawinfo() {
  if (drawinfo_ != NULL) drawinfo_->::ProtoRotaryTable::DrawCntCPP::Clear();
  clear_has_drawinfo();
}
inline const ::ProtoRotaryTable::DrawCntCPP& DrawRotaryTableResp::drawinfo() const {
  // @@protoc_insertion_point(field_get:ProtoRotaryTable.DrawRotaryTableResp.drawinfo)
  return drawinfo_ != NULL ? *drawinfo_ : *default_instance_->drawinfo_;
}
inline ::ProtoRotaryTable::DrawCntCPP* DrawRotaryTableResp::mutable_drawinfo() {
  set_has_drawinfo();
  if (drawinfo_ == NULL) drawinfo_ = new ::ProtoRotaryTable::DrawCntCPP;
  // @@protoc_insertion_point(field_mutable:ProtoRotaryTable.DrawRotaryTableResp.drawinfo)
  return drawinfo_;
}
inline ::ProtoRotaryTable::DrawCntCPP* DrawRotaryTableResp::release_drawinfo() {
  clear_has_drawinfo();
  ::ProtoRotaryTable::DrawCntCPP* temp = drawinfo_;
  drawinfo_ = NULL;
  return temp;
}
inline void DrawRotaryTableResp::set_allocated_drawinfo(::ProtoRotaryTable::DrawCntCPP* drawinfo) {
  delete drawinfo_;
  drawinfo_ = drawinfo;
  if (drawinfo) {
    set_has_drawinfo();
  } else {
    clear_has_drawinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoRotaryTable.DrawRotaryTableResp.drawinfo)
}

// required uint32 curfriendlyvalue = 4;
inline bool DrawRotaryTableResp::has_curfriendlyvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DrawRotaryTableResp::set_has_curfriendlyvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DrawRotaryTableResp::clear_has_curfriendlyvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DrawRotaryTableResp::clear_curfriendlyvalue() {
  curfriendlyvalue_ = 0u;
  clear_has_curfriendlyvalue();
}
inline ::google::protobuf::uint32 DrawRotaryTableResp::curfriendlyvalue() const {
  // @@protoc_insertion_point(field_get:ProtoRotaryTable.DrawRotaryTableResp.curfriendlyvalue)
  return curfriendlyvalue_;
}
inline void DrawRotaryTableResp::set_curfriendlyvalue(::google::protobuf::uint32 value) {
  set_has_curfriendlyvalue();
  curfriendlyvalue_ = value;
  // @@protoc_insertion_point(field_set:ProtoRotaryTable.DrawRotaryTableResp.curfriendlyvalue)
}

// -------------------------------------------------------------------

// ShareReq

// -------------------------------------------------------------------

// ShareResp

// required .ProtoRotaryTable.DrawCntCPP drawinfo = 1;
inline bool ShareResp::has_drawinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShareResp::set_has_drawinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShareResp::clear_has_drawinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShareResp::clear_drawinfo() {
  if (drawinfo_ != NULL) drawinfo_->::ProtoRotaryTable::DrawCntCPP::Clear();
  clear_has_drawinfo();
}
inline const ::ProtoRotaryTable::DrawCntCPP& ShareResp::drawinfo() const {
  // @@protoc_insertion_point(field_get:ProtoRotaryTable.ShareResp.drawinfo)
  return drawinfo_ != NULL ? *drawinfo_ : *default_instance_->drawinfo_;
}
inline ::ProtoRotaryTable::DrawCntCPP* ShareResp::mutable_drawinfo() {
  set_has_drawinfo();
  if (drawinfo_ == NULL) drawinfo_ = new ::ProtoRotaryTable::DrawCntCPP;
  // @@protoc_insertion_point(field_mutable:ProtoRotaryTable.ShareResp.drawinfo)
  return drawinfo_;
}
inline ::ProtoRotaryTable::DrawCntCPP* ShareResp::release_drawinfo() {
  clear_has_drawinfo();
  ::ProtoRotaryTable::DrawCntCPP* temp = drawinfo_;
  drawinfo_ = NULL;
  return temp;
}
inline void ShareResp::set_allocated_drawinfo(::ProtoRotaryTable::DrawCntCPP* drawinfo) {
  delete drawinfo_;
  drawinfo_ = drawinfo;
  if (drawinfo) {
    set_has_drawinfo();
  } else {
    clear_has_drawinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoRotaryTable.ShareResp.drawinfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoRotaryTable

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoRotaryTable_2eproto__INCLUDED
