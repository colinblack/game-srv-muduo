// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoCard.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoCard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoCard {

namespace {

const ::google::protobuf::Descriptor* MonthCardCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonthCardCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* LifeCardCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LifeCardCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushBuyMonthCardMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushBuyMonthCardMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushBuyLifeCardMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushBuyLifeCardMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardMonthCardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardMonthCardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardMonthCardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardMonthCardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardLifeCardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardLifeCardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardLifeCardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardLifeCardResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoCard_2eproto() {
  protobuf_AddDesc_ProtoCard_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoCard.proto");
  GOOGLE_CHECK(file != NULL);
  MonthCardCPP_descriptor_ = file->message_type(0);
  static const int MonthCardCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardCPP, ishavemonthcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardCPP, isreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardCPP, monthcardendts_),
  };
  MonthCardCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonthCardCPP_descriptor_,
      MonthCardCPP::default_instance_,
      MonthCardCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonthCardCPP));
  LifeCardCPP_descriptor_ = file->message_type(1);
  static const int LifeCardCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LifeCardCPP, ishavelifecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LifeCardCPP, isreward_),
  };
  LifeCardCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LifeCardCPP_descriptor_,
      LifeCardCPP::default_instance_,
      LifeCardCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LifeCardCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LifeCardCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LifeCardCPP));
  GetCardReq_descriptor_ = file->message_type(2);
  static const int GetCardReq_offsets_[1] = {
  };
  GetCardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCardReq_descriptor_,
      GetCardReq::default_instance_,
      GetCardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCardReq));
  GetCardResp_descriptor_ = file->message_type(3);
  static const int GetCardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardResp, monthcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardResp, lifecard_),
  };
  GetCardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCardResp_descriptor_,
      GetCardResp::default_instance_,
      GetCardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCardResp));
  PushBuyMonthCardMsg_descriptor_ = file->message_type(4);
  static const int PushBuyMonthCardMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuyMonthCardMsg, monthcard_),
  };
  PushBuyMonthCardMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushBuyMonthCardMsg_descriptor_,
      PushBuyMonthCardMsg::default_instance_,
      PushBuyMonthCardMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuyMonthCardMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuyMonthCardMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushBuyMonthCardMsg));
  PushBuyLifeCardMsg_descriptor_ = file->message_type(5);
  static const int PushBuyLifeCardMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuyLifeCardMsg, lifecard_),
  };
  PushBuyLifeCardMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushBuyLifeCardMsg_descriptor_,
      PushBuyLifeCardMsg::default_instance_,
      PushBuyLifeCardMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuyLifeCardMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushBuyLifeCardMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushBuyLifeCardMsg));
  RewardMonthCardReq_descriptor_ = file->message_type(6);
  static const int RewardMonthCardReq_offsets_[1] = {
  };
  RewardMonthCardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardMonthCardReq_descriptor_,
      RewardMonthCardReq::default_instance_,
      RewardMonthCardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMonthCardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMonthCardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardMonthCardReq));
  RewardMonthCardResp_descriptor_ = file->message_type(7);
  static const int RewardMonthCardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMonthCardResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMonthCardResp, monthcard_),
  };
  RewardMonthCardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardMonthCardResp_descriptor_,
      RewardMonthCardResp::default_instance_,
      RewardMonthCardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMonthCardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardMonthCardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardMonthCardResp));
  RewardLifeCardReq_descriptor_ = file->message_type(8);
  static const int RewardLifeCardReq_offsets_[1] = {
  };
  RewardLifeCardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardLifeCardReq_descriptor_,
      RewardLifeCardReq::default_instance_,
      RewardLifeCardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLifeCardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLifeCardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardLifeCardReq));
  RewardLifeCardResp_descriptor_ = file->message_type(9);
  static const int RewardLifeCardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLifeCardResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLifeCardResp, lifecard_),
  };
  RewardLifeCardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardLifeCardResp_descriptor_,
      RewardLifeCardResp::default_instance_,
      RewardLifeCardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLifeCardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardLifeCardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardLifeCardResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoCard_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonthCardCPP_descriptor_, &MonthCardCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LifeCardCPP_descriptor_, &LifeCardCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCardReq_descriptor_, &GetCardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCardResp_descriptor_, &GetCardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushBuyMonthCardMsg_descriptor_, &PushBuyMonthCardMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushBuyLifeCardMsg_descriptor_, &PushBuyLifeCardMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardMonthCardReq_descriptor_, &RewardMonthCardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardMonthCardResp_descriptor_, &RewardMonthCardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardLifeCardReq_descriptor_, &RewardLifeCardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardLifeCardResp_descriptor_, &RewardLifeCardResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoCard_2eproto() {
  delete MonthCardCPP::default_instance_;
  delete MonthCardCPP_reflection_;
  delete LifeCardCPP::default_instance_;
  delete LifeCardCPP_reflection_;
  delete GetCardReq::default_instance_;
  delete GetCardReq_reflection_;
  delete GetCardResp::default_instance_;
  delete GetCardResp_reflection_;
  delete PushBuyMonthCardMsg::default_instance_;
  delete PushBuyMonthCardMsg_reflection_;
  delete PushBuyLifeCardMsg::default_instance_;
  delete PushBuyLifeCardMsg_reflection_;
  delete RewardMonthCardReq::default_instance_;
  delete RewardMonthCardReq_reflection_;
  delete RewardMonthCardResp::default_instance_;
  delete RewardMonthCardResp_reflection_;
  delete RewardLifeCardReq::default_instance_;
  delete RewardLifeCardReq_reflection_;
  delete RewardLifeCardResp::default_instance_;
  delete RewardLifeCardResp_reflection_;
}

void protobuf_AddDesc_ProtoCard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ProtoCard.proto\022\tProtoCard\032\020DataCommon"
    ".proto\"Q\n\014MonthCardCPP\022\027\n\017isHaveMonthCar"
    "d\030\001 \002(\r\022\020\n\010isReward\030\002 \001(\r\022\026\n\016monthCardEn"
    "dTs\030\003 \001(\r\"7\n\013LifeCardCPP\022\026\n\016isHaveLifeCa"
    "rd\030\001 \002(\r\022\020\n\010isReward\030\002 \001(\r\"\014\n\nGetCardReq"
    "\"c\n\013GetCardResp\022*\n\tmonthCard\030\001 \002(\0132\027.Pro"
    "toCard.MonthCardCPP\022(\n\010lifeCard\030\002 \002(\0132\026."
    "ProtoCard.LifeCardCPP\"A\n\023PushBuyMonthCar"
    "dMsg\022*\n\tmonthCard\030\001 \002(\0132\027.ProtoCard.Mont"
    "hCardCPP\">\n\022PushBuyLifeCardMsg\022(\n\010lifeCa"
    "rd\030\001 \002(\0132\026.ProtoCard.LifeCardCPP\"\024\n\022Rewa"
    "rdMonthCardReq\"n\n\023RewardMonthCardResp\022+\n"
    "\007commons\030\001 \002(\0132\032.DataCommon.CommonItemsC"
    "PP\022*\n\tmonthCard\030\002 \002(\0132\027.ProtoCard.MonthC"
    "ardCPP\"\023\n\021RewardLifeCardReq\"k\n\022RewardLif"
    "eCardResp\022+\n\007commons\030\001 \002(\0132\032.DataCommon."
    "CommonItemsCPP\022(\n\010lifeCard\030\002 \002(\0132\026.Proto"
    "Card.LifeCardCPP", 696);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoCard.proto", &protobuf_RegisterTypes);
  MonthCardCPP::default_instance_ = new MonthCardCPP();
  LifeCardCPP::default_instance_ = new LifeCardCPP();
  GetCardReq::default_instance_ = new GetCardReq();
  GetCardResp::default_instance_ = new GetCardResp();
  PushBuyMonthCardMsg::default_instance_ = new PushBuyMonthCardMsg();
  PushBuyLifeCardMsg::default_instance_ = new PushBuyLifeCardMsg();
  RewardMonthCardReq::default_instance_ = new RewardMonthCardReq();
  RewardMonthCardResp::default_instance_ = new RewardMonthCardResp();
  RewardLifeCardReq::default_instance_ = new RewardLifeCardReq();
  RewardLifeCardResp::default_instance_ = new RewardLifeCardResp();
  MonthCardCPP::default_instance_->InitAsDefaultInstance();
  LifeCardCPP::default_instance_->InitAsDefaultInstance();
  GetCardReq::default_instance_->InitAsDefaultInstance();
  GetCardResp::default_instance_->InitAsDefaultInstance();
  PushBuyMonthCardMsg::default_instance_->InitAsDefaultInstance();
  PushBuyLifeCardMsg::default_instance_->InitAsDefaultInstance();
  RewardMonthCardReq::default_instance_->InitAsDefaultInstance();
  RewardMonthCardResp::default_instance_->InitAsDefaultInstance();
  RewardLifeCardReq::default_instance_->InitAsDefaultInstance();
  RewardLifeCardResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoCard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoCard_2eproto {
  StaticDescriptorInitializer_ProtoCard_2eproto() {
    protobuf_AddDesc_ProtoCard_2eproto();
  }
} static_descriptor_initializer_ProtoCard_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MonthCardCPP::kIsHaveMonthCardFieldNumber;
const int MonthCardCPP::kIsRewardFieldNumber;
const int MonthCardCPP::kMonthCardEndTsFieldNumber;
#endif  // !_MSC_VER

MonthCardCPP::MonthCardCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCard.MonthCardCPP)
}

void MonthCardCPP::InitAsDefaultInstance() {
}

MonthCardCPP::MonthCardCPP(const MonthCardCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCard.MonthCardCPP)
}

void MonthCardCPP::SharedCtor() {
  _cached_size_ = 0;
  ishavemonthcard_ = 0u;
  isreward_ = 0u;
  monthcardendts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthCardCPP::~MonthCardCPP() {
  // @@protoc_insertion_point(destructor:ProtoCard.MonthCardCPP)
  SharedDtor();
}

void MonthCardCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonthCardCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonthCardCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonthCardCPP_descriptor_;
}

const MonthCardCPP& MonthCardCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCard_2eproto();
  return *default_instance_;
}

MonthCardCPP* MonthCardCPP::default_instance_ = NULL;

MonthCardCPP* MonthCardCPP::New() const {
  return new MonthCardCPP;
}

void MonthCardCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MonthCardCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ishavemonthcard_, monthcardendts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonthCardCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCard.MonthCardCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 isHaveMonthCard = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ishavemonthcard_)));
          set_has_ishavemonthcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isReward;
        break;
      }

      // optional uint32 isReward = 2;
      case 2: {
        if (tag == 16) {
         parse_isReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isreward_)));
          set_has_isreward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_monthCardEndTs;
        break;
      }

      // optional uint32 monthCardEndTs = 3;
      case 3: {
        if (tag == 24) {
         parse_monthCardEndTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monthcardendts_)));
          set_has_monthcardendts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCard.MonthCardCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCard.MonthCardCPP)
  return false;
#undef DO_
}

void MonthCardCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCard.MonthCardCPP)
  // required uint32 isHaveMonthCard = 1;
  if (has_ishavemonthcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ishavemonthcard(), output);
  }

  // optional uint32 isReward = 2;
  if (has_isreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isreward(), output);
  }

  // optional uint32 monthCardEndTs = 3;
  if (has_monthcardendts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->monthcardendts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCard.MonthCardCPP)
}

::google::protobuf::uint8* MonthCardCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCard.MonthCardCPP)
  // required uint32 isHaveMonthCard = 1;
  if (has_ishavemonthcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ishavemonthcard(), target);
  }

  // optional uint32 isReward = 2;
  if (has_isreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isreward(), target);
  }

  // optional uint32 monthCardEndTs = 3;
  if (has_monthcardendts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->monthcardendts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCard.MonthCardCPP)
  return target;
}

int MonthCardCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 isHaveMonthCard = 1;
    if (has_ishavemonthcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ishavemonthcard());
    }

    // optional uint32 isReward = 2;
    if (has_isreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isreward());
    }

    // optional uint32 monthCardEndTs = 3;
    if (has_monthcardendts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monthcardendts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthCardCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonthCardCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonthCardCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonthCardCPP::MergeFrom(const MonthCardCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ishavemonthcard()) {
      set_ishavemonthcard(from.ishavemonthcard());
    }
    if (from.has_isreward()) {
      set_isreward(from.isreward());
    }
    if (from.has_monthcardendts()) {
      set_monthcardendts(from.monthcardendts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonthCardCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonthCardCPP::CopyFrom(const MonthCardCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthCardCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MonthCardCPP::Swap(MonthCardCPP* other) {
  if (other != this) {
    std::swap(ishavemonthcard_, other->ishavemonthcard_);
    std::swap(isreward_, other->isreward_);
    std::swap(monthcardendts_, other->monthcardendts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonthCardCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonthCardCPP_descriptor_;
  metadata.reflection = MonthCardCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LifeCardCPP::kIsHaveLifeCardFieldNumber;
const int LifeCardCPP::kIsRewardFieldNumber;
#endif  // !_MSC_VER

LifeCardCPP::LifeCardCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCard.LifeCardCPP)
}

void LifeCardCPP::InitAsDefaultInstance() {
}

LifeCardCPP::LifeCardCPP(const LifeCardCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCard.LifeCardCPP)
}

void LifeCardCPP::SharedCtor() {
  _cached_size_ = 0;
  ishavelifecard_ = 0u;
  isreward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LifeCardCPP::~LifeCardCPP() {
  // @@protoc_insertion_point(destructor:ProtoCard.LifeCardCPP)
  SharedDtor();
}

void LifeCardCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LifeCardCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LifeCardCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LifeCardCPP_descriptor_;
}

const LifeCardCPP& LifeCardCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCard_2eproto();
  return *default_instance_;
}

LifeCardCPP* LifeCardCPP::default_instance_ = NULL;

LifeCardCPP* LifeCardCPP::New() const {
  return new LifeCardCPP;
}

void LifeCardCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LifeCardCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ishavelifecard_, isreward_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LifeCardCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCard.LifeCardCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 isHaveLifeCard = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ishavelifecard_)));
          set_has_ishavelifecard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isReward;
        break;
      }

      // optional uint32 isReward = 2;
      case 2: {
        if (tag == 16) {
         parse_isReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isreward_)));
          set_has_isreward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCard.LifeCardCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCard.LifeCardCPP)
  return false;
#undef DO_
}

void LifeCardCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCard.LifeCardCPP)
  // required uint32 isHaveLifeCard = 1;
  if (has_ishavelifecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ishavelifecard(), output);
  }

  // optional uint32 isReward = 2;
  if (has_isreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCard.LifeCardCPP)
}

::google::protobuf::uint8* LifeCardCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCard.LifeCardCPP)
  // required uint32 isHaveLifeCard = 1;
  if (has_ishavelifecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ishavelifecard(), target);
  }

  // optional uint32 isReward = 2;
  if (has_isreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCard.LifeCardCPP)
  return target;
}

int LifeCardCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 isHaveLifeCard = 1;
    if (has_ishavelifecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ishavelifecard());
    }

    // optional uint32 isReward = 2;
    if (has_isreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isreward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LifeCardCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LifeCardCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LifeCardCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LifeCardCPP::MergeFrom(const LifeCardCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ishavelifecard()) {
      set_ishavelifecard(from.ishavelifecard());
    }
    if (from.has_isreward()) {
      set_isreward(from.isreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LifeCardCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LifeCardCPP::CopyFrom(const LifeCardCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LifeCardCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LifeCardCPP::Swap(LifeCardCPP* other) {
  if (other != this) {
    std::swap(ishavelifecard_, other->ishavelifecard_);
    std::swap(isreward_, other->isreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LifeCardCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LifeCardCPP_descriptor_;
  metadata.reflection = LifeCardCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetCardReq::GetCardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCard.GetCardReq)
}

void GetCardReq::InitAsDefaultInstance() {
}

GetCardReq::GetCardReq(const GetCardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCard.GetCardReq)
}

void GetCardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCardReq::~GetCardReq() {
  // @@protoc_insertion_point(destructor:ProtoCard.GetCardReq)
  SharedDtor();
}

void GetCardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCardReq_descriptor_;
}

const GetCardReq& GetCardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCard_2eproto();
  return *default_instance_;
}

GetCardReq* GetCardReq::default_instance_ = NULL;

GetCardReq* GetCardReq::New() const {
  return new GetCardReq;
}

void GetCardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCard.GetCardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCard.GetCardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCard.GetCardReq)
  return false;
#undef DO_
}

void GetCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCard.GetCardReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCard.GetCardReq)
}

::google::protobuf::uint8* GetCardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCard.GetCardReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCard.GetCardReq)
  return target;
}

int GetCardReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCardReq::MergeFrom(const GetCardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCardReq::CopyFrom(const GetCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCardReq::IsInitialized() const {

  return true;
}

void GetCardReq::Swap(GetCardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCardReq_descriptor_;
  metadata.reflection = GetCardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCardResp::kMonthCardFieldNumber;
const int GetCardResp::kLifeCardFieldNumber;
#endif  // !_MSC_VER

GetCardResp::GetCardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCard.GetCardResp)
}

void GetCardResp::InitAsDefaultInstance() {
  monthcard_ = const_cast< ::ProtoCard::MonthCardCPP*>(&::ProtoCard::MonthCardCPP::default_instance());
  lifecard_ = const_cast< ::ProtoCard::LifeCardCPP*>(&::ProtoCard::LifeCardCPP::default_instance());
}

GetCardResp::GetCardResp(const GetCardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCard.GetCardResp)
}

void GetCardResp::SharedCtor() {
  _cached_size_ = 0;
  monthcard_ = NULL;
  lifecard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCardResp::~GetCardResp() {
  // @@protoc_insertion_point(destructor:ProtoCard.GetCardResp)
  SharedDtor();
}

void GetCardResp::SharedDtor() {
  if (this != default_instance_) {
    delete monthcard_;
    delete lifecard_;
  }
}

void GetCardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCardResp_descriptor_;
}

const GetCardResp& GetCardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCard_2eproto();
  return *default_instance_;
}

GetCardResp* GetCardResp::default_instance_ = NULL;

GetCardResp* GetCardResp::New() const {
  return new GetCardResp;
}

void GetCardResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_monthcard()) {
      if (monthcard_ != NULL) monthcard_->::ProtoCard::MonthCardCPP::Clear();
    }
    if (has_lifecard()) {
      if (lifecard_ != NULL) lifecard_->::ProtoCard::LifeCardCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCard.GetCardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoCard.MonthCardCPP monthCard = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monthcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lifeCard;
        break;
      }

      // required .ProtoCard.LifeCardCPP lifeCard = 2;
      case 2: {
        if (tag == 18) {
         parse_lifeCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lifecard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCard.GetCardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCard.GetCardResp)
  return false;
#undef DO_
}

void GetCardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCard.GetCardResp)
  // required .ProtoCard.MonthCardCPP monthCard = 1;
  if (has_monthcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monthcard(), output);
  }

  // required .ProtoCard.LifeCardCPP lifeCard = 2;
  if (has_lifecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lifecard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCard.GetCardResp)
}

::google::protobuf::uint8* GetCardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCard.GetCardResp)
  // required .ProtoCard.MonthCardCPP monthCard = 1;
  if (has_monthcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monthcard(), target);
  }

  // required .ProtoCard.LifeCardCPP lifeCard = 2;
  if (has_lifecard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lifecard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCard.GetCardResp)
  return target;
}

int GetCardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoCard.MonthCardCPP monthCard = 1;
    if (has_monthcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monthcard());
    }

    // required .ProtoCard.LifeCardCPP lifeCard = 2;
    if (has_lifecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lifecard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCardResp::MergeFrom(const GetCardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monthcard()) {
      mutable_monthcard()->::ProtoCard::MonthCardCPP::MergeFrom(from.monthcard());
    }
    if (from.has_lifecard()) {
      mutable_lifecard()->::ProtoCard::LifeCardCPP::MergeFrom(from.lifecard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCardResp::CopyFrom(const GetCardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_monthcard()) {
    if (!this->monthcard().IsInitialized()) return false;
  }
  if (has_lifecard()) {
    if (!this->lifecard().IsInitialized()) return false;
  }
  return true;
}

void GetCardResp::Swap(GetCardResp* other) {
  if (other != this) {
    std::swap(monthcard_, other->monthcard_);
    std::swap(lifecard_, other->lifecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCardResp_descriptor_;
  metadata.reflection = GetCardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushBuyMonthCardMsg::kMonthCardFieldNumber;
#endif  // !_MSC_VER

PushBuyMonthCardMsg::PushBuyMonthCardMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCard.PushBuyMonthCardMsg)
}

void PushBuyMonthCardMsg::InitAsDefaultInstance() {
  monthcard_ = const_cast< ::ProtoCard::MonthCardCPP*>(&::ProtoCard::MonthCardCPP::default_instance());
}

PushBuyMonthCardMsg::PushBuyMonthCardMsg(const PushBuyMonthCardMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCard.PushBuyMonthCardMsg)
}

void PushBuyMonthCardMsg::SharedCtor() {
  _cached_size_ = 0;
  monthcard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushBuyMonthCardMsg::~PushBuyMonthCardMsg() {
  // @@protoc_insertion_point(destructor:ProtoCard.PushBuyMonthCardMsg)
  SharedDtor();
}

void PushBuyMonthCardMsg::SharedDtor() {
  if (this != default_instance_) {
    delete monthcard_;
  }
}

void PushBuyMonthCardMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushBuyMonthCardMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushBuyMonthCardMsg_descriptor_;
}

const PushBuyMonthCardMsg& PushBuyMonthCardMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCard_2eproto();
  return *default_instance_;
}

PushBuyMonthCardMsg* PushBuyMonthCardMsg::default_instance_ = NULL;

PushBuyMonthCardMsg* PushBuyMonthCardMsg::New() const {
  return new PushBuyMonthCardMsg;
}

void PushBuyMonthCardMsg::Clear() {
  if (has_monthcard()) {
    if (monthcard_ != NULL) monthcard_->::ProtoCard::MonthCardCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushBuyMonthCardMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCard.PushBuyMonthCardMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoCard.MonthCardCPP monthCard = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monthcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCard.PushBuyMonthCardMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCard.PushBuyMonthCardMsg)
  return false;
#undef DO_
}

void PushBuyMonthCardMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCard.PushBuyMonthCardMsg)
  // required .ProtoCard.MonthCardCPP monthCard = 1;
  if (has_monthcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monthcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCard.PushBuyMonthCardMsg)
}

::google::protobuf::uint8* PushBuyMonthCardMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCard.PushBuyMonthCardMsg)
  // required .ProtoCard.MonthCardCPP monthCard = 1;
  if (has_monthcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monthcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCard.PushBuyMonthCardMsg)
  return target;
}

int PushBuyMonthCardMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoCard.MonthCardCPP monthCard = 1;
    if (has_monthcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monthcard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushBuyMonthCardMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushBuyMonthCardMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushBuyMonthCardMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushBuyMonthCardMsg::MergeFrom(const PushBuyMonthCardMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monthcard()) {
      mutable_monthcard()->::ProtoCard::MonthCardCPP::MergeFrom(from.monthcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushBuyMonthCardMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushBuyMonthCardMsg::CopyFrom(const PushBuyMonthCardMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushBuyMonthCardMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_monthcard()) {
    if (!this->monthcard().IsInitialized()) return false;
  }
  return true;
}

void PushBuyMonthCardMsg::Swap(PushBuyMonthCardMsg* other) {
  if (other != this) {
    std::swap(monthcard_, other->monthcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushBuyMonthCardMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushBuyMonthCardMsg_descriptor_;
  metadata.reflection = PushBuyMonthCardMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushBuyLifeCardMsg::kLifeCardFieldNumber;
#endif  // !_MSC_VER

PushBuyLifeCardMsg::PushBuyLifeCardMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCard.PushBuyLifeCardMsg)
}

void PushBuyLifeCardMsg::InitAsDefaultInstance() {
  lifecard_ = const_cast< ::ProtoCard::LifeCardCPP*>(&::ProtoCard::LifeCardCPP::default_instance());
}

PushBuyLifeCardMsg::PushBuyLifeCardMsg(const PushBuyLifeCardMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCard.PushBuyLifeCardMsg)
}

void PushBuyLifeCardMsg::SharedCtor() {
  _cached_size_ = 0;
  lifecard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushBuyLifeCardMsg::~PushBuyLifeCardMsg() {
  // @@protoc_insertion_point(destructor:ProtoCard.PushBuyLifeCardMsg)
  SharedDtor();
}

void PushBuyLifeCardMsg::SharedDtor() {
  if (this != default_instance_) {
    delete lifecard_;
  }
}

void PushBuyLifeCardMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushBuyLifeCardMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushBuyLifeCardMsg_descriptor_;
}

const PushBuyLifeCardMsg& PushBuyLifeCardMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCard_2eproto();
  return *default_instance_;
}

PushBuyLifeCardMsg* PushBuyLifeCardMsg::default_instance_ = NULL;

PushBuyLifeCardMsg* PushBuyLifeCardMsg::New() const {
  return new PushBuyLifeCardMsg;
}

void PushBuyLifeCardMsg::Clear() {
  if (has_lifecard()) {
    if (lifecard_ != NULL) lifecard_->::ProtoCard::LifeCardCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushBuyLifeCardMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCard.PushBuyLifeCardMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoCard.LifeCardCPP lifeCard = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lifecard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCard.PushBuyLifeCardMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCard.PushBuyLifeCardMsg)
  return false;
#undef DO_
}

void PushBuyLifeCardMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCard.PushBuyLifeCardMsg)
  // required .ProtoCard.LifeCardCPP lifeCard = 1;
  if (has_lifecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lifecard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCard.PushBuyLifeCardMsg)
}

::google::protobuf::uint8* PushBuyLifeCardMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCard.PushBuyLifeCardMsg)
  // required .ProtoCard.LifeCardCPP lifeCard = 1;
  if (has_lifecard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lifecard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCard.PushBuyLifeCardMsg)
  return target;
}

int PushBuyLifeCardMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoCard.LifeCardCPP lifeCard = 1;
    if (has_lifecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lifecard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushBuyLifeCardMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushBuyLifeCardMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushBuyLifeCardMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushBuyLifeCardMsg::MergeFrom(const PushBuyLifeCardMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lifecard()) {
      mutable_lifecard()->::ProtoCard::LifeCardCPP::MergeFrom(from.lifecard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushBuyLifeCardMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushBuyLifeCardMsg::CopyFrom(const PushBuyLifeCardMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushBuyLifeCardMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_lifecard()) {
    if (!this->lifecard().IsInitialized()) return false;
  }
  return true;
}

void PushBuyLifeCardMsg::Swap(PushBuyLifeCardMsg* other) {
  if (other != this) {
    std::swap(lifecard_, other->lifecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushBuyLifeCardMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushBuyLifeCardMsg_descriptor_;
  metadata.reflection = PushBuyLifeCardMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RewardMonthCardReq::RewardMonthCardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCard.RewardMonthCardReq)
}

void RewardMonthCardReq::InitAsDefaultInstance() {
}

RewardMonthCardReq::RewardMonthCardReq(const RewardMonthCardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCard.RewardMonthCardReq)
}

void RewardMonthCardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardMonthCardReq::~RewardMonthCardReq() {
  // @@protoc_insertion_point(destructor:ProtoCard.RewardMonthCardReq)
  SharedDtor();
}

void RewardMonthCardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardMonthCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardMonthCardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardMonthCardReq_descriptor_;
}

const RewardMonthCardReq& RewardMonthCardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCard_2eproto();
  return *default_instance_;
}

RewardMonthCardReq* RewardMonthCardReq::default_instance_ = NULL;

RewardMonthCardReq* RewardMonthCardReq::New() const {
  return new RewardMonthCardReq;
}

void RewardMonthCardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardMonthCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCard.RewardMonthCardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCard.RewardMonthCardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCard.RewardMonthCardReq)
  return false;
#undef DO_
}

void RewardMonthCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCard.RewardMonthCardReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCard.RewardMonthCardReq)
}

::google::protobuf::uint8* RewardMonthCardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCard.RewardMonthCardReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCard.RewardMonthCardReq)
  return target;
}

int RewardMonthCardReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardMonthCardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardMonthCardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardMonthCardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardMonthCardReq::MergeFrom(const RewardMonthCardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardMonthCardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardMonthCardReq::CopyFrom(const RewardMonthCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardMonthCardReq::IsInitialized() const {

  return true;
}

void RewardMonthCardReq::Swap(RewardMonthCardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardMonthCardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardMonthCardReq_descriptor_;
  metadata.reflection = RewardMonthCardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardMonthCardResp::kCommonsFieldNumber;
const int RewardMonthCardResp::kMonthCardFieldNumber;
#endif  // !_MSC_VER

RewardMonthCardResp::RewardMonthCardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCard.RewardMonthCardResp)
}

void RewardMonthCardResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  monthcard_ = const_cast< ::ProtoCard::MonthCardCPP*>(&::ProtoCard::MonthCardCPP::default_instance());
}

RewardMonthCardResp::RewardMonthCardResp(const RewardMonthCardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCard.RewardMonthCardResp)
}

void RewardMonthCardResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  monthcard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardMonthCardResp::~RewardMonthCardResp() {
  // @@protoc_insertion_point(destructor:ProtoCard.RewardMonthCardResp)
  SharedDtor();
}

void RewardMonthCardResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete monthcard_;
  }
}

void RewardMonthCardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardMonthCardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardMonthCardResp_descriptor_;
}

const RewardMonthCardResp& RewardMonthCardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCard_2eproto();
  return *default_instance_;
}

RewardMonthCardResp* RewardMonthCardResp::default_instance_ = NULL;

RewardMonthCardResp* RewardMonthCardResp::New() const {
  return new RewardMonthCardResp;
}

void RewardMonthCardResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_monthcard()) {
      if (monthcard_ != NULL) monthcard_->::ProtoCard::MonthCardCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardMonthCardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCard.RewardMonthCardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_monthCard;
        break;
      }

      // required .ProtoCard.MonthCardCPP monthCard = 2;
      case 2: {
        if (tag == 18) {
         parse_monthCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monthcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCard.RewardMonthCardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCard.RewardMonthCardResp)
  return false;
#undef DO_
}

void RewardMonthCardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCard.RewardMonthCardResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  // required .ProtoCard.MonthCardCPP monthCard = 2;
  if (has_monthcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monthcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCard.RewardMonthCardResp)
}

::google::protobuf::uint8* RewardMonthCardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCard.RewardMonthCardResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  // required .ProtoCard.MonthCardCPP monthCard = 2;
  if (has_monthcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monthcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCard.RewardMonthCardResp)
  return target;
}

int RewardMonthCardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required .ProtoCard.MonthCardCPP monthCard = 2;
    if (has_monthcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monthcard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardMonthCardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardMonthCardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardMonthCardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardMonthCardResp::MergeFrom(const RewardMonthCardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_monthcard()) {
      mutable_monthcard()->::ProtoCard::MonthCardCPP::MergeFrom(from.monthcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardMonthCardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardMonthCardResp::CopyFrom(const RewardMonthCardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardMonthCardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_monthcard()) {
    if (!this->monthcard().IsInitialized()) return false;
  }
  return true;
}

void RewardMonthCardResp::Swap(RewardMonthCardResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(monthcard_, other->monthcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardMonthCardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardMonthCardResp_descriptor_;
  metadata.reflection = RewardMonthCardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RewardLifeCardReq::RewardLifeCardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCard.RewardLifeCardReq)
}

void RewardLifeCardReq::InitAsDefaultInstance() {
}

RewardLifeCardReq::RewardLifeCardReq(const RewardLifeCardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCard.RewardLifeCardReq)
}

void RewardLifeCardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardLifeCardReq::~RewardLifeCardReq() {
  // @@protoc_insertion_point(destructor:ProtoCard.RewardLifeCardReq)
  SharedDtor();
}

void RewardLifeCardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardLifeCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardLifeCardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardLifeCardReq_descriptor_;
}

const RewardLifeCardReq& RewardLifeCardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCard_2eproto();
  return *default_instance_;
}

RewardLifeCardReq* RewardLifeCardReq::default_instance_ = NULL;

RewardLifeCardReq* RewardLifeCardReq::New() const {
  return new RewardLifeCardReq;
}

void RewardLifeCardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardLifeCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCard.RewardLifeCardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCard.RewardLifeCardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCard.RewardLifeCardReq)
  return false;
#undef DO_
}

void RewardLifeCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCard.RewardLifeCardReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCard.RewardLifeCardReq)
}

::google::protobuf::uint8* RewardLifeCardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCard.RewardLifeCardReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCard.RewardLifeCardReq)
  return target;
}

int RewardLifeCardReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardLifeCardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardLifeCardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardLifeCardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardLifeCardReq::MergeFrom(const RewardLifeCardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardLifeCardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardLifeCardReq::CopyFrom(const RewardLifeCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardLifeCardReq::IsInitialized() const {

  return true;
}

void RewardLifeCardReq::Swap(RewardLifeCardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardLifeCardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardLifeCardReq_descriptor_;
  metadata.reflection = RewardLifeCardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardLifeCardResp::kCommonsFieldNumber;
const int RewardLifeCardResp::kLifeCardFieldNumber;
#endif  // !_MSC_VER

RewardLifeCardResp::RewardLifeCardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCard.RewardLifeCardResp)
}

void RewardLifeCardResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  lifecard_ = const_cast< ::ProtoCard::LifeCardCPP*>(&::ProtoCard::LifeCardCPP::default_instance());
}

RewardLifeCardResp::RewardLifeCardResp(const RewardLifeCardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCard.RewardLifeCardResp)
}

void RewardLifeCardResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  lifecard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardLifeCardResp::~RewardLifeCardResp() {
  // @@protoc_insertion_point(destructor:ProtoCard.RewardLifeCardResp)
  SharedDtor();
}

void RewardLifeCardResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete lifecard_;
  }
}

void RewardLifeCardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardLifeCardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardLifeCardResp_descriptor_;
}

const RewardLifeCardResp& RewardLifeCardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCard_2eproto();
  return *default_instance_;
}

RewardLifeCardResp* RewardLifeCardResp::default_instance_ = NULL;

RewardLifeCardResp* RewardLifeCardResp::New() const {
  return new RewardLifeCardResp;
}

void RewardLifeCardResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_lifecard()) {
      if (lifecard_ != NULL) lifecard_->::ProtoCard::LifeCardCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardLifeCardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCard.RewardLifeCardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lifeCard;
        break;
      }

      // required .ProtoCard.LifeCardCPP lifeCard = 2;
      case 2: {
        if (tag == 18) {
         parse_lifeCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lifecard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCard.RewardLifeCardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCard.RewardLifeCardResp)
  return false;
#undef DO_
}

void RewardLifeCardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCard.RewardLifeCardResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  // required .ProtoCard.LifeCardCPP lifeCard = 2;
  if (has_lifecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lifecard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCard.RewardLifeCardResp)
}

::google::protobuf::uint8* RewardLifeCardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCard.RewardLifeCardResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  // required .ProtoCard.LifeCardCPP lifeCard = 2;
  if (has_lifecard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lifecard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCard.RewardLifeCardResp)
  return target;
}

int RewardLifeCardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required .ProtoCard.LifeCardCPP lifeCard = 2;
    if (has_lifecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lifecard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardLifeCardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardLifeCardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardLifeCardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardLifeCardResp::MergeFrom(const RewardLifeCardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_lifecard()) {
      mutable_lifecard()->::ProtoCard::LifeCardCPP::MergeFrom(from.lifecard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardLifeCardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardLifeCardResp::CopyFrom(const RewardLifeCardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardLifeCardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_lifecard()) {
    if (!this->lifecard().IsInitialized()) return false;
  }
  return true;
}

void RewardLifeCardResp::Swap(RewardLifeCardResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(lifecard_, other->lifecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardLifeCardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardLifeCardResp_descriptor_;
  metadata.reflection = RewardLifeCardResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoCard

// @@protoc_insertion_point(global_scope)
