// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoFriendWorker.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoFriendWorker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoFriendWorker {

namespace {

const ::google::protobuf::Descriptor* FriendWorkerCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendWorkerCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetFriendWorkerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetFriendWorkerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetFriendWorkerResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetFriendWorkerResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushInviteReardMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushInviteReardMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSetFriendWorkerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSetFriendWorkerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSetFriendWorkerResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSetFriendWorkerResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetWorkerSpeedUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetWorkerSpeedUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetWorkerSpeedUpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetWorkerSpeedUpResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectWorkerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectWorkerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectWorkerResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectWorkerResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThanksWorkerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThanksWorkerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThanksWorkerResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThanksWorkerResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoFriendWorker_2eproto() {
  protobuf_AddDesc_ProtoFriendWorker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoFriendWorker.proto");
  GOOGLE_CHECK(file != NULL);
  FriendWorkerCPP_descriptor_ = file->message_type(0);
  static const int FriendWorkerCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, workeruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, workerendts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, workerslotpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, workerinvitedts_),
  };
  FriendWorkerCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendWorkerCPP_descriptor_,
      FriendWorkerCPP::default_instance_,
      FriendWorkerCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendWorkerCPP));
  SetFriendWorkerReq_descriptor_ = file->message_type(1);
  static const int SetFriendWorkerReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendWorkerReq, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendWorkerReq, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendWorkerReq, source_),
  };
  SetFriendWorkerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetFriendWorkerReq_descriptor_,
      SetFriendWorkerReq::default_instance_,
      SetFriendWorkerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendWorkerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendWorkerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetFriendWorkerReq));
  SetFriendWorkerResp_descriptor_ = file->message_type(2);
  static const int SetFriendWorkerResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendWorkerResp, status_),
  };
  SetFriendWorkerResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetFriendWorkerResp_descriptor_,
      SetFriendWorkerResp::default_instance_,
      SetFriendWorkerResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendWorkerResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFriendWorkerResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetFriendWorkerResp));
  PushInviteReardMsg_descriptor_ = file->message_type(3);
  static const int PushInviteReardMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushInviteReardMsg, commons_),
  };
  PushInviteReardMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushInviteReardMsg_descriptor_,
      PushInviteReardMsg::default_instance_,
      PushInviteReardMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushInviteReardMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushInviteReardMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushInviteReardMsg));
  CSSetFriendWorkerReq_descriptor_ = file->message_type(4);
  static const int CSSetFriendWorkerReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetFriendWorkerReq, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetFriendWorkerReq, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetFriendWorkerReq, propisid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetFriendWorkerReq, sourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetFriendWorkerReq, sourceflag_),
  };
  CSSetFriendWorkerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSetFriendWorkerReq_descriptor_,
      CSSetFriendWorkerReq::default_instance_,
      CSSetFriendWorkerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetFriendWorkerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetFriendWorkerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSetFriendWorkerReq));
  CSSetFriendWorkerResp_descriptor_ = file->message_type(5);
  static const int CSSetFriendWorkerResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetFriendWorkerResp, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetFriendWorkerResp, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetFriendWorkerResp, stauts_),
  };
  CSSetFriendWorkerResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSetFriendWorkerResp_descriptor_,
      CSSetFriendWorkerResp::default_instance_,
      CSSetFriendWorkerResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetFriendWorkerResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSetFriendWorkerResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSetFriendWorkerResp));
  GetWorkerSpeedUpReq_descriptor_ = file->message_type(6);
  static const int GetWorkerSpeedUpReq_offsets_[1] = {
  };
  GetWorkerSpeedUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetWorkerSpeedUpReq_descriptor_,
      GetWorkerSpeedUpReq::default_instance_,
      GetWorkerSpeedUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWorkerSpeedUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWorkerSpeedUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetWorkerSpeedUpReq));
  GetWorkerSpeedUpResp_descriptor_ = file->message_type(7);
  static const int GetWorkerSpeedUpResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWorkerSpeedUpResp, friendworker_),
  };
  GetWorkerSpeedUpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetWorkerSpeedUpResp_descriptor_,
      GetWorkerSpeedUpResp::default_instance_,
      GetWorkerSpeedUpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWorkerSpeedUpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWorkerSpeedUpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetWorkerSpeedUpResp));
  SelectWorkerReq_descriptor_ = file->message_type(8);
  static const int SelectWorkerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectWorkerReq, workeruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectWorkerReq, pos_),
  };
  SelectWorkerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectWorkerReq_descriptor_,
      SelectWorkerReq::default_instance_,
      SelectWorkerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectWorkerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectWorkerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectWorkerReq));
  SelectWorkerResp_descriptor_ = file->message_type(9);
  static const int SelectWorkerResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectWorkerResp, friendworker_),
  };
  SelectWorkerResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectWorkerResp_descriptor_,
      SelectWorkerResp::default_instance_,
      SelectWorkerResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectWorkerResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectWorkerResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectWorkerResp));
  ThanksWorkerReq_descriptor_ = file->message_type(10);
  static const int ThanksWorkerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThanksWorkerReq, workeruid_),
  };
  ThanksWorkerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThanksWorkerReq_descriptor_,
      ThanksWorkerReq::default_instance_,
      ThanksWorkerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThanksWorkerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThanksWorkerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThanksWorkerReq));
  ThanksWorkerResp_descriptor_ = file->message_type(11);
  static const int ThanksWorkerResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThanksWorkerResp, friendworker_),
  };
  ThanksWorkerResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThanksWorkerResp_descriptor_,
      ThanksWorkerResp::default_instance_,
      ThanksWorkerResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThanksWorkerResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThanksWorkerResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThanksWorkerResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoFriendWorker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendWorkerCPP_descriptor_, &FriendWorkerCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetFriendWorkerReq_descriptor_, &SetFriendWorkerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetFriendWorkerResp_descriptor_, &SetFriendWorkerResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushInviteReardMsg_descriptor_, &PushInviteReardMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSetFriendWorkerReq_descriptor_, &CSSetFriendWorkerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSetFriendWorkerResp_descriptor_, &CSSetFriendWorkerResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetWorkerSpeedUpReq_descriptor_, &GetWorkerSpeedUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetWorkerSpeedUpResp_descriptor_, &GetWorkerSpeedUpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectWorkerReq_descriptor_, &SelectWorkerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectWorkerResp_descriptor_, &SelectWorkerResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThanksWorkerReq_descriptor_, &ThanksWorkerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThanksWorkerResp_descriptor_, &ThanksWorkerResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoFriendWorker_2eproto() {
  delete FriendWorkerCPP::default_instance_;
  delete FriendWorkerCPP_reflection_;
  delete SetFriendWorkerReq::default_instance_;
  delete SetFriendWorkerReq_reflection_;
  delete SetFriendWorkerResp::default_instance_;
  delete SetFriendWorkerResp_reflection_;
  delete PushInviteReardMsg::default_instance_;
  delete PushInviteReardMsg_reflection_;
  delete CSSetFriendWorkerReq::default_instance_;
  delete CSSetFriendWorkerReq_reflection_;
  delete CSSetFriendWorkerResp::default_instance_;
  delete CSSetFriendWorkerResp_reflection_;
  delete GetWorkerSpeedUpReq::default_instance_;
  delete GetWorkerSpeedUpReq_reflection_;
  delete GetWorkerSpeedUpResp::default_instance_;
  delete GetWorkerSpeedUpResp_reflection_;
  delete SelectWorkerReq::default_instance_;
  delete SelectWorkerReq_reflection_;
  delete SelectWorkerResp::default_instance_;
  delete SelectWorkerResp_reflection_;
  delete ThanksWorkerReq::default_instance_;
  delete ThanksWorkerReq_reflection_;
  delete ThanksWorkerResp::default_instance_;
  delete ThanksWorkerResp_reflection_;
}

void protobuf_AddDesc_ProtoFriendWorker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ProtoFriendWorker.proto\022\021ProtoFriendWo"
    "rker\032\020DataCommon.proto\"i\n\017FriendWorkerCP"
    "P\022\021\n\tworkerUid\030\001 \002(\r\022\023\n\013workerEndTs\030\002 \002("
    "\r\022\025\n\rworkerSlotPos\030\003 \002(\r\022\027\n\017workerInvite"
    "dTs\030\004 \001(\r\"E\n\022SetFriendWorkerReq\022\016\n\006othui"
    "d\030\001 \002(\r\022\017\n\007propsid\030\002 \001(\r\022\016\n\006source\030\003 \003(\r"
    "\"%\n\023SetFriendWorkerResp\022\016\n\006status\030\001 \002(\r\""
    "A\n\022PushInviteReardMsg\022+\n\007commons\030\001 \002(\0132\032"
    ".DataCommon.CommonItemsCPP\"o\n\024CSSetFrien"
    "dWorkerReq\022\016\n\006othuid\030\001 \002(\r\022\r\n\005myuid\030\002 \002("
    "\r\022\020\n\010propisid\030\003 \002(\r\022\022\n\nsourceType\030\004 \002(\r\022"
    "\022\n\nsourceFlag\030\005 \002(\r\"F\n\025CSSetFriendWorker"
    "Resp\022\016\n\006othuid\030\001 \002(\r\022\r\n\005myuid\030\002 \002(\r\022\016\n\006s"
    "tauts\030\003 \002(\r\"\025\n\023GetWorkerSpeedUpReq\"P\n\024Ge"
    "tWorkerSpeedUpResp\0228\n\014friendworker\030\001 \003(\013"
    "2\".ProtoFriendWorker.FriendWorkerCPP\"1\n\017"
    "SelectWorkerReq\022\021\n\tworkerUid\030\001 \002(\r\022\013\n\003po"
    "s\030\002 \002(\r\"L\n\020SelectWorkerResp\0228\n\014friendwor"
    "ker\030\001 \002(\0132\".ProtoFriendWorker.FriendWork"
    "erCPP\"$\n\017ThanksWorkerReq\022\021\n\tworkerUid\030\001 "
    "\002(\r\"L\n\020ThanksWorkerResp\0228\n\014friendworker\030"
    "\001 \002(\0132\".ProtoFriendWorker.FriendWorkerCP"
    "P", 881);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoFriendWorker.proto", &protobuf_RegisterTypes);
  FriendWorkerCPP::default_instance_ = new FriendWorkerCPP();
  SetFriendWorkerReq::default_instance_ = new SetFriendWorkerReq();
  SetFriendWorkerResp::default_instance_ = new SetFriendWorkerResp();
  PushInviteReardMsg::default_instance_ = new PushInviteReardMsg();
  CSSetFriendWorkerReq::default_instance_ = new CSSetFriendWorkerReq();
  CSSetFriendWorkerResp::default_instance_ = new CSSetFriendWorkerResp();
  GetWorkerSpeedUpReq::default_instance_ = new GetWorkerSpeedUpReq();
  GetWorkerSpeedUpResp::default_instance_ = new GetWorkerSpeedUpResp();
  SelectWorkerReq::default_instance_ = new SelectWorkerReq();
  SelectWorkerResp::default_instance_ = new SelectWorkerResp();
  ThanksWorkerReq::default_instance_ = new ThanksWorkerReq();
  ThanksWorkerResp::default_instance_ = new ThanksWorkerResp();
  FriendWorkerCPP::default_instance_->InitAsDefaultInstance();
  SetFriendWorkerReq::default_instance_->InitAsDefaultInstance();
  SetFriendWorkerResp::default_instance_->InitAsDefaultInstance();
  PushInviteReardMsg::default_instance_->InitAsDefaultInstance();
  CSSetFriendWorkerReq::default_instance_->InitAsDefaultInstance();
  CSSetFriendWorkerResp::default_instance_->InitAsDefaultInstance();
  GetWorkerSpeedUpReq::default_instance_->InitAsDefaultInstance();
  GetWorkerSpeedUpResp::default_instance_->InitAsDefaultInstance();
  SelectWorkerReq::default_instance_->InitAsDefaultInstance();
  SelectWorkerResp::default_instance_->InitAsDefaultInstance();
  ThanksWorkerReq::default_instance_->InitAsDefaultInstance();
  ThanksWorkerResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoFriendWorker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoFriendWorker_2eproto {
  StaticDescriptorInitializer_ProtoFriendWorker_2eproto() {
    protobuf_AddDesc_ProtoFriendWorker_2eproto();
  }
} static_descriptor_initializer_ProtoFriendWorker_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FriendWorkerCPP::kWorkerUidFieldNumber;
const int FriendWorkerCPP::kWorkerEndTsFieldNumber;
const int FriendWorkerCPP::kWorkerSlotPosFieldNumber;
const int FriendWorkerCPP::kWorkerInvitedTsFieldNumber;
#endif  // !_MSC_VER

FriendWorkerCPP::FriendWorkerCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendWorker.FriendWorkerCPP)
}

void FriendWorkerCPP::InitAsDefaultInstance() {
}

FriendWorkerCPP::FriendWorkerCPP(const FriendWorkerCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendWorker.FriendWorkerCPP)
}

void FriendWorkerCPP::SharedCtor() {
  _cached_size_ = 0;
  workeruid_ = 0u;
  workerendts_ = 0u;
  workerslotpos_ = 0u;
  workerinvitedts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendWorkerCPP::~FriendWorkerCPP() {
  // @@protoc_insertion_point(destructor:ProtoFriendWorker.FriendWorkerCPP)
  SharedDtor();
}

void FriendWorkerCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendWorkerCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendWorkerCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendWorkerCPP_descriptor_;
}

const FriendWorkerCPP& FriendWorkerCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendWorker_2eproto();
  return *default_instance_;
}

FriendWorkerCPP* FriendWorkerCPP::default_instance_ = NULL;

FriendWorkerCPP* FriendWorkerCPP::New() const {
  return new FriendWorkerCPP;
}

void FriendWorkerCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendWorkerCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(workeruid_, workerinvitedts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendWorkerCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendWorker.FriendWorkerCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 workerUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workeruid_)));
          set_has_workeruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_workerEndTs;
        break;
      }

      // required uint32 workerEndTs = 2;
      case 2: {
        if (tag == 16) {
         parse_workerEndTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workerendts_)));
          set_has_workerendts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_workerSlotPos;
        break;
      }

      // required uint32 workerSlotPos = 3;
      case 3: {
        if (tag == 24) {
         parse_workerSlotPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workerslotpos_)));
          set_has_workerslotpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_workerInvitedTs;
        break;
      }

      // optional uint32 workerInvitedTs = 4;
      case 4: {
        if (tag == 32) {
         parse_workerInvitedTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workerinvitedts_)));
          set_has_workerinvitedts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendWorker.FriendWorkerCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendWorker.FriendWorkerCPP)
  return false;
#undef DO_
}

void FriendWorkerCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendWorker.FriendWorkerCPP)
  // required uint32 workerUid = 1;
  if (has_workeruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->workeruid(), output);
  }

  // required uint32 workerEndTs = 2;
  if (has_workerendts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->workerendts(), output);
  }

  // required uint32 workerSlotPos = 3;
  if (has_workerslotpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->workerslotpos(), output);
  }

  // optional uint32 workerInvitedTs = 4;
  if (has_workerinvitedts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->workerinvitedts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendWorker.FriendWorkerCPP)
}

::google::protobuf::uint8* FriendWorkerCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendWorker.FriendWorkerCPP)
  // required uint32 workerUid = 1;
  if (has_workeruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->workeruid(), target);
  }

  // required uint32 workerEndTs = 2;
  if (has_workerendts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->workerendts(), target);
  }

  // required uint32 workerSlotPos = 3;
  if (has_workerslotpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->workerslotpos(), target);
  }

  // optional uint32 workerInvitedTs = 4;
  if (has_workerinvitedts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->workerinvitedts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendWorker.FriendWorkerCPP)
  return target;
}

int FriendWorkerCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 workerUid = 1;
    if (has_workeruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workeruid());
    }

    // required uint32 workerEndTs = 2;
    if (has_workerendts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workerendts());
    }

    // required uint32 workerSlotPos = 3;
    if (has_workerslotpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workerslotpos());
    }

    // optional uint32 workerInvitedTs = 4;
    if (has_workerinvitedts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workerinvitedts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendWorkerCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendWorkerCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendWorkerCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendWorkerCPP::MergeFrom(const FriendWorkerCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_workeruid()) {
      set_workeruid(from.workeruid());
    }
    if (from.has_workerendts()) {
      set_workerendts(from.workerendts());
    }
    if (from.has_workerslotpos()) {
      set_workerslotpos(from.workerslotpos());
    }
    if (from.has_workerinvitedts()) {
      set_workerinvitedts(from.workerinvitedts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendWorkerCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendWorkerCPP::CopyFrom(const FriendWorkerCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendWorkerCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FriendWorkerCPP::Swap(FriendWorkerCPP* other) {
  if (other != this) {
    std::swap(workeruid_, other->workeruid_);
    std::swap(workerendts_, other->workerendts_);
    std::swap(workerslotpos_, other->workerslotpos_);
    std::swap(workerinvitedts_, other->workerinvitedts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendWorkerCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendWorkerCPP_descriptor_;
  metadata.reflection = FriendWorkerCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetFriendWorkerReq::kOthuidFieldNumber;
const int SetFriendWorkerReq::kPropsidFieldNumber;
const int SetFriendWorkerReq::kSourceFieldNumber;
#endif  // !_MSC_VER

SetFriendWorkerReq::SetFriendWorkerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendWorker.SetFriendWorkerReq)
}

void SetFriendWorkerReq::InitAsDefaultInstance() {
}

SetFriendWorkerReq::SetFriendWorkerReq(const SetFriendWorkerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendWorker.SetFriendWorkerReq)
}

void SetFriendWorkerReq::SharedCtor() {
  _cached_size_ = 0;
  othuid_ = 0u;
  propsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetFriendWorkerReq::~SetFriendWorkerReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendWorker.SetFriendWorkerReq)
  SharedDtor();
}

void SetFriendWorkerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetFriendWorkerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetFriendWorkerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetFriendWorkerReq_descriptor_;
}

const SetFriendWorkerReq& SetFriendWorkerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendWorker_2eproto();
  return *default_instance_;
}

SetFriendWorkerReq* SetFriendWorkerReq::default_instance_ = NULL;

SetFriendWorkerReq* SetFriendWorkerReq::New() const {
  return new SetFriendWorkerReq;
}

void SetFriendWorkerReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetFriendWorkerReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(othuid_, propsid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  source_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetFriendWorkerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendWorker.SetFriendWorkerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 othuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsid;
        break;
      }

      // optional uint32 propsid = 2;
      case 2: {
        if (tag == 16) {
         parse_propsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_source;
        break;
      }

      // repeated uint32 source = 3;
      case 3: {
        if (tag == 24) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_source())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_source())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_source;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendWorker.SetFriendWorkerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendWorker.SetFriendWorkerReq)
  return false;
#undef DO_
}

void SetFriendWorkerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendWorker.SetFriendWorkerReq)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->othuid(), output);
  }

  // optional uint32 propsid = 2;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propsid(), output);
  }

  // repeated uint32 source = 3;
  for (int i = 0; i < this->source_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->source(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendWorker.SetFriendWorkerReq)
}

::google::protobuf::uint8* SetFriendWorkerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendWorker.SetFriendWorkerReq)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->othuid(), target);
  }

  // optional uint32 propsid = 2;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propsid(), target);
  }

  // repeated uint32 source = 3;
  for (int i = 0; i < this->source_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->source(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendWorker.SetFriendWorkerReq)
  return target;
}

int SetFriendWorkerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 othuid = 1;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

    // optional uint32 propsid = 2;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

  }
  // repeated uint32 source = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->source_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->source(i));
    }
    total_size += 1 * this->source_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetFriendWorkerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetFriendWorkerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetFriendWorkerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetFriendWorkerReq::MergeFrom(const SetFriendWorkerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  source_.MergeFrom(from.source_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetFriendWorkerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetFriendWorkerReq::CopyFrom(const SetFriendWorkerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFriendWorkerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetFriendWorkerReq::Swap(SetFriendWorkerReq* other) {
  if (other != this) {
    std::swap(othuid_, other->othuid_);
    std::swap(propsid_, other->propsid_);
    source_.Swap(&other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetFriendWorkerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetFriendWorkerReq_descriptor_;
  metadata.reflection = SetFriendWorkerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetFriendWorkerResp::kStatusFieldNumber;
#endif  // !_MSC_VER

SetFriendWorkerResp::SetFriendWorkerResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendWorker.SetFriendWorkerResp)
}

void SetFriendWorkerResp::InitAsDefaultInstance() {
}

SetFriendWorkerResp::SetFriendWorkerResp(const SetFriendWorkerResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendWorker.SetFriendWorkerResp)
}

void SetFriendWorkerResp::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetFriendWorkerResp::~SetFriendWorkerResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendWorker.SetFriendWorkerResp)
  SharedDtor();
}

void SetFriendWorkerResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetFriendWorkerResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetFriendWorkerResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetFriendWorkerResp_descriptor_;
}

const SetFriendWorkerResp& SetFriendWorkerResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendWorker_2eproto();
  return *default_instance_;
}

SetFriendWorkerResp* SetFriendWorkerResp::default_instance_ = NULL;

SetFriendWorkerResp* SetFriendWorkerResp::New() const {
  return new SetFriendWorkerResp;
}

void SetFriendWorkerResp::Clear() {
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetFriendWorkerResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendWorker.SetFriendWorkerResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendWorker.SetFriendWorkerResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendWorker.SetFriendWorkerResp)
  return false;
#undef DO_
}

void SetFriendWorkerResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendWorker.SetFriendWorkerResp)
  // required uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendWorker.SetFriendWorkerResp)
}

::google::protobuf::uint8* SetFriendWorkerResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendWorker.SetFriendWorkerResp)
  // required uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendWorker.SetFriendWorkerResp)
  return target;
}

int SetFriendWorkerResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetFriendWorkerResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetFriendWorkerResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetFriendWorkerResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetFriendWorkerResp::MergeFrom(const SetFriendWorkerResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetFriendWorkerResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetFriendWorkerResp::CopyFrom(const SetFriendWorkerResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFriendWorkerResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetFriendWorkerResp::Swap(SetFriendWorkerResp* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetFriendWorkerResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetFriendWorkerResp_descriptor_;
  metadata.reflection = SetFriendWorkerResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushInviteReardMsg::kCommonsFieldNumber;
#endif  // !_MSC_VER

PushInviteReardMsg::PushInviteReardMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendWorker.PushInviteReardMsg)
}

void PushInviteReardMsg::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

PushInviteReardMsg::PushInviteReardMsg(const PushInviteReardMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendWorker.PushInviteReardMsg)
}

void PushInviteReardMsg::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushInviteReardMsg::~PushInviteReardMsg() {
  // @@protoc_insertion_point(destructor:ProtoFriendWorker.PushInviteReardMsg)
  SharedDtor();
}

void PushInviteReardMsg::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void PushInviteReardMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushInviteReardMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushInviteReardMsg_descriptor_;
}

const PushInviteReardMsg& PushInviteReardMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendWorker_2eproto();
  return *default_instance_;
}

PushInviteReardMsg* PushInviteReardMsg::default_instance_ = NULL;

PushInviteReardMsg* PushInviteReardMsg::New() const {
  return new PushInviteReardMsg;
}

void PushInviteReardMsg::Clear() {
  if (has_commons()) {
    if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushInviteReardMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendWorker.PushInviteReardMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendWorker.PushInviteReardMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendWorker.PushInviteReardMsg)
  return false;
#undef DO_
}

void PushInviteReardMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendWorker.PushInviteReardMsg)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendWorker.PushInviteReardMsg)
}

::google::protobuf::uint8* PushInviteReardMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendWorker.PushInviteReardMsg)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendWorker.PushInviteReardMsg)
  return target;
}

int PushInviteReardMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushInviteReardMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushInviteReardMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushInviteReardMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushInviteReardMsg::MergeFrom(const PushInviteReardMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushInviteReardMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushInviteReardMsg::CopyFrom(const PushInviteReardMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushInviteReardMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void PushInviteReardMsg::Swap(PushInviteReardMsg* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushInviteReardMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushInviteReardMsg_descriptor_;
  metadata.reflection = PushInviteReardMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSetFriendWorkerReq::kOthuidFieldNumber;
const int CSSetFriendWorkerReq::kMyuidFieldNumber;
const int CSSetFriendWorkerReq::kPropisidFieldNumber;
const int CSSetFriendWorkerReq::kSourceTypeFieldNumber;
const int CSSetFriendWorkerReq::kSourceFlagFieldNumber;
#endif  // !_MSC_VER

CSSetFriendWorkerReq::CSSetFriendWorkerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendWorker.CSSetFriendWorkerReq)
}

void CSSetFriendWorkerReq::InitAsDefaultInstance() {
}

CSSetFriendWorkerReq::CSSetFriendWorkerReq(const CSSetFriendWorkerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendWorker.CSSetFriendWorkerReq)
}

void CSSetFriendWorkerReq::SharedCtor() {
  _cached_size_ = 0;
  othuid_ = 0u;
  myuid_ = 0u;
  propisid_ = 0u;
  sourcetype_ = 0u;
  sourceflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSetFriendWorkerReq::~CSSetFriendWorkerReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendWorker.CSSetFriendWorkerReq)
  SharedDtor();
}

void CSSetFriendWorkerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSetFriendWorkerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSetFriendWorkerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSetFriendWorkerReq_descriptor_;
}

const CSSetFriendWorkerReq& CSSetFriendWorkerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendWorker_2eproto();
  return *default_instance_;
}

CSSetFriendWorkerReq* CSSetFriendWorkerReq::default_instance_ = NULL;

CSSetFriendWorkerReq* CSSetFriendWorkerReq::New() const {
  return new CSSetFriendWorkerReq;
}

void CSSetFriendWorkerReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSSetFriendWorkerReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(othuid_, sourceflag_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSetFriendWorkerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendWorker.CSSetFriendWorkerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 othuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myuid;
        break;
      }

      // required uint32 myuid = 2;
      case 2: {
        if (tag == 16) {
         parse_myuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_propisid;
        break;
      }

      // required uint32 propisid = 3;
      case 3: {
        if (tag == 24) {
         parse_propisid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propisid_)));
          set_has_propisid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sourceType;
        break;
      }

      // required uint32 sourceType = 4;
      case 4: {
        if (tag == 32) {
         parse_sourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourcetype_)));
          set_has_sourcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sourceFlag;
        break;
      }

      // required uint32 sourceFlag = 5;
      case 5: {
        if (tag == 40) {
         parse_sourceFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceflag_)));
          set_has_sourceflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendWorker.CSSetFriendWorkerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendWorker.CSSetFriendWorkerReq)
  return false;
#undef DO_
}

void CSSetFriendWorkerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendWorker.CSSetFriendWorkerReq)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->othuid(), output);
  }

  // required uint32 myuid = 2;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myuid(), output);
  }

  // required uint32 propisid = 3;
  if (has_propisid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->propisid(), output);
  }

  // required uint32 sourceType = 4;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sourcetype(), output);
  }

  // required uint32 sourceFlag = 5;
  if (has_sourceflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sourceflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendWorker.CSSetFriendWorkerReq)
}

::google::protobuf::uint8* CSSetFriendWorkerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendWorker.CSSetFriendWorkerReq)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->othuid(), target);
  }

  // required uint32 myuid = 2;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myuid(), target);
  }

  // required uint32 propisid = 3;
  if (has_propisid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->propisid(), target);
  }

  // required uint32 sourceType = 4;
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sourcetype(), target);
  }

  // required uint32 sourceFlag = 5;
  if (has_sourceflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sourceflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendWorker.CSSetFriendWorkerReq)
  return target;
}

int CSSetFriendWorkerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 othuid = 1;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

    // required uint32 myuid = 2;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // required uint32 propisid = 3;
    if (has_propisid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propisid());
    }

    // required uint32 sourceType = 4;
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourcetype());
    }

    // required uint32 sourceFlag = 5;
    if (has_sourceflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSetFriendWorkerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSetFriendWorkerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSetFriendWorkerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSetFriendWorkerReq::MergeFrom(const CSSetFriendWorkerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_propisid()) {
      set_propisid(from.propisid());
    }
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
    if (from.has_sourceflag()) {
      set_sourceflag(from.sourceflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSetFriendWorkerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetFriendWorkerReq::CopyFrom(const CSSetFriendWorkerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetFriendWorkerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CSSetFriendWorkerReq::Swap(CSSetFriendWorkerReq* other) {
  if (other != this) {
    std::swap(othuid_, other->othuid_);
    std::swap(myuid_, other->myuid_);
    std::swap(propisid_, other->propisid_);
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(sourceflag_, other->sourceflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSetFriendWorkerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSetFriendWorkerReq_descriptor_;
  metadata.reflection = CSSetFriendWorkerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSSetFriendWorkerResp::kOthuidFieldNumber;
const int CSSetFriendWorkerResp::kMyuidFieldNumber;
const int CSSetFriendWorkerResp::kStautsFieldNumber;
#endif  // !_MSC_VER

CSSetFriendWorkerResp::CSSetFriendWorkerResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendWorker.CSSetFriendWorkerResp)
}

void CSSetFriendWorkerResp::InitAsDefaultInstance() {
}

CSSetFriendWorkerResp::CSSetFriendWorkerResp(const CSSetFriendWorkerResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendWorker.CSSetFriendWorkerResp)
}

void CSSetFriendWorkerResp::SharedCtor() {
  _cached_size_ = 0;
  othuid_ = 0u;
  myuid_ = 0u;
  stauts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSetFriendWorkerResp::~CSSetFriendWorkerResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendWorker.CSSetFriendWorkerResp)
  SharedDtor();
}

void CSSetFriendWorkerResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSSetFriendWorkerResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSetFriendWorkerResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSetFriendWorkerResp_descriptor_;
}

const CSSetFriendWorkerResp& CSSetFriendWorkerResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendWorker_2eproto();
  return *default_instance_;
}

CSSetFriendWorkerResp* CSSetFriendWorkerResp::default_instance_ = NULL;

CSSetFriendWorkerResp* CSSetFriendWorkerResp::New() const {
  return new CSSetFriendWorkerResp;
}

void CSSetFriendWorkerResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSSetFriendWorkerResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(othuid_, stauts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSetFriendWorkerResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendWorker.CSSetFriendWorkerResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 othuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myuid;
        break;
      }

      // required uint32 myuid = 2;
      case 2: {
        if (tag == 16) {
         parse_myuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stauts;
        break;
      }

      // required uint32 stauts = 3;
      case 3: {
        if (tag == 24) {
         parse_stauts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stauts_)));
          set_has_stauts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendWorker.CSSetFriendWorkerResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendWorker.CSSetFriendWorkerResp)
  return false;
#undef DO_
}

void CSSetFriendWorkerResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendWorker.CSSetFriendWorkerResp)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->othuid(), output);
  }

  // required uint32 myuid = 2;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myuid(), output);
  }

  // required uint32 stauts = 3;
  if (has_stauts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stauts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendWorker.CSSetFriendWorkerResp)
}

::google::protobuf::uint8* CSSetFriendWorkerResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendWorker.CSSetFriendWorkerResp)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->othuid(), target);
  }

  // required uint32 myuid = 2;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myuid(), target);
  }

  // required uint32 stauts = 3;
  if (has_stauts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stauts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendWorker.CSSetFriendWorkerResp)
  return target;
}

int CSSetFriendWorkerResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 othuid = 1;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

    // required uint32 myuid = 2;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // required uint32 stauts = 3;
    if (has_stauts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stauts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSetFriendWorkerResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSetFriendWorkerResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSetFriendWorkerResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSetFriendWorkerResp::MergeFrom(const CSSetFriendWorkerResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_stauts()) {
      set_stauts(from.stauts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSetFriendWorkerResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSetFriendWorkerResp::CopyFrom(const CSSetFriendWorkerResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetFriendWorkerResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSSetFriendWorkerResp::Swap(CSSetFriendWorkerResp* other) {
  if (other != this) {
    std::swap(othuid_, other->othuid_);
    std::swap(myuid_, other->myuid_);
    std::swap(stauts_, other->stauts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSSetFriendWorkerResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSetFriendWorkerResp_descriptor_;
  metadata.reflection = CSSetFriendWorkerResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetWorkerSpeedUpReq::GetWorkerSpeedUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendWorker.GetWorkerSpeedUpReq)
}

void GetWorkerSpeedUpReq::InitAsDefaultInstance() {
}

GetWorkerSpeedUpReq::GetWorkerSpeedUpReq(const GetWorkerSpeedUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendWorker.GetWorkerSpeedUpReq)
}

void GetWorkerSpeedUpReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetWorkerSpeedUpReq::~GetWorkerSpeedUpReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendWorker.GetWorkerSpeedUpReq)
  SharedDtor();
}

void GetWorkerSpeedUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetWorkerSpeedUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetWorkerSpeedUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetWorkerSpeedUpReq_descriptor_;
}

const GetWorkerSpeedUpReq& GetWorkerSpeedUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendWorker_2eproto();
  return *default_instance_;
}

GetWorkerSpeedUpReq* GetWorkerSpeedUpReq::default_instance_ = NULL;

GetWorkerSpeedUpReq* GetWorkerSpeedUpReq::New() const {
  return new GetWorkerSpeedUpReq;
}

void GetWorkerSpeedUpReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetWorkerSpeedUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendWorker.GetWorkerSpeedUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendWorker.GetWorkerSpeedUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendWorker.GetWorkerSpeedUpReq)
  return false;
#undef DO_
}

void GetWorkerSpeedUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendWorker.GetWorkerSpeedUpReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendWorker.GetWorkerSpeedUpReq)
}

::google::protobuf::uint8* GetWorkerSpeedUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendWorker.GetWorkerSpeedUpReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendWorker.GetWorkerSpeedUpReq)
  return target;
}

int GetWorkerSpeedUpReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetWorkerSpeedUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetWorkerSpeedUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetWorkerSpeedUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetWorkerSpeedUpReq::MergeFrom(const GetWorkerSpeedUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetWorkerSpeedUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWorkerSpeedUpReq::CopyFrom(const GetWorkerSpeedUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkerSpeedUpReq::IsInitialized() const {

  return true;
}

void GetWorkerSpeedUpReq::Swap(GetWorkerSpeedUpReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetWorkerSpeedUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetWorkerSpeedUpReq_descriptor_;
  metadata.reflection = GetWorkerSpeedUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetWorkerSpeedUpResp::kFriendworkerFieldNumber;
#endif  // !_MSC_VER

GetWorkerSpeedUpResp::GetWorkerSpeedUpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendWorker.GetWorkerSpeedUpResp)
}

void GetWorkerSpeedUpResp::InitAsDefaultInstance() {
}

GetWorkerSpeedUpResp::GetWorkerSpeedUpResp(const GetWorkerSpeedUpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendWorker.GetWorkerSpeedUpResp)
}

void GetWorkerSpeedUpResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetWorkerSpeedUpResp::~GetWorkerSpeedUpResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendWorker.GetWorkerSpeedUpResp)
  SharedDtor();
}

void GetWorkerSpeedUpResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetWorkerSpeedUpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetWorkerSpeedUpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetWorkerSpeedUpResp_descriptor_;
}

const GetWorkerSpeedUpResp& GetWorkerSpeedUpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendWorker_2eproto();
  return *default_instance_;
}

GetWorkerSpeedUpResp* GetWorkerSpeedUpResp::default_instance_ = NULL;

GetWorkerSpeedUpResp* GetWorkerSpeedUpResp::New() const {
  return new GetWorkerSpeedUpResp;
}

void GetWorkerSpeedUpResp::Clear() {
  friendworker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetWorkerSpeedUpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendWorker.GetWorkerSpeedUpResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoFriendWorker.FriendWorkerCPP friendworker = 1;
      case 1: {
        if (tag == 10) {
         parse_friendworker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendworker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_friendworker;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendWorker.GetWorkerSpeedUpResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendWorker.GetWorkerSpeedUpResp)
  return false;
#undef DO_
}

void GetWorkerSpeedUpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendWorker.GetWorkerSpeedUpResp)
  // repeated .ProtoFriendWorker.FriendWorkerCPP friendworker = 1;
  for (int i = 0; i < this->friendworker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendworker(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendWorker.GetWorkerSpeedUpResp)
}

::google::protobuf::uint8* GetWorkerSpeedUpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendWorker.GetWorkerSpeedUpResp)
  // repeated .ProtoFriendWorker.FriendWorkerCPP friendworker = 1;
  for (int i = 0; i < this->friendworker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendworker(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendWorker.GetWorkerSpeedUpResp)
  return target;
}

int GetWorkerSpeedUpResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoFriendWorker.FriendWorkerCPP friendworker = 1;
  total_size += 1 * this->friendworker_size();
  for (int i = 0; i < this->friendworker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendworker(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetWorkerSpeedUpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetWorkerSpeedUpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetWorkerSpeedUpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetWorkerSpeedUpResp::MergeFrom(const GetWorkerSpeedUpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendworker_.MergeFrom(from.friendworker_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetWorkerSpeedUpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWorkerSpeedUpResp::CopyFrom(const GetWorkerSpeedUpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWorkerSpeedUpResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->friendworker())) return false;
  return true;
}

void GetWorkerSpeedUpResp::Swap(GetWorkerSpeedUpResp* other) {
  if (other != this) {
    friendworker_.Swap(&other->friendworker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetWorkerSpeedUpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetWorkerSpeedUpResp_descriptor_;
  metadata.reflection = GetWorkerSpeedUpResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectWorkerReq::kWorkerUidFieldNumber;
const int SelectWorkerReq::kPosFieldNumber;
#endif  // !_MSC_VER

SelectWorkerReq::SelectWorkerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendWorker.SelectWorkerReq)
}

void SelectWorkerReq::InitAsDefaultInstance() {
}

SelectWorkerReq::SelectWorkerReq(const SelectWorkerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendWorker.SelectWorkerReq)
}

void SelectWorkerReq::SharedCtor() {
  _cached_size_ = 0;
  workeruid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectWorkerReq::~SelectWorkerReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendWorker.SelectWorkerReq)
  SharedDtor();
}

void SelectWorkerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectWorkerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectWorkerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectWorkerReq_descriptor_;
}

const SelectWorkerReq& SelectWorkerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendWorker_2eproto();
  return *default_instance_;
}

SelectWorkerReq* SelectWorkerReq::default_instance_ = NULL;

SelectWorkerReq* SelectWorkerReq::New() const {
  return new SelectWorkerReq;
}

void SelectWorkerReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SelectWorkerReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(workeruid_, pos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectWorkerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendWorker.SelectWorkerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 workerUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workeruid_)));
          set_has_workeruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // required uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendWorker.SelectWorkerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendWorker.SelectWorkerReq)
  return false;
#undef DO_
}

void SelectWorkerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendWorker.SelectWorkerReq)
  // required uint32 workerUid = 1;
  if (has_workeruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->workeruid(), output);
  }

  // required uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendWorker.SelectWorkerReq)
}

::google::protobuf::uint8* SelectWorkerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendWorker.SelectWorkerReq)
  // required uint32 workerUid = 1;
  if (has_workeruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->workeruid(), target);
  }

  // required uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendWorker.SelectWorkerReq)
  return target;
}

int SelectWorkerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 workerUid = 1;
    if (has_workeruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workeruid());
    }

    // required uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectWorkerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectWorkerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectWorkerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectWorkerReq::MergeFrom(const SelectWorkerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_workeruid()) {
      set_workeruid(from.workeruid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectWorkerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectWorkerReq::CopyFrom(const SelectWorkerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectWorkerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SelectWorkerReq::Swap(SelectWorkerReq* other) {
  if (other != this) {
    std::swap(workeruid_, other->workeruid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectWorkerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectWorkerReq_descriptor_;
  metadata.reflection = SelectWorkerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectWorkerResp::kFriendworkerFieldNumber;
#endif  // !_MSC_VER

SelectWorkerResp::SelectWorkerResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendWorker.SelectWorkerResp)
}

void SelectWorkerResp::InitAsDefaultInstance() {
  friendworker_ = const_cast< ::ProtoFriendWorker::FriendWorkerCPP*>(&::ProtoFriendWorker::FriendWorkerCPP::default_instance());
}

SelectWorkerResp::SelectWorkerResp(const SelectWorkerResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendWorker.SelectWorkerResp)
}

void SelectWorkerResp::SharedCtor() {
  _cached_size_ = 0;
  friendworker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectWorkerResp::~SelectWorkerResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendWorker.SelectWorkerResp)
  SharedDtor();
}

void SelectWorkerResp::SharedDtor() {
  if (this != default_instance_) {
    delete friendworker_;
  }
}

void SelectWorkerResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectWorkerResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectWorkerResp_descriptor_;
}

const SelectWorkerResp& SelectWorkerResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendWorker_2eproto();
  return *default_instance_;
}

SelectWorkerResp* SelectWorkerResp::default_instance_ = NULL;

SelectWorkerResp* SelectWorkerResp::New() const {
  return new SelectWorkerResp;
}

void SelectWorkerResp::Clear() {
  if (has_friendworker()) {
    if (friendworker_ != NULL) friendworker_->::ProtoFriendWorker::FriendWorkerCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectWorkerResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendWorker.SelectWorkerResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoFriendWorker.FriendWorkerCPP friendworker = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendworker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendWorker.SelectWorkerResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendWorker.SelectWorkerResp)
  return false;
#undef DO_
}

void SelectWorkerResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendWorker.SelectWorkerResp)
  // required .ProtoFriendWorker.FriendWorkerCPP friendworker = 1;
  if (has_friendworker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendworker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendWorker.SelectWorkerResp)
}

::google::protobuf::uint8* SelectWorkerResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendWorker.SelectWorkerResp)
  // required .ProtoFriendWorker.FriendWorkerCPP friendworker = 1;
  if (has_friendworker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendworker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendWorker.SelectWorkerResp)
  return target;
}

int SelectWorkerResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoFriendWorker.FriendWorkerCPP friendworker = 1;
    if (has_friendworker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendworker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectWorkerResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectWorkerResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectWorkerResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectWorkerResp::MergeFrom(const SelectWorkerResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendworker()) {
      mutable_friendworker()->::ProtoFriendWorker::FriendWorkerCPP::MergeFrom(from.friendworker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectWorkerResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectWorkerResp::CopyFrom(const SelectWorkerResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectWorkerResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_friendworker()) {
    if (!this->friendworker().IsInitialized()) return false;
  }
  return true;
}

void SelectWorkerResp::Swap(SelectWorkerResp* other) {
  if (other != this) {
    std::swap(friendworker_, other->friendworker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectWorkerResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectWorkerResp_descriptor_;
  metadata.reflection = SelectWorkerResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThanksWorkerReq::kWorkerUidFieldNumber;
#endif  // !_MSC_VER

ThanksWorkerReq::ThanksWorkerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendWorker.ThanksWorkerReq)
}

void ThanksWorkerReq::InitAsDefaultInstance() {
}

ThanksWorkerReq::ThanksWorkerReq(const ThanksWorkerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendWorker.ThanksWorkerReq)
}

void ThanksWorkerReq::SharedCtor() {
  _cached_size_ = 0;
  workeruid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThanksWorkerReq::~ThanksWorkerReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendWorker.ThanksWorkerReq)
  SharedDtor();
}

void ThanksWorkerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThanksWorkerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThanksWorkerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThanksWorkerReq_descriptor_;
}

const ThanksWorkerReq& ThanksWorkerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendWorker_2eproto();
  return *default_instance_;
}

ThanksWorkerReq* ThanksWorkerReq::default_instance_ = NULL;

ThanksWorkerReq* ThanksWorkerReq::New() const {
  return new ThanksWorkerReq;
}

void ThanksWorkerReq::Clear() {
  workeruid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThanksWorkerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendWorker.ThanksWorkerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 workerUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workeruid_)));
          set_has_workeruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendWorker.ThanksWorkerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendWorker.ThanksWorkerReq)
  return false;
#undef DO_
}

void ThanksWorkerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendWorker.ThanksWorkerReq)
  // required uint32 workerUid = 1;
  if (has_workeruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->workeruid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendWorker.ThanksWorkerReq)
}

::google::protobuf::uint8* ThanksWorkerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendWorker.ThanksWorkerReq)
  // required uint32 workerUid = 1;
  if (has_workeruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->workeruid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendWorker.ThanksWorkerReq)
  return target;
}

int ThanksWorkerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 workerUid = 1;
    if (has_workeruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workeruid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThanksWorkerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThanksWorkerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThanksWorkerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThanksWorkerReq::MergeFrom(const ThanksWorkerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_workeruid()) {
      set_workeruid(from.workeruid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThanksWorkerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThanksWorkerReq::CopyFrom(const ThanksWorkerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThanksWorkerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ThanksWorkerReq::Swap(ThanksWorkerReq* other) {
  if (other != this) {
    std::swap(workeruid_, other->workeruid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThanksWorkerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThanksWorkerReq_descriptor_;
  metadata.reflection = ThanksWorkerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThanksWorkerResp::kFriendworkerFieldNumber;
#endif  // !_MSC_VER

ThanksWorkerResp::ThanksWorkerResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendWorker.ThanksWorkerResp)
}

void ThanksWorkerResp::InitAsDefaultInstance() {
  friendworker_ = const_cast< ::ProtoFriendWorker::FriendWorkerCPP*>(&::ProtoFriendWorker::FriendWorkerCPP::default_instance());
}

ThanksWorkerResp::ThanksWorkerResp(const ThanksWorkerResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendWorker.ThanksWorkerResp)
}

void ThanksWorkerResp::SharedCtor() {
  _cached_size_ = 0;
  friendworker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThanksWorkerResp::~ThanksWorkerResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendWorker.ThanksWorkerResp)
  SharedDtor();
}

void ThanksWorkerResp::SharedDtor() {
  if (this != default_instance_) {
    delete friendworker_;
  }
}

void ThanksWorkerResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThanksWorkerResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThanksWorkerResp_descriptor_;
}

const ThanksWorkerResp& ThanksWorkerResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendWorker_2eproto();
  return *default_instance_;
}

ThanksWorkerResp* ThanksWorkerResp::default_instance_ = NULL;

ThanksWorkerResp* ThanksWorkerResp::New() const {
  return new ThanksWorkerResp;
}

void ThanksWorkerResp::Clear() {
  if (has_friendworker()) {
    if (friendworker_ != NULL) friendworker_->::ProtoFriendWorker::FriendWorkerCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThanksWorkerResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendWorker.ThanksWorkerResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoFriendWorker.FriendWorkerCPP friendworker = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendworker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendWorker.ThanksWorkerResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendWorker.ThanksWorkerResp)
  return false;
#undef DO_
}

void ThanksWorkerResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendWorker.ThanksWorkerResp)
  // required .ProtoFriendWorker.FriendWorkerCPP friendworker = 1;
  if (has_friendworker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendworker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendWorker.ThanksWorkerResp)
}

::google::protobuf::uint8* ThanksWorkerResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendWorker.ThanksWorkerResp)
  // required .ProtoFriendWorker.FriendWorkerCPP friendworker = 1;
  if (has_friendworker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendworker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendWorker.ThanksWorkerResp)
  return target;
}

int ThanksWorkerResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoFriendWorker.FriendWorkerCPP friendworker = 1;
    if (has_friendworker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendworker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThanksWorkerResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThanksWorkerResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThanksWorkerResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThanksWorkerResp::MergeFrom(const ThanksWorkerResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendworker()) {
      mutable_friendworker()->::ProtoFriendWorker::FriendWorkerCPP::MergeFrom(from.friendworker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThanksWorkerResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThanksWorkerResp::CopyFrom(const ThanksWorkerResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThanksWorkerResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_friendworker()) {
    if (!this->friendworker().IsInitialized()) return false;
  }
  return true;
}

void ThanksWorkerResp::Swap(ThanksWorkerResp* other) {
  if (other != this) {
    std::swap(friendworker_, other->friendworker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThanksWorkerResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThanksWorkerResp_descriptor_;
  metadata.reflection = ThanksWorkerResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoFriendWorker

// @@protoc_insertion_point(global_scope)
