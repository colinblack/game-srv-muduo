// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoNPCCustomer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoNPCCustomer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoNPCCustomer {

namespace {

const ::google::protobuf::Descriptor* NPCCustomerCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCCustomerCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNPCCustomerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNPCCustomerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNPCCustomerResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNPCCustomerResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellPropsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellPropsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellPropsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellPropsResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefuseSellPropsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefuseSellPropsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefuseSellPropsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefuseSellPropsResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoNPCCustomer_2eproto() {
  protobuf_AddDesc_ProtoNPCCustomer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoNPCCustomer.proto");
  GOOGLE_CHECK(file != NULL);
  NPCCustomerCPP_descriptor_ = file->message_type(0);
  static const int NPCCustomerCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCCustomerCPP, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCCustomerCPP, propscnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCCustomerCPP, nextts_),
  };
  NPCCustomerCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCCustomerCPP_descriptor_,
      NPCCustomerCPP::default_instance_,
      NPCCustomerCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCCustomerCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCCustomerCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCCustomerCPP));
  GetNPCCustomerReq_descriptor_ = file->message_type(1);
  static const int GetNPCCustomerReq_offsets_[1] = {
  };
  GetNPCCustomerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNPCCustomerReq_descriptor_,
      GetNPCCustomerReq::default_instance_,
      GetNPCCustomerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNPCCustomerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNPCCustomerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNPCCustomerReq));
  GetNPCCustomerResp_descriptor_ = file->message_type(2);
  static const int GetNPCCustomerResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNPCCustomerResp, customer_),
  };
  GetNPCCustomerResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNPCCustomerResp_descriptor_,
      GetNPCCustomerResp::default_instance_,
      GetNPCCustomerResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNPCCustomerResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNPCCustomerResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNPCCustomerResp));
  SellPropsReq_descriptor_ = file->message_type(3);
  static const int SellPropsReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPropsReq, propsid_),
  };
  SellPropsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellPropsReq_descriptor_,
      SellPropsReq::default_instance_,
      SellPropsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPropsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPropsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellPropsReq));
  SellPropsResp_descriptor_ = file->message_type(4);
  static const int SellPropsResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPropsResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPropsResp, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPropsResp, npcid_),
  };
  SellPropsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellPropsResp_descriptor_,
      SellPropsResp::default_instance_,
      SellPropsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPropsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellPropsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellPropsResp));
  RefuseSellPropsReq_descriptor_ = file->message_type(5);
  static const int RefuseSellPropsReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseSellPropsReq, propsid_),
  };
  RefuseSellPropsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefuseSellPropsReq_descriptor_,
      RefuseSellPropsReq::default_instance_,
      RefuseSellPropsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseSellPropsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseSellPropsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefuseSellPropsReq));
  RefuseSellPropsResp_descriptor_ = file->message_type(6);
  static const int RefuseSellPropsResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseSellPropsResp, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseSellPropsResp, npcid_),
  };
  RefuseSellPropsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefuseSellPropsResp_descriptor_,
      RefuseSellPropsResp::default_instance_,
      RefuseSellPropsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseSellPropsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefuseSellPropsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefuseSellPropsResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoNPCCustomer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCCustomerCPP_descriptor_, &NPCCustomerCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNPCCustomerReq_descriptor_, &GetNPCCustomerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNPCCustomerResp_descriptor_, &GetNPCCustomerResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellPropsReq_descriptor_, &SellPropsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellPropsResp_descriptor_, &SellPropsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefuseSellPropsReq_descriptor_, &RefuseSellPropsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefuseSellPropsResp_descriptor_, &RefuseSellPropsResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoNPCCustomer_2eproto() {
  delete NPCCustomerCPP::default_instance_;
  delete NPCCustomerCPP_reflection_;
  delete GetNPCCustomerReq::default_instance_;
  delete GetNPCCustomerReq_reflection_;
  delete GetNPCCustomerResp::default_instance_;
  delete GetNPCCustomerResp_reflection_;
  delete SellPropsReq::default_instance_;
  delete SellPropsReq_reflection_;
  delete SellPropsResp::default_instance_;
  delete SellPropsResp_reflection_;
  delete RefuseSellPropsReq::default_instance_;
  delete RefuseSellPropsReq_reflection_;
  delete RefuseSellPropsResp::default_instance_;
  delete RefuseSellPropsResp_reflection_;
}

void protobuf_AddDesc_ProtoNPCCustomer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ProtoNPCCustomer.proto\022\020ProtoNPCCustom"
    "er\032\020DataCommon.proto\"C\n\016NPCCustomerCPP\022\017"
    "\n\007propsId\030\001 \001(\r\022\020\n\010propsCnt\030\002 \001(\r\022\016\n\006nex"
    "tts\030\003 \002(\r\"\023\n\021GetNPCCustomerReq\"H\n\022GetNPC"
    "CustomerResp\0222\n\010customer\030\001 \003(\0132 .ProtoNP"
    "CCustomer.NPCCustomerCPP\"\037\n\014SellPropsReq"
    "\022\017\n\007propsId\030\001 \002(\r\"W\n\rSellPropsResp\022+\n\007co"
    "mmons\030\001 \001(\0132\032.DataCommon.CommonItemsCPP\022"
    "\n\n\002ts\030\002 \002(\r\022\r\n\005npcid\030\003 \002(\r\"%\n\022RefuseSell"
    "PropsReq\022\017\n\007propsId\030\001 \002(\r\"0\n\023RefuseSellP"
    "ropsResp\022\n\n\002ts\030\001 \002(\r\022\r\n\005npcid\030\002 \002(\r", 435);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoNPCCustomer.proto", &protobuf_RegisterTypes);
  NPCCustomerCPP::default_instance_ = new NPCCustomerCPP();
  GetNPCCustomerReq::default_instance_ = new GetNPCCustomerReq();
  GetNPCCustomerResp::default_instance_ = new GetNPCCustomerResp();
  SellPropsReq::default_instance_ = new SellPropsReq();
  SellPropsResp::default_instance_ = new SellPropsResp();
  RefuseSellPropsReq::default_instance_ = new RefuseSellPropsReq();
  RefuseSellPropsResp::default_instance_ = new RefuseSellPropsResp();
  NPCCustomerCPP::default_instance_->InitAsDefaultInstance();
  GetNPCCustomerReq::default_instance_->InitAsDefaultInstance();
  GetNPCCustomerResp::default_instance_->InitAsDefaultInstance();
  SellPropsReq::default_instance_->InitAsDefaultInstance();
  SellPropsResp::default_instance_->InitAsDefaultInstance();
  RefuseSellPropsReq::default_instance_->InitAsDefaultInstance();
  RefuseSellPropsResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoNPCCustomer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoNPCCustomer_2eproto {
  StaticDescriptorInitializer_ProtoNPCCustomer_2eproto() {
    protobuf_AddDesc_ProtoNPCCustomer_2eproto();
  }
} static_descriptor_initializer_ProtoNPCCustomer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NPCCustomerCPP::kPropsIdFieldNumber;
const int NPCCustomerCPP::kPropsCntFieldNumber;
const int NPCCustomerCPP::kNexttsFieldNumber;
#endif  // !_MSC_VER

NPCCustomerCPP::NPCCustomerCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCCustomer.NPCCustomerCPP)
}

void NPCCustomerCPP::InitAsDefaultInstance() {
}

NPCCustomerCPP::NPCCustomerCPP(const NPCCustomerCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCCustomer.NPCCustomerCPP)
}

void NPCCustomerCPP::SharedCtor() {
  _cached_size_ = 0;
  propsid_ = 0u;
  propscnt_ = 0u;
  nextts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCCustomerCPP::~NPCCustomerCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCCustomer.NPCCustomerCPP)
  SharedDtor();
}

void NPCCustomerCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCCustomerCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCCustomerCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCCustomerCPP_descriptor_;
}

const NPCCustomerCPP& NPCCustomerCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCCustomer_2eproto();
  return *default_instance_;
}

NPCCustomerCPP* NPCCustomerCPP::default_instance_ = NULL;

NPCCustomerCPP* NPCCustomerCPP::New() const {
  return new NPCCustomerCPP;
}

void NPCCustomerCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NPCCustomerCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(propsid_, nextts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCCustomerCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCCustomer.NPCCustomerCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 propsId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsCnt;
        break;
      }

      // optional uint32 propsCnt = 2;
      case 2: {
        if (tag == 16) {
         parse_propsCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propscnt_)));
          set_has_propscnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nextts;
        break;
      }

      // required uint32 nextts = 3;
      case 3: {
        if (tag == 24) {
         parse_nextts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextts_)));
          set_has_nextts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCCustomer.NPCCustomerCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCCustomer.NPCCustomerCPP)
  return false;
#undef DO_
}

void NPCCustomerCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCCustomer.NPCCustomerCPP)
  // optional uint32 propsId = 1;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  // optional uint32 propsCnt = 2;
  if (has_propscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propscnt(), output);
  }

  // required uint32 nextts = 3;
  if (has_nextts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nextts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCCustomer.NPCCustomerCPP)
}

::google::protobuf::uint8* NPCCustomerCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCCustomer.NPCCustomerCPP)
  // optional uint32 propsId = 1;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  // optional uint32 propsCnt = 2;
  if (has_propscnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propscnt(), target);
  }

  // required uint32 nextts = 3;
  if (has_nextts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nextts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCCustomer.NPCCustomerCPP)
  return target;
}

int NPCCustomerCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 propsId = 1;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // optional uint32 propsCnt = 2;
    if (has_propscnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propscnt());
    }

    // required uint32 nextts = 3;
    if (has_nextts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCCustomerCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCCustomerCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCCustomerCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCCustomerCPP::MergeFrom(const NPCCustomerCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_propscnt()) {
      set_propscnt(from.propscnt());
    }
    if (from.has_nextts()) {
      set_nextts(from.nextts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCCustomerCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCCustomerCPP::CopyFrom(const NPCCustomerCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCCustomerCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void NPCCustomerCPP::Swap(NPCCustomerCPP* other) {
  if (other != this) {
    std::swap(propsid_, other->propsid_);
    std::swap(propscnt_, other->propscnt_);
    std::swap(nextts_, other->nextts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCCustomerCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCCustomerCPP_descriptor_;
  metadata.reflection = NPCCustomerCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetNPCCustomerReq::GetNPCCustomerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCCustomer.GetNPCCustomerReq)
}

void GetNPCCustomerReq::InitAsDefaultInstance() {
}

GetNPCCustomerReq::GetNPCCustomerReq(const GetNPCCustomerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCCustomer.GetNPCCustomerReq)
}

void GetNPCCustomerReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNPCCustomerReq::~GetNPCCustomerReq() {
  // @@protoc_insertion_point(destructor:ProtoNPCCustomer.GetNPCCustomerReq)
  SharedDtor();
}

void GetNPCCustomerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNPCCustomerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNPCCustomerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNPCCustomerReq_descriptor_;
}

const GetNPCCustomerReq& GetNPCCustomerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCCustomer_2eproto();
  return *default_instance_;
}

GetNPCCustomerReq* GetNPCCustomerReq::default_instance_ = NULL;

GetNPCCustomerReq* GetNPCCustomerReq::New() const {
  return new GetNPCCustomerReq;
}

void GetNPCCustomerReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNPCCustomerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCCustomer.GetNPCCustomerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCCustomer.GetNPCCustomerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCCustomer.GetNPCCustomerReq)
  return false;
#undef DO_
}

void GetNPCCustomerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCCustomer.GetNPCCustomerReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCCustomer.GetNPCCustomerReq)
}

::google::protobuf::uint8* GetNPCCustomerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCCustomer.GetNPCCustomerReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCCustomer.GetNPCCustomerReq)
  return target;
}

int GetNPCCustomerReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNPCCustomerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNPCCustomerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNPCCustomerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNPCCustomerReq::MergeFrom(const GetNPCCustomerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNPCCustomerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNPCCustomerReq::CopyFrom(const GetNPCCustomerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNPCCustomerReq::IsInitialized() const {

  return true;
}

void GetNPCCustomerReq::Swap(GetNPCCustomerReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNPCCustomerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNPCCustomerReq_descriptor_;
  metadata.reflection = GetNPCCustomerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNPCCustomerResp::kCustomerFieldNumber;
#endif  // !_MSC_VER

GetNPCCustomerResp::GetNPCCustomerResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCCustomer.GetNPCCustomerResp)
}

void GetNPCCustomerResp::InitAsDefaultInstance() {
}

GetNPCCustomerResp::GetNPCCustomerResp(const GetNPCCustomerResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCCustomer.GetNPCCustomerResp)
}

void GetNPCCustomerResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNPCCustomerResp::~GetNPCCustomerResp() {
  // @@protoc_insertion_point(destructor:ProtoNPCCustomer.GetNPCCustomerResp)
  SharedDtor();
}

void GetNPCCustomerResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNPCCustomerResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNPCCustomerResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNPCCustomerResp_descriptor_;
}

const GetNPCCustomerResp& GetNPCCustomerResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCCustomer_2eproto();
  return *default_instance_;
}

GetNPCCustomerResp* GetNPCCustomerResp::default_instance_ = NULL;

GetNPCCustomerResp* GetNPCCustomerResp::New() const {
  return new GetNPCCustomerResp;
}

void GetNPCCustomerResp::Clear() {
  customer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNPCCustomerResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCCustomer.GetNPCCustomerResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoNPCCustomer.NPCCustomerCPP customer = 1;
      case 1: {
        if (tag == 10) {
         parse_customer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_customer;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCCustomer.GetNPCCustomerResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCCustomer.GetNPCCustomerResp)
  return false;
#undef DO_
}

void GetNPCCustomerResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCCustomer.GetNPCCustomerResp)
  // repeated .ProtoNPCCustomer.NPCCustomerCPP customer = 1;
  for (int i = 0; i < this->customer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->customer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCCustomer.GetNPCCustomerResp)
}

::google::protobuf::uint8* GetNPCCustomerResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCCustomer.GetNPCCustomerResp)
  // repeated .ProtoNPCCustomer.NPCCustomerCPP customer = 1;
  for (int i = 0; i < this->customer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->customer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCCustomer.GetNPCCustomerResp)
  return target;
}

int GetNPCCustomerResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoNPCCustomer.NPCCustomerCPP customer = 1;
  total_size += 1 * this->customer_size();
  for (int i = 0; i < this->customer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNPCCustomerResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNPCCustomerResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNPCCustomerResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNPCCustomerResp::MergeFrom(const GetNPCCustomerResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  customer_.MergeFrom(from.customer_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNPCCustomerResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNPCCustomerResp::CopyFrom(const GetNPCCustomerResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNPCCustomerResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->customer())) return false;
  return true;
}

void GetNPCCustomerResp::Swap(GetNPCCustomerResp* other) {
  if (other != this) {
    customer_.Swap(&other->customer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNPCCustomerResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNPCCustomerResp_descriptor_;
  metadata.reflection = GetNPCCustomerResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellPropsReq::kPropsIdFieldNumber;
#endif  // !_MSC_VER

SellPropsReq::SellPropsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCCustomer.SellPropsReq)
}

void SellPropsReq::InitAsDefaultInstance() {
}

SellPropsReq::SellPropsReq(const SellPropsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCCustomer.SellPropsReq)
}

void SellPropsReq::SharedCtor() {
  _cached_size_ = 0;
  propsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellPropsReq::~SellPropsReq() {
  // @@protoc_insertion_point(destructor:ProtoNPCCustomer.SellPropsReq)
  SharedDtor();
}

void SellPropsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SellPropsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellPropsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellPropsReq_descriptor_;
}

const SellPropsReq& SellPropsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCCustomer_2eproto();
  return *default_instance_;
}

SellPropsReq* SellPropsReq::default_instance_ = NULL;

SellPropsReq* SellPropsReq::New() const {
  return new SellPropsReq;
}

void SellPropsReq::Clear() {
  propsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellPropsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCCustomer.SellPropsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 propsId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCCustomer.SellPropsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCCustomer.SellPropsReq)
  return false;
#undef DO_
}

void SellPropsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCCustomer.SellPropsReq)
  // required uint32 propsId = 1;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCCustomer.SellPropsReq)
}

::google::protobuf::uint8* SellPropsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCCustomer.SellPropsReq)
  // required uint32 propsId = 1;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCCustomer.SellPropsReq)
  return target;
}

int SellPropsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 propsId = 1;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellPropsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellPropsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellPropsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellPropsReq::MergeFrom(const SellPropsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellPropsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellPropsReq::CopyFrom(const SellPropsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellPropsReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SellPropsReq::Swap(SellPropsReq* other) {
  if (other != this) {
    std::swap(propsid_, other->propsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellPropsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellPropsReq_descriptor_;
  metadata.reflection = SellPropsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellPropsResp::kCommonsFieldNumber;
const int SellPropsResp::kTsFieldNumber;
const int SellPropsResp::kNpcidFieldNumber;
#endif  // !_MSC_VER

SellPropsResp::SellPropsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCCustomer.SellPropsResp)
}

void SellPropsResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

SellPropsResp::SellPropsResp(const SellPropsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCCustomer.SellPropsResp)
}

void SellPropsResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ts_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellPropsResp::~SellPropsResp() {
  // @@protoc_insertion_point(destructor:ProtoNPCCustomer.SellPropsResp)
  SharedDtor();
}

void SellPropsResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void SellPropsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellPropsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellPropsResp_descriptor_;
}

const SellPropsResp& SellPropsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCCustomer_2eproto();
  return *default_instance_;
}

SellPropsResp* SellPropsResp::default_instance_ = NULL;

SellPropsResp* SellPropsResp::New() const {
  return new SellPropsResp;
}

void SellPropsResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SellPropsResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(ts_, npcid_);
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellPropsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCCustomer.SellPropsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // required uint32 ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcid;
        break;
      }

      // required uint32 npcid = 3;
      case 3: {
        if (tag == 24) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCCustomer.SellPropsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCCustomer.SellPropsResp)
  return false;
#undef DO_
}

void SellPropsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCCustomer.SellPropsResp)
  // optional .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }

  // required uint32 npcid = 3;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCCustomer.SellPropsResp)
}

::google::protobuf::uint8* SellPropsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCCustomer.SellPropsResp)
  // optional .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }

  // required uint32 npcid = 3;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCCustomer.SellPropsResp)
  return target;
}

int SellPropsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required uint32 npcid = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellPropsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellPropsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellPropsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellPropsResp::MergeFrom(const SellPropsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellPropsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellPropsResp::CopyFrom(const SellPropsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellPropsResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void SellPropsResp::Swap(SellPropsResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(ts_, other->ts_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellPropsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellPropsResp_descriptor_;
  metadata.reflection = SellPropsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefuseSellPropsReq::kPropsIdFieldNumber;
#endif  // !_MSC_VER

RefuseSellPropsReq::RefuseSellPropsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCCustomer.RefuseSellPropsReq)
}

void RefuseSellPropsReq::InitAsDefaultInstance() {
}

RefuseSellPropsReq::RefuseSellPropsReq(const RefuseSellPropsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCCustomer.RefuseSellPropsReq)
}

void RefuseSellPropsReq::SharedCtor() {
  _cached_size_ = 0;
  propsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefuseSellPropsReq::~RefuseSellPropsReq() {
  // @@protoc_insertion_point(destructor:ProtoNPCCustomer.RefuseSellPropsReq)
  SharedDtor();
}

void RefuseSellPropsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefuseSellPropsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefuseSellPropsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefuseSellPropsReq_descriptor_;
}

const RefuseSellPropsReq& RefuseSellPropsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCCustomer_2eproto();
  return *default_instance_;
}

RefuseSellPropsReq* RefuseSellPropsReq::default_instance_ = NULL;

RefuseSellPropsReq* RefuseSellPropsReq::New() const {
  return new RefuseSellPropsReq;
}

void RefuseSellPropsReq::Clear() {
  propsid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefuseSellPropsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCCustomer.RefuseSellPropsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 propsId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCCustomer.RefuseSellPropsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCCustomer.RefuseSellPropsReq)
  return false;
#undef DO_
}

void RefuseSellPropsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCCustomer.RefuseSellPropsReq)
  // required uint32 propsId = 1;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCCustomer.RefuseSellPropsReq)
}

::google::protobuf::uint8* RefuseSellPropsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCCustomer.RefuseSellPropsReq)
  // required uint32 propsId = 1;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCCustomer.RefuseSellPropsReq)
  return target;
}

int RefuseSellPropsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 propsId = 1;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefuseSellPropsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefuseSellPropsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefuseSellPropsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefuseSellPropsReq::MergeFrom(const RefuseSellPropsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefuseSellPropsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefuseSellPropsReq::CopyFrom(const RefuseSellPropsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefuseSellPropsReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RefuseSellPropsReq::Swap(RefuseSellPropsReq* other) {
  if (other != this) {
    std::swap(propsid_, other->propsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefuseSellPropsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefuseSellPropsReq_descriptor_;
  metadata.reflection = RefuseSellPropsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefuseSellPropsResp::kTsFieldNumber;
const int RefuseSellPropsResp::kNpcidFieldNumber;
#endif  // !_MSC_VER

RefuseSellPropsResp::RefuseSellPropsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCCustomer.RefuseSellPropsResp)
}

void RefuseSellPropsResp::InitAsDefaultInstance() {
}

RefuseSellPropsResp::RefuseSellPropsResp(const RefuseSellPropsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCCustomer.RefuseSellPropsResp)
}

void RefuseSellPropsResp::SharedCtor() {
  _cached_size_ = 0;
  ts_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefuseSellPropsResp::~RefuseSellPropsResp() {
  // @@protoc_insertion_point(destructor:ProtoNPCCustomer.RefuseSellPropsResp)
  SharedDtor();
}

void RefuseSellPropsResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefuseSellPropsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefuseSellPropsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefuseSellPropsResp_descriptor_;
}

const RefuseSellPropsResp& RefuseSellPropsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCCustomer_2eproto();
  return *default_instance_;
}

RefuseSellPropsResp* RefuseSellPropsResp::default_instance_ = NULL;

RefuseSellPropsResp* RefuseSellPropsResp::New() const {
  return new RefuseSellPropsResp;
}

void RefuseSellPropsResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RefuseSellPropsResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ts_, npcid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefuseSellPropsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCCustomer.RefuseSellPropsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_npcid;
        break;
      }

      // required uint32 npcid = 2;
      case 2: {
        if (tag == 16) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCCustomer.RefuseSellPropsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCCustomer.RefuseSellPropsResp)
  return false;
#undef DO_
}

void RefuseSellPropsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCCustomer.RefuseSellPropsResp)
  // required uint32 ts = 1;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ts(), output);
  }

  // required uint32 npcid = 2;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCCustomer.RefuseSellPropsResp)
}

::google::protobuf::uint8* RefuseSellPropsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCCustomer.RefuseSellPropsResp)
  // required uint32 ts = 1;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ts(), target);
  }

  // required uint32 npcid = 2;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCCustomer.RefuseSellPropsResp)
  return target;
}

int RefuseSellPropsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ts = 1;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required uint32 npcid = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefuseSellPropsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefuseSellPropsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefuseSellPropsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefuseSellPropsResp::MergeFrom(const RefuseSellPropsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefuseSellPropsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefuseSellPropsResp::CopyFrom(const RefuseSellPropsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefuseSellPropsResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RefuseSellPropsResp::Swap(RefuseSellPropsResp* other) {
  if (other != this) {
    std::swap(ts_, other->ts_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefuseSellPropsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefuseSellPropsResp_descriptor_;
  metadata.reflection = RefuseSellPropsResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoNPCCustomer

// @@protoc_insertion_point(global_scope)
