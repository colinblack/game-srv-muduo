// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoPet.proto

#ifndef PROTOBUF_ProtoPet_2eproto__INCLUDED
#define PROTOBUF_ProtoPet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "DataCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoPet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoPet_2eproto();
void protobuf_AssignDesc_ProtoPet_2eproto();
void protobuf_ShutdownFile_ProtoPet_2eproto();

class UnlockPetResidenceReq;
class UnlockPetResidenceResp;
class UnlockPetCPP;
class GetUnlockPetInfoReq;
class GetUnlockPetInfoResp;
class UnlockPetReq;
class UnlockPetResp;
class FeedPetReq;
class FeedPetResp;
class TeasePetReq;
class TeasePetResp;
class ChangePetNameReq;
class ChangePetNameResp;
class PushPetMsg;

// ===================================================================

class UnlockPetResidenceReq : public ::google::protobuf::Message {
 public:
  UnlockPetResidenceReq();
  virtual ~UnlockPetResidenceReq();

  UnlockPetResidenceReq(const UnlockPetResidenceReq& from);

  inline UnlockPetResidenceReq& operator=(const UnlockPetResidenceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockPetResidenceReq& default_instance();

  void Swap(UnlockPetResidenceReq* other);

  // implements Message ----------------------------------------------

  UnlockPetResidenceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockPetResidenceReq& from);
  void MergeFrom(const UnlockPetResidenceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoPet.UnlockPetResidenceReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoPet_2eproto();
  friend void protobuf_AssignDesc_ProtoPet_2eproto();
  friend void protobuf_ShutdownFile_ProtoPet_2eproto();

  void InitAsDefaultInstance();
  static UnlockPetResidenceReq* default_instance_;
};
// -------------------------------------------------------------------

class UnlockPetResidenceResp : public ::google::protobuf::Message {
 public:
  UnlockPetResidenceResp();
  virtual ~UnlockPetResidenceResp();

  UnlockPetResidenceResp(const UnlockPetResidenceResp& from);

  inline UnlockPetResidenceResp& operator=(const UnlockPetResidenceResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockPetResidenceResp& default_instance();

  void Swap(UnlockPetResidenceResp* other);

  // implements Message ----------------------------------------------

  UnlockPetResidenceResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockPetResidenceResp& from);
  void MergeFrom(const UnlockPetResidenceResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .DataCommon.CommonItemsCPP common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline const ::DataCommon::CommonItemsCPP& common() const;
  inline ::DataCommon::CommonItemsCPP* mutable_common();
  inline ::DataCommon::CommonItemsCPP* release_common();
  inline void set_allocated_common(::DataCommon::CommonItemsCPP* common);

  // @@protoc_insertion_point(class_scope:ProtoPet.UnlockPetResidenceResp)
 private:
  inline void set_has_common();
  inline void clear_has_common();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DataCommon::CommonItemsCPP* common_;
  friend void  protobuf_AddDesc_ProtoPet_2eproto();
  friend void protobuf_AssignDesc_ProtoPet_2eproto();
  friend void protobuf_ShutdownFile_ProtoPet_2eproto();

  void InitAsDefaultInstance();
  static UnlockPetResidenceResp* default_instance_;
};
// -------------------------------------------------------------------

class UnlockPetCPP : public ::google::protobuf::Message {
 public:
  UnlockPetCPP();
  virtual ~UnlockPetCPP();

  UnlockPetCPP(const UnlockPetCPP& from);

  inline UnlockPetCPP& operator=(const UnlockPetCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockPetCPP& default_instance();

  void Swap(UnlockPetCPP* other);

  // implements Message ----------------------------------------------

  UnlockPetCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockPetCPP& from);
  void MergeFrom(const UnlockPetCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 petid = 1;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetidFieldNumber = 1;
  inline ::google::protobuf::uint32 petid() const;
  inline void set_petid(::google::protobuf::uint32 value);

  // required uint32 teaseEndts = 2;
  inline bool has_teaseendts() const;
  inline void clear_teaseendts();
  static const int kTeaseEndtsFieldNumber = 2;
  inline ::google::protobuf::uint32 teaseendts() const;
  inline void set_teaseendts(::google::protobuf::uint32 value);

  // required uint32 normalEndts = 3;
  inline bool has_normalendts() const;
  inline void clear_normalendts();
  static const int kNormalEndtsFieldNumber = 3;
  inline ::google::protobuf::uint32 normalendts() const;
  inline void set_normalendts(::google::protobuf::uint32 value);

  // optional uint32 teaseFlag = 4;
  inline bool has_teaseflag() const;
  inline void clear_teaseflag();
  static const int kTeaseFlagFieldNumber = 4;
  inline ::google::protobuf::uint32 teaseflag() const;
  inline void set_teaseflag(::google::protobuf::uint32 value);

  // optional bytes name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ProtoPet.UnlockPetCPP)
 private:
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_teaseendts();
  inline void clear_has_teaseendts();
  inline void set_has_normalendts();
  inline void clear_has_normalendts();
  inline void set_has_teaseflag();
  inline void clear_has_teaseflag();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 petid_;
  ::google::protobuf::uint32 teaseendts_;
  ::google::protobuf::uint32 normalendts_;
  ::google::protobuf::uint32 teaseflag_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_ProtoPet_2eproto();
  friend void protobuf_AssignDesc_ProtoPet_2eproto();
  friend void protobuf_ShutdownFile_ProtoPet_2eproto();

  void InitAsDefaultInstance();
  static UnlockPetCPP* default_instance_;
};
// -------------------------------------------------------------------

class GetUnlockPetInfoReq : public ::google::protobuf::Message {
 public:
  GetUnlockPetInfoReq();
  virtual ~GetUnlockPetInfoReq();

  GetUnlockPetInfoReq(const GetUnlockPetInfoReq& from);

  inline GetUnlockPetInfoReq& operator=(const GetUnlockPetInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetUnlockPetInfoReq& default_instance();

  void Swap(GetUnlockPetInfoReq* other);

  // implements Message ----------------------------------------------

  GetUnlockPetInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetUnlockPetInfoReq& from);
  void MergeFrom(const GetUnlockPetInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoPet.GetUnlockPetInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoPet_2eproto();
  friend void protobuf_AssignDesc_ProtoPet_2eproto();
  friend void protobuf_ShutdownFile_ProtoPet_2eproto();

  void InitAsDefaultInstance();
  static GetUnlockPetInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class GetUnlockPetInfoResp : public ::google::protobuf::Message {
 public:
  GetUnlockPetInfoResp();
  virtual ~GetUnlockPetInfoResp();

  GetUnlockPetInfoResp(const GetUnlockPetInfoResp& from);

  inline GetUnlockPetInfoResp& operator=(const GetUnlockPetInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetUnlockPetInfoResp& default_instance();

  void Swap(GetUnlockPetInfoResp* other);

  // implements Message ----------------------------------------------

  GetUnlockPetInfoResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetUnlockPetInfoResp& from);
  void MergeFrom(const GetUnlockPetInfoResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoPet.UnlockPetCPP arrayPet = 1;
  inline int arraypet_size() const;
  inline void clear_arraypet();
  static const int kArrayPetFieldNumber = 1;
  inline const ::ProtoPet::UnlockPetCPP& arraypet(int index) const;
  inline ::ProtoPet::UnlockPetCPP* mutable_arraypet(int index);
  inline ::ProtoPet::UnlockPetCPP* add_arraypet();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoPet::UnlockPetCPP >&
      arraypet() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoPet::UnlockPetCPP >*
      mutable_arraypet();

  // @@protoc_insertion_point(class_scope:ProtoPet.GetUnlockPetInfoResp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoPet::UnlockPetCPP > arraypet_;
  friend void  protobuf_AddDesc_ProtoPet_2eproto();
  friend void protobuf_AssignDesc_ProtoPet_2eproto();
  friend void protobuf_ShutdownFile_ProtoPet_2eproto();

  void InitAsDefaultInstance();
  static GetUnlockPetInfoResp* default_instance_;
};
// -------------------------------------------------------------------

class UnlockPetReq : public ::google::protobuf::Message {
 public:
  UnlockPetReq();
  virtual ~UnlockPetReq();

  UnlockPetReq(const UnlockPetReq& from);

  inline UnlockPetReq& operator=(const UnlockPetReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockPetReq& default_instance();

  void Swap(UnlockPetReq* other);

  // implements Message ----------------------------------------------

  UnlockPetReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockPetReq& from);
  void MergeFrom(const UnlockPetReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 petid = 1;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetidFieldNumber = 1;
  inline ::google::protobuf::uint32 petid() const;
  inline void set_petid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoPet.UnlockPetReq)
 private:
  inline void set_has_petid();
  inline void clear_has_petid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 petid_;
  friend void  protobuf_AddDesc_ProtoPet_2eproto();
  friend void protobuf_AssignDesc_ProtoPet_2eproto();
  friend void protobuf_ShutdownFile_ProtoPet_2eproto();

  void InitAsDefaultInstance();
  static UnlockPetReq* default_instance_;
};
// -------------------------------------------------------------------

class UnlockPetResp : public ::google::protobuf::Message {
 public:
  UnlockPetResp();
  virtual ~UnlockPetResp();

  UnlockPetResp(const UnlockPetResp& from);

  inline UnlockPetResp& operator=(const UnlockPetResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockPetResp& default_instance();

  void Swap(UnlockPetResp* other);

  // implements Message ----------------------------------------------

  UnlockPetResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockPetResp& from);
  void MergeFrom(const UnlockPetResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoPet.UnlockPetCPP pet = 1;
  inline bool has_pet() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 1;
  inline const ::ProtoPet::UnlockPetCPP& pet() const;
  inline ::ProtoPet::UnlockPetCPP* mutable_pet();
  inline ::ProtoPet::UnlockPetCPP* release_pet();
  inline void set_allocated_pet(::ProtoPet::UnlockPetCPP* pet);

  // required .DataCommon.CommonItemsCPP common = 2;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 2;
  inline const ::DataCommon::CommonItemsCPP& common() const;
  inline ::DataCommon::CommonItemsCPP* mutable_common();
  inline ::DataCommon::CommonItemsCPP* release_common();
  inline void set_allocated_common(::DataCommon::CommonItemsCPP* common);

  // @@protoc_insertion_point(class_scope:ProtoPet.UnlockPetResp)
 private:
  inline void set_has_pet();
  inline void clear_has_pet();
  inline void set_has_common();
  inline void clear_has_common();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoPet::UnlockPetCPP* pet_;
  ::DataCommon::CommonItemsCPP* common_;
  friend void  protobuf_AddDesc_ProtoPet_2eproto();
  friend void protobuf_AssignDesc_ProtoPet_2eproto();
  friend void protobuf_ShutdownFile_ProtoPet_2eproto();

  void InitAsDefaultInstance();
  static UnlockPetResp* default_instance_;
};
// -------------------------------------------------------------------

class FeedPetReq : public ::google::protobuf::Message {
 public:
  FeedPetReq();
  virtual ~FeedPetReq();

  FeedPetReq(const FeedPetReq& from);

  inline FeedPetReq& operator=(const FeedPetReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedPetReq& default_instance();

  void Swap(FeedPetReq* other);

  // implements Message ----------------------------------------------

  FeedPetReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeedPetReq& from);
  void MergeFrom(const FeedPetReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 petid = 1;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetidFieldNumber = 1;
  inline ::google::protobuf::uint32 petid() const;
  inline void set_petid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoPet.FeedPetReq)
 private:
  inline void set_has_petid();
  inline void clear_has_petid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 petid_;
  friend void  protobuf_AddDesc_ProtoPet_2eproto();
  friend void protobuf_AssignDesc_ProtoPet_2eproto();
  friend void protobuf_ShutdownFile_ProtoPet_2eproto();

  void InitAsDefaultInstance();
  static FeedPetReq* default_instance_;
};
// -------------------------------------------------------------------

class FeedPetResp : public ::google::protobuf::Message {
 public:
  FeedPetResp();
  virtual ~FeedPetResp();

  FeedPetResp(const FeedPetResp& from);

  inline FeedPetResp& operator=(const FeedPetResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedPetResp& default_instance();

  void Swap(FeedPetResp* other);

  // implements Message ----------------------------------------------

  FeedPetResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeedPetResp& from);
  void MergeFrom(const FeedPetResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoPet.UnlockPetCPP pet = 1;
  inline bool has_pet() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 1;
  inline const ::ProtoPet::UnlockPetCPP& pet() const;
  inline ::ProtoPet::UnlockPetCPP* mutable_pet();
  inline ::ProtoPet::UnlockPetCPP* release_pet();
  inline void set_allocated_pet(::ProtoPet::UnlockPetCPP* pet);

  // required .DataCommon.CommonItemsCPP common = 2;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 2;
  inline const ::DataCommon::CommonItemsCPP& common() const;
  inline ::DataCommon::CommonItemsCPP* mutable_common();
  inline ::DataCommon::CommonItemsCPP* release_common();
  inline void set_allocated_common(::DataCommon::CommonItemsCPP* common);

  // optional .DataCommon.CommonItemsCPP reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::DataCommon::CommonItemsCPP& reward() const;
  inline ::DataCommon::CommonItemsCPP* mutable_reward();
  inline ::DataCommon::CommonItemsCPP* release_reward();
  inline void set_allocated_reward(::DataCommon::CommonItemsCPP* reward);

  // @@protoc_insertion_point(class_scope:ProtoPet.FeedPetResp)
 private:
  inline void set_has_pet();
  inline void clear_has_pet();
  inline void set_has_common();
  inline void clear_has_common();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoPet::UnlockPetCPP* pet_;
  ::DataCommon::CommonItemsCPP* common_;
  ::DataCommon::CommonItemsCPP* reward_;
  friend void  protobuf_AddDesc_ProtoPet_2eproto();
  friend void protobuf_AssignDesc_ProtoPet_2eproto();
  friend void protobuf_ShutdownFile_ProtoPet_2eproto();

  void InitAsDefaultInstance();
  static FeedPetResp* default_instance_;
};
// -------------------------------------------------------------------

class TeasePetReq : public ::google::protobuf::Message {
 public:
  TeasePetReq();
  virtual ~TeasePetReq();

  TeasePetReq(const TeasePetReq& from);

  inline TeasePetReq& operator=(const TeasePetReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeasePetReq& default_instance();

  void Swap(TeasePetReq* other);

  // implements Message ----------------------------------------------

  TeasePetReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeasePetReq& from);
  void MergeFrom(const TeasePetReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 petid = 1;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetidFieldNumber = 1;
  inline ::google::protobuf::uint32 petid() const;
  inline void set_petid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoPet.TeasePetReq)
 private:
  inline void set_has_petid();
  inline void clear_has_petid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 petid_;
  friend void  protobuf_AddDesc_ProtoPet_2eproto();
  friend void protobuf_AssignDesc_ProtoPet_2eproto();
  friend void protobuf_ShutdownFile_ProtoPet_2eproto();

  void InitAsDefaultInstance();
  static TeasePetReq* default_instance_;
};
// -------------------------------------------------------------------

class TeasePetResp : public ::google::protobuf::Message {
 public:
  TeasePetResp();
  virtual ~TeasePetResp();

  TeasePetResp(const TeasePetResp& from);

  inline TeasePetResp& operator=(const TeasePetResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeasePetResp& default_instance();

  void Swap(TeasePetResp* other);

  // implements Message ----------------------------------------------

  TeasePetResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeasePetResp& from);
  void MergeFrom(const TeasePetResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoPet.UnlockPetCPP pet = 1;
  inline bool has_pet() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 1;
  inline const ::ProtoPet::UnlockPetCPP& pet() const;
  inline ::ProtoPet::UnlockPetCPP* mutable_pet();
  inline ::ProtoPet::UnlockPetCPP* release_pet();
  inline void set_allocated_pet(::ProtoPet::UnlockPetCPP* pet);

  // required .DataCommon.CommonItemsCPP common = 2;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 2;
  inline const ::DataCommon::CommonItemsCPP& common() const;
  inline ::DataCommon::CommonItemsCPP* mutable_common();
  inline ::DataCommon::CommonItemsCPP* release_common();
  inline void set_allocated_common(::DataCommon::CommonItemsCPP* common);

  // optional .DataCommon.CommonItemsCPP reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::DataCommon::CommonItemsCPP& reward() const;
  inline ::DataCommon::CommonItemsCPP* mutable_reward();
  inline ::DataCommon::CommonItemsCPP* release_reward();
  inline void set_allocated_reward(::DataCommon::CommonItemsCPP* reward);

  // @@protoc_insertion_point(class_scope:ProtoPet.TeasePetResp)
 private:
  inline void set_has_pet();
  inline void clear_has_pet();
  inline void set_has_common();
  inline void clear_has_common();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoPet::UnlockPetCPP* pet_;
  ::DataCommon::CommonItemsCPP* common_;
  ::DataCommon::CommonItemsCPP* reward_;
  friend void  protobuf_AddDesc_ProtoPet_2eproto();
  friend void protobuf_AssignDesc_ProtoPet_2eproto();
  friend void protobuf_ShutdownFile_ProtoPet_2eproto();

  void InitAsDefaultInstance();
  static TeasePetResp* default_instance_;
};
// -------------------------------------------------------------------

class ChangePetNameReq : public ::google::protobuf::Message {
 public:
  ChangePetNameReq();
  virtual ~ChangePetNameReq();

  ChangePetNameReq(const ChangePetNameReq& from);

  inline ChangePetNameReq& operator=(const ChangePetNameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePetNameReq& default_instance();

  void Swap(ChangePetNameReq* other);

  // implements Message ----------------------------------------------

  ChangePetNameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangePetNameReq& from);
  void MergeFrom(const ChangePetNameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 petid = 1;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetidFieldNumber = 1;
  inline ::google::protobuf::uint32 petid() const;
  inline void set_petid(::google::protobuf::uint32 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ProtoPet.ChangePetNameReq)
 private:
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 petid_;
  friend void  protobuf_AddDesc_ProtoPet_2eproto();
  friend void protobuf_AssignDesc_ProtoPet_2eproto();
  friend void protobuf_ShutdownFile_ProtoPet_2eproto();

  void InitAsDefaultInstance();
  static ChangePetNameReq* default_instance_;
};
// -------------------------------------------------------------------

class ChangePetNameResp : public ::google::protobuf::Message {
 public:
  ChangePetNameResp();
  virtual ~ChangePetNameResp();

  ChangePetNameResp(const ChangePetNameResp& from);

  inline ChangePetNameResp& operator=(const ChangePetNameResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePetNameResp& default_instance();

  void Swap(ChangePetNameResp* other);

  // implements Message ----------------------------------------------

  ChangePetNameResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangePetNameResp& from);
  void MergeFrom(const ChangePetNameResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoPet.UnlockPetCPP pet = 1;
  inline bool has_pet() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 1;
  inline const ::ProtoPet::UnlockPetCPP& pet() const;
  inline ::ProtoPet::UnlockPetCPP* mutable_pet();
  inline ::ProtoPet::UnlockPetCPP* release_pet();
  inline void set_allocated_pet(::ProtoPet::UnlockPetCPP* pet);

  // @@protoc_insertion_point(class_scope:ProtoPet.ChangePetNameResp)
 private:
  inline void set_has_pet();
  inline void clear_has_pet();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoPet::UnlockPetCPP* pet_;
  friend void  protobuf_AddDesc_ProtoPet_2eproto();
  friend void protobuf_AssignDesc_ProtoPet_2eproto();
  friend void protobuf_ShutdownFile_ProtoPet_2eproto();

  void InitAsDefaultInstance();
  static ChangePetNameResp* default_instance_;
};
// -------------------------------------------------------------------

class PushPetMsg : public ::google::protobuf::Message {
 public:
  PushPetMsg();
  virtual ~PushPetMsg();

  PushPetMsg(const PushPetMsg& from);

  inline PushPetMsg& operator=(const PushPetMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushPetMsg& default_instance();

  void Swap(PushPetMsg* other);

  // implements Message ----------------------------------------------

  PushPetMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushPetMsg& from);
  void MergeFrom(const PushPetMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoPet.UnlockPetCPP pet = 1;
  inline bool has_pet() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 1;
  inline const ::ProtoPet::UnlockPetCPP& pet() const;
  inline ::ProtoPet::UnlockPetCPP* mutable_pet();
  inline ::ProtoPet::UnlockPetCPP* release_pet();
  inline void set_allocated_pet(::ProtoPet::UnlockPetCPP* pet);

  // @@protoc_insertion_point(class_scope:ProtoPet.PushPetMsg)
 private:
  inline void set_has_pet();
  inline void clear_has_pet();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoPet::UnlockPetCPP* pet_;
  friend void  protobuf_AddDesc_ProtoPet_2eproto();
  friend void protobuf_AssignDesc_ProtoPet_2eproto();
  friend void protobuf_ShutdownFile_ProtoPet_2eproto();

  void InitAsDefaultInstance();
  static PushPetMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// UnlockPetResidenceReq

// -------------------------------------------------------------------

// UnlockPetResidenceResp

// required .DataCommon.CommonItemsCPP common = 1;
inline bool UnlockPetResidenceResp::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlockPetResidenceResp::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlockPetResidenceResp::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlockPetResidenceResp::clear_common() {
  if (common_ != NULL) common_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_common();
}
inline const ::DataCommon::CommonItemsCPP& UnlockPetResidenceResp::common() const {
  // @@protoc_insertion_point(field_get:ProtoPet.UnlockPetResidenceResp.common)
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::DataCommon::CommonItemsCPP* UnlockPetResidenceResp::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoPet.UnlockPetResidenceResp.common)
  return common_;
}
inline ::DataCommon::CommonItemsCPP* UnlockPetResidenceResp::release_common() {
  clear_has_common();
  ::DataCommon::CommonItemsCPP* temp = common_;
  common_ = NULL;
  return temp;
}
inline void UnlockPetResidenceResp::set_allocated_common(::DataCommon::CommonItemsCPP* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoPet.UnlockPetResidenceResp.common)
}

// -------------------------------------------------------------------

// UnlockPetCPP

// required uint32 petid = 1;
inline bool UnlockPetCPP::has_petid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlockPetCPP::set_has_petid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlockPetCPP::clear_has_petid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlockPetCPP::clear_petid() {
  petid_ = 0u;
  clear_has_petid();
}
inline ::google::protobuf::uint32 UnlockPetCPP::petid() const {
  // @@protoc_insertion_point(field_get:ProtoPet.UnlockPetCPP.petid)
  return petid_;
}
inline void UnlockPetCPP::set_petid(::google::protobuf::uint32 value) {
  set_has_petid();
  petid_ = value;
  // @@protoc_insertion_point(field_set:ProtoPet.UnlockPetCPP.petid)
}

// required uint32 teaseEndts = 2;
inline bool UnlockPetCPP::has_teaseendts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnlockPetCPP::set_has_teaseendts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnlockPetCPP::clear_has_teaseendts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnlockPetCPP::clear_teaseendts() {
  teaseendts_ = 0u;
  clear_has_teaseendts();
}
inline ::google::protobuf::uint32 UnlockPetCPP::teaseendts() const {
  // @@protoc_insertion_point(field_get:ProtoPet.UnlockPetCPP.teaseEndts)
  return teaseendts_;
}
inline void UnlockPetCPP::set_teaseendts(::google::protobuf::uint32 value) {
  set_has_teaseendts();
  teaseendts_ = value;
  // @@protoc_insertion_point(field_set:ProtoPet.UnlockPetCPP.teaseEndts)
}

// required uint32 normalEndts = 3;
inline bool UnlockPetCPP::has_normalendts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnlockPetCPP::set_has_normalendts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnlockPetCPP::clear_has_normalendts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnlockPetCPP::clear_normalendts() {
  normalendts_ = 0u;
  clear_has_normalendts();
}
inline ::google::protobuf::uint32 UnlockPetCPP::normalendts() const {
  // @@protoc_insertion_point(field_get:ProtoPet.UnlockPetCPP.normalEndts)
  return normalendts_;
}
inline void UnlockPetCPP::set_normalendts(::google::protobuf::uint32 value) {
  set_has_normalendts();
  normalendts_ = value;
  // @@protoc_insertion_point(field_set:ProtoPet.UnlockPetCPP.normalEndts)
}

// optional uint32 teaseFlag = 4;
inline bool UnlockPetCPP::has_teaseflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnlockPetCPP::set_has_teaseflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnlockPetCPP::clear_has_teaseflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnlockPetCPP::clear_teaseflag() {
  teaseflag_ = 0u;
  clear_has_teaseflag();
}
inline ::google::protobuf::uint32 UnlockPetCPP::teaseflag() const {
  // @@protoc_insertion_point(field_get:ProtoPet.UnlockPetCPP.teaseFlag)
  return teaseflag_;
}
inline void UnlockPetCPP::set_teaseflag(::google::protobuf::uint32 value) {
  set_has_teaseflag();
  teaseflag_ = value;
  // @@protoc_insertion_point(field_set:ProtoPet.UnlockPetCPP.teaseFlag)
}

// optional bytes name = 5;
inline bool UnlockPetCPP::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnlockPetCPP::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnlockPetCPP::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnlockPetCPP::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UnlockPetCPP::name() const {
  // @@protoc_insertion_point(field_get:ProtoPet.UnlockPetCPP.name)
  return *name_;
}
inline void UnlockPetCPP::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoPet.UnlockPetCPP.name)
}
inline void UnlockPetCPP::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoPet.UnlockPetCPP.name)
}
inline void UnlockPetCPP::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoPet.UnlockPetCPP.name)
}
inline ::std::string* UnlockPetCPP::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoPet.UnlockPetCPP.name)
  return name_;
}
inline ::std::string* UnlockPetCPP::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UnlockPetCPP::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoPet.UnlockPetCPP.name)
}

// -------------------------------------------------------------------

// GetUnlockPetInfoReq

// -------------------------------------------------------------------

// GetUnlockPetInfoResp

// repeated .ProtoPet.UnlockPetCPP arrayPet = 1;
inline int GetUnlockPetInfoResp::arraypet_size() const {
  return arraypet_.size();
}
inline void GetUnlockPetInfoResp::clear_arraypet() {
  arraypet_.Clear();
}
inline const ::ProtoPet::UnlockPetCPP& GetUnlockPetInfoResp::arraypet(int index) const {
  // @@protoc_insertion_point(field_get:ProtoPet.GetUnlockPetInfoResp.arrayPet)
  return arraypet_.Get(index);
}
inline ::ProtoPet::UnlockPetCPP* GetUnlockPetInfoResp::mutable_arraypet(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoPet.GetUnlockPetInfoResp.arrayPet)
  return arraypet_.Mutable(index);
}
inline ::ProtoPet::UnlockPetCPP* GetUnlockPetInfoResp::add_arraypet() {
  // @@protoc_insertion_point(field_add:ProtoPet.GetUnlockPetInfoResp.arrayPet)
  return arraypet_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoPet::UnlockPetCPP >&
GetUnlockPetInfoResp::arraypet() const {
  // @@protoc_insertion_point(field_list:ProtoPet.GetUnlockPetInfoResp.arrayPet)
  return arraypet_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoPet::UnlockPetCPP >*
GetUnlockPetInfoResp::mutable_arraypet() {
  // @@protoc_insertion_point(field_mutable_list:ProtoPet.GetUnlockPetInfoResp.arrayPet)
  return &arraypet_;
}

// -------------------------------------------------------------------

// UnlockPetReq

// required uint32 petid = 1;
inline bool UnlockPetReq::has_petid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlockPetReq::set_has_petid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlockPetReq::clear_has_petid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlockPetReq::clear_petid() {
  petid_ = 0u;
  clear_has_petid();
}
inline ::google::protobuf::uint32 UnlockPetReq::petid() const {
  // @@protoc_insertion_point(field_get:ProtoPet.UnlockPetReq.petid)
  return petid_;
}
inline void UnlockPetReq::set_petid(::google::protobuf::uint32 value) {
  set_has_petid();
  petid_ = value;
  // @@protoc_insertion_point(field_set:ProtoPet.UnlockPetReq.petid)
}

// -------------------------------------------------------------------

// UnlockPetResp

// required .ProtoPet.UnlockPetCPP pet = 1;
inline bool UnlockPetResp::has_pet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlockPetResp::set_has_pet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlockPetResp::clear_has_pet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlockPetResp::clear_pet() {
  if (pet_ != NULL) pet_->::ProtoPet::UnlockPetCPP::Clear();
  clear_has_pet();
}
inline const ::ProtoPet::UnlockPetCPP& UnlockPetResp::pet() const {
  // @@protoc_insertion_point(field_get:ProtoPet.UnlockPetResp.pet)
  return pet_ != NULL ? *pet_ : *default_instance_->pet_;
}
inline ::ProtoPet::UnlockPetCPP* UnlockPetResp::mutable_pet() {
  set_has_pet();
  if (pet_ == NULL) pet_ = new ::ProtoPet::UnlockPetCPP;
  // @@protoc_insertion_point(field_mutable:ProtoPet.UnlockPetResp.pet)
  return pet_;
}
inline ::ProtoPet::UnlockPetCPP* UnlockPetResp::release_pet() {
  clear_has_pet();
  ::ProtoPet::UnlockPetCPP* temp = pet_;
  pet_ = NULL;
  return temp;
}
inline void UnlockPetResp::set_allocated_pet(::ProtoPet::UnlockPetCPP* pet) {
  delete pet_;
  pet_ = pet;
  if (pet) {
    set_has_pet();
  } else {
    clear_has_pet();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoPet.UnlockPetResp.pet)
}

// required .DataCommon.CommonItemsCPP common = 2;
inline bool UnlockPetResp::has_common() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnlockPetResp::set_has_common() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnlockPetResp::clear_has_common() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnlockPetResp::clear_common() {
  if (common_ != NULL) common_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_common();
}
inline const ::DataCommon::CommonItemsCPP& UnlockPetResp::common() const {
  // @@protoc_insertion_point(field_get:ProtoPet.UnlockPetResp.common)
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::DataCommon::CommonItemsCPP* UnlockPetResp::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoPet.UnlockPetResp.common)
  return common_;
}
inline ::DataCommon::CommonItemsCPP* UnlockPetResp::release_common() {
  clear_has_common();
  ::DataCommon::CommonItemsCPP* temp = common_;
  common_ = NULL;
  return temp;
}
inline void UnlockPetResp::set_allocated_common(::DataCommon::CommonItemsCPP* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoPet.UnlockPetResp.common)
}

// -------------------------------------------------------------------

// FeedPetReq

// required uint32 petid = 1;
inline bool FeedPetReq::has_petid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeedPetReq::set_has_petid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeedPetReq::clear_has_petid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeedPetReq::clear_petid() {
  petid_ = 0u;
  clear_has_petid();
}
inline ::google::protobuf::uint32 FeedPetReq::petid() const {
  // @@protoc_insertion_point(field_get:ProtoPet.FeedPetReq.petid)
  return petid_;
}
inline void FeedPetReq::set_petid(::google::protobuf::uint32 value) {
  set_has_petid();
  petid_ = value;
  // @@protoc_insertion_point(field_set:ProtoPet.FeedPetReq.petid)
}

// -------------------------------------------------------------------

// FeedPetResp

// required .ProtoPet.UnlockPetCPP pet = 1;
inline bool FeedPetResp::has_pet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeedPetResp::set_has_pet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeedPetResp::clear_has_pet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeedPetResp::clear_pet() {
  if (pet_ != NULL) pet_->::ProtoPet::UnlockPetCPP::Clear();
  clear_has_pet();
}
inline const ::ProtoPet::UnlockPetCPP& FeedPetResp::pet() const {
  // @@protoc_insertion_point(field_get:ProtoPet.FeedPetResp.pet)
  return pet_ != NULL ? *pet_ : *default_instance_->pet_;
}
inline ::ProtoPet::UnlockPetCPP* FeedPetResp::mutable_pet() {
  set_has_pet();
  if (pet_ == NULL) pet_ = new ::ProtoPet::UnlockPetCPP;
  // @@protoc_insertion_point(field_mutable:ProtoPet.FeedPetResp.pet)
  return pet_;
}
inline ::ProtoPet::UnlockPetCPP* FeedPetResp::release_pet() {
  clear_has_pet();
  ::ProtoPet::UnlockPetCPP* temp = pet_;
  pet_ = NULL;
  return temp;
}
inline void FeedPetResp::set_allocated_pet(::ProtoPet::UnlockPetCPP* pet) {
  delete pet_;
  pet_ = pet;
  if (pet) {
    set_has_pet();
  } else {
    clear_has_pet();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoPet.FeedPetResp.pet)
}

// required .DataCommon.CommonItemsCPP common = 2;
inline bool FeedPetResp::has_common() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeedPetResp::set_has_common() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeedPetResp::clear_has_common() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeedPetResp::clear_common() {
  if (common_ != NULL) common_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_common();
}
inline const ::DataCommon::CommonItemsCPP& FeedPetResp::common() const {
  // @@protoc_insertion_point(field_get:ProtoPet.FeedPetResp.common)
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::DataCommon::CommonItemsCPP* FeedPetResp::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoPet.FeedPetResp.common)
  return common_;
}
inline ::DataCommon::CommonItemsCPP* FeedPetResp::release_common() {
  clear_has_common();
  ::DataCommon::CommonItemsCPP* temp = common_;
  common_ = NULL;
  return temp;
}
inline void FeedPetResp::set_allocated_common(::DataCommon::CommonItemsCPP* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoPet.FeedPetResp.common)
}

// optional .DataCommon.CommonItemsCPP reward = 3;
inline bool FeedPetResp::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeedPetResp::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeedPetResp::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeedPetResp::clear_reward() {
  if (reward_ != NULL) reward_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_reward();
}
inline const ::DataCommon::CommonItemsCPP& FeedPetResp::reward() const {
  // @@protoc_insertion_point(field_get:ProtoPet.FeedPetResp.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::DataCommon::CommonItemsCPP* FeedPetResp::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoPet.FeedPetResp.reward)
  return reward_;
}
inline ::DataCommon::CommonItemsCPP* FeedPetResp::release_reward() {
  clear_has_reward();
  ::DataCommon::CommonItemsCPP* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void FeedPetResp::set_allocated_reward(::DataCommon::CommonItemsCPP* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoPet.FeedPetResp.reward)
}

// -------------------------------------------------------------------

// TeasePetReq

// required uint32 petid = 1;
inline bool TeasePetReq::has_petid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeasePetReq::set_has_petid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeasePetReq::clear_has_petid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeasePetReq::clear_petid() {
  petid_ = 0u;
  clear_has_petid();
}
inline ::google::protobuf::uint32 TeasePetReq::petid() const {
  // @@protoc_insertion_point(field_get:ProtoPet.TeasePetReq.petid)
  return petid_;
}
inline void TeasePetReq::set_petid(::google::protobuf::uint32 value) {
  set_has_petid();
  petid_ = value;
  // @@protoc_insertion_point(field_set:ProtoPet.TeasePetReq.petid)
}

// -------------------------------------------------------------------

// TeasePetResp

// required .ProtoPet.UnlockPetCPP pet = 1;
inline bool TeasePetResp::has_pet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeasePetResp::set_has_pet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeasePetResp::clear_has_pet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeasePetResp::clear_pet() {
  if (pet_ != NULL) pet_->::ProtoPet::UnlockPetCPP::Clear();
  clear_has_pet();
}
inline const ::ProtoPet::UnlockPetCPP& TeasePetResp::pet() const {
  // @@protoc_insertion_point(field_get:ProtoPet.TeasePetResp.pet)
  return pet_ != NULL ? *pet_ : *default_instance_->pet_;
}
inline ::ProtoPet::UnlockPetCPP* TeasePetResp::mutable_pet() {
  set_has_pet();
  if (pet_ == NULL) pet_ = new ::ProtoPet::UnlockPetCPP;
  // @@protoc_insertion_point(field_mutable:ProtoPet.TeasePetResp.pet)
  return pet_;
}
inline ::ProtoPet::UnlockPetCPP* TeasePetResp::release_pet() {
  clear_has_pet();
  ::ProtoPet::UnlockPetCPP* temp = pet_;
  pet_ = NULL;
  return temp;
}
inline void TeasePetResp::set_allocated_pet(::ProtoPet::UnlockPetCPP* pet) {
  delete pet_;
  pet_ = pet;
  if (pet) {
    set_has_pet();
  } else {
    clear_has_pet();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoPet.TeasePetResp.pet)
}

// required .DataCommon.CommonItemsCPP common = 2;
inline bool TeasePetResp::has_common() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeasePetResp::set_has_common() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeasePetResp::clear_has_common() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeasePetResp::clear_common() {
  if (common_ != NULL) common_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_common();
}
inline const ::DataCommon::CommonItemsCPP& TeasePetResp::common() const {
  // @@protoc_insertion_point(field_get:ProtoPet.TeasePetResp.common)
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::DataCommon::CommonItemsCPP* TeasePetResp::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoPet.TeasePetResp.common)
  return common_;
}
inline ::DataCommon::CommonItemsCPP* TeasePetResp::release_common() {
  clear_has_common();
  ::DataCommon::CommonItemsCPP* temp = common_;
  common_ = NULL;
  return temp;
}
inline void TeasePetResp::set_allocated_common(::DataCommon::CommonItemsCPP* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoPet.TeasePetResp.common)
}

// optional .DataCommon.CommonItemsCPP reward = 3;
inline bool TeasePetResp::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeasePetResp::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeasePetResp::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeasePetResp::clear_reward() {
  if (reward_ != NULL) reward_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_reward();
}
inline const ::DataCommon::CommonItemsCPP& TeasePetResp::reward() const {
  // @@protoc_insertion_point(field_get:ProtoPet.TeasePetResp.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::DataCommon::CommonItemsCPP* TeasePetResp::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoPet.TeasePetResp.reward)
  return reward_;
}
inline ::DataCommon::CommonItemsCPP* TeasePetResp::release_reward() {
  clear_has_reward();
  ::DataCommon::CommonItemsCPP* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void TeasePetResp::set_allocated_reward(::DataCommon::CommonItemsCPP* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoPet.TeasePetResp.reward)
}

// -------------------------------------------------------------------

// ChangePetNameReq

// required uint32 petid = 1;
inline bool ChangePetNameReq::has_petid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangePetNameReq::set_has_petid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangePetNameReq::clear_has_petid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangePetNameReq::clear_petid() {
  petid_ = 0u;
  clear_has_petid();
}
inline ::google::protobuf::uint32 ChangePetNameReq::petid() const {
  // @@protoc_insertion_point(field_get:ProtoPet.ChangePetNameReq.petid)
  return petid_;
}
inline void ChangePetNameReq::set_petid(::google::protobuf::uint32 value) {
  set_has_petid();
  petid_ = value;
  // @@protoc_insertion_point(field_set:ProtoPet.ChangePetNameReq.petid)
}

// required bytes name = 2;
inline bool ChangePetNameReq::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangePetNameReq::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangePetNameReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangePetNameReq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChangePetNameReq::name() const {
  // @@protoc_insertion_point(field_get:ProtoPet.ChangePetNameReq.name)
  return *name_;
}
inline void ChangePetNameReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoPet.ChangePetNameReq.name)
}
inline void ChangePetNameReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoPet.ChangePetNameReq.name)
}
inline void ChangePetNameReq::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoPet.ChangePetNameReq.name)
}
inline ::std::string* ChangePetNameReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoPet.ChangePetNameReq.name)
  return name_;
}
inline ::std::string* ChangePetNameReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangePetNameReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoPet.ChangePetNameReq.name)
}

// -------------------------------------------------------------------

// ChangePetNameResp

// required .ProtoPet.UnlockPetCPP pet = 1;
inline bool ChangePetNameResp::has_pet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangePetNameResp::set_has_pet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangePetNameResp::clear_has_pet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangePetNameResp::clear_pet() {
  if (pet_ != NULL) pet_->::ProtoPet::UnlockPetCPP::Clear();
  clear_has_pet();
}
inline const ::ProtoPet::UnlockPetCPP& ChangePetNameResp::pet() const {
  // @@protoc_insertion_point(field_get:ProtoPet.ChangePetNameResp.pet)
  return pet_ != NULL ? *pet_ : *default_instance_->pet_;
}
inline ::ProtoPet::UnlockPetCPP* ChangePetNameResp::mutable_pet() {
  set_has_pet();
  if (pet_ == NULL) pet_ = new ::ProtoPet::UnlockPetCPP;
  // @@protoc_insertion_point(field_mutable:ProtoPet.ChangePetNameResp.pet)
  return pet_;
}
inline ::ProtoPet::UnlockPetCPP* ChangePetNameResp::release_pet() {
  clear_has_pet();
  ::ProtoPet::UnlockPetCPP* temp = pet_;
  pet_ = NULL;
  return temp;
}
inline void ChangePetNameResp::set_allocated_pet(::ProtoPet::UnlockPetCPP* pet) {
  delete pet_;
  pet_ = pet;
  if (pet) {
    set_has_pet();
  } else {
    clear_has_pet();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoPet.ChangePetNameResp.pet)
}

// -------------------------------------------------------------------

// PushPetMsg

// required .ProtoPet.UnlockPetCPP pet = 1;
inline bool PushPetMsg::has_pet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushPetMsg::set_has_pet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushPetMsg::clear_has_pet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushPetMsg::clear_pet() {
  if (pet_ != NULL) pet_->::ProtoPet::UnlockPetCPP::Clear();
  clear_has_pet();
}
inline const ::ProtoPet::UnlockPetCPP& PushPetMsg::pet() const {
  // @@protoc_insertion_point(field_get:ProtoPet.PushPetMsg.pet)
  return pet_ != NULL ? *pet_ : *default_instance_->pet_;
}
inline ::ProtoPet::UnlockPetCPP* PushPetMsg::mutable_pet() {
  set_has_pet();
  if (pet_ == NULL) pet_ = new ::ProtoPet::UnlockPetCPP;
  // @@protoc_insertion_point(field_mutable:ProtoPet.PushPetMsg.pet)
  return pet_;
}
inline ::ProtoPet::UnlockPetCPP* PushPetMsg::release_pet() {
  clear_has_pet();
  ::ProtoPet::UnlockPetCPP* temp = pet_;
  pet_ = NULL;
  return temp;
}
inline void PushPetMsg::set_allocated_pet(::ProtoPet::UnlockPetCPP* pet) {
  delete pet_;
  pet_ = pet;
  if (pet) {
    set_has_pet();
  } else {
    clear_has_pet();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoPet.PushPetMsg.pet)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoPet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoPet_2eproto__INCLUDED
