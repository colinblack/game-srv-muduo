// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoFriend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoFriend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoFriend {

namespace {

const ::google::protobuf::Descriptor* FolkCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FolkCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConcernFolkCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConcernFolkCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FansCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FansCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllFriendsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllFriendsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllFriendsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllFriendsResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConcernReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConcernReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConcernResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConcernResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetFriendInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetFriendInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetFriendInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetFriendInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendHelpInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendHelpInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetFriendHelpInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetFriendHelpInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGetFriendHelpInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetFriendHelpInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSConcernReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSConcernReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSConcernResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSConcernResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FansPushReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FansPushReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelConcernReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelConcernReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelConcernResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelConcernResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCancelConcernReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCancelConcernReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCancelConcernResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCancelConcernResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StripFansPushReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StripFansPushReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveFansReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveFansReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveFansResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveFansResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoFriend_2eproto() {
  protobuf_AddDesc_ProtoFriend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoFriend.proto");
  GOOGLE_CHECK(file != NULL);
  FolkCPP_descriptor_ = file->message_type(0);
  static const int FolkCPP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolkCPP, folkuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolkCPP, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolkCPP, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolkCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolkCPP, needhelp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolkCPP, blueinfo_),
  };
  FolkCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FolkCPP_descriptor_,
      FolkCPP::default_instance_,
      FolkCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolkCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FolkCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FolkCPP));
  ConcernFolkCPP_descriptor_ = file->message_type(1);
  static const int ConcernFolkCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcernFolkCPP, concernfolk_),
  };
  ConcernFolkCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConcernFolkCPP_descriptor_,
      ConcernFolkCPP::default_instance_,
      ConcernFolkCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcernFolkCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcernFolkCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConcernFolkCPP));
  FansCPP_descriptor_ = file->message_type(2);
  static const int FansCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FansCPP, fan_),
  };
  FansCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FansCPP_descriptor_,
      FansCPP::default_instance_,
      FansCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FansCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FansCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FansCPP));
  GetAllFriendsReq_descriptor_ = file->message_type(3);
  static const int GetAllFriendsReq_offsets_[1] = {
  };
  GetAllFriendsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllFriendsReq_descriptor_,
      GetAllFriendsReq::default_instance_,
      GetAllFriendsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllFriendsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllFriendsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllFriendsReq));
  GetAllFriendsResp_descriptor_ = file->message_type(4);
  static const int GetAllFriendsResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllFriendsResp, concerns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllFriendsResp, fans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllFriendsResp, helpers_),
  };
  GetAllFriendsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllFriendsResp_descriptor_,
      GetAllFriendsResp::default_instance_,
      GetAllFriendsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllFriendsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllFriendsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllFriendsResp));
  ConcernReq_descriptor_ = file->message_type(5);
  static const int ConcernReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcernReq, othuid_),
  };
  ConcernReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConcernReq_descriptor_,
      ConcernReq::default_instance_,
      ConcernReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcernReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcernReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConcernReq));
  ConcernResp_descriptor_ = file->message_type(6);
  static const int ConcernResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcernResp, concern_),
  };
  ConcernResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConcernResp_descriptor_,
      ConcernResp::default_instance_,
      ConcernResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcernResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcernResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConcernResp));
  CSGetFriendInfoReq_descriptor_ = file->message_type(7);
  static const int CSGetFriendInfoReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendInfoReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendInfoReq, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendInfoReq, othuid_),
  };
  CSGetFriendInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetFriendInfoReq_descriptor_,
      CSGetFriendInfoReq::default_instance_,
      CSGetFriendInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetFriendInfoReq));
  CSGetFriendInfoResp_descriptor_ = file->message_type(8);
  static const int CSGetFriendInfoResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendInfoResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendInfoResp, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendInfoResp, folk_),
  };
  CSGetFriendInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetFriendInfoResp_descriptor_,
      CSGetFriendInfoResp::default_instance_,
      CSGetFriendInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetFriendInfoResp));
  GetFriendHelpInfoReq_descriptor_ = file->message_type(9);
  static const int GetFriendHelpInfoReq_offsets_[1] = {
  };
  GetFriendHelpInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendHelpInfoReq_descriptor_,
      GetFriendHelpInfoReq::default_instance_,
      GetFriendHelpInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendHelpInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendHelpInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendHelpInfoReq));
  CSGetFriendHelpInfoReq_descriptor_ = file->message_type(10);
  static const int CSGetFriendHelpInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendHelpInfoReq, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendHelpInfoReq, othuid_),
  };
  CSGetFriendHelpInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetFriendHelpInfoReq_descriptor_,
      CSGetFriendHelpInfoReq::default_instance_,
      CSGetFriendHelpInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendHelpInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendHelpInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetFriendHelpInfoReq));
  CSGetFriendHelpInfoResp_descriptor_ = file->message_type(11);
  static const int CSGetFriendHelpInfoResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendHelpInfoResp, othuid_),
  };
  CSGetFriendHelpInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGetFriendHelpInfoResp_descriptor_,
      CSGetFriendHelpInfoResp::default_instance_,
      CSGetFriendHelpInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendHelpInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetFriendHelpInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGetFriendHelpInfoResp));
  CSConcernReq_descriptor_ = file->message_type(12);
  static const int CSConcernReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSConcernReq, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSConcernReq, othuid_),
  };
  CSConcernReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSConcernReq_descriptor_,
      CSConcernReq::default_instance_,
      CSConcernReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSConcernReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSConcernReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSConcernReq));
  CSConcernResp_descriptor_ = file->message_type(13);
  static const int CSConcernResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSConcernResp, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSConcernResp, folkresp_),
  };
  CSConcernResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSConcernResp_descriptor_,
      CSConcernResp::default_instance_,
      CSConcernResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSConcernResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSConcernResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSConcernResp));
  FansPushReq_descriptor_ = file->message_type(14);
  static const int FansPushReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FansPushReq, fan_),
  };
  FansPushReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FansPushReq_descriptor_,
      FansPushReq::default_instance_,
      FansPushReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FansPushReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FansPushReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FansPushReq));
  CancelConcernReq_descriptor_ = file->message_type(15);
  static const int CancelConcernReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelConcernReq, othuid_),
  };
  CancelConcernReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelConcernReq_descriptor_,
      CancelConcernReq::default_instance_,
      CancelConcernReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelConcernReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelConcernReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelConcernReq));
  CancelConcernResp_descriptor_ = file->message_type(16);
  static const int CancelConcernResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelConcernResp, deluid_),
  };
  CancelConcernResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelConcernResp_descriptor_,
      CancelConcernResp::default_instance_,
      CancelConcernResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelConcernResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelConcernResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelConcernResp));
  CSCancelConcernReq_descriptor_ = file->message_type(17);
  static const int CSCancelConcernReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCancelConcernReq, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCancelConcernReq, othuid_),
  };
  CSCancelConcernReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCancelConcernReq_descriptor_,
      CSCancelConcernReq::default_instance_,
      CSCancelConcernReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCancelConcernReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCancelConcernReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCancelConcernReq));
  CSCancelConcernResp_descriptor_ = file->message_type(18);
  static const int CSCancelConcernResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCancelConcernResp, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCancelConcernResp, resp_),
  };
  CSCancelConcernResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSCancelConcernResp_descriptor_,
      CSCancelConcernResp::default_instance_,
      CSCancelConcernResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCancelConcernResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCancelConcernResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSCancelConcernResp));
  StripFansPushReq_descriptor_ = file->message_type(19);
  static const int StripFansPushReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripFansPushReq, deluid_),
  };
  StripFansPushReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StripFansPushReq_descriptor_,
      StripFansPushReq::default_instance_,
      StripFansPushReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripFansPushReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StripFansPushReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StripFansPushReq));
  RemoveFansReq_descriptor_ = file->message_type(20);
  static const int RemoveFansReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFansReq, deluid_),
  };
  RemoveFansReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveFansReq_descriptor_,
      RemoveFansReq::default_instance_,
      RemoveFansReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFansReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFansReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveFansReq));
  RemoveFansResp_descriptor_ = file->message_type(21);
  static const int RemoveFansResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFansResp, deluid_),
  };
  RemoveFansResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveFansResp_descriptor_,
      RemoveFansResp::default_instance_,
      RemoveFansResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFansResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFansResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveFansResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoFriend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FolkCPP_descriptor_, &FolkCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConcernFolkCPP_descriptor_, &ConcernFolkCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FansCPP_descriptor_, &FansCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllFriendsReq_descriptor_, &GetAllFriendsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllFriendsResp_descriptor_, &GetAllFriendsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConcernReq_descriptor_, &ConcernReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConcernResp_descriptor_, &ConcernResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetFriendInfoReq_descriptor_, &CSGetFriendInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetFriendInfoResp_descriptor_, &CSGetFriendInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendHelpInfoReq_descriptor_, &GetFriendHelpInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetFriendHelpInfoReq_descriptor_, &CSGetFriendHelpInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGetFriendHelpInfoResp_descriptor_, &CSGetFriendHelpInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSConcernReq_descriptor_, &CSConcernReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSConcernResp_descriptor_, &CSConcernResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FansPushReq_descriptor_, &FansPushReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelConcernReq_descriptor_, &CancelConcernReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelConcernResp_descriptor_, &CancelConcernResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCancelConcernReq_descriptor_, &CSCancelConcernReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSCancelConcernResp_descriptor_, &CSCancelConcernResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StripFansPushReq_descriptor_, &StripFansPushReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveFansReq_descriptor_, &RemoveFansReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveFansResp_descriptor_, &RemoveFansResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoFriend_2eproto() {
  delete FolkCPP::default_instance_;
  delete FolkCPP_reflection_;
  delete ConcernFolkCPP::default_instance_;
  delete ConcernFolkCPP_reflection_;
  delete FansCPP::default_instance_;
  delete FansCPP_reflection_;
  delete GetAllFriendsReq::default_instance_;
  delete GetAllFriendsReq_reflection_;
  delete GetAllFriendsResp::default_instance_;
  delete GetAllFriendsResp_reflection_;
  delete ConcernReq::default_instance_;
  delete ConcernReq_reflection_;
  delete ConcernResp::default_instance_;
  delete ConcernResp_reflection_;
  delete CSGetFriendInfoReq::default_instance_;
  delete CSGetFriendInfoReq_reflection_;
  delete CSGetFriendInfoResp::default_instance_;
  delete CSGetFriendInfoResp_reflection_;
  delete GetFriendHelpInfoReq::default_instance_;
  delete GetFriendHelpInfoReq_reflection_;
  delete CSGetFriendHelpInfoReq::default_instance_;
  delete CSGetFriendHelpInfoReq_reflection_;
  delete CSGetFriendHelpInfoResp::default_instance_;
  delete CSGetFriendHelpInfoResp_reflection_;
  delete CSConcernReq::default_instance_;
  delete CSConcernReq_reflection_;
  delete CSConcernResp::default_instance_;
  delete CSConcernResp_reflection_;
  delete FansPushReq::default_instance_;
  delete FansPushReq_reflection_;
  delete CancelConcernReq::default_instance_;
  delete CancelConcernReq_reflection_;
  delete CancelConcernResp::default_instance_;
  delete CancelConcernResp_reflection_;
  delete CSCancelConcernReq::default_instance_;
  delete CSCancelConcernReq_reflection_;
  delete CSCancelConcernResp::default_instance_;
  delete CSCancelConcernResp_reflection_;
  delete StripFansPushReq::default_instance_;
  delete StripFansPushReq_reflection_;
  delete RemoveFansReq::default_instance_;
  delete RemoveFansReq_reflection_;
  delete RemoveFansResp::default_instance_;
  delete RemoveFansResp_reflection_;
}

void protobuf_AddDesc_ProtoFriend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ProtoFriend.proto\022\013ProtoFriend\"h\n\007Folk"
    "CPP\022\017\n\007folkUid\030\001 \002(\r\022\r\n\005level\030\002 \001(\r\022\013\n\003f"
    "ig\030\003 \001(\014\022\014\n\004name\030\004 \001(\014\022\020\n\010needhelp\030\005 \001(\010"
    "\022\020\n\010blueInfo\030\006 \001(\r\";\n\016ConcernFolkCPP\022)\n\013"
    "concernfolk\030\001 \002(\0132\024.ProtoFriend.FolkCPP\""
    ",\n\007FansCPP\022!\n\003fan\030\001 \002(\0132\024.ProtoFriend.Fo"
    "lkCPP\"\022\n\020GetAllFriendsReq\"\215\001\n\021GetAllFrie"
    "ndsResp\022-\n\010concerns\030\001 \003(\0132\033.ProtoFriend."
    "ConcernFolkCPP\022\"\n\004fans\030\002 \003(\0132\024.ProtoFrie"
    "nd.FansCPP\022%\n\007helpers\030\003 \003(\0132\024.ProtoFrien"
    "d.FolkCPP\"\034\n\nConcernReq\022\016\n\006othuid\030\001 \002(\r\""
    ";\n\013ConcernResp\022,\n\007concern\030\001 \002(\0132\033.ProtoF"
    "riend.ConcernFolkCPP\"A\n\022CSGetFriendInfoR"
    "eq\022\014\n\004type\030\001 \002(\r\022\r\n\005myuid\030\002 \002(\r\022\016\n\006othui"
    "d\030\003 \003(\r\"V\n\023CSGetFriendInfoResp\022\014\n\004type\030\001"
    " \002(\r\022\r\n\005myuid\030\002 \002(\r\022\"\n\004folk\030\003 \003(\0132\024.Prot"
    "oFriend.FolkCPP\"\026\n\024GetFriendHelpInfoReq\""
    "7\n\026CSGetFriendHelpInfoReq\022\r\n\005myuid\030\001 \002(\r"
    "\022\016\n\006othuid\030\002 \003(\r\")\n\027CSGetFriendHelpInfoR"
    "esp\022\016\n\006othuid\030\001 \003(\r\"-\n\014CSConcernReq\022\r\n\005m"
    "yuid\030\001 \002(\r\022\016\n\006othuid\030\002 \002(\r\"J\n\rCSConcernR"
    "esp\022\r\n\005myuid\030\001 \002(\r\022*\n\010folkResp\030\002 \002(\0132\030.P"
    "rotoFriend.ConcernResp\"0\n\013FansPushReq\022!\n"
    "\003fan\030\001 \002(\0132\024.ProtoFriend.FansCPP\"\"\n\020Canc"
    "elConcernReq\022\016\n\006othuid\030\001 \002(\r\"#\n\021CancelCo"
    "ncernResp\022\016\n\006deluid\030\001 \002(\r\"3\n\022CSCancelCon"
    "cernReq\022\r\n\005myuid\030\001 \002(\r\022\016\n\006othuid\030\002 \002(\r\"R"
    "\n\023CSCancelConcernResp\022\r\n\005myuid\030\001 \002(\r\022,\n\004"
    "resp\030\002 \002(\0132\036.ProtoFriend.CancelConcernRe"
    "sp\"\"\n\020StripFansPushReq\022\016\n\006deluid\030\001 \002(\r\"\037"
    "\n\rRemoveFansReq\022\016\n\006deluid\030\001 \002(\r\" \n\016Remov"
    "eFansResp\022\016\n\006deluid\030\001 \002(\r", 1265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoFriend.proto", &protobuf_RegisterTypes);
  FolkCPP::default_instance_ = new FolkCPP();
  ConcernFolkCPP::default_instance_ = new ConcernFolkCPP();
  FansCPP::default_instance_ = new FansCPP();
  GetAllFriendsReq::default_instance_ = new GetAllFriendsReq();
  GetAllFriendsResp::default_instance_ = new GetAllFriendsResp();
  ConcernReq::default_instance_ = new ConcernReq();
  ConcernResp::default_instance_ = new ConcernResp();
  CSGetFriendInfoReq::default_instance_ = new CSGetFriendInfoReq();
  CSGetFriendInfoResp::default_instance_ = new CSGetFriendInfoResp();
  GetFriendHelpInfoReq::default_instance_ = new GetFriendHelpInfoReq();
  CSGetFriendHelpInfoReq::default_instance_ = new CSGetFriendHelpInfoReq();
  CSGetFriendHelpInfoResp::default_instance_ = new CSGetFriendHelpInfoResp();
  CSConcernReq::default_instance_ = new CSConcernReq();
  CSConcernResp::default_instance_ = new CSConcernResp();
  FansPushReq::default_instance_ = new FansPushReq();
  CancelConcernReq::default_instance_ = new CancelConcernReq();
  CancelConcernResp::default_instance_ = new CancelConcernResp();
  CSCancelConcernReq::default_instance_ = new CSCancelConcernReq();
  CSCancelConcernResp::default_instance_ = new CSCancelConcernResp();
  StripFansPushReq::default_instance_ = new StripFansPushReq();
  RemoveFansReq::default_instance_ = new RemoveFansReq();
  RemoveFansResp::default_instance_ = new RemoveFansResp();
  FolkCPP::default_instance_->InitAsDefaultInstance();
  ConcernFolkCPP::default_instance_->InitAsDefaultInstance();
  FansCPP::default_instance_->InitAsDefaultInstance();
  GetAllFriendsReq::default_instance_->InitAsDefaultInstance();
  GetAllFriendsResp::default_instance_->InitAsDefaultInstance();
  ConcernReq::default_instance_->InitAsDefaultInstance();
  ConcernResp::default_instance_->InitAsDefaultInstance();
  CSGetFriendInfoReq::default_instance_->InitAsDefaultInstance();
  CSGetFriendInfoResp::default_instance_->InitAsDefaultInstance();
  GetFriendHelpInfoReq::default_instance_->InitAsDefaultInstance();
  CSGetFriendHelpInfoReq::default_instance_->InitAsDefaultInstance();
  CSGetFriendHelpInfoResp::default_instance_->InitAsDefaultInstance();
  CSConcernReq::default_instance_->InitAsDefaultInstance();
  CSConcernResp::default_instance_->InitAsDefaultInstance();
  FansPushReq::default_instance_->InitAsDefaultInstance();
  CancelConcernReq::default_instance_->InitAsDefaultInstance();
  CancelConcernResp::default_instance_->InitAsDefaultInstance();
  CSCancelConcernReq::default_instance_->InitAsDefaultInstance();
  CSCancelConcernResp::default_instance_->InitAsDefaultInstance();
  StripFansPushReq::default_instance_->InitAsDefaultInstance();
  RemoveFansReq::default_instance_->InitAsDefaultInstance();
  RemoveFansResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoFriend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoFriend_2eproto {
  StaticDescriptorInitializer_ProtoFriend_2eproto() {
    protobuf_AddDesc_ProtoFriend_2eproto();
  }
} static_descriptor_initializer_ProtoFriend_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FolkCPP::kFolkUidFieldNumber;
const int FolkCPP::kLevelFieldNumber;
const int FolkCPP::kFigFieldNumber;
const int FolkCPP::kNameFieldNumber;
const int FolkCPP::kNeedhelpFieldNumber;
const int FolkCPP::kBlueInfoFieldNumber;
#endif  // !_MSC_VER

FolkCPP::FolkCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.FolkCPP)
}

void FolkCPP::InitAsDefaultInstance() {
}

FolkCPP::FolkCPP(const FolkCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.FolkCPP)
}

void FolkCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  folkuid_ = 0u;
  level_ = 0u;
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needhelp_ = false;
  blueinfo_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FolkCPP::~FolkCPP() {
  // @@protoc_insertion_point(destructor:ProtoFriend.FolkCPP)
  SharedDtor();
}

void FolkCPP::SharedDtor() {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FolkCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FolkCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FolkCPP_descriptor_;
}

const FolkCPP& FolkCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

FolkCPP* FolkCPP::default_instance_ = NULL;

FolkCPP* FolkCPP::New() const {
  return new FolkCPP;
}

void FolkCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FolkCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(folkuid_, level_);
    ZR_(needhelp_, blueinfo_);
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FolkCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.FolkCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 folkUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &folkuid_)));
          set_has_folkuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fig;
        break;
      }

      // optional bytes fig = 3;
      case 3: {
        if (tag == 26) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_needhelp;
        break;
      }

      // optional bool needhelp = 5;
      case 5: {
        if (tag == 40) {
         parse_needhelp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needhelp_)));
          set_has_needhelp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_blueInfo;
        break;
      }

      // optional uint32 blueInfo = 6;
      case 6: {
        if (tag == 48) {
         parse_blueInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blueinfo_)));
          set_has_blueinfo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.FolkCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.FolkCPP)
  return false;
#undef DO_
}

void FolkCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.FolkCPP)
  // required uint32 folkUid = 1;
  if (has_folkuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->folkuid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional bytes fig = 3;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->fig(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->name(), output);
  }

  // optional bool needhelp = 5;
  if (has_needhelp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->needhelp(), output);
  }

  // optional uint32 blueInfo = 6;
  if (has_blueinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->blueinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.FolkCPP)
}

::google::protobuf::uint8* FolkCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.FolkCPP)
  // required uint32 folkUid = 1;
  if (has_folkuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->folkuid(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional bytes fig = 3;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->fig(), target);
  }

  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  // optional bool needhelp = 5;
  if (has_needhelp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->needhelp(), target);
  }

  // optional uint32 blueInfo = 6;
  if (has_blueinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->blueinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.FolkCPP)
  return target;
}

int FolkCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 folkUid = 1;
    if (has_folkuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->folkuid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional bytes fig = 3;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bool needhelp = 5;
    if (has_needhelp()) {
      total_size += 1 + 1;
    }

    // optional uint32 blueInfo = 6;
    if (has_blueinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blueinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FolkCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FolkCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FolkCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FolkCPP::MergeFrom(const FolkCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_folkuid()) {
      set_folkuid(from.folkuid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_needhelp()) {
      set_needhelp(from.needhelp());
    }
    if (from.has_blueinfo()) {
      set_blueinfo(from.blueinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FolkCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FolkCPP::CopyFrom(const FolkCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FolkCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FolkCPP::Swap(FolkCPP* other) {
  if (other != this) {
    std::swap(folkuid_, other->folkuid_);
    std::swap(level_, other->level_);
    std::swap(fig_, other->fig_);
    std::swap(name_, other->name_);
    std::swap(needhelp_, other->needhelp_);
    std::swap(blueinfo_, other->blueinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FolkCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FolkCPP_descriptor_;
  metadata.reflection = FolkCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConcernFolkCPP::kConcernfolkFieldNumber;
#endif  // !_MSC_VER

ConcernFolkCPP::ConcernFolkCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.ConcernFolkCPP)
}

void ConcernFolkCPP::InitAsDefaultInstance() {
  concernfolk_ = const_cast< ::ProtoFriend::FolkCPP*>(&::ProtoFriend::FolkCPP::default_instance());
}

ConcernFolkCPP::ConcernFolkCPP(const ConcernFolkCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.ConcernFolkCPP)
}

void ConcernFolkCPP::SharedCtor() {
  _cached_size_ = 0;
  concernfolk_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConcernFolkCPP::~ConcernFolkCPP() {
  // @@protoc_insertion_point(destructor:ProtoFriend.ConcernFolkCPP)
  SharedDtor();
}

void ConcernFolkCPP::SharedDtor() {
  if (this != default_instance_) {
    delete concernfolk_;
  }
}

void ConcernFolkCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcernFolkCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConcernFolkCPP_descriptor_;
}

const ConcernFolkCPP& ConcernFolkCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

ConcernFolkCPP* ConcernFolkCPP::default_instance_ = NULL;

ConcernFolkCPP* ConcernFolkCPP::New() const {
  return new ConcernFolkCPP;
}

void ConcernFolkCPP::Clear() {
  if (has_concernfolk()) {
    if (concernfolk_ != NULL) concernfolk_->::ProtoFriend::FolkCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConcernFolkCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.ConcernFolkCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoFriend.FolkCPP concernfolk = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concernfolk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.ConcernFolkCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.ConcernFolkCPP)
  return false;
#undef DO_
}

void ConcernFolkCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.ConcernFolkCPP)
  // required .ProtoFriend.FolkCPP concernfolk = 1;
  if (has_concernfolk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->concernfolk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.ConcernFolkCPP)
}

::google::protobuf::uint8* ConcernFolkCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.ConcernFolkCPP)
  // required .ProtoFriend.FolkCPP concernfolk = 1;
  if (has_concernfolk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->concernfolk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.ConcernFolkCPP)
  return target;
}

int ConcernFolkCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoFriend.FolkCPP concernfolk = 1;
    if (has_concernfolk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->concernfolk());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcernFolkCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConcernFolkCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConcernFolkCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConcernFolkCPP::MergeFrom(const ConcernFolkCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_concernfolk()) {
      mutable_concernfolk()->::ProtoFriend::FolkCPP::MergeFrom(from.concernfolk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConcernFolkCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcernFolkCPP::CopyFrom(const ConcernFolkCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcernFolkCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_concernfolk()) {
    if (!this->concernfolk().IsInitialized()) return false;
  }
  return true;
}

void ConcernFolkCPP::Swap(ConcernFolkCPP* other) {
  if (other != this) {
    std::swap(concernfolk_, other->concernfolk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConcernFolkCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConcernFolkCPP_descriptor_;
  metadata.reflection = ConcernFolkCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FansCPP::kFanFieldNumber;
#endif  // !_MSC_VER

FansCPP::FansCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.FansCPP)
}

void FansCPP::InitAsDefaultInstance() {
  fan_ = const_cast< ::ProtoFriend::FolkCPP*>(&::ProtoFriend::FolkCPP::default_instance());
}

FansCPP::FansCPP(const FansCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.FansCPP)
}

void FansCPP::SharedCtor() {
  _cached_size_ = 0;
  fan_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FansCPP::~FansCPP() {
  // @@protoc_insertion_point(destructor:ProtoFriend.FansCPP)
  SharedDtor();
}

void FansCPP::SharedDtor() {
  if (this != default_instance_) {
    delete fan_;
  }
}

void FansCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FansCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FansCPP_descriptor_;
}

const FansCPP& FansCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

FansCPP* FansCPP::default_instance_ = NULL;

FansCPP* FansCPP::New() const {
  return new FansCPP;
}

void FansCPP::Clear() {
  if (has_fan()) {
    if (fan_ != NULL) fan_->::ProtoFriend::FolkCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FansCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.FansCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoFriend.FolkCPP fan = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.FansCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.FansCPP)
  return false;
#undef DO_
}

void FansCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.FansCPP)
  // required .ProtoFriend.FolkCPP fan = 1;
  if (has_fan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.FansCPP)
}

::google::protobuf::uint8* FansCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.FansCPP)
  // required .ProtoFriend.FolkCPP fan = 1;
  if (has_fan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.FansCPP)
  return target;
}

int FansCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoFriend.FolkCPP fan = 1;
    if (has_fan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FansCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FansCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FansCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FansCPP::MergeFrom(const FansCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fan()) {
      mutable_fan()->::ProtoFriend::FolkCPP::MergeFrom(from.fan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FansCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FansCPP::CopyFrom(const FansCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FansCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fan()) {
    if (!this->fan().IsInitialized()) return false;
  }
  return true;
}

void FansCPP::Swap(FansCPP* other) {
  if (other != this) {
    std::swap(fan_, other->fan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FansCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FansCPP_descriptor_;
  metadata.reflection = FansCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetAllFriendsReq::GetAllFriendsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.GetAllFriendsReq)
}

void GetAllFriendsReq::InitAsDefaultInstance() {
}

GetAllFriendsReq::GetAllFriendsReq(const GetAllFriendsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.GetAllFriendsReq)
}

void GetAllFriendsReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllFriendsReq::~GetAllFriendsReq() {
  // @@protoc_insertion_point(destructor:ProtoFriend.GetAllFriendsReq)
  SharedDtor();
}

void GetAllFriendsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllFriendsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllFriendsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllFriendsReq_descriptor_;
}

const GetAllFriendsReq& GetAllFriendsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

GetAllFriendsReq* GetAllFriendsReq::default_instance_ = NULL;

GetAllFriendsReq* GetAllFriendsReq::New() const {
  return new GetAllFriendsReq;
}

void GetAllFriendsReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllFriendsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.GetAllFriendsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.GetAllFriendsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.GetAllFriendsReq)
  return false;
#undef DO_
}

void GetAllFriendsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.GetAllFriendsReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.GetAllFriendsReq)
}

::google::protobuf::uint8* GetAllFriendsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.GetAllFriendsReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.GetAllFriendsReq)
  return target;
}

int GetAllFriendsReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllFriendsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllFriendsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllFriendsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllFriendsReq::MergeFrom(const GetAllFriendsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllFriendsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllFriendsReq::CopyFrom(const GetAllFriendsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllFriendsReq::IsInitialized() const {

  return true;
}

void GetAllFriendsReq::Swap(GetAllFriendsReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllFriendsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllFriendsReq_descriptor_;
  metadata.reflection = GetAllFriendsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllFriendsResp::kConcernsFieldNumber;
const int GetAllFriendsResp::kFansFieldNumber;
const int GetAllFriendsResp::kHelpersFieldNumber;
#endif  // !_MSC_VER

GetAllFriendsResp::GetAllFriendsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.GetAllFriendsResp)
}

void GetAllFriendsResp::InitAsDefaultInstance() {
}

GetAllFriendsResp::GetAllFriendsResp(const GetAllFriendsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.GetAllFriendsResp)
}

void GetAllFriendsResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllFriendsResp::~GetAllFriendsResp() {
  // @@protoc_insertion_point(destructor:ProtoFriend.GetAllFriendsResp)
  SharedDtor();
}

void GetAllFriendsResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllFriendsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllFriendsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllFriendsResp_descriptor_;
}

const GetAllFriendsResp& GetAllFriendsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

GetAllFriendsResp* GetAllFriendsResp::default_instance_ = NULL;

GetAllFriendsResp* GetAllFriendsResp::New() const {
  return new GetAllFriendsResp;
}

void GetAllFriendsResp::Clear() {
  concerns_.Clear();
  fans_.Clear();
  helpers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllFriendsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.GetAllFriendsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoFriend.ConcernFolkCPP concerns = 1;
      case 1: {
        if (tag == 10) {
         parse_concerns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_concerns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_concerns;
        if (input->ExpectTag(18)) goto parse_fans;
        break;
      }

      // repeated .ProtoFriend.FansCPP fans = 2;
      case 2: {
        if (tag == 18) {
         parse_fans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fans;
        if (input->ExpectTag(26)) goto parse_helpers;
        break;
      }

      // repeated .ProtoFriend.FolkCPP helpers = 3;
      case 3: {
        if (tag == 26) {
         parse_helpers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_helpers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_helpers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.GetAllFriendsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.GetAllFriendsResp)
  return false;
#undef DO_
}

void GetAllFriendsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.GetAllFriendsResp)
  // repeated .ProtoFriend.ConcernFolkCPP concerns = 1;
  for (int i = 0; i < this->concerns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->concerns(i), output);
  }

  // repeated .ProtoFriend.FansCPP fans = 2;
  for (int i = 0; i < this->fans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fans(i), output);
  }

  // repeated .ProtoFriend.FolkCPP helpers = 3;
  for (int i = 0; i < this->helpers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->helpers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.GetAllFriendsResp)
}

::google::protobuf::uint8* GetAllFriendsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.GetAllFriendsResp)
  // repeated .ProtoFriend.ConcernFolkCPP concerns = 1;
  for (int i = 0; i < this->concerns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->concerns(i), target);
  }

  // repeated .ProtoFriend.FansCPP fans = 2;
  for (int i = 0; i < this->fans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fans(i), target);
  }

  // repeated .ProtoFriend.FolkCPP helpers = 3;
  for (int i = 0; i < this->helpers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->helpers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.GetAllFriendsResp)
  return target;
}

int GetAllFriendsResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoFriend.ConcernFolkCPP concerns = 1;
  total_size += 1 * this->concerns_size();
  for (int i = 0; i < this->concerns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->concerns(i));
  }

  // repeated .ProtoFriend.FansCPP fans = 2;
  total_size += 1 * this->fans_size();
  for (int i = 0; i < this->fans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fans(i));
  }

  // repeated .ProtoFriend.FolkCPP helpers = 3;
  total_size += 1 * this->helpers_size();
  for (int i = 0; i < this->helpers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->helpers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllFriendsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllFriendsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllFriendsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllFriendsResp::MergeFrom(const GetAllFriendsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  concerns_.MergeFrom(from.concerns_);
  fans_.MergeFrom(from.fans_);
  helpers_.MergeFrom(from.helpers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllFriendsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllFriendsResp::CopyFrom(const GetAllFriendsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllFriendsResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->concerns())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fans())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->helpers())) return false;
  return true;
}

void GetAllFriendsResp::Swap(GetAllFriendsResp* other) {
  if (other != this) {
    concerns_.Swap(&other->concerns_);
    fans_.Swap(&other->fans_);
    helpers_.Swap(&other->helpers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllFriendsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllFriendsResp_descriptor_;
  metadata.reflection = GetAllFriendsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConcernReq::kOthuidFieldNumber;
#endif  // !_MSC_VER

ConcernReq::ConcernReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.ConcernReq)
}

void ConcernReq::InitAsDefaultInstance() {
}

ConcernReq::ConcernReq(const ConcernReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.ConcernReq)
}

void ConcernReq::SharedCtor() {
  _cached_size_ = 0;
  othuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConcernReq::~ConcernReq() {
  // @@protoc_insertion_point(destructor:ProtoFriend.ConcernReq)
  SharedDtor();
}

void ConcernReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConcernReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcernReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConcernReq_descriptor_;
}

const ConcernReq& ConcernReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

ConcernReq* ConcernReq::default_instance_ = NULL;

ConcernReq* ConcernReq::New() const {
  return new ConcernReq;
}

void ConcernReq::Clear() {
  othuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConcernReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.ConcernReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 othuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.ConcernReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.ConcernReq)
  return false;
#undef DO_
}

void ConcernReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.ConcernReq)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->othuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.ConcernReq)
}

::google::protobuf::uint8* ConcernReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.ConcernReq)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->othuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.ConcernReq)
  return target;
}

int ConcernReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 othuid = 1;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcernReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConcernReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConcernReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConcernReq::MergeFrom(const ConcernReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConcernReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcernReq::CopyFrom(const ConcernReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcernReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConcernReq::Swap(ConcernReq* other) {
  if (other != this) {
    std::swap(othuid_, other->othuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConcernReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConcernReq_descriptor_;
  metadata.reflection = ConcernReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConcernResp::kConcernFieldNumber;
#endif  // !_MSC_VER

ConcernResp::ConcernResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.ConcernResp)
}

void ConcernResp::InitAsDefaultInstance() {
  concern_ = const_cast< ::ProtoFriend::ConcernFolkCPP*>(&::ProtoFriend::ConcernFolkCPP::default_instance());
}

ConcernResp::ConcernResp(const ConcernResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.ConcernResp)
}

void ConcernResp::SharedCtor() {
  _cached_size_ = 0;
  concern_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConcernResp::~ConcernResp() {
  // @@protoc_insertion_point(destructor:ProtoFriend.ConcernResp)
  SharedDtor();
}

void ConcernResp::SharedDtor() {
  if (this != default_instance_) {
    delete concern_;
  }
}

void ConcernResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcernResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConcernResp_descriptor_;
}

const ConcernResp& ConcernResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

ConcernResp* ConcernResp::default_instance_ = NULL;

ConcernResp* ConcernResp::New() const {
  return new ConcernResp;
}

void ConcernResp::Clear() {
  if (has_concern()) {
    if (concern_ != NULL) concern_->::ProtoFriend::ConcernFolkCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConcernResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.ConcernResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoFriend.ConcernFolkCPP concern = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_concern()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.ConcernResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.ConcernResp)
  return false;
#undef DO_
}

void ConcernResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.ConcernResp)
  // required .ProtoFriend.ConcernFolkCPP concern = 1;
  if (has_concern()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->concern(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.ConcernResp)
}

::google::protobuf::uint8* ConcernResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.ConcernResp)
  // required .ProtoFriend.ConcernFolkCPP concern = 1;
  if (has_concern()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->concern(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.ConcernResp)
  return target;
}

int ConcernResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoFriend.ConcernFolkCPP concern = 1;
    if (has_concern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->concern());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcernResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConcernResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConcernResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConcernResp::MergeFrom(const ConcernResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_concern()) {
      mutable_concern()->::ProtoFriend::ConcernFolkCPP::MergeFrom(from.concern());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConcernResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcernResp::CopyFrom(const ConcernResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcernResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_concern()) {
    if (!this->concern().IsInitialized()) return false;
  }
  return true;
}

void ConcernResp::Swap(ConcernResp* other) {
  if (other != this) {
    std::swap(concern_, other->concern_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConcernResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConcernResp_descriptor_;
  metadata.reflection = ConcernResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetFriendInfoReq::kTypeFieldNumber;
const int CSGetFriendInfoReq::kMyuidFieldNumber;
const int CSGetFriendInfoReq::kOthuidFieldNumber;
#endif  // !_MSC_VER

CSGetFriendInfoReq::CSGetFriendInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.CSGetFriendInfoReq)
}

void CSGetFriendInfoReq::InitAsDefaultInstance() {
}

CSGetFriendInfoReq::CSGetFriendInfoReq(const CSGetFriendInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.CSGetFriendInfoReq)
}

void CSGetFriendInfoReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  myuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetFriendInfoReq::~CSGetFriendInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoFriend.CSGetFriendInfoReq)
  SharedDtor();
}

void CSGetFriendInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetFriendInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetFriendInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetFriendInfoReq_descriptor_;
}

const CSGetFriendInfoReq& CSGetFriendInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

CSGetFriendInfoReq* CSGetFriendInfoReq::default_instance_ = NULL;

CSGetFriendInfoReq* CSGetFriendInfoReq::New() const {
  return new CSGetFriendInfoReq;
}

void CSGetFriendInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSGetFriendInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, myuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  othuid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetFriendInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.CSGetFriendInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myuid;
        break;
      }

      // required uint32 myuid = 2;
      case 2: {
        if (tag == 16) {
         parse_myuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_othuid;
        break;
      }

      // repeated uint32 othuid = 3;
      case 3: {
        if (tag == 24) {
         parse_othuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_othuid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_othuid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_othuid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.CSGetFriendInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.CSGetFriendInfoReq)
  return false;
#undef DO_
}

void CSGetFriendInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.CSGetFriendInfoReq)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 myuid = 2;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myuid(), output);
  }

  // repeated uint32 othuid = 3;
  for (int i = 0; i < this->othuid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->othuid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.CSGetFriendInfoReq)
}

::google::protobuf::uint8* CSGetFriendInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.CSGetFriendInfoReq)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 myuid = 2;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myuid(), target);
  }

  // repeated uint32 othuid = 3;
  for (int i = 0; i < this->othuid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->othuid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.CSGetFriendInfoReq)
  return target;
}

int CSGetFriendInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 myuid = 2;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

  }
  // repeated uint32 othuid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->othuid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->othuid(i));
    }
    total_size += 1 * this->othuid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetFriendInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetFriendInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetFriendInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetFriendInfoReq::MergeFrom(const CSGetFriendInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  othuid_.MergeFrom(from.othuid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetFriendInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetFriendInfoReq::CopyFrom(const CSGetFriendInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetFriendInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGetFriendInfoReq::Swap(CSGetFriendInfoReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(myuid_, other->myuid_);
    othuid_.Swap(&other->othuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetFriendInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetFriendInfoReq_descriptor_;
  metadata.reflection = CSGetFriendInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetFriendInfoResp::kTypeFieldNumber;
const int CSGetFriendInfoResp::kMyuidFieldNumber;
const int CSGetFriendInfoResp::kFolkFieldNumber;
#endif  // !_MSC_VER

CSGetFriendInfoResp::CSGetFriendInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.CSGetFriendInfoResp)
}

void CSGetFriendInfoResp::InitAsDefaultInstance() {
}

CSGetFriendInfoResp::CSGetFriendInfoResp(const CSGetFriendInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.CSGetFriendInfoResp)
}

void CSGetFriendInfoResp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  myuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetFriendInfoResp::~CSGetFriendInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoFriend.CSGetFriendInfoResp)
  SharedDtor();
}

void CSGetFriendInfoResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetFriendInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetFriendInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetFriendInfoResp_descriptor_;
}

const CSGetFriendInfoResp& CSGetFriendInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

CSGetFriendInfoResp* CSGetFriendInfoResp::default_instance_ = NULL;

CSGetFriendInfoResp* CSGetFriendInfoResp::New() const {
  return new CSGetFriendInfoResp;
}

void CSGetFriendInfoResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSGetFriendInfoResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, myuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  folk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetFriendInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.CSGetFriendInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myuid;
        break;
      }

      // required uint32 myuid = 2;
      case 2: {
        if (tag == 16) {
         parse_myuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_folk;
        break;
      }

      // repeated .ProtoFriend.FolkCPP folk = 3;
      case 3: {
        if (tag == 26) {
         parse_folk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_folk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_folk;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.CSGetFriendInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.CSGetFriendInfoResp)
  return false;
#undef DO_
}

void CSGetFriendInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.CSGetFriendInfoResp)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 myuid = 2;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myuid(), output);
  }

  // repeated .ProtoFriend.FolkCPP folk = 3;
  for (int i = 0; i < this->folk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->folk(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.CSGetFriendInfoResp)
}

::google::protobuf::uint8* CSGetFriendInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.CSGetFriendInfoResp)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 myuid = 2;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myuid(), target);
  }

  // repeated .ProtoFriend.FolkCPP folk = 3;
  for (int i = 0; i < this->folk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->folk(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.CSGetFriendInfoResp)
  return target;
}

int CSGetFriendInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 myuid = 2;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

  }
  // repeated .ProtoFriend.FolkCPP folk = 3;
  total_size += 1 * this->folk_size();
  for (int i = 0; i < this->folk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->folk(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetFriendInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetFriendInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetFriendInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetFriendInfoResp::MergeFrom(const CSGetFriendInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  folk_.MergeFrom(from.folk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetFriendInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetFriendInfoResp::CopyFrom(const CSGetFriendInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetFriendInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->folk())) return false;
  return true;
}

void CSGetFriendInfoResp::Swap(CSGetFriendInfoResp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(myuid_, other->myuid_);
    folk_.Swap(&other->folk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetFriendInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetFriendInfoResp_descriptor_;
  metadata.reflection = CSGetFriendInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetFriendHelpInfoReq::GetFriendHelpInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.GetFriendHelpInfoReq)
}

void GetFriendHelpInfoReq::InitAsDefaultInstance() {
}

GetFriendHelpInfoReq::GetFriendHelpInfoReq(const GetFriendHelpInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.GetFriendHelpInfoReq)
}

void GetFriendHelpInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendHelpInfoReq::~GetFriendHelpInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoFriend.GetFriendHelpInfoReq)
  SharedDtor();
}

void GetFriendHelpInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendHelpInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendHelpInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendHelpInfoReq_descriptor_;
}

const GetFriendHelpInfoReq& GetFriendHelpInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

GetFriendHelpInfoReq* GetFriendHelpInfoReq::default_instance_ = NULL;

GetFriendHelpInfoReq* GetFriendHelpInfoReq::New() const {
  return new GetFriendHelpInfoReq;
}

void GetFriendHelpInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendHelpInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.GetFriendHelpInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.GetFriendHelpInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.GetFriendHelpInfoReq)
  return false;
#undef DO_
}

void GetFriendHelpInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.GetFriendHelpInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.GetFriendHelpInfoReq)
}

::google::protobuf::uint8* GetFriendHelpInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.GetFriendHelpInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.GetFriendHelpInfoReq)
  return target;
}

int GetFriendHelpInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendHelpInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendHelpInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendHelpInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendHelpInfoReq::MergeFrom(const GetFriendHelpInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendHelpInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendHelpInfoReq::CopyFrom(const GetFriendHelpInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendHelpInfoReq::IsInitialized() const {

  return true;
}

void GetFriendHelpInfoReq::Swap(GetFriendHelpInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendHelpInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendHelpInfoReq_descriptor_;
  metadata.reflection = GetFriendHelpInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetFriendHelpInfoReq::kMyuidFieldNumber;
const int CSGetFriendHelpInfoReq::kOthuidFieldNumber;
#endif  // !_MSC_VER

CSGetFriendHelpInfoReq::CSGetFriendHelpInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.CSGetFriendHelpInfoReq)
}

void CSGetFriendHelpInfoReq::InitAsDefaultInstance() {
}

CSGetFriendHelpInfoReq::CSGetFriendHelpInfoReq(const CSGetFriendHelpInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.CSGetFriendHelpInfoReq)
}

void CSGetFriendHelpInfoReq::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetFriendHelpInfoReq::~CSGetFriendHelpInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoFriend.CSGetFriendHelpInfoReq)
  SharedDtor();
}

void CSGetFriendHelpInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetFriendHelpInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetFriendHelpInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetFriendHelpInfoReq_descriptor_;
}

const CSGetFriendHelpInfoReq& CSGetFriendHelpInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

CSGetFriendHelpInfoReq* CSGetFriendHelpInfoReq::default_instance_ = NULL;

CSGetFriendHelpInfoReq* CSGetFriendHelpInfoReq::New() const {
  return new CSGetFriendHelpInfoReq;
}

void CSGetFriendHelpInfoReq::Clear() {
  myuid_ = 0u;
  othuid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetFriendHelpInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.CSGetFriendHelpInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_othuid;
        break;
      }

      // repeated uint32 othuid = 2;
      case 2: {
        if (tag == 16) {
         parse_othuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_othuid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_othuid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_othuid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.CSGetFriendHelpInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.CSGetFriendHelpInfoReq)
  return false;
#undef DO_
}

void CSGetFriendHelpInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.CSGetFriendHelpInfoReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }

  // repeated uint32 othuid = 2;
  for (int i = 0; i < this->othuid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->othuid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.CSGetFriendHelpInfoReq)
}

::google::protobuf::uint8* CSGetFriendHelpInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.CSGetFriendHelpInfoReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }

  // repeated uint32 othuid = 2;
  for (int i = 0; i < this->othuid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->othuid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.CSGetFriendHelpInfoReq)
  return target;
}

int CSGetFriendHelpInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myuid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

  }
  // repeated uint32 othuid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->othuid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->othuid(i));
    }
    total_size += 1 * this->othuid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetFriendHelpInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetFriendHelpInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetFriendHelpInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetFriendHelpInfoReq::MergeFrom(const CSGetFriendHelpInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  othuid_.MergeFrom(from.othuid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetFriendHelpInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetFriendHelpInfoReq::CopyFrom(const CSGetFriendHelpInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetFriendHelpInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGetFriendHelpInfoReq::Swap(CSGetFriendHelpInfoReq* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    othuid_.Swap(&other->othuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetFriendHelpInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetFriendHelpInfoReq_descriptor_;
  metadata.reflection = CSGetFriendHelpInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetFriendHelpInfoResp::kOthuidFieldNumber;
#endif  // !_MSC_VER

CSGetFriendHelpInfoResp::CSGetFriendHelpInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.CSGetFriendHelpInfoResp)
}

void CSGetFriendHelpInfoResp::InitAsDefaultInstance() {
}

CSGetFriendHelpInfoResp::CSGetFriendHelpInfoResp(const CSGetFriendHelpInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.CSGetFriendHelpInfoResp)
}

void CSGetFriendHelpInfoResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetFriendHelpInfoResp::~CSGetFriendHelpInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoFriend.CSGetFriendHelpInfoResp)
  SharedDtor();
}

void CSGetFriendHelpInfoResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetFriendHelpInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetFriendHelpInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetFriendHelpInfoResp_descriptor_;
}

const CSGetFriendHelpInfoResp& CSGetFriendHelpInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

CSGetFriendHelpInfoResp* CSGetFriendHelpInfoResp::default_instance_ = NULL;

CSGetFriendHelpInfoResp* CSGetFriendHelpInfoResp::New() const {
  return new CSGetFriendHelpInfoResp;
}

void CSGetFriendHelpInfoResp::Clear() {
  othuid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGetFriendHelpInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.CSGetFriendHelpInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 othuid = 1;
      case 1: {
        if (tag == 8) {
         parse_othuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_othuid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_othuid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_othuid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.CSGetFriendHelpInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.CSGetFriendHelpInfoResp)
  return false;
#undef DO_
}

void CSGetFriendHelpInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.CSGetFriendHelpInfoResp)
  // repeated uint32 othuid = 1;
  for (int i = 0; i < this->othuid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->othuid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.CSGetFriendHelpInfoResp)
}

::google::protobuf::uint8* CSGetFriendHelpInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.CSGetFriendHelpInfoResp)
  // repeated uint32 othuid = 1;
  for (int i = 0; i < this->othuid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->othuid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.CSGetFriendHelpInfoResp)
  return target;
}

int CSGetFriendHelpInfoResp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 othuid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->othuid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->othuid(i));
    }
    total_size += 1 * this->othuid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetFriendHelpInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGetFriendHelpInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetFriendHelpInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetFriendHelpInfoResp::MergeFrom(const CSGetFriendHelpInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  othuid_.MergeFrom(from.othuid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGetFriendHelpInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetFriendHelpInfoResp::CopyFrom(const CSGetFriendHelpInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetFriendHelpInfoResp::IsInitialized() const {

  return true;
}

void CSGetFriendHelpInfoResp::Swap(CSGetFriendHelpInfoResp* other) {
  if (other != this) {
    othuid_.Swap(&other->othuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGetFriendHelpInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetFriendHelpInfoResp_descriptor_;
  metadata.reflection = CSGetFriendHelpInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSConcernReq::kMyuidFieldNumber;
const int CSConcernReq::kOthuidFieldNumber;
#endif  // !_MSC_VER

CSConcernReq::CSConcernReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.CSConcernReq)
}

void CSConcernReq::InitAsDefaultInstance() {
}

CSConcernReq::CSConcernReq(const CSConcernReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.CSConcernReq)
}

void CSConcernReq::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  othuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSConcernReq::~CSConcernReq() {
  // @@protoc_insertion_point(destructor:ProtoFriend.CSConcernReq)
  SharedDtor();
}

void CSConcernReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSConcernReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSConcernReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSConcernReq_descriptor_;
}

const CSConcernReq& CSConcernReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

CSConcernReq* CSConcernReq::default_instance_ = NULL;

CSConcernReq* CSConcernReq::New() const {
  return new CSConcernReq;
}

void CSConcernReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSConcernReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(myuid_, othuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSConcernReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.CSConcernReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_othuid;
        break;
      }

      // required uint32 othuid = 2;
      case 2: {
        if (tag == 16) {
         parse_othuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.CSConcernReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.CSConcernReq)
  return false;
#undef DO_
}

void CSConcernReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.CSConcernReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->othuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.CSConcernReq)
}

::google::protobuf::uint8* CSConcernReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.CSConcernReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->othuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.CSConcernReq)
  return target;
}

int CSConcernReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myuid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // required uint32 othuid = 2;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSConcernReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSConcernReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSConcernReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSConcernReq::MergeFrom(const CSConcernReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSConcernReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSConcernReq::CopyFrom(const CSConcernReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSConcernReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSConcernReq::Swap(CSConcernReq* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(othuid_, other->othuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSConcernReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSConcernReq_descriptor_;
  metadata.reflection = CSConcernReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSConcernResp::kMyuidFieldNumber;
const int CSConcernResp::kFolkRespFieldNumber;
#endif  // !_MSC_VER

CSConcernResp::CSConcernResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.CSConcernResp)
}

void CSConcernResp::InitAsDefaultInstance() {
  folkresp_ = const_cast< ::ProtoFriend::ConcernResp*>(&::ProtoFriend::ConcernResp::default_instance());
}

CSConcernResp::CSConcernResp(const CSConcernResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.CSConcernResp)
}

void CSConcernResp::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  folkresp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSConcernResp::~CSConcernResp() {
  // @@protoc_insertion_point(destructor:ProtoFriend.CSConcernResp)
  SharedDtor();
}

void CSConcernResp::SharedDtor() {
  if (this != default_instance_) {
    delete folkresp_;
  }
}

void CSConcernResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSConcernResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSConcernResp_descriptor_;
}

const CSConcernResp& CSConcernResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

CSConcernResp* CSConcernResp::default_instance_ = NULL;

CSConcernResp* CSConcernResp::New() const {
  return new CSConcernResp;
}

void CSConcernResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    myuid_ = 0u;
    if (has_folkresp()) {
      if (folkresp_ != NULL) folkresp_->::ProtoFriend::ConcernResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSConcernResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.CSConcernResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_folkResp;
        break;
      }

      // required .ProtoFriend.ConcernResp folkResp = 2;
      case 2: {
        if (tag == 18) {
         parse_folkResp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_folkresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.CSConcernResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.CSConcernResp)
  return false;
#undef DO_
}

void CSConcernResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.CSConcernResp)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }

  // required .ProtoFriend.ConcernResp folkResp = 2;
  if (has_folkresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->folkresp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.CSConcernResp)
}

::google::protobuf::uint8* CSConcernResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.CSConcernResp)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }

  // required .ProtoFriend.ConcernResp folkResp = 2;
  if (has_folkresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->folkresp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.CSConcernResp)
  return target;
}

int CSConcernResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myuid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // required .ProtoFriend.ConcernResp folkResp = 2;
    if (has_folkresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->folkresp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSConcernResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSConcernResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSConcernResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSConcernResp::MergeFrom(const CSConcernResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_folkresp()) {
      mutable_folkresp()->::ProtoFriend::ConcernResp::MergeFrom(from.folkresp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSConcernResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSConcernResp::CopyFrom(const CSConcernResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSConcernResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_folkresp()) {
    if (!this->folkresp().IsInitialized()) return false;
  }
  return true;
}

void CSConcernResp::Swap(CSConcernResp* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(folkresp_, other->folkresp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSConcernResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSConcernResp_descriptor_;
  metadata.reflection = CSConcernResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FansPushReq::kFanFieldNumber;
#endif  // !_MSC_VER

FansPushReq::FansPushReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.FansPushReq)
}

void FansPushReq::InitAsDefaultInstance() {
  fan_ = const_cast< ::ProtoFriend::FansCPP*>(&::ProtoFriend::FansCPP::default_instance());
}

FansPushReq::FansPushReq(const FansPushReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.FansPushReq)
}

void FansPushReq::SharedCtor() {
  _cached_size_ = 0;
  fan_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FansPushReq::~FansPushReq() {
  // @@protoc_insertion_point(destructor:ProtoFriend.FansPushReq)
  SharedDtor();
}

void FansPushReq::SharedDtor() {
  if (this != default_instance_) {
    delete fan_;
  }
}

void FansPushReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FansPushReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FansPushReq_descriptor_;
}

const FansPushReq& FansPushReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

FansPushReq* FansPushReq::default_instance_ = NULL;

FansPushReq* FansPushReq::New() const {
  return new FansPushReq;
}

void FansPushReq::Clear() {
  if (has_fan()) {
    if (fan_ != NULL) fan_->::ProtoFriend::FansCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FansPushReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.FansPushReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoFriend.FansCPP fan = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.FansPushReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.FansPushReq)
  return false;
#undef DO_
}

void FansPushReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.FansPushReq)
  // required .ProtoFriend.FansCPP fan = 1;
  if (has_fan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.FansPushReq)
}

::google::protobuf::uint8* FansPushReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.FansPushReq)
  // required .ProtoFriend.FansCPP fan = 1;
  if (has_fan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.FansPushReq)
  return target;
}

int FansPushReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoFriend.FansCPP fan = 1;
    if (has_fan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FansPushReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FansPushReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FansPushReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FansPushReq::MergeFrom(const FansPushReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fan()) {
      mutable_fan()->::ProtoFriend::FansCPP::MergeFrom(from.fan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FansPushReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FansPushReq::CopyFrom(const FansPushReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FansPushReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fan()) {
    if (!this->fan().IsInitialized()) return false;
  }
  return true;
}

void FansPushReq::Swap(FansPushReq* other) {
  if (other != this) {
    std::swap(fan_, other->fan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FansPushReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FansPushReq_descriptor_;
  metadata.reflection = FansPushReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelConcernReq::kOthuidFieldNumber;
#endif  // !_MSC_VER

CancelConcernReq::CancelConcernReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.CancelConcernReq)
}

void CancelConcernReq::InitAsDefaultInstance() {
}

CancelConcernReq::CancelConcernReq(const CancelConcernReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.CancelConcernReq)
}

void CancelConcernReq::SharedCtor() {
  _cached_size_ = 0;
  othuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelConcernReq::~CancelConcernReq() {
  // @@protoc_insertion_point(destructor:ProtoFriend.CancelConcernReq)
  SharedDtor();
}

void CancelConcernReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CancelConcernReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelConcernReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelConcernReq_descriptor_;
}

const CancelConcernReq& CancelConcernReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

CancelConcernReq* CancelConcernReq::default_instance_ = NULL;

CancelConcernReq* CancelConcernReq::New() const {
  return new CancelConcernReq;
}

void CancelConcernReq::Clear() {
  othuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelConcernReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.CancelConcernReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 othuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.CancelConcernReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.CancelConcernReq)
  return false;
#undef DO_
}

void CancelConcernReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.CancelConcernReq)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->othuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.CancelConcernReq)
}

::google::protobuf::uint8* CancelConcernReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.CancelConcernReq)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->othuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.CancelConcernReq)
  return target;
}

int CancelConcernReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 othuid = 1;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelConcernReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelConcernReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelConcernReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelConcernReq::MergeFrom(const CancelConcernReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelConcernReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelConcernReq::CopyFrom(const CancelConcernReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelConcernReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CancelConcernReq::Swap(CancelConcernReq* other) {
  if (other != this) {
    std::swap(othuid_, other->othuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelConcernReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelConcernReq_descriptor_;
  metadata.reflection = CancelConcernReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelConcernResp::kDeluidFieldNumber;
#endif  // !_MSC_VER

CancelConcernResp::CancelConcernResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.CancelConcernResp)
}

void CancelConcernResp::InitAsDefaultInstance() {
}

CancelConcernResp::CancelConcernResp(const CancelConcernResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.CancelConcernResp)
}

void CancelConcernResp::SharedCtor() {
  _cached_size_ = 0;
  deluid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelConcernResp::~CancelConcernResp() {
  // @@protoc_insertion_point(destructor:ProtoFriend.CancelConcernResp)
  SharedDtor();
}

void CancelConcernResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CancelConcernResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelConcernResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelConcernResp_descriptor_;
}

const CancelConcernResp& CancelConcernResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

CancelConcernResp* CancelConcernResp::default_instance_ = NULL;

CancelConcernResp* CancelConcernResp::New() const {
  return new CancelConcernResp;
}

void CancelConcernResp::Clear() {
  deluid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelConcernResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.CancelConcernResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 deluid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deluid_)));
          set_has_deluid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.CancelConcernResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.CancelConcernResp)
  return false;
#undef DO_
}

void CancelConcernResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.CancelConcernResp)
  // required uint32 deluid = 1;
  if (has_deluid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deluid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.CancelConcernResp)
}

::google::protobuf::uint8* CancelConcernResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.CancelConcernResp)
  // required uint32 deluid = 1;
  if (has_deluid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deluid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.CancelConcernResp)
  return target;
}

int CancelConcernResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 deluid = 1;
    if (has_deluid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deluid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelConcernResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelConcernResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelConcernResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelConcernResp::MergeFrom(const CancelConcernResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deluid()) {
      set_deluid(from.deluid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelConcernResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelConcernResp::CopyFrom(const CancelConcernResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelConcernResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CancelConcernResp::Swap(CancelConcernResp* other) {
  if (other != this) {
    std::swap(deluid_, other->deluid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelConcernResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelConcernResp_descriptor_;
  metadata.reflection = CancelConcernResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCancelConcernReq::kMyuidFieldNumber;
const int CSCancelConcernReq::kOthuidFieldNumber;
#endif  // !_MSC_VER

CSCancelConcernReq::CSCancelConcernReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.CSCancelConcernReq)
}

void CSCancelConcernReq::InitAsDefaultInstance() {
}

CSCancelConcernReq::CSCancelConcernReq(const CSCancelConcernReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.CSCancelConcernReq)
}

void CSCancelConcernReq::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  othuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCancelConcernReq::~CSCancelConcernReq() {
  // @@protoc_insertion_point(destructor:ProtoFriend.CSCancelConcernReq)
  SharedDtor();
}

void CSCancelConcernReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSCancelConcernReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCancelConcernReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCancelConcernReq_descriptor_;
}

const CSCancelConcernReq& CSCancelConcernReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

CSCancelConcernReq* CSCancelConcernReq::default_instance_ = NULL;

CSCancelConcernReq* CSCancelConcernReq::New() const {
  return new CSCancelConcernReq;
}

void CSCancelConcernReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSCancelConcernReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(myuid_, othuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCancelConcernReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.CSCancelConcernReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_othuid;
        break;
      }

      // required uint32 othuid = 2;
      case 2: {
        if (tag == 16) {
         parse_othuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.CSCancelConcernReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.CSCancelConcernReq)
  return false;
#undef DO_
}

void CSCancelConcernReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.CSCancelConcernReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->othuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.CSCancelConcernReq)
}

::google::protobuf::uint8* CSCancelConcernReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.CSCancelConcernReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->othuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.CSCancelConcernReq)
  return target;
}

int CSCancelConcernReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myuid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // required uint32 othuid = 2;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCancelConcernReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCancelConcernReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCancelConcernReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCancelConcernReq::MergeFrom(const CSCancelConcernReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCancelConcernReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCancelConcernReq::CopyFrom(const CSCancelConcernReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCancelConcernReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSCancelConcernReq::Swap(CSCancelConcernReq* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(othuid_, other->othuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCancelConcernReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCancelConcernReq_descriptor_;
  metadata.reflection = CSCancelConcernReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSCancelConcernResp::kMyuidFieldNumber;
const int CSCancelConcernResp::kRespFieldNumber;
#endif  // !_MSC_VER

CSCancelConcernResp::CSCancelConcernResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.CSCancelConcernResp)
}

void CSCancelConcernResp::InitAsDefaultInstance() {
  resp_ = const_cast< ::ProtoFriend::CancelConcernResp*>(&::ProtoFriend::CancelConcernResp::default_instance());
}

CSCancelConcernResp::CSCancelConcernResp(const CSCancelConcernResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.CSCancelConcernResp)
}

void CSCancelConcernResp::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  resp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCancelConcernResp::~CSCancelConcernResp() {
  // @@protoc_insertion_point(destructor:ProtoFriend.CSCancelConcernResp)
  SharedDtor();
}

void CSCancelConcernResp::SharedDtor() {
  if (this != default_instance_) {
    delete resp_;
  }
}

void CSCancelConcernResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCancelConcernResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCancelConcernResp_descriptor_;
}

const CSCancelConcernResp& CSCancelConcernResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

CSCancelConcernResp* CSCancelConcernResp::default_instance_ = NULL;

CSCancelConcernResp* CSCancelConcernResp::New() const {
  return new CSCancelConcernResp;
}

void CSCancelConcernResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    myuid_ = 0u;
    if (has_resp()) {
      if (resp_ != NULL) resp_->::ProtoFriend::CancelConcernResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSCancelConcernResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.CSCancelConcernResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resp;
        break;
      }

      // required .ProtoFriend.CancelConcernResp resp = 2;
      case 2: {
        if (tag == 18) {
         parse_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.CSCancelConcernResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.CSCancelConcernResp)
  return false;
#undef DO_
}

void CSCancelConcernResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.CSCancelConcernResp)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }

  // required .ProtoFriend.CancelConcernResp resp = 2;
  if (has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.CSCancelConcernResp)
}

::google::protobuf::uint8* CSCancelConcernResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.CSCancelConcernResp)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }

  // required .ProtoFriend.CancelConcernResp resp = 2;
  if (has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.CSCancelConcernResp)
  return target;
}

int CSCancelConcernResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myuid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // required .ProtoFriend.CancelConcernResp resp = 2;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCancelConcernResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSCancelConcernResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSCancelConcernResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCancelConcernResp::MergeFrom(const CSCancelConcernResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_resp()) {
      mutable_resp()->::ProtoFriend::CancelConcernResp::MergeFrom(from.resp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSCancelConcernResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCancelConcernResp::CopyFrom(const CSCancelConcernResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCancelConcernResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_resp()) {
    if (!this->resp().IsInitialized()) return false;
  }
  return true;
}

void CSCancelConcernResp::Swap(CSCancelConcernResp* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(resp_, other->resp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSCancelConcernResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCancelConcernResp_descriptor_;
  metadata.reflection = CSCancelConcernResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StripFansPushReq::kDeluidFieldNumber;
#endif  // !_MSC_VER

StripFansPushReq::StripFansPushReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.StripFansPushReq)
}

void StripFansPushReq::InitAsDefaultInstance() {
}

StripFansPushReq::StripFansPushReq(const StripFansPushReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.StripFansPushReq)
}

void StripFansPushReq::SharedCtor() {
  _cached_size_ = 0;
  deluid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StripFansPushReq::~StripFansPushReq() {
  // @@protoc_insertion_point(destructor:ProtoFriend.StripFansPushReq)
  SharedDtor();
}

void StripFansPushReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StripFansPushReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StripFansPushReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StripFansPushReq_descriptor_;
}

const StripFansPushReq& StripFansPushReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

StripFansPushReq* StripFansPushReq::default_instance_ = NULL;

StripFansPushReq* StripFansPushReq::New() const {
  return new StripFansPushReq;
}

void StripFansPushReq::Clear() {
  deluid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StripFansPushReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.StripFansPushReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 deluid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deluid_)));
          set_has_deluid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.StripFansPushReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.StripFansPushReq)
  return false;
#undef DO_
}

void StripFansPushReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.StripFansPushReq)
  // required uint32 deluid = 1;
  if (has_deluid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deluid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.StripFansPushReq)
}

::google::protobuf::uint8* StripFansPushReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.StripFansPushReq)
  // required uint32 deluid = 1;
  if (has_deluid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deluid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.StripFansPushReq)
  return target;
}

int StripFansPushReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 deluid = 1;
    if (has_deluid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deluid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StripFansPushReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StripFansPushReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StripFansPushReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StripFansPushReq::MergeFrom(const StripFansPushReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deluid()) {
      set_deluid(from.deluid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StripFansPushReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripFansPushReq::CopyFrom(const StripFansPushReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripFansPushReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StripFansPushReq::Swap(StripFansPushReq* other) {
  if (other != this) {
    std::swap(deluid_, other->deluid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StripFansPushReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StripFansPushReq_descriptor_;
  metadata.reflection = StripFansPushReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveFansReq::kDeluidFieldNumber;
#endif  // !_MSC_VER

RemoveFansReq::RemoveFansReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.RemoveFansReq)
}

void RemoveFansReq::InitAsDefaultInstance() {
}

RemoveFansReq::RemoveFansReq(const RemoveFansReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.RemoveFansReq)
}

void RemoveFansReq::SharedCtor() {
  _cached_size_ = 0;
  deluid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveFansReq::~RemoveFansReq() {
  // @@protoc_insertion_point(destructor:ProtoFriend.RemoveFansReq)
  SharedDtor();
}

void RemoveFansReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveFansReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveFansReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveFansReq_descriptor_;
}

const RemoveFansReq& RemoveFansReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

RemoveFansReq* RemoveFansReq::default_instance_ = NULL;

RemoveFansReq* RemoveFansReq::New() const {
  return new RemoveFansReq;
}

void RemoveFansReq::Clear() {
  deluid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveFansReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.RemoveFansReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 deluid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deluid_)));
          set_has_deluid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.RemoveFansReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.RemoveFansReq)
  return false;
#undef DO_
}

void RemoveFansReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.RemoveFansReq)
  // required uint32 deluid = 1;
  if (has_deluid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deluid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.RemoveFansReq)
}

::google::protobuf::uint8* RemoveFansReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.RemoveFansReq)
  // required uint32 deluid = 1;
  if (has_deluid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deluid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.RemoveFansReq)
  return target;
}

int RemoveFansReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 deluid = 1;
    if (has_deluid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deluid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveFansReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveFansReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveFansReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveFansReq::MergeFrom(const RemoveFansReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deluid()) {
      set_deluid(from.deluid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveFansReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFansReq::CopyFrom(const RemoveFansReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveFansReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveFansReq::Swap(RemoveFansReq* other) {
  if (other != this) {
    std::swap(deluid_, other->deluid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveFansReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveFansReq_descriptor_;
  metadata.reflection = RemoveFansReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveFansResp::kDeluidFieldNumber;
#endif  // !_MSC_VER

RemoveFansResp::RemoveFansResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriend.RemoveFansResp)
}

void RemoveFansResp::InitAsDefaultInstance() {
}

RemoveFansResp::RemoveFansResp(const RemoveFansResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriend.RemoveFansResp)
}

void RemoveFansResp::SharedCtor() {
  _cached_size_ = 0;
  deluid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveFansResp::~RemoveFansResp() {
  // @@protoc_insertion_point(destructor:ProtoFriend.RemoveFansResp)
  SharedDtor();
}

void RemoveFansResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveFansResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveFansResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveFansResp_descriptor_;
}

const RemoveFansResp& RemoveFansResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriend_2eproto();
  return *default_instance_;
}

RemoveFansResp* RemoveFansResp::default_instance_ = NULL;

RemoveFansResp* RemoveFansResp::New() const {
  return new RemoveFansResp;
}

void RemoveFansResp::Clear() {
  deluid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveFansResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriend.RemoveFansResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 deluid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deluid_)));
          set_has_deluid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriend.RemoveFansResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriend.RemoveFansResp)
  return false;
#undef DO_
}

void RemoveFansResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriend.RemoveFansResp)
  // required uint32 deluid = 1;
  if (has_deluid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deluid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriend.RemoveFansResp)
}

::google::protobuf::uint8* RemoveFansResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriend.RemoveFansResp)
  // required uint32 deluid = 1;
  if (has_deluid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deluid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriend.RemoveFansResp)
  return target;
}

int RemoveFansResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 deluid = 1;
    if (has_deluid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deluid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveFansResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveFansResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveFansResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveFansResp::MergeFrom(const RemoveFansResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deluid()) {
      set_deluid(from.deluid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveFansResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFansResp::CopyFrom(const RemoveFansResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveFansResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveFansResp::Swap(RemoveFansResp* other) {
  if (other != this) {
    std::swap(deluid_, other->deluid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveFansResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveFansResp_descriptor_;
  metadata.reflection = RemoveFansResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoFriend

// @@protoc_insertion_point(global_scope)
