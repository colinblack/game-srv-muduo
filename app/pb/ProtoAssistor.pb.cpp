// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoAssistor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoAssistor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoAssistor {

namespace {

const ::google::protobuf::Descriptor* assistInfoCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  assistInfoCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* assistGrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  assistGrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseAssistorReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseAssistorReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseAssistorResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseAssistorResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenAssistorReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenAssistorReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenAssistorResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenAssistorResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoAssistor_2eproto() {
  protobuf_AddDesc_ProtoAssistor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoAssistor.proto");
  GOOGLE_CHECK(file != NULL);
  assistInfoCPP_descriptor_ = file->message_type(0);
  static const int assistInfoCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assistInfoCPP, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assistInfoCPP, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assistInfoCPP, propscnt_),
  };
  assistInfoCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      assistInfoCPP_descriptor_,
      assistInfoCPP::default_instance_,
      assistInfoCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assistInfoCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assistInfoCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(assistInfoCPP));
  assistGrade_descriptor_ = file->message_type(1);
  static const int assistGrade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assistGrade, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assistGrade, cash_),
  };
  assistGrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      assistGrade_descriptor_,
      assistGrade::default_instance_,
      assistGrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assistGrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(assistGrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(assistGrade));
  UseAssistorReq_descriptor_ = file->message_type(2);
  static const int UseAssistorReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseAssistorReq, assistinfo_),
  };
  UseAssistorReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseAssistorReq_descriptor_,
      UseAssistorReq::default_instance_,
      UseAssistorReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseAssistorReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseAssistorReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseAssistorReq));
  UseAssistorResp_descriptor_ = file->message_type(3);
  static const int UseAssistorResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseAssistorResp, startts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseAssistorResp, commons_),
  };
  UseAssistorResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseAssistorResp_descriptor_,
      UseAssistorResp::default_instance_,
      UseAssistorResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseAssistorResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseAssistorResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseAssistorResp));
  OpenAssistorReq_descriptor_ = file->message_type(4);
  static const int OpenAssistorReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAssistorReq, grade_),
  };
  OpenAssistorReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenAssistorReq_descriptor_,
      OpenAssistorReq::default_instance_,
      OpenAssistorReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAssistorReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAssistorReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenAssistorReq));
  OpenAssistorResp_descriptor_ = file->message_type(5);
  static const int OpenAssistorResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAssistorResp, endts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAssistorResp, commons_),
  };
  OpenAssistorResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenAssistorResp_descriptor_,
      OpenAssistorResp::default_instance_,
      OpenAssistorResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAssistorResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAssistorResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenAssistorResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoAssistor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    assistInfoCPP_descriptor_, &assistInfoCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    assistGrade_descriptor_, &assistGrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseAssistorReq_descriptor_, &UseAssistorReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseAssistorResp_descriptor_, &UseAssistorResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenAssistorReq_descriptor_, &OpenAssistorReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenAssistorResp_descriptor_, &OpenAssistorResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoAssistor_2eproto() {
  delete assistInfoCPP::default_instance_;
  delete assistInfoCPP_reflection_;
  delete assistGrade::default_instance_;
  delete assistGrade_reflection_;
  delete UseAssistorReq::default_instance_;
  delete UseAssistorReq_reflection_;
  delete UseAssistorResp::default_instance_;
  delete UseAssistorResp_reflection_;
  delete OpenAssistorReq::default_instance_;
  delete OpenAssistorReq_reflection_;
  delete OpenAssistorResp::default_instance_;
  delete OpenAssistorResp_reflection_;
}

void protobuf_AddDesc_ProtoAssistor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ProtoAssistor.proto\022\rProtoAssistor\032\020Da"
    "taCommon.proto\"A\n\rassistInfoCPP\022\r\n\005level"
    "\030\001 \002(\r\022\017\n\007propsId\030\002 \002(\r\022\020\n\010propsCnt\030\003 \002("
    "\r\"*\n\013assistGrade\022\r\n\005times\030\001 \002(\r\022\014\n\004cash\030"
    "\002 \002(\r\"B\n\016UseAssistorReq\0220\n\nassistInfo\030\001 "
    "\002(\0132\034.ProtoAssistor.assistInfoCPP\"O\n\017Use"
    "AssistorResp\022\017\n\007startTs\030\001 \002(\r\022+\n\007commons"
    "\030\002 \002(\0132\032.DataCommon.CommonItemsCPP\" \n\017Op"
    "enAssistorReq\022\r\n\005grade\030\001 \002(\r\"N\n\020OpenAssi"
    "storResp\022\r\n\005endTs\030\001 \002(\r\022+\n\007commons\030\002 \001(\013"
    "2\032.DataCommon.CommonItemsCPP", 428);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoAssistor.proto", &protobuf_RegisterTypes);
  assistInfoCPP::default_instance_ = new assistInfoCPP();
  assistGrade::default_instance_ = new assistGrade();
  UseAssistorReq::default_instance_ = new UseAssistorReq();
  UseAssistorResp::default_instance_ = new UseAssistorResp();
  OpenAssistorReq::default_instance_ = new OpenAssistorReq();
  OpenAssistorResp::default_instance_ = new OpenAssistorResp();
  assistInfoCPP::default_instance_->InitAsDefaultInstance();
  assistGrade::default_instance_->InitAsDefaultInstance();
  UseAssistorReq::default_instance_->InitAsDefaultInstance();
  UseAssistorResp::default_instance_->InitAsDefaultInstance();
  OpenAssistorReq::default_instance_->InitAsDefaultInstance();
  OpenAssistorResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoAssistor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoAssistor_2eproto {
  StaticDescriptorInitializer_ProtoAssistor_2eproto() {
    protobuf_AddDesc_ProtoAssistor_2eproto();
  }
} static_descriptor_initializer_ProtoAssistor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int assistInfoCPP::kLevelFieldNumber;
const int assistInfoCPP::kPropsIdFieldNumber;
const int assistInfoCPP::kPropsCntFieldNumber;
#endif  // !_MSC_VER

assistInfoCPP::assistInfoCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAssistor.assistInfoCPP)
}

void assistInfoCPP::InitAsDefaultInstance() {
}

assistInfoCPP::assistInfoCPP(const assistInfoCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAssistor.assistInfoCPP)
}

void assistInfoCPP::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  propsid_ = 0u;
  propscnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

assistInfoCPP::~assistInfoCPP() {
  // @@protoc_insertion_point(destructor:ProtoAssistor.assistInfoCPP)
  SharedDtor();
}

void assistInfoCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void assistInfoCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* assistInfoCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return assistInfoCPP_descriptor_;
}

const assistInfoCPP& assistInfoCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAssistor_2eproto();
  return *default_instance_;
}

assistInfoCPP* assistInfoCPP::default_instance_ = NULL;

assistInfoCPP* assistInfoCPP::New() const {
  return new assistInfoCPP;
}

void assistInfoCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<assistInfoCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(level_, propscnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool assistInfoCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAssistor.assistInfoCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsId;
        break;
      }

      // required uint32 propsId = 2;
      case 2: {
        if (tag == 16) {
         parse_propsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_propsCnt;
        break;
      }

      // required uint32 propsCnt = 3;
      case 3: {
        if (tag == 24) {
         parse_propsCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propscnt_)));
          set_has_propscnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAssistor.assistInfoCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAssistor.assistInfoCPP)
  return false;
#undef DO_
}

void assistInfoCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAssistor.assistInfoCPP)
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required uint32 propsId = 2;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propsid(), output);
  }

  // required uint32 propsCnt = 3;
  if (has_propscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->propscnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAssistor.assistInfoCPP)
}

::google::protobuf::uint8* assistInfoCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAssistor.assistInfoCPP)
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required uint32 propsId = 2;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propsid(), target);
  }

  // required uint32 propsCnt = 3;
  if (has_propscnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->propscnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAssistor.assistInfoCPP)
  return target;
}

int assistInfoCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 propsId = 2;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 propsCnt = 3;
    if (has_propscnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propscnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void assistInfoCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const assistInfoCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const assistInfoCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void assistInfoCPP::MergeFrom(const assistInfoCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_propscnt()) {
      set_propscnt(from.propscnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void assistInfoCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void assistInfoCPP::CopyFrom(const assistInfoCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool assistInfoCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void assistInfoCPP::Swap(assistInfoCPP* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(propsid_, other->propsid_);
    std::swap(propscnt_, other->propscnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata assistInfoCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = assistInfoCPP_descriptor_;
  metadata.reflection = assistInfoCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int assistGrade::kTimesFieldNumber;
const int assistGrade::kCashFieldNumber;
#endif  // !_MSC_VER

assistGrade::assistGrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAssistor.assistGrade)
}

void assistGrade::InitAsDefaultInstance() {
}

assistGrade::assistGrade(const assistGrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAssistor.assistGrade)
}

void assistGrade::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0u;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

assistGrade::~assistGrade() {
  // @@protoc_insertion_point(destructor:ProtoAssistor.assistGrade)
  SharedDtor();
}

void assistGrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void assistGrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* assistGrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return assistGrade_descriptor_;
}

const assistGrade& assistGrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAssistor_2eproto();
  return *default_instance_;
}

assistGrade* assistGrade::default_instance_ = NULL;

assistGrade* assistGrade::New() const {
  return new assistGrade;
}

void assistGrade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<assistGrade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(times_, cash_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool assistGrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAssistor.assistGrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 times = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash;
        break;
      }

      // required uint32 cash = 2;
      case 2: {
        if (tag == 16) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAssistor.assistGrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAssistor.assistGrade)
  return false;
#undef DO_
}

void assistGrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAssistor.assistGrade)
  // required uint32 times = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->times(), output);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAssistor.assistGrade)
}

::google::protobuf::uint8* assistGrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAssistor.assistGrade)
  // required uint32 times = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->times(), target);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAssistor.assistGrade)
  return target;
}

int assistGrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 times = 1;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // required uint32 cash = 2;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void assistGrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const assistGrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const assistGrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void assistGrade::MergeFrom(const assistGrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void assistGrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void assistGrade::CopyFrom(const assistGrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool assistGrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void assistGrade::Swap(assistGrade* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata assistGrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = assistGrade_descriptor_;
  metadata.reflection = assistGrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseAssistorReq::kAssistInfoFieldNumber;
#endif  // !_MSC_VER

UseAssistorReq::UseAssistorReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAssistor.UseAssistorReq)
}

void UseAssistorReq::InitAsDefaultInstance() {
  assistinfo_ = const_cast< ::ProtoAssistor::assistInfoCPP*>(&::ProtoAssistor::assistInfoCPP::default_instance());
}

UseAssistorReq::UseAssistorReq(const UseAssistorReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAssistor.UseAssistorReq)
}

void UseAssistorReq::SharedCtor() {
  _cached_size_ = 0;
  assistinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseAssistorReq::~UseAssistorReq() {
  // @@protoc_insertion_point(destructor:ProtoAssistor.UseAssistorReq)
  SharedDtor();
}

void UseAssistorReq::SharedDtor() {
  if (this != default_instance_) {
    delete assistinfo_;
  }
}

void UseAssistorReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseAssistorReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseAssistorReq_descriptor_;
}

const UseAssistorReq& UseAssistorReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAssistor_2eproto();
  return *default_instance_;
}

UseAssistorReq* UseAssistorReq::default_instance_ = NULL;

UseAssistorReq* UseAssistorReq::New() const {
  return new UseAssistorReq;
}

void UseAssistorReq::Clear() {
  if (has_assistinfo()) {
    if (assistinfo_ != NULL) assistinfo_->::ProtoAssistor::assistInfoCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseAssistorReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAssistor.UseAssistorReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoAssistor.assistInfoCPP assistInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assistinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAssistor.UseAssistorReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAssistor.UseAssistorReq)
  return false;
#undef DO_
}

void UseAssistorReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAssistor.UseAssistorReq)
  // required .ProtoAssistor.assistInfoCPP assistInfo = 1;
  if (has_assistinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assistinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAssistor.UseAssistorReq)
}

::google::protobuf::uint8* UseAssistorReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAssistor.UseAssistorReq)
  // required .ProtoAssistor.assistInfoCPP assistInfo = 1;
  if (has_assistinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->assistinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAssistor.UseAssistorReq)
  return target;
}

int UseAssistorReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoAssistor.assistInfoCPP assistInfo = 1;
    if (has_assistinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->assistinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseAssistorReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseAssistorReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseAssistorReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseAssistorReq::MergeFrom(const UseAssistorReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assistinfo()) {
      mutable_assistinfo()->::ProtoAssistor::assistInfoCPP::MergeFrom(from.assistinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseAssistorReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseAssistorReq::CopyFrom(const UseAssistorReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseAssistorReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_assistinfo()) {
    if (!this->assistinfo().IsInitialized()) return false;
  }
  return true;
}

void UseAssistorReq::Swap(UseAssistorReq* other) {
  if (other != this) {
    std::swap(assistinfo_, other->assistinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseAssistorReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseAssistorReq_descriptor_;
  metadata.reflection = UseAssistorReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseAssistorResp::kStartTsFieldNumber;
const int UseAssistorResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

UseAssistorResp::UseAssistorResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAssistor.UseAssistorResp)
}

void UseAssistorResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

UseAssistorResp::UseAssistorResp(const UseAssistorResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAssistor.UseAssistorResp)
}

void UseAssistorResp::SharedCtor() {
  _cached_size_ = 0;
  startts_ = 0u;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseAssistorResp::~UseAssistorResp() {
  // @@protoc_insertion_point(destructor:ProtoAssistor.UseAssistorResp)
  SharedDtor();
}

void UseAssistorResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void UseAssistorResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseAssistorResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseAssistorResp_descriptor_;
}

const UseAssistorResp& UseAssistorResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAssistor_2eproto();
  return *default_instance_;
}

UseAssistorResp* UseAssistorResp::default_instance_ = NULL;

UseAssistorResp* UseAssistorResp::New() const {
  return new UseAssistorResp;
}

void UseAssistorResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    startts_ = 0u;
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseAssistorResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAssistor.UseAssistorResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 startTs = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startts_)));
          set_has_startts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAssistor.UseAssistorResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAssistor.UseAssistorResp)
  return false;
#undef DO_
}

void UseAssistorResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAssistor.UseAssistorResp)
  // required uint32 startTs = 1;
  if (has_startts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startts(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAssistor.UseAssistorResp)
}

::google::protobuf::uint8* UseAssistorResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAssistor.UseAssistorResp)
  // required uint32 startTs = 1;
  if (has_startts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startts(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAssistor.UseAssistorResp)
  return target;
}

int UseAssistorResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 startTs = 1;
    if (has_startts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startts());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseAssistorResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseAssistorResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseAssistorResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseAssistorResp::MergeFrom(const UseAssistorResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startts()) {
      set_startts(from.startts());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseAssistorResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseAssistorResp::CopyFrom(const UseAssistorResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseAssistorResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void UseAssistorResp::Swap(UseAssistorResp* other) {
  if (other != this) {
    std::swap(startts_, other->startts_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseAssistorResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseAssistorResp_descriptor_;
  metadata.reflection = UseAssistorResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenAssistorReq::kGradeFieldNumber;
#endif  // !_MSC_VER

OpenAssistorReq::OpenAssistorReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAssistor.OpenAssistorReq)
}

void OpenAssistorReq::InitAsDefaultInstance() {
}

OpenAssistorReq::OpenAssistorReq(const OpenAssistorReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAssistor.OpenAssistorReq)
}

void OpenAssistorReq::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenAssistorReq::~OpenAssistorReq() {
  // @@protoc_insertion_point(destructor:ProtoAssistor.OpenAssistorReq)
  SharedDtor();
}

void OpenAssistorReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenAssistorReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenAssistorReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenAssistorReq_descriptor_;
}

const OpenAssistorReq& OpenAssistorReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAssistor_2eproto();
  return *default_instance_;
}

OpenAssistorReq* OpenAssistorReq::default_instance_ = NULL;

OpenAssistorReq* OpenAssistorReq::New() const {
  return new OpenAssistorReq;
}

void OpenAssistorReq::Clear() {
  grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenAssistorReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAssistor.OpenAssistorReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grade = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAssistor.OpenAssistorReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAssistor.OpenAssistorReq)
  return false;
#undef DO_
}

void OpenAssistorReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAssistor.OpenAssistorReq)
  // required uint32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAssistor.OpenAssistorReq)
}

::google::protobuf::uint8* OpenAssistorReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAssistor.OpenAssistorReq)
  // required uint32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAssistor.OpenAssistorReq)
  return target;
}

int OpenAssistorReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenAssistorReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenAssistorReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenAssistorReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenAssistorReq::MergeFrom(const OpenAssistorReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenAssistorReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenAssistorReq::CopyFrom(const OpenAssistorReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenAssistorReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OpenAssistorReq::Swap(OpenAssistorReq* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenAssistorReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenAssistorReq_descriptor_;
  metadata.reflection = OpenAssistorReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenAssistorResp::kEndTsFieldNumber;
const int OpenAssistorResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

OpenAssistorResp::OpenAssistorResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAssistor.OpenAssistorResp)
}

void OpenAssistorResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

OpenAssistorResp::OpenAssistorResp(const OpenAssistorResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAssistor.OpenAssistorResp)
}

void OpenAssistorResp::SharedCtor() {
  _cached_size_ = 0;
  endts_ = 0u;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenAssistorResp::~OpenAssistorResp() {
  // @@protoc_insertion_point(destructor:ProtoAssistor.OpenAssistorResp)
  SharedDtor();
}

void OpenAssistorResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void OpenAssistorResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenAssistorResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenAssistorResp_descriptor_;
}

const OpenAssistorResp& OpenAssistorResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAssistor_2eproto();
  return *default_instance_;
}

OpenAssistorResp* OpenAssistorResp::default_instance_ = NULL;

OpenAssistorResp* OpenAssistorResp::New() const {
  return new OpenAssistorResp;
}

void OpenAssistorResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    endts_ = 0u;
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenAssistorResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAssistor.OpenAssistorResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 endTs = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endts_)));
          set_has_endts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAssistor.OpenAssistorResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAssistor.OpenAssistorResp)
  return false;
#undef DO_
}

void OpenAssistorResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAssistor.OpenAssistorResp)
  // required uint32 endTs = 1;
  if (has_endts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->endts(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAssistor.OpenAssistorResp)
}

::google::protobuf::uint8* OpenAssistorResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAssistor.OpenAssistorResp)
  // required uint32 endTs = 1;
  if (has_endts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->endts(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAssistor.OpenAssistorResp)
  return target;
}

int OpenAssistorResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 endTs = 1;
    if (has_endts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endts());
    }

    // optional .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenAssistorResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenAssistorResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenAssistorResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenAssistorResp::MergeFrom(const OpenAssistorResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_endts()) {
      set_endts(from.endts());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenAssistorResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenAssistorResp::CopyFrom(const OpenAssistorResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenAssistorResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void OpenAssistorResp::Swap(OpenAssistorResp* other) {
  if (other != this) {
    std::swap(endts_, other->endts_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenAssistorResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenAssistorResp_descriptor_;
  metadata.reflection = OpenAssistorResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoAssistor

// @@protoc_insertion_point(global_scope)
