// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoAccessAd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoAccessAd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoAccessAd {

namespace {

const ::google::protobuf::Descriptor* RewardViewAdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardViewAdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardViewAdResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardViewAdResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLastViewAdTsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLastViewAdTsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLastViewAdTsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLastViewAdTsResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallonCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallonCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBallonInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBallonInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBallonInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBallonInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonlViewAdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonlViewAdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonlViewAdResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonlViewAdResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScarecrowCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScarecrowCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetScarecrowInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetScarecrowInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetScarecrowInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetScarecrowInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScarecrowViewAdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScarecrowViewAdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScarecrowViewAdResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScarecrowViewAdResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoAccessAd_2eproto() {
  protobuf_AddDesc_ProtoAccessAd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoAccessAd.proto");
  GOOGLE_CHECK(file != NULL);
  RewardViewAdReq_descriptor_ = file->message_type(0);
  static const int RewardViewAdReq_offsets_[1] = {
  };
  RewardViewAdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardViewAdReq_descriptor_,
      RewardViewAdReq::default_instance_,
      RewardViewAdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardViewAdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardViewAdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardViewAdReq));
  RewardViewAdResp_descriptor_ = file->message_type(1);
  static const int RewardViewAdResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardViewAdResp, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardViewAdResp, commons_),
  };
  RewardViewAdResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardViewAdResp_descriptor_,
      RewardViewAdResp::default_instance_,
      RewardViewAdResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardViewAdResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardViewAdResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardViewAdResp));
  GetLastViewAdTsReq_descriptor_ = file->message_type(2);
  static const int GetLastViewAdTsReq_offsets_[1] = {
  };
  GetLastViewAdTsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLastViewAdTsReq_descriptor_,
      GetLastViewAdTsReq::default_instance_,
      GetLastViewAdTsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastViewAdTsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastViewAdTsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLastViewAdTsReq));
  GetLastViewAdTsResp_descriptor_ = file->message_type(3);
  static const int GetLastViewAdTsResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastViewAdTsResp, ts_),
  };
  GetLastViewAdTsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLastViewAdTsResp_descriptor_,
      GetLastViewAdTsResp::default_instance_,
      GetLastViewAdTsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastViewAdTsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastViewAdTsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLastViewAdTsResp));
  BallonCPP_descriptor_ = file->message_type(4);
  static const int BallonCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallonCPP, remaincnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallonCPP, nextts_),
  };
  BallonCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallonCPP_descriptor_,
      BallonCPP::default_instance_,
      BallonCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallonCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallonCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallonCPP));
  GetBallonInfoReq_descriptor_ = file->message_type(5);
  static const int GetBallonInfoReq_offsets_[1] = {
  };
  GetBallonInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBallonInfoReq_descriptor_,
      GetBallonInfoReq::default_instance_,
      GetBallonInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBallonInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBallonInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBallonInfoReq));
  GetBallonInfoResp_descriptor_ = file->message_type(6);
  static const int GetBallonInfoResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBallonInfoResp, ballon_),
  };
  GetBallonInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBallonInfoResp_descriptor_,
      GetBallonInfoResp::default_instance_,
      GetBallonInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBallonInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBallonInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBallonInfoResp));
  CommonlViewAdReq_descriptor_ = file->message_type(7);
  static const int CommonlViewAdReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonlViewAdReq, type_),
  };
  CommonlViewAdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonlViewAdReq_descriptor_,
      CommonlViewAdReq::default_instance_,
      CommonlViewAdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonlViewAdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonlViewAdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonlViewAdReq));
  CommonlViewAdResp_descriptor_ = file->message_type(8);
  static const int CommonlViewAdResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonlViewAdResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonlViewAdResp, ballon_),
  };
  CommonlViewAdResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonlViewAdResp_descriptor_,
      CommonlViewAdResp::default_instance_,
      CommonlViewAdResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonlViewAdResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonlViewAdResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonlViewAdResp));
  ScarecrowCPP_descriptor_ = file->message_type(9);
  static const int ScarecrowCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowCPP, remaincnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowCPP, workendts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowCPP, nextshowts_),
  };
  ScarecrowCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScarecrowCPP_descriptor_,
      ScarecrowCPP::default_instance_,
      ScarecrowCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScarecrowCPP));
  GetScarecrowInfoReq_descriptor_ = file->message_type(10);
  static const int GetScarecrowInfoReq_offsets_[1] = {
  };
  GetScarecrowInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetScarecrowInfoReq_descriptor_,
      GetScarecrowInfoReq::default_instance_,
      GetScarecrowInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScarecrowInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScarecrowInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetScarecrowInfoReq));
  GetScarecrowInfoResp_descriptor_ = file->message_type(11);
  static const int GetScarecrowInfoResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScarecrowInfoResp, scarecrow_),
  };
  GetScarecrowInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetScarecrowInfoResp_descriptor_,
      GetScarecrowInfoResp::default_instance_,
      GetScarecrowInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScarecrowInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScarecrowInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetScarecrowInfoResp));
  ScarecrowViewAdReq_descriptor_ = file->message_type(12);
  static const int ScarecrowViewAdReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowViewAdReq, iscostdimaond_),
  };
  ScarecrowViewAdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScarecrowViewAdReq_descriptor_,
      ScarecrowViewAdReq::default_instance_,
      ScarecrowViewAdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowViewAdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowViewAdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScarecrowViewAdReq));
  ScarecrowViewAdResp_descriptor_ = file->message_type(13);
  static const int ScarecrowViewAdResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowViewAdResp, scarecrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowViewAdResp, cropland_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowViewAdResp, commons_),
  };
  ScarecrowViewAdResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScarecrowViewAdResp_descriptor_,
      ScarecrowViewAdResp::default_instance_,
      ScarecrowViewAdResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowViewAdResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScarecrowViewAdResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScarecrowViewAdResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoAccessAd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardViewAdReq_descriptor_, &RewardViewAdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardViewAdResp_descriptor_, &RewardViewAdResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLastViewAdTsReq_descriptor_, &GetLastViewAdTsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLastViewAdTsResp_descriptor_, &GetLastViewAdTsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallonCPP_descriptor_, &BallonCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBallonInfoReq_descriptor_, &GetBallonInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBallonInfoResp_descriptor_, &GetBallonInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonlViewAdReq_descriptor_, &CommonlViewAdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonlViewAdResp_descriptor_, &CommonlViewAdResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScarecrowCPP_descriptor_, &ScarecrowCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetScarecrowInfoReq_descriptor_, &GetScarecrowInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetScarecrowInfoResp_descriptor_, &GetScarecrowInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScarecrowViewAdReq_descriptor_, &ScarecrowViewAdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScarecrowViewAdResp_descriptor_, &ScarecrowViewAdResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoAccessAd_2eproto() {
  delete RewardViewAdReq::default_instance_;
  delete RewardViewAdReq_reflection_;
  delete RewardViewAdResp::default_instance_;
  delete RewardViewAdResp_reflection_;
  delete GetLastViewAdTsReq::default_instance_;
  delete GetLastViewAdTsReq_reflection_;
  delete GetLastViewAdTsResp::default_instance_;
  delete GetLastViewAdTsResp_reflection_;
  delete BallonCPP::default_instance_;
  delete BallonCPP_reflection_;
  delete GetBallonInfoReq::default_instance_;
  delete GetBallonInfoReq_reflection_;
  delete GetBallonInfoResp::default_instance_;
  delete GetBallonInfoResp_reflection_;
  delete CommonlViewAdReq::default_instance_;
  delete CommonlViewAdReq_reflection_;
  delete CommonlViewAdResp::default_instance_;
  delete CommonlViewAdResp_reflection_;
  delete ScarecrowCPP::default_instance_;
  delete ScarecrowCPP_reflection_;
  delete GetScarecrowInfoReq::default_instance_;
  delete GetScarecrowInfoReq_reflection_;
  delete GetScarecrowInfoResp::default_instance_;
  delete GetScarecrowInfoResp_reflection_;
  delete ScarecrowViewAdReq::default_instance_;
  delete ScarecrowViewAdReq_reflection_;
  delete ScarecrowViewAdResp::default_instance_;
  delete ScarecrowViewAdResp_reflection_;
}

void protobuf_AddDesc_ProtoAccessAd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::ProtoProduce::protobuf_AddDesc_ProtoProduce_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ProtoAccessAd.proto\022\rProtoAccessAd\032\020Da"
    "taCommon.proto\032\022ProtoProduce.proto\"\021\n\017Re"
    "wardViewAdReq\"K\n\020RewardViewAdResp\022\n\n\002ts\030"
    "\001 \002(\r\022+\n\007commons\030\002 \002(\0132\032.DataCommon.Comm"
    "onItemsCPP\"\024\n\022GetLastViewAdTsReq\"!\n\023GetL"
    "astViewAdTsResp\022\n\n\002ts\030\001 \002(\r\".\n\tBallonCPP"
    "\022\021\n\tremainCnt\030\001 \002(\r\022\016\n\006nextTs\030\002 \002(\r\"\022\n\020G"
    "etBallonInfoReq\"=\n\021GetBallonInfoResp\022(\n\006"
    "ballon\030\001 \002(\0132\030.ProtoAccessAd.BallonCPP\" "
    "\n\020CommonlViewAdReq\022\014\n\004type\030\001 \002(\r\"j\n\021Comm"
    "onlViewAdResp\022+\n\007commons\030\001 \002(\0132\032.DataCom"
    "mon.CommonItemsCPP\022(\n\006ballon\030\002 \001(\0132\030.Pro"
    "toAccessAd.BallonCPP\"H\n\014ScarecrowCPP\022\021\n\t"
    "remainCnt\030\001 \002(\r\022\021\n\tworkEndTs\030\002 \002(\r\022\022\n\nne"
    "xtShowTs\030\003 \002(\r\"\025\n\023GetScarecrowInfoReq\"F\n"
    "\024GetScarecrowInfoResp\022.\n\tscarecrow\030\001 \002(\013"
    "2\033.ProtoAccessAd.ScarecrowCPP\"+\n\022Scarecr"
    "owViewAdReq\022\025\n\risCostDimaond\030\001 \001(\r\"\237\001\n\023S"
    "carecrowViewAdResp\022.\n\tscarecrow\030\001 \002(\0132\033."
    "ProtoAccessAd.ScarecrowCPP\022+\n\010cropland\030\002"
    " \003(\0132\031.ProtoProduce.CropLandCPP\022+\n\007commo"
    "ns\030\003 \001(\0132\032.DataCommon.CommonItemsCPP", 876);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoAccessAd.proto", &protobuf_RegisterTypes);
  RewardViewAdReq::default_instance_ = new RewardViewAdReq();
  RewardViewAdResp::default_instance_ = new RewardViewAdResp();
  GetLastViewAdTsReq::default_instance_ = new GetLastViewAdTsReq();
  GetLastViewAdTsResp::default_instance_ = new GetLastViewAdTsResp();
  BallonCPP::default_instance_ = new BallonCPP();
  GetBallonInfoReq::default_instance_ = new GetBallonInfoReq();
  GetBallonInfoResp::default_instance_ = new GetBallonInfoResp();
  CommonlViewAdReq::default_instance_ = new CommonlViewAdReq();
  CommonlViewAdResp::default_instance_ = new CommonlViewAdResp();
  ScarecrowCPP::default_instance_ = new ScarecrowCPP();
  GetScarecrowInfoReq::default_instance_ = new GetScarecrowInfoReq();
  GetScarecrowInfoResp::default_instance_ = new GetScarecrowInfoResp();
  ScarecrowViewAdReq::default_instance_ = new ScarecrowViewAdReq();
  ScarecrowViewAdResp::default_instance_ = new ScarecrowViewAdResp();
  RewardViewAdReq::default_instance_->InitAsDefaultInstance();
  RewardViewAdResp::default_instance_->InitAsDefaultInstance();
  GetLastViewAdTsReq::default_instance_->InitAsDefaultInstance();
  GetLastViewAdTsResp::default_instance_->InitAsDefaultInstance();
  BallonCPP::default_instance_->InitAsDefaultInstance();
  GetBallonInfoReq::default_instance_->InitAsDefaultInstance();
  GetBallonInfoResp::default_instance_->InitAsDefaultInstance();
  CommonlViewAdReq::default_instance_->InitAsDefaultInstance();
  CommonlViewAdResp::default_instance_->InitAsDefaultInstance();
  ScarecrowCPP::default_instance_->InitAsDefaultInstance();
  GetScarecrowInfoReq::default_instance_->InitAsDefaultInstance();
  GetScarecrowInfoResp::default_instance_->InitAsDefaultInstance();
  ScarecrowViewAdReq::default_instance_->InitAsDefaultInstance();
  ScarecrowViewAdResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoAccessAd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoAccessAd_2eproto {
  StaticDescriptorInitializer_ProtoAccessAd_2eproto() {
    protobuf_AddDesc_ProtoAccessAd_2eproto();
  }
} static_descriptor_initializer_ProtoAccessAd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RewardViewAdReq::RewardViewAdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAccessAd.RewardViewAdReq)
}

void RewardViewAdReq::InitAsDefaultInstance() {
}

RewardViewAdReq::RewardViewAdReq(const RewardViewAdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAccessAd.RewardViewAdReq)
}

void RewardViewAdReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardViewAdReq::~RewardViewAdReq() {
  // @@protoc_insertion_point(destructor:ProtoAccessAd.RewardViewAdReq)
  SharedDtor();
}

void RewardViewAdReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardViewAdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardViewAdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardViewAdReq_descriptor_;
}

const RewardViewAdReq& RewardViewAdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAccessAd_2eproto();
  return *default_instance_;
}

RewardViewAdReq* RewardViewAdReq::default_instance_ = NULL;

RewardViewAdReq* RewardViewAdReq::New() const {
  return new RewardViewAdReq;
}

void RewardViewAdReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardViewAdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAccessAd.RewardViewAdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAccessAd.RewardViewAdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAccessAd.RewardViewAdReq)
  return false;
#undef DO_
}

void RewardViewAdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAccessAd.RewardViewAdReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAccessAd.RewardViewAdReq)
}

::google::protobuf::uint8* RewardViewAdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAccessAd.RewardViewAdReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAccessAd.RewardViewAdReq)
  return target;
}

int RewardViewAdReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardViewAdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardViewAdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardViewAdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardViewAdReq::MergeFrom(const RewardViewAdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardViewAdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardViewAdReq::CopyFrom(const RewardViewAdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardViewAdReq::IsInitialized() const {

  return true;
}

void RewardViewAdReq::Swap(RewardViewAdReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardViewAdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardViewAdReq_descriptor_;
  metadata.reflection = RewardViewAdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardViewAdResp::kTsFieldNumber;
const int RewardViewAdResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

RewardViewAdResp::RewardViewAdResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAccessAd.RewardViewAdResp)
}

void RewardViewAdResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

RewardViewAdResp::RewardViewAdResp(const RewardViewAdResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAccessAd.RewardViewAdResp)
}

void RewardViewAdResp::SharedCtor() {
  _cached_size_ = 0;
  ts_ = 0u;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardViewAdResp::~RewardViewAdResp() {
  // @@protoc_insertion_point(destructor:ProtoAccessAd.RewardViewAdResp)
  SharedDtor();
}

void RewardViewAdResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void RewardViewAdResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardViewAdResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardViewAdResp_descriptor_;
}

const RewardViewAdResp& RewardViewAdResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAccessAd_2eproto();
  return *default_instance_;
}

RewardViewAdResp* RewardViewAdResp::default_instance_ = NULL;

RewardViewAdResp* RewardViewAdResp::New() const {
  return new RewardViewAdResp;
}

void RewardViewAdResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    ts_ = 0u;
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardViewAdResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAccessAd.RewardViewAdResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAccessAd.RewardViewAdResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAccessAd.RewardViewAdResp)
  return false;
#undef DO_
}

void RewardViewAdResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAccessAd.RewardViewAdResp)
  // required uint32 ts = 1;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ts(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAccessAd.RewardViewAdResp)
}

::google::protobuf::uint8* RewardViewAdResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAccessAd.RewardViewAdResp)
  // required uint32 ts = 1;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ts(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAccessAd.RewardViewAdResp)
  return target;
}

int RewardViewAdResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ts = 1;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardViewAdResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardViewAdResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardViewAdResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardViewAdResp::MergeFrom(const RewardViewAdResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardViewAdResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardViewAdResp::CopyFrom(const RewardViewAdResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardViewAdResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void RewardViewAdResp::Swap(RewardViewAdResp* other) {
  if (other != this) {
    std::swap(ts_, other->ts_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardViewAdResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardViewAdResp_descriptor_;
  metadata.reflection = RewardViewAdResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetLastViewAdTsReq::GetLastViewAdTsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAccessAd.GetLastViewAdTsReq)
}

void GetLastViewAdTsReq::InitAsDefaultInstance() {
}

GetLastViewAdTsReq::GetLastViewAdTsReq(const GetLastViewAdTsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAccessAd.GetLastViewAdTsReq)
}

void GetLastViewAdTsReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLastViewAdTsReq::~GetLastViewAdTsReq() {
  // @@protoc_insertion_point(destructor:ProtoAccessAd.GetLastViewAdTsReq)
  SharedDtor();
}

void GetLastViewAdTsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLastViewAdTsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLastViewAdTsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLastViewAdTsReq_descriptor_;
}

const GetLastViewAdTsReq& GetLastViewAdTsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAccessAd_2eproto();
  return *default_instance_;
}

GetLastViewAdTsReq* GetLastViewAdTsReq::default_instance_ = NULL;

GetLastViewAdTsReq* GetLastViewAdTsReq::New() const {
  return new GetLastViewAdTsReq;
}

void GetLastViewAdTsReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLastViewAdTsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAccessAd.GetLastViewAdTsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAccessAd.GetLastViewAdTsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAccessAd.GetLastViewAdTsReq)
  return false;
#undef DO_
}

void GetLastViewAdTsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAccessAd.GetLastViewAdTsReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAccessAd.GetLastViewAdTsReq)
}

::google::protobuf::uint8* GetLastViewAdTsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAccessAd.GetLastViewAdTsReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAccessAd.GetLastViewAdTsReq)
  return target;
}

int GetLastViewAdTsReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLastViewAdTsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLastViewAdTsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLastViewAdTsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLastViewAdTsReq::MergeFrom(const GetLastViewAdTsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLastViewAdTsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastViewAdTsReq::CopyFrom(const GetLastViewAdTsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastViewAdTsReq::IsInitialized() const {

  return true;
}

void GetLastViewAdTsReq::Swap(GetLastViewAdTsReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLastViewAdTsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLastViewAdTsReq_descriptor_;
  metadata.reflection = GetLastViewAdTsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLastViewAdTsResp::kTsFieldNumber;
#endif  // !_MSC_VER

GetLastViewAdTsResp::GetLastViewAdTsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAccessAd.GetLastViewAdTsResp)
}

void GetLastViewAdTsResp::InitAsDefaultInstance() {
}

GetLastViewAdTsResp::GetLastViewAdTsResp(const GetLastViewAdTsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAccessAd.GetLastViewAdTsResp)
}

void GetLastViewAdTsResp::SharedCtor() {
  _cached_size_ = 0;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLastViewAdTsResp::~GetLastViewAdTsResp() {
  // @@protoc_insertion_point(destructor:ProtoAccessAd.GetLastViewAdTsResp)
  SharedDtor();
}

void GetLastViewAdTsResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLastViewAdTsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLastViewAdTsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLastViewAdTsResp_descriptor_;
}

const GetLastViewAdTsResp& GetLastViewAdTsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAccessAd_2eproto();
  return *default_instance_;
}

GetLastViewAdTsResp* GetLastViewAdTsResp::default_instance_ = NULL;

GetLastViewAdTsResp* GetLastViewAdTsResp::New() const {
  return new GetLastViewAdTsResp;
}

void GetLastViewAdTsResp::Clear() {
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLastViewAdTsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAccessAd.GetLastViewAdTsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAccessAd.GetLastViewAdTsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAccessAd.GetLastViewAdTsResp)
  return false;
#undef DO_
}

void GetLastViewAdTsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAccessAd.GetLastViewAdTsResp)
  // required uint32 ts = 1;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAccessAd.GetLastViewAdTsResp)
}

::google::protobuf::uint8* GetLastViewAdTsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAccessAd.GetLastViewAdTsResp)
  // required uint32 ts = 1;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAccessAd.GetLastViewAdTsResp)
  return target;
}

int GetLastViewAdTsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ts = 1;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLastViewAdTsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLastViewAdTsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLastViewAdTsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLastViewAdTsResp::MergeFrom(const GetLastViewAdTsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLastViewAdTsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastViewAdTsResp::CopyFrom(const GetLastViewAdTsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastViewAdTsResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetLastViewAdTsResp::Swap(GetLastViewAdTsResp* other) {
  if (other != this) {
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLastViewAdTsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLastViewAdTsResp_descriptor_;
  metadata.reflection = GetLastViewAdTsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallonCPP::kRemainCntFieldNumber;
const int BallonCPP::kNextTsFieldNumber;
#endif  // !_MSC_VER

BallonCPP::BallonCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAccessAd.BallonCPP)
}

void BallonCPP::InitAsDefaultInstance() {
}

BallonCPP::BallonCPP(const BallonCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAccessAd.BallonCPP)
}

void BallonCPP::SharedCtor() {
  _cached_size_ = 0;
  remaincnt_ = 0u;
  nextts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallonCPP::~BallonCPP() {
  // @@protoc_insertion_point(destructor:ProtoAccessAd.BallonCPP)
  SharedDtor();
}

void BallonCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BallonCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallonCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallonCPP_descriptor_;
}

const BallonCPP& BallonCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAccessAd_2eproto();
  return *default_instance_;
}

BallonCPP* BallonCPP::default_instance_ = NULL;

BallonCPP* BallonCPP::New() const {
  return new BallonCPP;
}

void BallonCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BallonCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(remaincnt_, nextts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallonCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAccessAd.BallonCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 remainCnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaincnt_)));
          set_has_remaincnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nextTs;
        break;
      }

      // required uint32 nextTs = 2;
      case 2: {
        if (tag == 16) {
         parse_nextTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextts_)));
          set_has_nextts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAccessAd.BallonCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAccessAd.BallonCPP)
  return false;
#undef DO_
}

void BallonCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAccessAd.BallonCPP)
  // required uint32 remainCnt = 1;
  if (has_remaincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remaincnt(), output);
  }

  // required uint32 nextTs = 2;
  if (has_nextts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nextts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAccessAd.BallonCPP)
}

::google::protobuf::uint8* BallonCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAccessAd.BallonCPP)
  // required uint32 remainCnt = 1;
  if (has_remaincnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remaincnt(), target);
  }

  // required uint32 nextTs = 2;
  if (has_nextts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nextts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAccessAd.BallonCPP)
  return target;
}

int BallonCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 remainCnt = 1;
    if (has_remaincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaincnt());
    }

    // required uint32 nextTs = 2;
    if (has_nextts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallonCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallonCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallonCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallonCPP::MergeFrom(const BallonCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remaincnt()) {
      set_remaincnt(from.remaincnt());
    }
    if (from.has_nextts()) {
      set_nextts(from.nextts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallonCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallonCPP::CopyFrom(const BallonCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallonCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BallonCPP::Swap(BallonCPP* other) {
  if (other != this) {
    std::swap(remaincnt_, other->remaincnt_);
    std::swap(nextts_, other->nextts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallonCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallonCPP_descriptor_;
  metadata.reflection = BallonCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetBallonInfoReq::GetBallonInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAccessAd.GetBallonInfoReq)
}

void GetBallonInfoReq::InitAsDefaultInstance() {
}

GetBallonInfoReq::GetBallonInfoReq(const GetBallonInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAccessAd.GetBallonInfoReq)
}

void GetBallonInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBallonInfoReq::~GetBallonInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoAccessAd.GetBallonInfoReq)
  SharedDtor();
}

void GetBallonInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBallonInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBallonInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBallonInfoReq_descriptor_;
}

const GetBallonInfoReq& GetBallonInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAccessAd_2eproto();
  return *default_instance_;
}

GetBallonInfoReq* GetBallonInfoReq::default_instance_ = NULL;

GetBallonInfoReq* GetBallonInfoReq::New() const {
  return new GetBallonInfoReq;
}

void GetBallonInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBallonInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAccessAd.GetBallonInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAccessAd.GetBallonInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAccessAd.GetBallonInfoReq)
  return false;
#undef DO_
}

void GetBallonInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAccessAd.GetBallonInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAccessAd.GetBallonInfoReq)
}

::google::protobuf::uint8* GetBallonInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAccessAd.GetBallonInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAccessAd.GetBallonInfoReq)
  return target;
}

int GetBallonInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBallonInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBallonInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBallonInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBallonInfoReq::MergeFrom(const GetBallonInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBallonInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBallonInfoReq::CopyFrom(const GetBallonInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBallonInfoReq::IsInitialized() const {

  return true;
}

void GetBallonInfoReq::Swap(GetBallonInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBallonInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBallonInfoReq_descriptor_;
  metadata.reflection = GetBallonInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBallonInfoResp::kBallonFieldNumber;
#endif  // !_MSC_VER

GetBallonInfoResp::GetBallonInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAccessAd.GetBallonInfoResp)
}

void GetBallonInfoResp::InitAsDefaultInstance() {
  ballon_ = const_cast< ::ProtoAccessAd::BallonCPP*>(&::ProtoAccessAd::BallonCPP::default_instance());
}

GetBallonInfoResp::GetBallonInfoResp(const GetBallonInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAccessAd.GetBallonInfoResp)
}

void GetBallonInfoResp::SharedCtor() {
  _cached_size_ = 0;
  ballon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBallonInfoResp::~GetBallonInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoAccessAd.GetBallonInfoResp)
  SharedDtor();
}

void GetBallonInfoResp::SharedDtor() {
  if (this != default_instance_) {
    delete ballon_;
  }
}

void GetBallonInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBallonInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBallonInfoResp_descriptor_;
}

const GetBallonInfoResp& GetBallonInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAccessAd_2eproto();
  return *default_instance_;
}

GetBallonInfoResp* GetBallonInfoResp::default_instance_ = NULL;

GetBallonInfoResp* GetBallonInfoResp::New() const {
  return new GetBallonInfoResp;
}

void GetBallonInfoResp::Clear() {
  if (has_ballon()) {
    if (ballon_ != NULL) ballon_->::ProtoAccessAd::BallonCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBallonInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAccessAd.GetBallonInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoAccessAd.BallonCPP ballon = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ballon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAccessAd.GetBallonInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAccessAd.GetBallonInfoResp)
  return false;
#undef DO_
}

void GetBallonInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAccessAd.GetBallonInfoResp)
  // required .ProtoAccessAd.BallonCPP ballon = 1;
  if (has_ballon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ballon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAccessAd.GetBallonInfoResp)
}

::google::protobuf::uint8* GetBallonInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAccessAd.GetBallonInfoResp)
  // required .ProtoAccessAd.BallonCPP ballon = 1;
  if (has_ballon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ballon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAccessAd.GetBallonInfoResp)
  return target;
}

int GetBallonInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoAccessAd.BallonCPP ballon = 1;
    if (has_ballon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ballon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBallonInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBallonInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBallonInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBallonInfoResp::MergeFrom(const GetBallonInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ballon()) {
      mutable_ballon()->::ProtoAccessAd::BallonCPP::MergeFrom(from.ballon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBallonInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBallonInfoResp::CopyFrom(const GetBallonInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBallonInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ballon()) {
    if (!this->ballon().IsInitialized()) return false;
  }
  return true;
}

void GetBallonInfoResp::Swap(GetBallonInfoResp* other) {
  if (other != this) {
    std::swap(ballon_, other->ballon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBallonInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBallonInfoResp_descriptor_;
  metadata.reflection = GetBallonInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonlViewAdReq::kTypeFieldNumber;
#endif  // !_MSC_VER

CommonlViewAdReq::CommonlViewAdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAccessAd.CommonlViewAdReq)
}

void CommonlViewAdReq::InitAsDefaultInstance() {
}

CommonlViewAdReq::CommonlViewAdReq(const CommonlViewAdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAccessAd.CommonlViewAdReq)
}

void CommonlViewAdReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonlViewAdReq::~CommonlViewAdReq() {
  // @@protoc_insertion_point(destructor:ProtoAccessAd.CommonlViewAdReq)
  SharedDtor();
}

void CommonlViewAdReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonlViewAdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonlViewAdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonlViewAdReq_descriptor_;
}

const CommonlViewAdReq& CommonlViewAdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAccessAd_2eproto();
  return *default_instance_;
}

CommonlViewAdReq* CommonlViewAdReq::default_instance_ = NULL;

CommonlViewAdReq* CommonlViewAdReq::New() const {
  return new CommonlViewAdReq;
}

void CommonlViewAdReq::Clear() {
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonlViewAdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAccessAd.CommonlViewAdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAccessAd.CommonlViewAdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAccessAd.CommonlViewAdReq)
  return false;
#undef DO_
}

void CommonlViewAdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAccessAd.CommonlViewAdReq)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAccessAd.CommonlViewAdReq)
}

::google::protobuf::uint8* CommonlViewAdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAccessAd.CommonlViewAdReq)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAccessAd.CommonlViewAdReq)
  return target;
}

int CommonlViewAdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonlViewAdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonlViewAdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonlViewAdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonlViewAdReq::MergeFrom(const CommonlViewAdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonlViewAdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonlViewAdReq::CopyFrom(const CommonlViewAdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonlViewAdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CommonlViewAdReq::Swap(CommonlViewAdReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonlViewAdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonlViewAdReq_descriptor_;
  metadata.reflection = CommonlViewAdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonlViewAdResp::kCommonsFieldNumber;
const int CommonlViewAdResp::kBallonFieldNumber;
#endif  // !_MSC_VER

CommonlViewAdResp::CommonlViewAdResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAccessAd.CommonlViewAdResp)
}

void CommonlViewAdResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  ballon_ = const_cast< ::ProtoAccessAd::BallonCPP*>(&::ProtoAccessAd::BallonCPP::default_instance());
}

CommonlViewAdResp::CommonlViewAdResp(const CommonlViewAdResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAccessAd.CommonlViewAdResp)
}

void CommonlViewAdResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ballon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonlViewAdResp::~CommonlViewAdResp() {
  // @@protoc_insertion_point(destructor:ProtoAccessAd.CommonlViewAdResp)
  SharedDtor();
}

void CommonlViewAdResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete ballon_;
  }
}

void CommonlViewAdResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonlViewAdResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonlViewAdResp_descriptor_;
}

const CommonlViewAdResp& CommonlViewAdResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAccessAd_2eproto();
  return *default_instance_;
}

CommonlViewAdResp* CommonlViewAdResp::default_instance_ = NULL;

CommonlViewAdResp* CommonlViewAdResp::New() const {
  return new CommonlViewAdResp;
}

void CommonlViewAdResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_ballon()) {
      if (ballon_ != NULL) ballon_->::ProtoAccessAd::BallonCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonlViewAdResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAccessAd.CommonlViewAdResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ballon;
        break;
      }

      // optional .ProtoAccessAd.BallonCPP ballon = 2;
      case 2: {
        if (tag == 18) {
         parse_ballon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ballon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAccessAd.CommonlViewAdResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAccessAd.CommonlViewAdResp)
  return false;
#undef DO_
}

void CommonlViewAdResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAccessAd.CommonlViewAdResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  // optional .ProtoAccessAd.BallonCPP ballon = 2;
  if (has_ballon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ballon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAccessAd.CommonlViewAdResp)
}

::google::protobuf::uint8* CommonlViewAdResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAccessAd.CommonlViewAdResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  // optional .ProtoAccessAd.BallonCPP ballon = 2;
  if (has_ballon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ballon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAccessAd.CommonlViewAdResp)
  return target;
}

int CommonlViewAdResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // optional .ProtoAccessAd.BallonCPP ballon = 2;
    if (has_ballon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ballon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonlViewAdResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonlViewAdResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonlViewAdResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonlViewAdResp::MergeFrom(const CommonlViewAdResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_ballon()) {
      mutable_ballon()->::ProtoAccessAd::BallonCPP::MergeFrom(from.ballon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonlViewAdResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonlViewAdResp::CopyFrom(const CommonlViewAdResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonlViewAdResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_ballon()) {
    if (!this->ballon().IsInitialized()) return false;
  }
  return true;
}

void CommonlViewAdResp::Swap(CommonlViewAdResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(ballon_, other->ballon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonlViewAdResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonlViewAdResp_descriptor_;
  metadata.reflection = CommonlViewAdResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScarecrowCPP::kRemainCntFieldNumber;
const int ScarecrowCPP::kWorkEndTsFieldNumber;
const int ScarecrowCPP::kNextShowTsFieldNumber;
#endif  // !_MSC_VER

ScarecrowCPP::ScarecrowCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAccessAd.ScarecrowCPP)
}

void ScarecrowCPP::InitAsDefaultInstance() {
}

ScarecrowCPP::ScarecrowCPP(const ScarecrowCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAccessAd.ScarecrowCPP)
}

void ScarecrowCPP::SharedCtor() {
  _cached_size_ = 0;
  remaincnt_ = 0u;
  workendts_ = 0u;
  nextshowts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScarecrowCPP::~ScarecrowCPP() {
  // @@protoc_insertion_point(destructor:ProtoAccessAd.ScarecrowCPP)
  SharedDtor();
}

void ScarecrowCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScarecrowCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScarecrowCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScarecrowCPP_descriptor_;
}

const ScarecrowCPP& ScarecrowCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAccessAd_2eproto();
  return *default_instance_;
}

ScarecrowCPP* ScarecrowCPP::default_instance_ = NULL;

ScarecrowCPP* ScarecrowCPP::New() const {
  return new ScarecrowCPP;
}

void ScarecrowCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScarecrowCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(remaincnt_, nextshowts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScarecrowCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAccessAd.ScarecrowCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 remainCnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaincnt_)));
          set_has_remaincnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_workEndTs;
        break;
      }

      // required uint32 workEndTs = 2;
      case 2: {
        if (tag == 16) {
         parse_workEndTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workendts_)));
          set_has_workendts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nextShowTs;
        break;
      }

      // required uint32 nextShowTs = 3;
      case 3: {
        if (tag == 24) {
         parse_nextShowTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextshowts_)));
          set_has_nextshowts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAccessAd.ScarecrowCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAccessAd.ScarecrowCPP)
  return false;
#undef DO_
}

void ScarecrowCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAccessAd.ScarecrowCPP)
  // required uint32 remainCnt = 1;
  if (has_remaincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remaincnt(), output);
  }

  // required uint32 workEndTs = 2;
  if (has_workendts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->workendts(), output);
  }

  // required uint32 nextShowTs = 3;
  if (has_nextshowts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nextshowts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAccessAd.ScarecrowCPP)
}

::google::protobuf::uint8* ScarecrowCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAccessAd.ScarecrowCPP)
  // required uint32 remainCnt = 1;
  if (has_remaincnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remaincnt(), target);
  }

  // required uint32 workEndTs = 2;
  if (has_workendts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->workendts(), target);
  }

  // required uint32 nextShowTs = 3;
  if (has_nextshowts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nextshowts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAccessAd.ScarecrowCPP)
  return target;
}

int ScarecrowCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 remainCnt = 1;
    if (has_remaincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaincnt());
    }

    // required uint32 workEndTs = 2;
    if (has_workendts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workendts());
    }

    // required uint32 nextShowTs = 3;
    if (has_nextshowts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextshowts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScarecrowCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScarecrowCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScarecrowCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScarecrowCPP::MergeFrom(const ScarecrowCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remaincnt()) {
      set_remaincnt(from.remaincnt());
    }
    if (from.has_workendts()) {
      set_workendts(from.workendts());
    }
    if (from.has_nextshowts()) {
      set_nextshowts(from.nextshowts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScarecrowCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScarecrowCPP::CopyFrom(const ScarecrowCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScarecrowCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ScarecrowCPP::Swap(ScarecrowCPP* other) {
  if (other != this) {
    std::swap(remaincnt_, other->remaincnt_);
    std::swap(workendts_, other->workendts_);
    std::swap(nextshowts_, other->nextshowts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScarecrowCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScarecrowCPP_descriptor_;
  metadata.reflection = ScarecrowCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetScarecrowInfoReq::GetScarecrowInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAccessAd.GetScarecrowInfoReq)
}

void GetScarecrowInfoReq::InitAsDefaultInstance() {
}

GetScarecrowInfoReq::GetScarecrowInfoReq(const GetScarecrowInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAccessAd.GetScarecrowInfoReq)
}

void GetScarecrowInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetScarecrowInfoReq::~GetScarecrowInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoAccessAd.GetScarecrowInfoReq)
  SharedDtor();
}

void GetScarecrowInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetScarecrowInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetScarecrowInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetScarecrowInfoReq_descriptor_;
}

const GetScarecrowInfoReq& GetScarecrowInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAccessAd_2eproto();
  return *default_instance_;
}

GetScarecrowInfoReq* GetScarecrowInfoReq::default_instance_ = NULL;

GetScarecrowInfoReq* GetScarecrowInfoReq::New() const {
  return new GetScarecrowInfoReq;
}

void GetScarecrowInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetScarecrowInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAccessAd.GetScarecrowInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAccessAd.GetScarecrowInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAccessAd.GetScarecrowInfoReq)
  return false;
#undef DO_
}

void GetScarecrowInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAccessAd.GetScarecrowInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAccessAd.GetScarecrowInfoReq)
}

::google::protobuf::uint8* GetScarecrowInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAccessAd.GetScarecrowInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAccessAd.GetScarecrowInfoReq)
  return target;
}

int GetScarecrowInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetScarecrowInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetScarecrowInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetScarecrowInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetScarecrowInfoReq::MergeFrom(const GetScarecrowInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetScarecrowInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetScarecrowInfoReq::CopyFrom(const GetScarecrowInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScarecrowInfoReq::IsInitialized() const {

  return true;
}

void GetScarecrowInfoReq::Swap(GetScarecrowInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetScarecrowInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetScarecrowInfoReq_descriptor_;
  metadata.reflection = GetScarecrowInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetScarecrowInfoResp::kScarecrowFieldNumber;
#endif  // !_MSC_VER

GetScarecrowInfoResp::GetScarecrowInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAccessAd.GetScarecrowInfoResp)
}

void GetScarecrowInfoResp::InitAsDefaultInstance() {
  scarecrow_ = const_cast< ::ProtoAccessAd::ScarecrowCPP*>(&::ProtoAccessAd::ScarecrowCPP::default_instance());
}

GetScarecrowInfoResp::GetScarecrowInfoResp(const GetScarecrowInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAccessAd.GetScarecrowInfoResp)
}

void GetScarecrowInfoResp::SharedCtor() {
  _cached_size_ = 0;
  scarecrow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetScarecrowInfoResp::~GetScarecrowInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoAccessAd.GetScarecrowInfoResp)
  SharedDtor();
}

void GetScarecrowInfoResp::SharedDtor() {
  if (this != default_instance_) {
    delete scarecrow_;
  }
}

void GetScarecrowInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetScarecrowInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetScarecrowInfoResp_descriptor_;
}

const GetScarecrowInfoResp& GetScarecrowInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAccessAd_2eproto();
  return *default_instance_;
}

GetScarecrowInfoResp* GetScarecrowInfoResp::default_instance_ = NULL;

GetScarecrowInfoResp* GetScarecrowInfoResp::New() const {
  return new GetScarecrowInfoResp;
}

void GetScarecrowInfoResp::Clear() {
  if (has_scarecrow()) {
    if (scarecrow_ != NULL) scarecrow_->::ProtoAccessAd::ScarecrowCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetScarecrowInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAccessAd.GetScarecrowInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoAccessAd.ScarecrowCPP scarecrow = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scarecrow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAccessAd.GetScarecrowInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAccessAd.GetScarecrowInfoResp)
  return false;
#undef DO_
}

void GetScarecrowInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAccessAd.GetScarecrowInfoResp)
  // required .ProtoAccessAd.ScarecrowCPP scarecrow = 1;
  if (has_scarecrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scarecrow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAccessAd.GetScarecrowInfoResp)
}

::google::protobuf::uint8* GetScarecrowInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAccessAd.GetScarecrowInfoResp)
  // required .ProtoAccessAd.ScarecrowCPP scarecrow = 1;
  if (has_scarecrow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scarecrow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAccessAd.GetScarecrowInfoResp)
  return target;
}

int GetScarecrowInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoAccessAd.ScarecrowCPP scarecrow = 1;
    if (has_scarecrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scarecrow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetScarecrowInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetScarecrowInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetScarecrowInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetScarecrowInfoResp::MergeFrom(const GetScarecrowInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scarecrow()) {
      mutable_scarecrow()->::ProtoAccessAd::ScarecrowCPP::MergeFrom(from.scarecrow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetScarecrowInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetScarecrowInfoResp::CopyFrom(const GetScarecrowInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScarecrowInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_scarecrow()) {
    if (!this->scarecrow().IsInitialized()) return false;
  }
  return true;
}

void GetScarecrowInfoResp::Swap(GetScarecrowInfoResp* other) {
  if (other != this) {
    std::swap(scarecrow_, other->scarecrow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetScarecrowInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetScarecrowInfoResp_descriptor_;
  metadata.reflection = GetScarecrowInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScarecrowViewAdReq::kIsCostDimaondFieldNumber;
#endif  // !_MSC_VER

ScarecrowViewAdReq::ScarecrowViewAdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAccessAd.ScarecrowViewAdReq)
}

void ScarecrowViewAdReq::InitAsDefaultInstance() {
}

ScarecrowViewAdReq::ScarecrowViewAdReq(const ScarecrowViewAdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAccessAd.ScarecrowViewAdReq)
}

void ScarecrowViewAdReq::SharedCtor() {
  _cached_size_ = 0;
  iscostdimaond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScarecrowViewAdReq::~ScarecrowViewAdReq() {
  // @@protoc_insertion_point(destructor:ProtoAccessAd.ScarecrowViewAdReq)
  SharedDtor();
}

void ScarecrowViewAdReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScarecrowViewAdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScarecrowViewAdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScarecrowViewAdReq_descriptor_;
}

const ScarecrowViewAdReq& ScarecrowViewAdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAccessAd_2eproto();
  return *default_instance_;
}

ScarecrowViewAdReq* ScarecrowViewAdReq::default_instance_ = NULL;

ScarecrowViewAdReq* ScarecrowViewAdReq::New() const {
  return new ScarecrowViewAdReq;
}

void ScarecrowViewAdReq::Clear() {
  iscostdimaond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScarecrowViewAdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAccessAd.ScarecrowViewAdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 isCostDimaond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iscostdimaond_)));
          set_has_iscostdimaond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAccessAd.ScarecrowViewAdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAccessAd.ScarecrowViewAdReq)
  return false;
#undef DO_
}

void ScarecrowViewAdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAccessAd.ScarecrowViewAdReq)
  // optional uint32 isCostDimaond = 1;
  if (has_iscostdimaond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iscostdimaond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAccessAd.ScarecrowViewAdReq)
}

::google::protobuf::uint8* ScarecrowViewAdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAccessAd.ScarecrowViewAdReq)
  // optional uint32 isCostDimaond = 1;
  if (has_iscostdimaond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->iscostdimaond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAccessAd.ScarecrowViewAdReq)
  return target;
}

int ScarecrowViewAdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 isCostDimaond = 1;
    if (has_iscostdimaond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iscostdimaond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScarecrowViewAdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScarecrowViewAdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScarecrowViewAdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScarecrowViewAdReq::MergeFrom(const ScarecrowViewAdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iscostdimaond()) {
      set_iscostdimaond(from.iscostdimaond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScarecrowViewAdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScarecrowViewAdReq::CopyFrom(const ScarecrowViewAdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScarecrowViewAdReq::IsInitialized() const {

  return true;
}

void ScarecrowViewAdReq::Swap(ScarecrowViewAdReq* other) {
  if (other != this) {
    std::swap(iscostdimaond_, other->iscostdimaond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScarecrowViewAdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScarecrowViewAdReq_descriptor_;
  metadata.reflection = ScarecrowViewAdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScarecrowViewAdResp::kScarecrowFieldNumber;
const int ScarecrowViewAdResp::kCroplandFieldNumber;
const int ScarecrowViewAdResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ScarecrowViewAdResp::ScarecrowViewAdResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAccessAd.ScarecrowViewAdResp)
}

void ScarecrowViewAdResp::InitAsDefaultInstance() {
  scarecrow_ = const_cast< ::ProtoAccessAd::ScarecrowCPP*>(&::ProtoAccessAd::ScarecrowCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ScarecrowViewAdResp::ScarecrowViewAdResp(const ScarecrowViewAdResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAccessAd.ScarecrowViewAdResp)
}

void ScarecrowViewAdResp::SharedCtor() {
  _cached_size_ = 0;
  scarecrow_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScarecrowViewAdResp::~ScarecrowViewAdResp() {
  // @@protoc_insertion_point(destructor:ProtoAccessAd.ScarecrowViewAdResp)
  SharedDtor();
}

void ScarecrowViewAdResp::SharedDtor() {
  if (this != default_instance_) {
    delete scarecrow_;
    delete commons_;
  }
}

void ScarecrowViewAdResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScarecrowViewAdResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScarecrowViewAdResp_descriptor_;
}

const ScarecrowViewAdResp& ScarecrowViewAdResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAccessAd_2eproto();
  return *default_instance_;
}

ScarecrowViewAdResp* ScarecrowViewAdResp::default_instance_ = NULL;

ScarecrowViewAdResp* ScarecrowViewAdResp::New() const {
  return new ScarecrowViewAdResp;
}

void ScarecrowViewAdResp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_scarecrow()) {
      if (scarecrow_ != NULL) scarecrow_->::ProtoAccessAd::ScarecrowCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  cropland_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScarecrowViewAdResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAccessAd.ScarecrowViewAdResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoAccessAd.ScarecrowCPP scarecrow = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scarecrow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cropland;
        break;
      }

      // repeated .ProtoProduce.CropLandCPP cropland = 2;
      case 2: {
        if (tag == 18) {
         parse_cropland:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cropland()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cropland;
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAccessAd.ScarecrowViewAdResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAccessAd.ScarecrowViewAdResp)
  return false;
#undef DO_
}

void ScarecrowViewAdResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAccessAd.ScarecrowViewAdResp)
  // required .ProtoAccessAd.ScarecrowCPP scarecrow = 1;
  if (has_scarecrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scarecrow(), output);
  }

  // repeated .ProtoProduce.CropLandCPP cropland = 2;
  for (int i = 0; i < this->cropland_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cropland(i), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAccessAd.ScarecrowViewAdResp)
}

::google::protobuf::uint8* ScarecrowViewAdResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAccessAd.ScarecrowViewAdResp)
  // required .ProtoAccessAd.ScarecrowCPP scarecrow = 1;
  if (has_scarecrow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scarecrow(), target);
  }

  // repeated .ProtoProduce.CropLandCPP cropland = 2;
  for (int i = 0; i < this->cropland_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cropland(i), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAccessAd.ScarecrowViewAdResp)
  return target;
}

int ScarecrowViewAdResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoAccessAd.ScarecrowCPP scarecrow = 1;
    if (has_scarecrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scarecrow());
    }

    // optional .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  // repeated .ProtoProduce.CropLandCPP cropland = 2;
  total_size += 1 * this->cropland_size();
  for (int i = 0; i < this->cropland_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cropland(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScarecrowViewAdResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScarecrowViewAdResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScarecrowViewAdResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScarecrowViewAdResp::MergeFrom(const ScarecrowViewAdResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cropland_.MergeFrom(from.cropland_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scarecrow()) {
      mutable_scarecrow()->::ProtoAccessAd::ScarecrowCPP::MergeFrom(from.scarecrow());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScarecrowViewAdResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScarecrowViewAdResp::CopyFrom(const ScarecrowViewAdResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScarecrowViewAdResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_scarecrow()) {
    if (!this->scarecrow().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->cropland())) return false;
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ScarecrowViewAdResp::Swap(ScarecrowViewAdResp* other) {
  if (other != this) {
    std::swap(scarecrow_, other->scarecrow_);
    cropland_.Swap(&other->cropland_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScarecrowViewAdResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScarecrowViewAdResp_descriptor_;
  metadata.reflection = ScarecrowViewAdResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoAccessAd

// @@protoc_insertion_point(global_scope)
