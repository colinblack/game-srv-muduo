// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoShipping.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoShipping.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoShipping {

namespace {

const ::google::protobuf::Descriptor* ShippingCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShippingCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShippingBoxCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShippingBoxCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FullBoxShipCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FullBoxShipCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockDockReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockDockReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockDockResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockDockResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnveilDockReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnveilDockReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnveilDockResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnveilDockResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackBoxReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackBoxReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackBoxResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackBoxResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeekAidReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeekAidReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeekAidResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeekAidResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferAidReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferAidReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferAidResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferAidResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOfferAidReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOfferAidReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSOfferAidResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSOfferAidResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveDockReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveDockReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveDockResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveDockResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPlayStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPlayStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPlayStatusResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPlayStatusResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushShipBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushShipBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipVIPBonusCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipVIPBonusCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetShipBonusInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetShipBonusInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetShipBonusInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetShipBonusInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushShipBonusInfoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushShipBonusInfoMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushFullBoxShipMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushFullBoxShipMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoShipping_2eproto() {
  protobuf_AddDesc_ProtoShipping_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoShipping.proto");
  GOOGLE_CHECK(file != NULL);
  ShippingCPP_descriptor_ = file->message_type(0);
  static const int ShippingCPP_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, badge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, unlockendts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, arrivets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, publicaidtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, commercialaidtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, playstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, viewadpackcnt_),
  };
  ShippingCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShippingCPP_descriptor_,
      ShippingCPP::default_instance_,
      ShippingCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShippingCPP));
  ShippingBoxCPP_descriptor_ = file->message_type(1);
  static const int ShippingBoxCPP_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, aidstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, name_),
  };
  ShippingBoxCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShippingBoxCPP_descriptor_,
      ShippingBoxCPP::default_instance_,
      ShippingBoxCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShippingBoxCPP));
  FullBoxShipCPP_descriptor_ = file->message_type(2);
  static const int FullBoxShipCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullBoxShipCPP, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullBoxShipCPP, propscnt_),
  };
  FullBoxShipCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FullBoxShipCPP_descriptor_,
      FullBoxShipCPP::default_instance_,
      FullBoxShipCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullBoxShipCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullBoxShipCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FullBoxShipCPP));
  UnlockDockReq_descriptor_ = file->message_type(3);
  static const int UnlockDockReq_offsets_[1] = {
  };
  UnlockDockReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockDockReq_descriptor_,
      UnlockDockReq::default_instance_,
      UnlockDockReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockDockReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockDockReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockDockReq));
  UnlockDockResp_descriptor_ = file->message_type(4);
  static const int UnlockDockResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockDockResp, shipping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockDockResp, commons_),
  };
  UnlockDockResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockDockResp_descriptor_,
      UnlockDockResp::default_instance_,
      UnlockDockResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockDockResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockDockResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockDockResp));
  UnveilDockReq_descriptor_ = file->message_type(5);
  static const int UnveilDockReq_offsets_[1] = {
  };
  UnveilDockReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnveilDockReq_descriptor_,
      UnveilDockReq::default_instance_,
      UnveilDockReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnveilDockReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnveilDockReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnveilDockReq));
  UnveilDockResp_descriptor_ = file->message_type(6);
  static const int UnveilDockResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnveilDockResp, shipping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnveilDockResp, shipboxes_),
  };
  UnveilDockResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnveilDockResp_descriptor_,
      UnveilDockResp::default_instance_,
      UnveilDockResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnveilDockResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnveilDockResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnveilDockResp));
  PackBoxReq_descriptor_ = file->message_type(7);
  static const int PackBoxReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackBoxReq, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackBoxReq, type_),
  };
  PackBoxReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackBoxReq_descriptor_,
      PackBoxReq::default_instance_,
      PackBoxReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackBoxReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackBoxReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackBoxReq));
  PackBoxResp_descriptor_ = file->message_type(8);
  static const int PackBoxResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackBoxResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackBoxResp, boxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackBoxResp, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackBoxResp, viewadpackcnt_),
  };
  PackBoxResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackBoxResp_descriptor_,
      PackBoxResp::default_instance_,
      PackBoxResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackBoxResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackBoxResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackBoxResp));
  SeekAidReq_descriptor_ = file->message_type(9);
  static const int SeekAidReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekAidReq, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekAidReq, type_),
  };
  SeekAidReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeekAidReq_descriptor_,
      SeekAidReq::default_instance_,
      SeekAidReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekAidReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekAidReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeekAidReq));
  SeekAidResp_descriptor_ = file->message_type(10);
  static const int SeekAidResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekAidResp, shipping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekAidResp, boxes_),
  };
  SeekAidResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeekAidResp_descriptor_,
      SeekAidResp::default_instance_,
      SeekAidResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekAidResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeekAidResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeekAidResp));
  OfferAidReq_descriptor_ = file->message_type(11);
  static const int OfferAidReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferAidReq, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferAidReq, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferAidReq, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferAidReq, propscnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferAidReq, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferAidReq, exp_),
  };
  OfferAidReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferAidReq_descriptor_,
      OfferAidReq::default_instance_,
      OfferAidReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferAidReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferAidReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferAidReq));
  OfferAidResp_descriptor_ = file->message_type(12);
  static const int OfferAidResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferAidResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferAidResp, selfshipping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferAidResp, othboxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferAidResp, othboxid_),
  };
  OfferAidResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferAidResp_descriptor_,
      OfferAidResp::default_instance_,
      OfferAidResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferAidResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferAidResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferAidResp));
  CSOfferAidReq_descriptor_ = file->message_type(13);
  static const int CSOfferAidReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferAidReq, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferAidReq, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferAidReq, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferAidReq, myallianceid_),
  };
  CSOfferAidReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOfferAidReq_descriptor_,
      CSOfferAidReq::default_instance_,
      CSOfferAidReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferAidReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferAidReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOfferAidReq));
  CSOfferAidResp_descriptor_ = file->message_type(14);
  static const int CSOfferAidResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferAidResp, myuid_),
  };
  CSOfferAidResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSOfferAidResp_descriptor_,
      CSOfferAidResp::default_instance_,
      CSOfferAidResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferAidResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSOfferAidResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSOfferAidResp));
  LeaveDockReq_descriptor_ = file->message_type(15);
  static const int LeaveDockReq_offsets_[1] = {
  };
  LeaveDockReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveDockReq_descriptor_,
      LeaveDockReq::default_instance_,
      LeaveDockReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveDockReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveDockReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveDockReq));
  LeaveDockResp_descriptor_ = file->message_type(16);
  static const int LeaveDockResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveDockResp, shipping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveDockResp, shipboxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveDockResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveDockResp, vipshipbonus_),
  };
  LeaveDockResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveDockResp_descriptor_,
      LeaveDockResp::default_instance_,
      LeaveDockResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveDockResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveDockResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveDockResp));
  SetPlayStatusReq_descriptor_ = file->message_type(17);
  static const int SetPlayStatusReq_offsets_[1] = {
  };
  SetPlayStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPlayStatusReq_descriptor_,
      SetPlayStatusReq::default_instance_,
      SetPlayStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPlayStatusReq));
  SetPlayStatusResp_descriptor_ = file->message_type(18);
  static const int SetPlayStatusResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayStatusResp, shipping_),
  };
  SetPlayStatusResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPlayStatusResp_descriptor_,
      SetPlayStatusResp::default_instance_,
      SetPlayStatusResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayStatusResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayStatusResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPlayStatusResp));
  PushShipBox_descriptor_ = file->message_type(19);
  static const int PushShipBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushShipBox, box_),
  };
  PushShipBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushShipBox_descriptor_,
      PushShipBox::default_instance_,
      PushShipBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushShipBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushShipBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushShipBox));
  ShipVIPBonusCPP_descriptor_ = file->message_type(20);
  static const int ShipVIPBonusCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipVIPBonusCPP, remaincnt_),
  };
  ShipVIPBonusCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipVIPBonusCPP_descriptor_,
      ShipVIPBonusCPP::default_instance_,
      ShipVIPBonusCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipVIPBonusCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipVIPBonusCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipVIPBonusCPP));
  GetShipBonusInfoReq_descriptor_ = file->message_type(21);
  static const int GetShipBonusInfoReq_offsets_[1] = {
  };
  GetShipBonusInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetShipBonusInfoReq_descriptor_,
      GetShipBonusInfoReq::default_instance_,
      GetShipBonusInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShipBonusInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShipBonusInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetShipBonusInfoReq));
  GetShipBonusInfoResp_descriptor_ = file->message_type(22);
  static const int GetShipBonusInfoResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShipBonusInfoResp, vipshipbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShipBonusInfoResp, point_),
  };
  GetShipBonusInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetShipBonusInfoResp_descriptor_,
      GetShipBonusInfoResp::default_instance_,
      GetShipBonusInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShipBonusInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShipBonusInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetShipBonusInfoResp));
  PushShipBonusInfoMsg_descriptor_ = file->message_type(23);
  static const int PushShipBonusInfoMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushShipBonusInfoMsg, vipshipbonus_),
  };
  PushShipBonusInfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushShipBonusInfoMsg_descriptor_,
      PushShipBonusInfoMsg::default_instance_,
      PushShipBonusInfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushShipBonusInfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushShipBonusInfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushShipBonusInfoMsg));
  PushFullBoxShipMsg_descriptor_ = file->message_type(24);
  static const int PushFullBoxShipMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFullBoxShipMsg, point_),
  };
  PushFullBoxShipMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushFullBoxShipMsg_descriptor_,
      PushFullBoxShipMsg::default_instance_,
      PushFullBoxShipMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFullBoxShipMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFullBoxShipMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushFullBoxShipMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoShipping_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShippingCPP_descriptor_, &ShippingCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShippingBoxCPP_descriptor_, &ShippingBoxCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FullBoxShipCPP_descriptor_, &FullBoxShipCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockDockReq_descriptor_, &UnlockDockReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockDockResp_descriptor_, &UnlockDockResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnveilDockReq_descriptor_, &UnveilDockReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnveilDockResp_descriptor_, &UnveilDockResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackBoxReq_descriptor_, &PackBoxReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackBoxResp_descriptor_, &PackBoxResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeekAidReq_descriptor_, &SeekAidReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeekAidResp_descriptor_, &SeekAidResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferAidReq_descriptor_, &OfferAidReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferAidResp_descriptor_, &OfferAidResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOfferAidReq_descriptor_, &CSOfferAidReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSOfferAidResp_descriptor_, &CSOfferAidResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveDockReq_descriptor_, &LeaveDockReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveDockResp_descriptor_, &LeaveDockResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPlayStatusReq_descriptor_, &SetPlayStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPlayStatusResp_descriptor_, &SetPlayStatusResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushShipBox_descriptor_, &PushShipBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipVIPBonusCPP_descriptor_, &ShipVIPBonusCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetShipBonusInfoReq_descriptor_, &GetShipBonusInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetShipBonusInfoResp_descriptor_, &GetShipBonusInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushShipBonusInfoMsg_descriptor_, &PushShipBonusInfoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushFullBoxShipMsg_descriptor_, &PushFullBoxShipMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoShipping_2eproto() {
  delete ShippingCPP::default_instance_;
  delete ShippingCPP_reflection_;
  delete ShippingBoxCPP::default_instance_;
  delete ShippingBoxCPP_reflection_;
  delete FullBoxShipCPP::default_instance_;
  delete FullBoxShipCPP_reflection_;
  delete UnlockDockReq::default_instance_;
  delete UnlockDockReq_reflection_;
  delete UnlockDockResp::default_instance_;
  delete UnlockDockResp_reflection_;
  delete UnveilDockReq::default_instance_;
  delete UnveilDockReq_reflection_;
  delete UnveilDockResp::default_instance_;
  delete UnveilDockResp_reflection_;
  delete PackBoxReq::default_instance_;
  delete PackBoxReq_reflection_;
  delete PackBoxResp::default_instance_;
  delete PackBoxResp_reflection_;
  delete SeekAidReq::default_instance_;
  delete SeekAidReq_reflection_;
  delete SeekAidResp::default_instance_;
  delete SeekAidResp_reflection_;
  delete OfferAidReq::default_instance_;
  delete OfferAidReq_reflection_;
  delete OfferAidResp::default_instance_;
  delete OfferAidResp_reflection_;
  delete CSOfferAidReq::default_instance_;
  delete CSOfferAidReq_reflection_;
  delete CSOfferAidResp::default_instance_;
  delete CSOfferAidResp_reflection_;
  delete LeaveDockReq::default_instance_;
  delete LeaveDockReq_reflection_;
  delete LeaveDockResp::default_instance_;
  delete LeaveDockResp_reflection_;
  delete SetPlayStatusReq::default_instance_;
  delete SetPlayStatusReq_reflection_;
  delete SetPlayStatusResp::default_instance_;
  delete SetPlayStatusResp_reflection_;
  delete PushShipBox::default_instance_;
  delete PushShipBox_reflection_;
  delete ShipVIPBonusCPP::default_instance_;
  delete ShipVIPBonusCPP_reflection_;
  delete GetShipBonusInfoReq::default_instance_;
  delete GetShipBonusInfoReq_reflection_;
  delete GetShipBonusInfoResp::default_instance_;
  delete GetShipBonusInfoResp_reflection_;
  delete PushShipBonusInfoMsg::default_instance_;
  delete PushShipBonusInfoMsg_reflection_;
  delete PushFullBoxShipMsg::default_instance_;
  delete PushFullBoxShipMsg_reflection_;
}

void protobuf_AddDesc_ProtoShipping_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ProtoShipping.proto\022\rProtoShipping\032\020Da"
    "taCommon.proto\"\262\001\n\013ShippingCPP\022\r\n\005badge\030"
    "\001 \002(\r\022\023\n\013unlockEndts\030\002 \002(\r\022\020\n\010arriveTs\030\003"
    " \002(\r\022\026\n\016publicAidTimes\030\004 \002(\r\022\032\n\022commerci"
    "alAidTimes\030\005 \002(\r\022\016\n\006status\030\006 \002(\r\022\022\n\nplay"
    "Status\030\007 \002(\r\022\025\n\rviewAdPackCnt\030\010 \001(\r\"\230\001\n\016"
    "ShippingBoxCPP\022\r\n\005boxid\030\001 \002(\r\022\017\n\007propsid"
    "\030\002 \002(\r\022\r\n\005count\030\003 \002(\r\022\021\n\taidStatus\030\004 \002(\r"
    "\022\016\n\006status\030\005 \002(\r\022\014\n\004coin\030\006 \002(\r\022\013\n\003exp\030\007 "
    "\002(\r\022\013\n\003fig\030\010 \001(\014\022\014\n\004name\030\t \001(\014\"3\n\016FullBo"
    "xShipCPP\022\017\n\007propsid\030\001 \002(\r\022\020\n\010propscnt\030\002 "
    "\002(\r\"\017\n\rUnlockDockReq\"k\n\016UnlockDockResp\022,"
    "\n\010shipping\030\001 \002(\0132\032.ProtoShipping.Shippin"
    "gCPP\022+\n\007commons\030\002 \002(\0132\032.DataCommon.Commo"
    "nItemsCPP\"\017\n\rUnveilDockReq\"p\n\016UnveilDock"
    "Resp\022,\n\010shipping\030\001 \002(\0132\032.ProtoShipping.S"
    "hippingCPP\0220\n\tshipboxes\030\002 \003(\0132\035.ProtoShi"
    "pping.ShippingBoxCPP\")\n\nPackBoxReq\022\r\n\005bo"
    "xid\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\"\255\001\n\013PackBoxResp\022"
    "+\n\007commons\030\001 \001(\0132\032.DataCommon.CommonItem"
    "sCPP\022,\n\005boxes\030\002 \002(\0132\035.ProtoShipping.Ship"
    "pingBoxCPP\022,\n\005point\030\003 \001(\0132\035.ProtoShippin"
    "g.FullBoxShipCPP\022\025\n\rviewAdPackCnt\030\004 \001(\r\""
    ")\n\nSeekAidReq\022\r\n\005boxid\030\001 \002(\r\022\014\n\004type\030\002 \002"
    "(\r\"i\n\013SeekAidResp\022,\n\010shipping\030\001 \002(\0132\032.Pr"
    "otoShipping.ShippingCPP\022,\n\005boxes\030\002 \002(\0132\035"
    ".ProtoShipping.ShippingBoxCPP\"j\n\013OfferAi"
    "dReq\022\016\n\006othuid\030\001 \002(\r\022\r\n\005boxid\030\002 \002(\r\022\017\n\007p"
    "ropsid\030\003 \002(\r\022\020\n\010propscnt\030\004 \002(\r\022\014\n\004coin\030\005"
    " \002(\r\022\013\n\003exp\030\006 \002(\r\"\260\001\n\014OfferAidResp\022+\n\007co"
    "mmons\030\001 \002(\0132\032.DataCommon.CommonItemsCPP\022"
    "0\n\014selfshipping\030\002 \002(\0132\032.ProtoShipping.Sh"
    "ippingCPP\022/\n\010othboxes\030\003 \001(\0132\035.ProtoShipp"
    "ing.ShippingBoxCPP\022\020\n\010othboxid\030\004 \001(\r\"p\n\r"
    "CSOfferAidReq\022\r\n\005myuid\030\001 \002(\r\022\016\n\006othuid\030\002"
    " \002(\r\022*\n\003box\030\003 \002(\0132\035.ProtoShipping.Shippi"
    "ngBoxCPP\022\024\n\014myallianceid\030\004 \002(\r\"\037\n\016CSOffe"
    "rAidResp\022\r\n\005myuid\030\001 \002(\r\"\016\n\014LeaveDockReq\""
    "\322\001\n\rLeaveDockResp\022,\n\010shipping\030\001 \002(\0132\032.Pr"
    "otoShipping.ShippingCPP\0220\n\tshipboxes\030\002 \003"
    "(\0132\035.ProtoShipping.ShippingBoxCPP\022+\n\007com"
    "mons\030\003 \002(\0132\032.DataCommon.CommonItemsCPP\0224"
    "\n\014vipshipbonus\030\004 \001(\0132\036.ProtoShipping.Shi"
    "pVIPBonusCPP\"\022\n\020SetPlayStatusReq\"A\n\021SetP"
    "layStatusResp\022,\n\010shipping\030\001 \002(\0132\032.ProtoS"
    "hipping.ShippingCPP\"9\n\013PushShipBox\022*\n\003bo"
    "x\030\001 \002(\0132\035.ProtoShipping.ShippingBoxCPP\"$"
    "\n\017ShipVIPBonusCPP\022\021\n\tremaincnt\030\001 \002(\r\"\025\n\023"
    "GetShipBonusInfoReq\"z\n\024GetShipBonusInfoR"
    "esp\0224\n\014vipshipbonus\030\001 \002(\0132\036.ProtoShippin"
    "g.ShipVIPBonusCPP\022,\n\005point\030\002 \001(\0132\035.Proto"
    "Shipping.FullBoxShipCPP\"L\n\024PushShipBonus"
    "InfoMsg\0224\n\014vipshipbonus\030\001 \002(\0132\036.ProtoShi"
    "pping.ShipVIPBonusCPP\"B\n\022PushFullBoxShip"
    "Msg\022,\n\005point\030\001 \002(\0132\035.ProtoShipping.FullB"
    "oxShipCPP", 2209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoShipping.proto", &protobuf_RegisterTypes);
  ShippingCPP::default_instance_ = new ShippingCPP();
  ShippingBoxCPP::default_instance_ = new ShippingBoxCPP();
  FullBoxShipCPP::default_instance_ = new FullBoxShipCPP();
  UnlockDockReq::default_instance_ = new UnlockDockReq();
  UnlockDockResp::default_instance_ = new UnlockDockResp();
  UnveilDockReq::default_instance_ = new UnveilDockReq();
  UnveilDockResp::default_instance_ = new UnveilDockResp();
  PackBoxReq::default_instance_ = new PackBoxReq();
  PackBoxResp::default_instance_ = new PackBoxResp();
  SeekAidReq::default_instance_ = new SeekAidReq();
  SeekAidResp::default_instance_ = new SeekAidResp();
  OfferAidReq::default_instance_ = new OfferAidReq();
  OfferAidResp::default_instance_ = new OfferAidResp();
  CSOfferAidReq::default_instance_ = new CSOfferAidReq();
  CSOfferAidResp::default_instance_ = new CSOfferAidResp();
  LeaveDockReq::default_instance_ = new LeaveDockReq();
  LeaveDockResp::default_instance_ = new LeaveDockResp();
  SetPlayStatusReq::default_instance_ = new SetPlayStatusReq();
  SetPlayStatusResp::default_instance_ = new SetPlayStatusResp();
  PushShipBox::default_instance_ = new PushShipBox();
  ShipVIPBonusCPP::default_instance_ = new ShipVIPBonusCPP();
  GetShipBonusInfoReq::default_instance_ = new GetShipBonusInfoReq();
  GetShipBonusInfoResp::default_instance_ = new GetShipBonusInfoResp();
  PushShipBonusInfoMsg::default_instance_ = new PushShipBonusInfoMsg();
  PushFullBoxShipMsg::default_instance_ = new PushFullBoxShipMsg();
  ShippingCPP::default_instance_->InitAsDefaultInstance();
  ShippingBoxCPP::default_instance_->InitAsDefaultInstance();
  FullBoxShipCPP::default_instance_->InitAsDefaultInstance();
  UnlockDockReq::default_instance_->InitAsDefaultInstance();
  UnlockDockResp::default_instance_->InitAsDefaultInstance();
  UnveilDockReq::default_instance_->InitAsDefaultInstance();
  UnveilDockResp::default_instance_->InitAsDefaultInstance();
  PackBoxReq::default_instance_->InitAsDefaultInstance();
  PackBoxResp::default_instance_->InitAsDefaultInstance();
  SeekAidReq::default_instance_->InitAsDefaultInstance();
  SeekAidResp::default_instance_->InitAsDefaultInstance();
  OfferAidReq::default_instance_->InitAsDefaultInstance();
  OfferAidResp::default_instance_->InitAsDefaultInstance();
  CSOfferAidReq::default_instance_->InitAsDefaultInstance();
  CSOfferAidResp::default_instance_->InitAsDefaultInstance();
  LeaveDockReq::default_instance_->InitAsDefaultInstance();
  LeaveDockResp::default_instance_->InitAsDefaultInstance();
  SetPlayStatusReq::default_instance_->InitAsDefaultInstance();
  SetPlayStatusResp::default_instance_->InitAsDefaultInstance();
  PushShipBox::default_instance_->InitAsDefaultInstance();
  ShipVIPBonusCPP::default_instance_->InitAsDefaultInstance();
  GetShipBonusInfoReq::default_instance_->InitAsDefaultInstance();
  GetShipBonusInfoResp::default_instance_->InitAsDefaultInstance();
  PushShipBonusInfoMsg::default_instance_->InitAsDefaultInstance();
  PushFullBoxShipMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoShipping_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoShipping_2eproto {
  StaticDescriptorInitializer_ProtoShipping_2eproto() {
    protobuf_AddDesc_ProtoShipping_2eproto();
  }
} static_descriptor_initializer_ProtoShipping_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ShippingCPP::kBadgeFieldNumber;
const int ShippingCPP::kUnlockEndtsFieldNumber;
const int ShippingCPP::kArriveTsFieldNumber;
const int ShippingCPP::kPublicAidTimesFieldNumber;
const int ShippingCPP::kCommercialAidTimesFieldNumber;
const int ShippingCPP::kStatusFieldNumber;
const int ShippingCPP::kPlayStatusFieldNumber;
const int ShippingCPP::kViewAdPackCntFieldNumber;
#endif  // !_MSC_VER

ShippingCPP::ShippingCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.ShippingCPP)
}

void ShippingCPP::InitAsDefaultInstance() {
}

ShippingCPP::ShippingCPP(const ShippingCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.ShippingCPP)
}

void ShippingCPP::SharedCtor() {
  _cached_size_ = 0;
  badge_ = 0u;
  unlockendts_ = 0u;
  arrivets_ = 0u;
  publicaidtimes_ = 0u;
  commercialaidtimes_ = 0u;
  status_ = 0u;
  playstatus_ = 0u;
  viewadpackcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShippingCPP::~ShippingCPP() {
  // @@protoc_insertion_point(destructor:ProtoShipping.ShippingCPP)
  SharedDtor();
}

void ShippingCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShippingCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShippingCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShippingCPP_descriptor_;
}

const ShippingCPP& ShippingCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

ShippingCPP* ShippingCPP::default_instance_ = NULL;

ShippingCPP* ShippingCPP::New() const {
  return new ShippingCPP;
}

void ShippingCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShippingCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(badge_, viewadpackcnt_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShippingCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.ShippingCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 badge = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_)));
          set_has_badge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unlockEndts;
        break;
      }

      // required uint32 unlockEndts = 2;
      case 2: {
        if (tag == 16) {
         parse_unlockEndts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlockendts_)));
          set_has_unlockendts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_arriveTs;
        break;
      }

      // required uint32 arriveTs = 3;
      case 3: {
        if (tag == 24) {
         parse_arriveTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arrivets_)));
          set_has_arrivets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_publicAidTimes;
        break;
      }

      // required uint32 publicAidTimes = 4;
      case 4: {
        if (tag == 32) {
         parse_publicAidTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publicaidtimes_)));
          set_has_publicaidtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_commercialAidTimes;
        break;
      }

      // required uint32 commercialAidTimes = 5;
      case 5: {
        if (tag == 40) {
         parse_commercialAidTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commercialaidtimes_)));
          set_has_commercialaidtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required uint32 status = 6;
      case 6: {
        if (tag == 48) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_playStatus;
        break;
      }

      // required uint32 playStatus = 7;
      case 7: {
        if (tag == 56) {
         parse_playStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playstatus_)));
          set_has_playstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_viewAdPackCnt;
        break;
      }

      // optional uint32 viewAdPackCnt = 8;
      case 8: {
        if (tag == 64) {
         parse_viewAdPackCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewadpackcnt_)));
          set_has_viewadpackcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.ShippingCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.ShippingCPP)
  return false;
#undef DO_
}

void ShippingCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.ShippingCPP)
  // required uint32 badge = 1;
  if (has_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->badge(), output);
  }

  // required uint32 unlockEndts = 2;
  if (has_unlockendts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unlockendts(), output);
  }

  // required uint32 arriveTs = 3;
  if (has_arrivets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->arrivets(), output);
  }

  // required uint32 publicAidTimes = 4;
  if (has_publicaidtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->publicaidtimes(), output);
  }

  // required uint32 commercialAidTimes = 5;
  if (has_commercialaidtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->commercialaidtimes(), output);
  }

  // required uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  // required uint32 playStatus = 7;
  if (has_playstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->playstatus(), output);
  }

  // optional uint32 viewAdPackCnt = 8;
  if (has_viewadpackcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->viewadpackcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.ShippingCPP)
}

::google::protobuf::uint8* ShippingCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.ShippingCPP)
  // required uint32 badge = 1;
  if (has_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->badge(), target);
  }

  // required uint32 unlockEndts = 2;
  if (has_unlockendts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unlockendts(), target);
  }

  // required uint32 arriveTs = 3;
  if (has_arrivets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->arrivets(), target);
  }

  // required uint32 publicAidTimes = 4;
  if (has_publicaidtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->publicaidtimes(), target);
  }

  // required uint32 commercialAidTimes = 5;
  if (has_commercialaidtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->commercialaidtimes(), target);
  }

  // required uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  // required uint32 playStatus = 7;
  if (has_playstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->playstatus(), target);
  }

  // optional uint32 viewAdPackCnt = 8;
  if (has_viewadpackcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->viewadpackcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.ShippingCPP)
  return target;
}

int ShippingCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 badge = 1;
    if (has_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge());
    }

    // required uint32 unlockEndts = 2;
    if (has_unlockendts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlockendts());
    }

    // required uint32 arriveTs = 3;
    if (has_arrivets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arrivets());
    }

    // required uint32 publicAidTimes = 4;
    if (has_publicaidtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publicaidtimes());
    }

    // required uint32 commercialAidTimes = 5;
    if (has_commercialaidtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commercialaidtimes());
    }

    // required uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 playStatus = 7;
    if (has_playstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playstatus());
    }

    // optional uint32 viewAdPackCnt = 8;
    if (has_viewadpackcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewadpackcnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShippingCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShippingCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShippingCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShippingCPP::MergeFrom(const ShippingCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_badge()) {
      set_badge(from.badge());
    }
    if (from.has_unlockendts()) {
      set_unlockendts(from.unlockendts());
    }
    if (from.has_arrivets()) {
      set_arrivets(from.arrivets());
    }
    if (from.has_publicaidtimes()) {
      set_publicaidtimes(from.publicaidtimes());
    }
    if (from.has_commercialaidtimes()) {
      set_commercialaidtimes(from.commercialaidtimes());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_playstatus()) {
      set_playstatus(from.playstatus());
    }
    if (from.has_viewadpackcnt()) {
      set_viewadpackcnt(from.viewadpackcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShippingCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShippingCPP::CopyFrom(const ShippingCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShippingCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ShippingCPP::Swap(ShippingCPP* other) {
  if (other != this) {
    std::swap(badge_, other->badge_);
    std::swap(unlockendts_, other->unlockendts_);
    std::swap(arrivets_, other->arrivets_);
    std::swap(publicaidtimes_, other->publicaidtimes_);
    std::swap(commercialaidtimes_, other->commercialaidtimes_);
    std::swap(status_, other->status_);
    std::swap(playstatus_, other->playstatus_);
    std::swap(viewadpackcnt_, other->viewadpackcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShippingCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShippingCPP_descriptor_;
  metadata.reflection = ShippingCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShippingBoxCPP::kBoxidFieldNumber;
const int ShippingBoxCPP::kPropsidFieldNumber;
const int ShippingBoxCPP::kCountFieldNumber;
const int ShippingBoxCPP::kAidStatusFieldNumber;
const int ShippingBoxCPP::kStatusFieldNumber;
const int ShippingBoxCPP::kCoinFieldNumber;
const int ShippingBoxCPP::kExpFieldNumber;
const int ShippingBoxCPP::kFigFieldNumber;
const int ShippingBoxCPP::kNameFieldNumber;
#endif  // !_MSC_VER

ShippingBoxCPP::ShippingBoxCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.ShippingBoxCPP)
}

void ShippingBoxCPP::InitAsDefaultInstance() {
}

ShippingBoxCPP::ShippingBoxCPP(const ShippingBoxCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.ShippingBoxCPP)
}

void ShippingBoxCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  boxid_ = 0u;
  propsid_ = 0u;
  count_ = 0u;
  aidstatus_ = 0u;
  status_ = 0u;
  coin_ = 0u;
  exp_ = 0u;
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShippingBoxCPP::~ShippingBoxCPP() {
  // @@protoc_insertion_point(destructor:ProtoShipping.ShippingBoxCPP)
  SharedDtor();
}

void ShippingBoxCPP::SharedDtor() {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ShippingBoxCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShippingBoxCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShippingBoxCPP_descriptor_;
}

const ShippingBoxCPP& ShippingBoxCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

ShippingBoxCPP* ShippingBoxCPP::default_instance_ = NULL;

ShippingBoxCPP* ShippingBoxCPP::New() const {
  return new ShippingBoxCPP;
}

void ShippingBoxCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShippingBoxCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(boxid_, coin_);
    exp_ = 0u;
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
  }
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShippingBoxCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.ShippingBoxCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 boxid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsid;
        break;
      }

      // required uint32 propsid = 2;
      case 2: {
        if (tag == 16) {
         parse_propsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_aidStatus;
        break;
      }

      // required uint32 aidStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_aidStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aidstatus_)));
          set_has_aidstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required uint32 status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_coin;
        break;
      }

      // required uint32 coin = 6;
      case 6: {
        if (tag == 48) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // required uint32 exp = 7;
      case 7: {
        if (tag == 56) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fig;
        break;
      }

      // optional bytes fig = 8;
      case 8: {
        if (tag == 66) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }

      // optional bytes name = 9;
      case 9: {
        if (tag == 74) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.ShippingBoxCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.ShippingBoxCPP)
  return false;
#undef DO_
}

void ShippingBoxCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.ShippingBoxCPP)
  // required uint32 boxid = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->boxid(), output);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propsid(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required uint32 aidStatus = 4;
  if (has_aidstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->aidstatus(), output);
  }

  // required uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  // required uint32 coin = 6;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->coin(), output);
  }

  // required uint32 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->exp(), output);
  }

  // optional bytes fig = 8;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->fig(), output);
  }

  // optional bytes name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.ShippingBoxCPP)
}

::google::protobuf::uint8* ShippingBoxCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.ShippingBoxCPP)
  // required uint32 boxid = 1;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->boxid(), target);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propsid(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required uint32 aidStatus = 4;
  if (has_aidstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->aidstatus(), target);
  }

  // required uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  // required uint32 coin = 6;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->coin(), target);
  }

  // required uint32 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->exp(), target);
  }

  // optional bytes fig = 8;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->fig(), target);
  }

  // optional bytes name = 9;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.ShippingBoxCPP)
  return target;
}

int ShippingBoxCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 boxid = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

    // required uint32 propsid = 2;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 aidStatus = 4;
    if (has_aidstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aidstatus());
    }

    // required uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 coin = 6;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional bytes fig = 8;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShippingBoxCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShippingBoxCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShippingBoxCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShippingBoxCPP::MergeFrom(const ShippingBoxCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_aidstatus()) {
      set_aidstatus(from.aidstatus());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShippingBoxCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShippingBoxCPP::CopyFrom(const ShippingBoxCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShippingBoxCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ShippingBoxCPP::Swap(ShippingBoxCPP* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(propsid_, other->propsid_);
    std::swap(count_, other->count_);
    std::swap(aidstatus_, other->aidstatus_);
    std::swap(status_, other->status_);
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(fig_, other->fig_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShippingBoxCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShippingBoxCPP_descriptor_;
  metadata.reflection = ShippingBoxCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FullBoxShipCPP::kPropsidFieldNumber;
const int FullBoxShipCPP::kPropscntFieldNumber;
#endif  // !_MSC_VER

FullBoxShipCPP::FullBoxShipCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.FullBoxShipCPP)
}

void FullBoxShipCPP::InitAsDefaultInstance() {
}

FullBoxShipCPP::FullBoxShipCPP(const FullBoxShipCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.FullBoxShipCPP)
}

void FullBoxShipCPP::SharedCtor() {
  _cached_size_ = 0;
  propsid_ = 0u;
  propscnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FullBoxShipCPP::~FullBoxShipCPP() {
  // @@protoc_insertion_point(destructor:ProtoShipping.FullBoxShipCPP)
  SharedDtor();
}

void FullBoxShipCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FullBoxShipCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FullBoxShipCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FullBoxShipCPP_descriptor_;
}

const FullBoxShipCPP& FullBoxShipCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

FullBoxShipCPP* FullBoxShipCPP::default_instance_ = NULL;

FullBoxShipCPP* FullBoxShipCPP::New() const {
  return new FullBoxShipCPP;
}

void FullBoxShipCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FullBoxShipCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(propsid_, propscnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FullBoxShipCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.FullBoxShipCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 propsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propscnt;
        break;
      }

      // required uint32 propscnt = 2;
      case 2: {
        if (tag == 16) {
         parse_propscnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propscnt_)));
          set_has_propscnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.FullBoxShipCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.FullBoxShipCPP)
  return false;
#undef DO_
}

void FullBoxShipCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.FullBoxShipCPP)
  // required uint32 propsid = 1;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  // required uint32 propscnt = 2;
  if (has_propscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propscnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.FullBoxShipCPP)
}

::google::protobuf::uint8* FullBoxShipCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.FullBoxShipCPP)
  // required uint32 propsid = 1;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  // required uint32 propscnt = 2;
  if (has_propscnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propscnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.FullBoxShipCPP)
  return target;
}

int FullBoxShipCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 propsid = 1;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 propscnt = 2;
    if (has_propscnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propscnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullBoxShipCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FullBoxShipCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FullBoxShipCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FullBoxShipCPP::MergeFrom(const FullBoxShipCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_propscnt()) {
      set_propscnt(from.propscnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FullBoxShipCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullBoxShipCPP::CopyFrom(const FullBoxShipCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullBoxShipCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FullBoxShipCPP::Swap(FullBoxShipCPP* other) {
  if (other != this) {
    std::swap(propsid_, other->propsid_);
    std::swap(propscnt_, other->propscnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FullBoxShipCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FullBoxShipCPP_descriptor_;
  metadata.reflection = FullBoxShipCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UnlockDockReq::UnlockDockReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.UnlockDockReq)
}

void UnlockDockReq::InitAsDefaultInstance() {
}

UnlockDockReq::UnlockDockReq(const UnlockDockReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.UnlockDockReq)
}

void UnlockDockReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockDockReq::~UnlockDockReq() {
  // @@protoc_insertion_point(destructor:ProtoShipping.UnlockDockReq)
  SharedDtor();
}

void UnlockDockReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnlockDockReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockDockReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockDockReq_descriptor_;
}

const UnlockDockReq& UnlockDockReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

UnlockDockReq* UnlockDockReq::default_instance_ = NULL;

UnlockDockReq* UnlockDockReq::New() const {
  return new UnlockDockReq;
}

void UnlockDockReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockDockReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.UnlockDockReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.UnlockDockReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.UnlockDockReq)
  return false;
#undef DO_
}

void UnlockDockReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.UnlockDockReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.UnlockDockReq)
}

::google::protobuf::uint8* UnlockDockReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.UnlockDockReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.UnlockDockReq)
  return target;
}

int UnlockDockReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockDockReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockDockReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockDockReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockDockReq::MergeFrom(const UnlockDockReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockDockReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockDockReq::CopyFrom(const UnlockDockReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockDockReq::IsInitialized() const {

  return true;
}

void UnlockDockReq::Swap(UnlockDockReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockDockReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockDockReq_descriptor_;
  metadata.reflection = UnlockDockReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockDockResp::kShippingFieldNumber;
const int UnlockDockResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

UnlockDockResp::UnlockDockResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.UnlockDockResp)
}

void UnlockDockResp::InitAsDefaultInstance() {
  shipping_ = const_cast< ::ProtoShipping::ShippingCPP*>(&::ProtoShipping::ShippingCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

UnlockDockResp::UnlockDockResp(const UnlockDockResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.UnlockDockResp)
}

void UnlockDockResp::SharedCtor() {
  _cached_size_ = 0;
  shipping_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockDockResp::~UnlockDockResp() {
  // @@protoc_insertion_point(destructor:ProtoShipping.UnlockDockResp)
  SharedDtor();
}

void UnlockDockResp::SharedDtor() {
  if (this != default_instance_) {
    delete shipping_;
    delete commons_;
  }
}

void UnlockDockResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockDockResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockDockResp_descriptor_;
}

const UnlockDockResp& UnlockDockResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

UnlockDockResp* UnlockDockResp::default_instance_ = NULL;

UnlockDockResp* UnlockDockResp::New() const {
  return new UnlockDockResp;
}

void UnlockDockResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_shipping()) {
      if (shipping_ != NULL) shipping_->::ProtoShipping::ShippingCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockDockResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.UnlockDockResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoShipping.ShippingCPP shipping = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shipping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.UnlockDockResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.UnlockDockResp)
  return false;
#undef DO_
}

void UnlockDockResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.UnlockDockResp)
  // required .ProtoShipping.ShippingCPP shipping = 1;
  if (has_shipping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shipping(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.UnlockDockResp)
}

::google::protobuf::uint8* UnlockDockResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.UnlockDockResp)
  // required .ProtoShipping.ShippingCPP shipping = 1;
  if (has_shipping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shipping(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.UnlockDockResp)
  return target;
}

int UnlockDockResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoShipping.ShippingCPP shipping = 1;
    if (has_shipping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shipping());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockDockResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockDockResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockDockResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockDockResp::MergeFrom(const UnlockDockResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shipping()) {
      mutable_shipping()->::ProtoShipping::ShippingCPP::MergeFrom(from.shipping());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockDockResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockDockResp::CopyFrom(const UnlockDockResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockDockResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_shipping()) {
    if (!this->shipping().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void UnlockDockResp::Swap(UnlockDockResp* other) {
  if (other != this) {
    std::swap(shipping_, other->shipping_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockDockResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockDockResp_descriptor_;
  metadata.reflection = UnlockDockResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UnveilDockReq::UnveilDockReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.UnveilDockReq)
}

void UnveilDockReq::InitAsDefaultInstance() {
}

UnveilDockReq::UnveilDockReq(const UnveilDockReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.UnveilDockReq)
}

void UnveilDockReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnveilDockReq::~UnveilDockReq() {
  // @@protoc_insertion_point(destructor:ProtoShipping.UnveilDockReq)
  SharedDtor();
}

void UnveilDockReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnveilDockReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnveilDockReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnveilDockReq_descriptor_;
}

const UnveilDockReq& UnveilDockReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

UnveilDockReq* UnveilDockReq::default_instance_ = NULL;

UnveilDockReq* UnveilDockReq::New() const {
  return new UnveilDockReq;
}

void UnveilDockReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnveilDockReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.UnveilDockReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.UnveilDockReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.UnveilDockReq)
  return false;
#undef DO_
}

void UnveilDockReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.UnveilDockReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.UnveilDockReq)
}

::google::protobuf::uint8* UnveilDockReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.UnveilDockReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.UnveilDockReq)
  return target;
}

int UnveilDockReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnveilDockReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnveilDockReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnveilDockReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnveilDockReq::MergeFrom(const UnveilDockReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnveilDockReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnveilDockReq::CopyFrom(const UnveilDockReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnveilDockReq::IsInitialized() const {

  return true;
}

void UnveilDockReq::Swap(UnveilDockReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnveilDockReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnveilDockReq_descriptor_;
  metadata.reflection = UnveilDockReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnveilDockResp::kShippingFieldNumber;
const int UnveilDockResp::kShipboxesFieldNumber;
#endif  // !_MSC_VER

UnveilDockResp::UnveilDockResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.UnveilDockResp)
}

void UnveilDockResp::InitAsDefaultInstance() {
  shipping_ = const_cast< ::ProtoShipping::ShippingCPP*>(&::ProtoShipping::ShippingCPP::default_instance());
}

UnveilDockResp::UnveilDockResp(const UnveilDockResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.UnveilDockResp)
}

void UnveilDockResp::SharedCtor() {
  _cached_size_ = 0;
  shipping_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnveilDockResp::~UnveilDockResp() {
  // @@protoc_insertion_point(destructor:ProtoShipping.UnveilDockResp)
  SharedDtor();
}

void UnveilDockResp::SharedDtor() {
  if (this != default_instance_) {
    delete shipping_;
  }
}

void UnveilDockResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnveilDockResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnveilDockResp_descriptor_;
}

const UnveilDockResp& UnveilDockResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

UnveilDockResp* UnveilDockResp::default_instance_ = NULL;

UnveilDockResp* UnveilDockResp::New() const {
  return new UnveilDockResp;
}

void UnveilDockResp::Clear() {
  if (has_shipping()) {
    if (shipping_ != NULL) shipping_->::ProtoShipping::ShippingCPP::Clear();
  }
  shipboxes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnveilDockResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.UnveilDockResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoShipping.ShippingCPP shipping = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shipping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shipboxes;
        break;
      }

      // repeated .ProtoShipping.ShippingBoxCPP shipboxes = 2;
      case 2: {
        if (tag == 18) {
         parse_shipboxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shipboxes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shipboxes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.UnveilDockResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.UnveilDockResp)
  return false;
#undef DO_
}

void UnveilDockResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.UnveilDockResp)
  // required .ProtoShipping.ShippingCPP shipping = 1;
  if (has_shipping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shipping(), output);
  }

  // repeated .ProtoShipping.ShippingBoxCPP shipboxes = 2;
  for (int i = 0; i < this->shipboxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shipboxes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.UnveilDockResp)
}

::google::protobuf::uint8* UnveilDockResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.UnveilDockResp)
  // required .ProtoShipping.ShippingCPP shipping = 1;
  if (has_shipping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shipping(), target);
  }

  // repeated .ProtoShipping.ShippingBoxCPP shipboxes = 2;
  for (int i = 0; i < this->shipboxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shipboxes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.UnveilDockResp)
  return target;
}

int UnveilDockResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoShipping.ShippingCPP shipping = 1;
    if (has_shipping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shipping());
    }

  }
  // repeated .ProtoShipping.ShippingBoxCPP shipboxes = 2;
  total_size += 1 * this->shipboxes_size();
  for (int i = 0; i < this->shipboxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shipboxes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnveilDockResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnveilDockResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnveilDockResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnveilDockResp::MergeFrom(const UnveilDockResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  shipboxes_.MergeFrom(from.shipboxes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shipping()) {
      mutable_shipping()->::ProtoShipping::ShippingCPP::MergeFrom(from.shipping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnveilDockResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnveilDockResp::CopyFrom(const UnveilDockResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnveilDockResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_shipping()) {
    if (!this->shipping().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->shipboxes())) return false;
  return true;
}

void UnveilDockResp::Swap(UnveilDockResp* other) {
  if (other != this) {
    std::swap(shipping_, other->shipping_);
    shipboxes_.Swap(&other->shipboxes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnveilDockResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnveilDockResp_descriptor_;
  metadata.reflection = UnveilDockResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackBoxReq::kBoxidFieldNumber;
const int PackBoxReq::kTypeFieldNumber;
#endif  // !_MSC_VER

PackBoxReq::PackBoxReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.PackBoxReq)
}

void PackBoxReq::InitAsDefaultInstance() {
}

PackBoxReq::PackBoxReq(const PackBoxReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.PackBoxReq)
}

void PackBoxReq::SharedCtor() {
  _cached_size_ = 0;
  boxid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackBoxReq::~PackBoxReq() {
  // @@protoc_insertion_point(destructor:ProtoShipping.PackBoxReq)
  SharedDtor();
}

void PackBoxReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackBoxReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackBoxReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackBoxReq_descriptor_;
}

const PackBoxReq& PackBoxReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

PackBoxReq* PackBoxReq::default_instance_ = NULL;

PackBoxReq* PackBoxReq::New() const {
  return new PackBoxReq;
}

void PackBoxReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PackBoxReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(boxid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackBoxReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.PackBoxReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 boxid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.PackBoxReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.PackBoxReq)
  return false;
#undef DO_
}

void PackBoxReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.PackBoxReq)
  // required uint32 boxid = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->boxid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.PackBoxReq)
}

::google::protobuf::uint8* PackBoxReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.PackBoxReq)
  // required uint32 boxid = 1;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->boxid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.PackBoxReq)
  return target;
}

int PackBoxReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 boxid = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackBoxReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackBoxReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackBoxReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackBoxReq::MergeFrom(const PackBoxReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackBoxReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackBoxReq::CopyFrom(const PackBoxReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackBoxReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PackBoxReq::Swap(PackBoxReq* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackBoxReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackBoxReq_descriptor_;
  metadata.reflection = PackBoxReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackBoxResp::kCommonsFieldNumber;
const int PackBoxResp::kBoxesFieldNumber;
const int PackBoxResp::kPointFieldNumber;
const int PackBoxResp::kViewAdPackCntFieldNumber;
#endif  // !_MSC_VER

PackBoxResp::PackBoxResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.PackBoxResp)
}

void PackBoxResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  boxes_ = const_cast< ::ProtoShipping::ShippingBoxCPP*>(&::ProtoShipping::ShippingBoxCPP::default_instance());
  point_ = const_cast< ::ProtoShipping::FullBoxShipCPP*>(&::ProtoShipping::FullBoxShipCPP::default_instance());
}

PackBoxResp::PackBoxResp(const PackBoxResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.PackBoxResp)
}

void PackBoxResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  boxes_ = NULL;
  point_ = NULL;
  viewadpackcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackBoxResp::~PackBoxResp() {
  // @@protoc_insertion_point(destructor:ProtoShipping.PackBoxResp)
  SharedDtor();
}

void PackBoxResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete boxes_;
    delete point_;
  }
}

void PackBoxResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackBoxResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackBoxResp_descriptor_;
}

const PackBoxResp& PackBoxResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

PackBoxResp* PackBoxResp::default_instance_ = NULL;

PackBoxResp* PackBoxResp::New() const {
  return new PackBoxResp;
}

void PackBoxResp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_boxes()) {
      if (boxes_ != NULL) boxes_->::ProtoShipping::ShippingBoxCPP::Clear();
    }
    if (has_point()) {
      if (point_ != NULL) point_->::ProtoShipping::FullBoxShipCPP::Clear();
    }
    viewadpackcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackBoxResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.PackBoxResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_boxes;
        break;
      }

      // required .ProtoShipping.ShippingBoxCPP boxes = 2;
      case 2: {
        if (tag == 18) {
         parse_boxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boxes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_point;
        break;
      }

      // optional .ProtoShipping.FullBoxShipCPP point = 3;
      case 3: {
        if (tag == 26) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_viewAdPackCnt;
        break;
      }

      // optional uint32 viewAdPackCnt = 4;
      case 4: {
        if (tag == 32) {
         parse_viewAdPackCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewadpackcnt_)));
          set_has_viewadpackcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.PackBoxResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.PackBoxResp)
  return false;
#undef DO_
}

void PackBoxResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.PackBoxResp)
  // optional .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  // required .ProtoShipping.ShippingBoxCPP boxes = 2;
  if (has_boxes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boxes(), output);
  }

  // optional .ProtoShipping.FullBoxShipCPP point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->point(), output);
  }

  // optional uint32 viewAdPackCnt = 4;
  if (has_viewadpackcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->viewadpackcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.PackBoxResp)
}

::google::protobuf::uint8* PackBoxResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.PackBoxResp)
  // optional .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  // required .ProtoShipping.ShippingBoxCPP boxes = 2;
  if (has_boxes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->boxes(), target);
  }

  // optional .ProtoShipping.FullBoxShipCPP point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->point(), target);
  }

  // optional uint32 viewAdPackCnt = 4;
  if (has_viewadpackcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->viewadpackcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.PackBoxResp)
  return target;
}

int PackBoxResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required .ProtoShipping.ShippingBoxCPP boxes = 2;
    if (has_boxes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boxes());
    }

    // optional .ProtoShipping.FullBoxShipCPP point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

    // optional uint32 viewAdPackCnt = 4;
    if (has_viewadpackcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewadpackcnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackBoxResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackBoxResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackBoxResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackBoxResp::MergeFrom(const PackBoxResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_boxes()) {
      mutable_boxes()->::ProtoShipping::ShippingBoxCPP::MergeFrom(from.boxes());
    }
    if (from.has_point()) {
      mutable_point()->::ProtoShipping::FullBoxShipCPP::MergeFrom(from.point());
    }
    if (from.has_viewadpackcnt()) {
      set_viewadpackcnt(from.viewadpackcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackBoxResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackBoxResp::CopyFrom(const PackBoxResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackBoxResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_boxes()) {
    if (!this->boxes().IsInitialized()) return false;
  }
  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  return true;
}

void PackBoxResp::Swap(PackBoxResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(boxes_, other->boxes_);
    std::swap(point_, other->point_);
    std::swap(viewadpackcnt_, other->viewadpackcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackBoxResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackBoxResp_descriptor_;
  metadata.reflection = PackBoxResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeekAidReq::kBoxidFieldNumber;
const int SeekAidReq::kTypeFieldNumber;
#endif  // !_MSC_VER

SeekAidReq::SeekAidReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.SeekAidReq)
}

void SeekAidReq::InitAsDefaultInstance() {
}

SeekAidReq::SeekAidReq(const SeekAidReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.SeekAidReq)
}

void SeekAidReq::SharedCtor() {
  _cached_size_ = 0;
  boxid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeekAidReq::~SeekAidReq() {
  // @@protoc_insertion_point(destructor:ProtoShipping.SeekAidReq)
  SharedDtor();
}

void SeekAidReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeekAidReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeekAidReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeekAidReq_descriptor_;
}

const SeekAidReq& SeekAidReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

SeekAidReq* SeekAidReq::default_instance_ = NULL;

SeekAidReq* SeekAidReq::New() const {
  return new SeekAidReq;
}

void SeekAidReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SeekAidReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(boxid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeekAidReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.SeekAidReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 boxid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.SeekAidReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.SeekAidReq)
  return false;
#undef DO_
}

void SeekAidReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.SeekAidReq)
  // required uint32 boxid = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->boxid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.SeekAidReq)
}

::google::protobuf::uint8* SeekAidReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.SeekAidReq)
  // required uint32 boxid = 1;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->boxid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.SeekAidReq)
  return target;
}

int SeekAidReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 boxid = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeekAidReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeekAidReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeekAidReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeekAidReq::MergeFrom(const SeekAidReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeekAidReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeekAidReq::CopyFrom(const SeekAidReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekAidReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SeekAidReq::Swap(SeekAidReq* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeekAidReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeekAidReq_descriptor_;
  metadata.reflection = SeekAidReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeekAidResp::kShippingFieldNumber;
const int SeekAidResp::kBoxesFieldNumber;
#endif  // !_MSC_VER

SeekAidResp::SeekAidResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.SeekAidResp)
}

void SeekAidResp::InitAsDefaultInstance() {
  shipping_ = const_cast< ::ProtoShipping::ShippingCPP*>(&::ProtoShipping::ShippingCPP::default_instance());
  boxes_ = const_cast< ::ProtoShipping::ShippingBoxCPP*>(&::ProtoShipping::ShippingBoxCPP::default_instance());
}

SeekAidResp::SeekAidResp(const SeekAidResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.SeekAidResp)
}

void SeekAidResp::SharedCtor() {
  _cached_size_ = 0;
  shipping_ = NULL;
  boxes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeekAidResp::~SeekAidResp() {
  // @@protoc_insertion_point(destructor:ProtoShipping.SeekAidResp)
  SharedDtor();
}

void SeekAidResp::SharedDtor() {
  if (this != default_instance_) {
    delete shipping_;
    delete boxes_;
  }
}

void SeekAidResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeekAidResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeekAidResp_descriptor_;
}

const SeekAidResp& SeekAidResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

SeekAidResp* SeekAidResp::default_instance_ = NULL;

SeekAidResp* SeekAidResp::New() const {
  return new SeekAidResp;
}

void SeekAidResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_shipping()) {
      if (shipping_ != NULL) shipping_->::ProtoShipping::ShippingCPP::Clear();
    }
    if (has_boxes()) {
      if (boxes_ != NULL) boxes_->::ProtoShipping::ShippingBoxCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeekAidResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.SeekAidResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoShipping.ShippingCPP shipping = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shipping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_boxes;
        break;
      }

      // required .ProtoShipping.ShippingBoxCPP boxes = 2;
      case 2: {
        if (tag == 18) {
         parse_boxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boxes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.SeekAidResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.SeekAidResp)
  return false;
#undef DO_
}

void SeekAidResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.SeekAidResp)
  // required .ProtoShipping.ShippingCPP shipping = 1;
  if (has_shipping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shipping(), output);
  }

  // required .ProtoShipping.ShippingBoxCPP boxes = 2;
  if (has_boxes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boxes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.SeekAidResp)
}

::google::protobuf::uint8* SeekAidResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.SeekAidResp)
  // required .ProtoShipping.ShippingCPP shipping = 1;
  if (has_shipping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shipping(), target);
  }

  // required .ProtoShipping.ShippingBoxCPP boxes = 2;
  if (has_boxes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->boxes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.SeekAidResp)
  return target;
}

int SeekAidResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoShipping.ShippingCPP shipping = 1;
    if (has_shipping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shipping());
    }

    // required .ProtoShipping.ShippingBoxCPP boxes = 2;
    if (has_boxes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boxes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeekAidResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeekAidResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeekAidResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeekAidResp::MergeFrom(const SeekAidResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shipping()) {
      mutable_shipping()->::ProtoShipping::ShippingCPP::MergeFrom(from.shipping());
    }
    if (from.has_boxes()) {
      mutable_boxes()->::ProtoShipping::ShippingBoxCPP::MergeFrom(from.boxes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeekAidResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeekAidResp::CopyFrom(const SeekAidResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekAidResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_shipping()) {
    if (!this->shipping().IsInitialized()) return false;
  }
  if (has_boxes()) {
    if (!this->boxes().IsInitialized()) return false;
  }
  return true;
}

void SeekAidResp::Swap(SeekAidResp* other) {
  if (other != this) {
    std::swap(shipping_, other->shipping_);
    std::swap(boxes_, other->boxes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeekAidResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeekAidResp_descriptor_;
  metadata.reflection = SeekAidResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferAidReq::kOthuidFieldNumber;
const int OfferAidReq::kBoxidFieldNumber;
const int OfferAidReq::kPropsidFieldNumber;
const int OfferAidReq::kPropscntFieldNumber;
const int OfferAidReq::kCoinFieldNumber;
const int OfferAidReq::kExpFieldNumber;
#endif  // !_MSC_VER

OfferAidReq::OfferAidReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.OfferAidReq)
}

void OfferAidReq::InitAsDefaultInstance() {
}

OfferAidReq::OfferAidReq(const OfferAidReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.OfferAidReq)
}

void OfferAidReq::SharedCtor() {
  _cached_size_ = 0;
  othuid_ = 0u;
  boxid_ = 0u;
  propsid_ = 0u;
  propscnt_ = 0u;
  coin_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferAidReq::~OfferAidReq() {
  // @@protoc_insertion_point(destructor:ProtoShipping.OfferAidReq)
  SharedDtor();
}

void OfferAidReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfferAidReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferAidReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferAidReq_descriptor_;
}

const OfferAidReq& OfferAidReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

OfferAidReq* OfferAidReq::default_instance_ = NULL;

OfferAidReq* OfferAidReq::New() const {
  return new OfferAidReq;
}

void OfferAidReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OfferAidReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(othuid_, exp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferAidReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.OfferAidReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 othuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_boxid;
        break;
      }

      // required uint32 boxid = 2;
      case 2: {
        if (tag == 16) {
         parse_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_propsid;
        break;
      }

      // required uint32 propsid = 3;
      case 3: {
        if (tag == 24) {
         parse_propsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_propscnt;
        break;
      }

      // required uint32 propscnt = 4;
      case 4: {
        if (tag == 32) {
         parse_propscnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propscnt_)));
          set_has_propscnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_coin;
        break;
      }

      // required uint32 coin = 5;
      case 5: {
        if (tag == 40) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // required uint32 exp = 6;
      case 6: {
        if (tag == 48) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.OfferAidReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.OfferAidReq)
  return false;
#undef DO_
}

void OfferAidReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.OfferAidReq)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->othuid(), output);
  }

  // required uint32 boxid = 2;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boxid(), output);
  }

  // required uint32 propsid = 3;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->propsid(), output);
  }

  // required uint32 propscnt = 4;
  if (has_propscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->propscnt(), output);
  }

  // required uint32 coin = 5;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->coin(), output);
  }

  // required uint32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.OfferAidReq)
}

::google::protobuf::uint8* OfferAidReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.OfferAidReq)
  // required uint32 othuid = 1;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->othuid(), target);
  }

  // required uint32 boxid = 2;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boxid(), target);
  }

  // required uint32 propsid = 3;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->propsid(), target);
  }

  // required uint32 propscnt = 4;
  if (has_propscnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->propscnt(), target);
  }

  // required uint32 coin = 5;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->coin(), target);
  }

  // required uint32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.OfferAidReq)
  return target;
}

int OfferAidReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 othuid = 1;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

    // required uint32 boxid = 2;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

    // required uint32 propsid = 3;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 propscnt = 4;
    if (has_propscnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propscnt());
    }

    // required uint32 coin = 5;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferAidReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferAidReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferAidReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferAidReq::MergeFrom(const OfferAidReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_propscnt()) {
      set_propscnt(from.propscnt());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferAidReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferAidReq::CopyFrom(const OfferAidReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferAidReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void OfferAidReq::Swap(OfferAidReq* other) {
  if (other != this) {
    std::swap(othuid_, other->othuid_);
    std::swap(boxid_, other->boxid_);
    std::swap(propsid_, other->propsid_);
    std::swap(propscnt_, other->propscnt_);
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferAidReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferAidReq_descriptor_;
  metadata.reflection = OfferAidReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferAidResp::kCommonsFieldNumber;
const int OfferAidResp::kSelfshippingFieldNumber;
const int OfferAidResp::kOthboxesFieldNumber;
const int OfferAidResp::kOthboxidFieldNumber;
#endif  // !_MSC_VER

OfferAidResp::OfferAidResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.OfferAidResp)
}

void OfferAidResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  selfshipping_ = const_cast< ::ProtoShipping::ShippingCPP*>(&::ProtoShipping::ShippingCPP::default_instance());
  othboxes_ = const_cast< ::ProtoShipping::ShippingBoxCPP*>(&::ProtoShipping::ShippingBoxCPP::default_instance());
}

OfferAidResp::OfferAidResp(const OfferAidResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.OfferAidResp)
}

void OfferAidResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  selfshipping_ = NULL;
  othboxes_ = NULL;
  othboxid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferAidResp::~OfferAidResp() {
  // @@protoc_insertion_point(destructor:ProtoShipping.OfferAidResp)
  SharedDtor();
}

void OfferAidResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete selfshipping_;
    delete othboxes_;
  }
}

void OfferAidResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferAidResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferAidResp_descriptor_;
}

const OfferAidResp& OfferAidResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

OfferAidResp* OfferAidResp::default_instance_ = NULL;

OfferAidResp* OfferAidResp::New() const {
  return new OfferAidResp;
}

void OfferAidResp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_selfshipping()) {
      if (selfshipping_ != NULL) selfshipping_->::ProtoShipping::ShippingCPP::Clear();
    }
    if (has_othboxes()) {
      if (othboxes_ != NULL) othboxes_->::ProtoShipping::ShippingBoxCPP::Clear();
    }
    othboxid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferAidResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.OfferAidResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_selfshipping;
        break;
      }

      // required .ProtoShipping.ShippingCPP selfshipping = 2;
      case 2: {
        if (tag == 18) {
         parse_selfshipping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfshipping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_othboxes;
        break;
      }

      // optional .ProtoShipping.ShippingBoxCPP othboxes = 3;
      case 3: {
        if (tag == 26) {
         parse_othboxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_othboxes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_othboxid;
        break;
      }

      // optional uint32 othboxid = 4;
      case 4: {
        if (tag == 32) {
         parse_othboxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othboxid_)));
          set_has_othboxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.OfferAidResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.OfferAidResp)
  return false;
#undef DO_
}

void OfferAidResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.OfferAidResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  // required .ProtoShipping.ShippingCPP selfshipping = 2;
  if (has_selfshipping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selfshipping(), output);
  }

  // optional .ProtoShipping.ShippingBoxCPP othboxes = 3;
  if (has_othboxes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->othboxes(), output);
  }

  // optional uint32 othboxid = 4;
  if (has_othboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->othboxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.OfferAidResp)
}

::google::protobuf::uint8* OfferAidResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.OfferAidResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  // required .ProtoShipping.ShippingCPP selfshipping = 2;
  if (has_selfshipping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selfshipping(), target);
  }

  // optional .ProtoShipping.ShippingBoxCPP othboxes = 3;
  if (has_othboxes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->othboxes(), target);
  }

  // optional uint32 othboxid = 4;
  if (has_othboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->othboxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.OfferAidResp)
  return target;
}

int OfferAidResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required .ProtoShipping.ShippingCPP selfshipping = 2;
    if (has_selfshipping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfshipping());
    }

    // optional .ProtoShipping.ShippingBoxCPP othboxes = 3;
    if (has_othboxes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->othboxes());
    }

    // optional uint32 othboxid = 4;
    if (has_othboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othboxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferAidResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferAidResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferAidResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferAidResp::MergeFrom(const OfferAidResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_selfshipping()) {
      mutable_selfshipping()->::ProtoShipping::ShippingCPP::MergeFrom(from.selfshipping());
    }
    if (from.has_othboxes()) {
      mutable_othboxes()->::ProtoShipping::ShippingBoxCPP::MergeFrom(from.othboxes());
    }
    if (from.has_othboxid()) {
      set_othboxid(from.othboxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferAidResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferAidResp::CopyFrom(const OfferAidResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferAidResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_selfshipping()) {
    if (!this->selfshipping().IsInitialized()) return false;
  }
  if (has_othboxes()) {
    if (!this->othboxes().IsInitialized()) return false;
  }
  return true;
}

void OfferAidResp::Swap(OfferAidResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(selfshipping_, other->selfshipping_);
    std::swap(othboxes_, other->othboxes_);
    std::swap(othboxid_, other->othboxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferAidResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferAidResp_descriptor_;
  metadata.reflection = OfferAidResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOfferAidReq::kMyuidFieldNumber;
const int CSOfferAidReq::kOthuidFieldNumber;
const int CSOfferAidReq::kBoxFieldNumber;
const int CSOfferAidReq::kMyallianceidFieldNumber;
#endif  // !_MSC_VER

CSOfferAidReq::CSOfferAidReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.CSOfferAidReq)
}

void CSOfferAidReq::InitAsDefaultInstance() {
  box_ = const_cast< ::ProtoShipping::ShippingBoxCPP*>(&::ProtoShipping::ShippingBoxCPP::default_instance());
}

CSOfferAidReq::CSOfferAidReq(const CSOfferAidReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.CSOfferAidReq)
}

void CSOfferAidReq::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  othuid_ = 0u;
  box_ = NULL;
  myallianceid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOfferAidReq::~CSOfferAidReq() {
  // @@protoc_insertion_point(destructor:ProtoShipping.CSOfferAidReq)
  SharedDtor();
}

void CSOfferAidReq::SharedDtor() {
  if (this != default_instance_) {
    delete box_;
  }
}

void CSOfferAidReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOfferAidReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOfferAidReq_descriptor_;
}

const CSOfferAidReq& CSOfferAidReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

CSOfferAidReq* CSOfferAidReq::default_instance_ = NULL;

CSOfferAidReq* CSOfferAidReq::New() const {
  return new CSOfferAidReq;
}

void CSOfferAidReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CSOfferAidReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(myuid_, othuid_);
    if (has_box()) {
      if (box_ != NULL) box_->::ProtoShipping::ShippingBoxCPP::Clear();
    }
    myallianceid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOfferAidReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.CSOfferAidReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_othuid;
        break;
      }

      // required uint32 othuid = 2;
      case 2: {
        if (tag == 16) {
         parse_othuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_box;
        break;
      }

      // required .ProtoShipping.ShippingBoxCPP box = 3;
      case 3: {
        if (tag == 26) {
         parse_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_myallianceid;
        break;
      }

      // required uint32 myallianceid = 4;
      case 4: {
        if (tag == 32) {
         parse_myallianceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myallianceid_)));
          set_has_myallianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.CSOfferAidReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.CSOfferAidReq)
  return false;
#undef DO_
}

void CSOfferAidReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.CSOfferAidReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->othuid(), output);
  }

  // required .ProtoShipping.ShippingBoxCPP box = 3;
  if (has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->box(), output);
  }

  // required uint32 myallianceid = 4;
  if (has_myallianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->myallianceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.CSOfferAidReq)
}

::google::protobuf::uint8* CSOfferAidReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.CSOfferAidReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->othuid(), target);
  }

  // required .ProtoShipping.ShippingBoxCPP box = 3;
  if (has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->box(), target);
  }

  // required uint32 myallianceid = 4;
  if (has_myallianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->myallianceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.CSOfferAidReq)
  return target;
}

int CSOfferAidReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myuid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // required uint32 othuid = 2;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

    // required .ProtoShipping.ShippingBoxCPP box = 3;
    if (has_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box());
    }

    // required uint32 myallianceid = 4;
    if (has_myallianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myallianceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOfferAidReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOfferAidReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOfferAidReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOfferAidReq::MergeFrom(const CSOfferAidReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_box()) {
      mutable_box()->::ProtoShipping::ShippingBoxCPP::MergeFrom(from.box());
    }
    if (from.has_myallianceid()) {
      set_myallianceid(from.myallianceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOfferAidReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOfferAidReq::CopyFrom(const CSOfferAidReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOfferAidReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_box()) {
    if (!this->box().IsInitialized()) return false;
  }
  return true;
}

void CSOfferAidReq::Swap(CSOfferAidReq* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(othuid_, other->othuid_);
    std::swap(box_, other->box_);
    std::swap(myallianceid_, other->myallianceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOfferAidReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOfferAidReq_descriptor_;
  metadata.reflection = CSOfferAidReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSOfferAidResp::kMyuidFieldNumber;
#endif  // !_MSC_VER

CSOfferAidResp::CSOfferAidResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.CSOfferAidResp)
}

void CSOfferAidResp::InitAsDefaultInstance() {
}

CSOfferAidResp::CSOfferAidResp(const CSOfferAidResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.CSOfferAidResp)
}

void CSOfferAidResp::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOfferAidResp::~CSOfferAidResp() {
  // @@protoc_insertion_point(destructor:ProtoShipping.CSOfferAidResp)
  SharedDtor();
}

void CSOfferAidResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSOfferAidResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSOfferAidResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSOfferAidResp_descriptor_;
}

const CSOfferAidResp& CSOfferAidResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

CSOfferAidResp* CSOfferAidResp::default_instance_ = NULL;

CSOfferAidResp* CSOfferAidResp::New() const {
  return new CSOfferAidResp;
}

void CSOfferAidResp::Clear() {
  myuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSOfferAidResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.CSOfferAidResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.CSOfferAidResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.CSOfferAidResp)
  return false;
#undef DO_
}

void CSOfferAidResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.CSOfferAidResp)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.CSOfferAidResp)
}

::google::protobuf::uint8* CSOfferAidResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.CSOfferAidResp)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.CSOfferAidResp)
  return target;
}

int CSOfferAidResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myuid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOfferAidResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSOfferAidResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSOfferAidResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSOfferAidResp::MergeFrom(const CSOfferAidResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSOfferAidResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOfferAidResp::CopyFrom(const CSOfferAidResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOfferAidResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSOfferAidResp::Swap(CSOfferAidResp* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSOfferAidResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSOfferAidResp_descriptor_;
  metadata.reflection = CSOfferAidResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LeaveDockReq::LeaveDockReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.LeaveDockReq)
}

void LeaveDockReq::InitAsDefaultInstance() {
}

LeaveDockReq::LeaveDockReq(const LeaveDockReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.LeaveDockReq)
}

void LeaveDockReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveDockReq::~LeaveDockReq() {
  // @@protoc_insertion_point(destructor:ProtoShipping.LeaveDockReq)
  SharedDtor();
}

void LeaveDockReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveDockReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveDockReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveDockReq_descriptor_;
}

const LeaveDockReq& LeaveDockReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

LeaveDockReq* LeaveDockReq::default_instance_ = NULL;

LeaveDockReq* LeaveDockReq::New() const {
  return new LeaveDockReq;
}

void LeaveDockReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveDockReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.LeaveDockReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.LeaveDockReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.LeaveDockReq)
  return false;
#undef DO_
}

void LeaveDockReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.LeaveDockReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.LeaveDockReq)
}

::google::protobuf::uint8* LeaveDockReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.LeaveDockReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.LeaveDockReq)
  return target;
}

int LeaveDockReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveDockReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveDockReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveDockReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveDockReq::MergeFrom(const LeaveDockReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveDockReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveDockReq::CopyFrom(const LeaveDockReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveDockReq::IsInitialized() const {

  return true;
}

void LeaveDockReq::Swap(LeaveDockReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveDockReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveDockReq_descriptor_;
  metadata.reflection = LeaveDockReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveDockResp::kShippingFieldNumber;
const int LeaveDockResp::kShipboxesFieldNumber;
const int LeaveDockResp::kCommonsFieldNumber;
const int LeaveDockResp::kVipshipbonusFieldNumber;
#endif  // !_MSC_VER

LeaveDockResp::LeaveDockResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.LeaveDockResp)
}

void LeaveDockResp::InitAsDefaultInstance() {
  shipping_ = const_cast< ::ProtoShipping::ShippingCPP*>(&::ProtoShipping::ShippingCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  vipshipbonus_ = const_cast< ::ProtoShipping::ShipVIPBonusCPP*>(&::ProtoShipping::ShipVIPBonusCPP::default_instance());
}

LeaveDockResp::LeaveDockResp(const LeaveDockResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.LeaveDockResp)
}

void LeaveDockResp::SharedCtor() {
  _cached_size_ = 0;
  shipping_ = NULL;
  commons_ = NULL;
  vipshipbonus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveDockResp::~LeaveDockResp() {
  // @@protoc_insertion_point(destructor:ProtoShipping.LeaveDockResp)
  SharedDtor();
}

void LeaveDockResp::SharedDtor() {
  if (this != default_instance_) {
    delete shipping_;
    delete commons_;
    delete vipshipbonus_;
  }
}

void LeaveDockResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveDockResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveDockResp_descriptor_;
}

const LeaveDockResp& LeaveDockResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

LeaveDockResp* LeaveDockResp::default_instance_ = NULL;

LeaveDockResp* LeaveDockResp::New() const {
  return new LeaveDockResp;
}

void LeaveDockResp::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_shipping()) {
      if (shipping_ != NULL) shipping_->::ProtoShipping::ShippingCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_vipshipbonus()) {
      if (vipshipbonus_ != NULL) vipshipbonus_->::ProtoShipping::ShipVIPBonusCPP::Clear();
    }
  }
  shipboxes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveDockResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.LeaveDockResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoShipping.ShippingCPP shipping = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shipping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shipboxes;
        break;
      }

      // repeated .ProtoShipping.ShippingBoxCPP shipboxes = 2;
      case 2: {
        if (tag == 18) {
         parse_shipboxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shipboxes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shipboxes;
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vipshipbonus;
        break;
      }

      // optional .ProtoShipping.ShipVIPBonusCPP vipshipbonus = 4;
      case 4: {
        if (tag == 34) {
         parse_vipshipbonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipshipbonus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.LeaveDockResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.LeaveDockResp)
  return false;
#undef DO_
}

void LeaveDockResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.LeaveDockResp)
  // required .ProtoShipping.ShippingCPP shipping = 1;
  if (has_shipping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shipping(), output);
  }

  // repeated .ProtoShipping.ShippingBoxCPP shipboxes = 2;
  for (int i = 0; i < this->shipboxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shipboxes(i), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  // optional .ProtoShipping.ShipVIPBonusCPP vipshipbonus = 4;
  if (has_vipshipbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vipshipbonus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.LeaveDockResp)
}

::google::protobuf::uint8* LeaveDockResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.LeaveDockResp)
  // required .ProtoShipping.ShippingCPP shipping = 1;
  if (has_shipping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shipping(), target);
  }

  // repeated .ProtoShipping.ShippingBoxCPP shipboxes = 2;
  for (int i = 0; i < this->shipboxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shipboxes(i), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  // optional .ProtoShipping.ShipVIPBonusCPP vipshipbonus = 4;
  if (has_vipshipbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vipshipbonus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.LeaveDockResp)
  return target;
}

int LeaveDockResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoShipping.ShippingCPP shipping = 1;
    if (has_shipping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shipping());
    }

    // required .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // optional .ProtoShipping.ShipVIPBonusCPP vipshipbonus = 4;
    if (has_vipshipbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipshipbonus());
    }

  }
  // repeated .ProtoShipping.ShippingBoxCPP shipboxes = 2;
  total_size += 1 * this->shipboxes_size();
  for (int i = 0; i < this->shipboxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shipboxes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveDockResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveDockResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveDockResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveDockResp::MergeFrom(const LeaveDockResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  shipboxes_.MergeFrom(from.shipboxes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shipping()) {
      mutable_shipping()->::ProtoShipping::ShippingCPP::MergeFrom(from.shipping());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_vipshipbonus()) {
      mutable_vipshipbonus()->::ProtoShipping::ShipVIPBonusCPP::MergeFrom(from.vipshipbonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveDockResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveDockResp::CopyFrom(const LeaveDockResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveDockResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_shipping()) {
    if (!this->shipping().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->shipboxes())) return false;
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_vipshipbonus()) {
    if (!this->vipshipbonus().IsInitialized()) return false;
  }
  return true;
}

void LeaveDockResp::Swap(LeaveDockResp* other) {
  if (other != this) {
    std::swap(shipping_, other->shipping_);
    shipboxes_.Swap(&other->shipboxes_);
    std::swap(commons_, other->commons_);
    std::swap(vipshipbonus_, other->vipshipbonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveDockResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveDockResp_descriptor_;
  metadata.reflection = LeaveDockResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SetPlayStatusReq::SetPlayStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.SetPlayStatusReq)
}

void SetPlayStatusReq::InitAsDefaultInstance() {
}

SetPlayStatusReq::SetPlayStatusReq(const SetPlayStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.SetPlayStatusReq)
}

void SetPlayStatusReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPlayStatusReq::~SetPlayStatusReq() {
  // @@protoc_insertion_point(destructor:ProtoShipping.SetPlayStatusReq)
  SharedDtor();
}

void SetPlayStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetPlayStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPlayStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPlayStatusReq_descriptor_;
}

const SetPlayStatusReq& SetPlayStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

SetPlayStatusReq* SetPlayStatusReq::default_instance_ = NULL;

SetPlayStatusReq* SetPlayStatusReq::New() const {
  return new SetPlayStatusReq;
}

void SetPlayStatusReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPlayStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.SetPlayStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.SetPlayStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.SetPlayStatusReq)
  return false;
#undef DO_
}

void SetPlayStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.SetPlayStatusReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.SetPlayStatusReq)
}

::google::protobuf::uint8* SetPlayStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.SetPlayStatusReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.SetPlayStatusReq)
  return target;
}

int SetPlayStatusReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPlayStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPlayStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPlayStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPlayStatusReq::MergeFrom(const SetPlayStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPlayStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPlayStatusReq::CopyFrom(const SetPlayStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPlayStatusReq::IsInitialized() const {

  return true;
}

void SetPlayStatusReq::Swap(SetPlayStatusReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPlayStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPlayStatusReq_descriptor_;
  metadata.reflection = SetPlayStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPlayStatusResp::kShippingFieldNumber;
#endif  // !_MSC_VER

SetPlayStatusResp::SetPlayStatusResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.SetPlayStatusResp)
}

void SetPlayStatusResp::InitAsDefaultInstance() {
  shipping_ = const_cast< ::ProtoShipping::ShippingCPP*>(&::ProtoShipping::ShippingCPP::default_instance());
}

SetPlayStatusResp::SetPlayStatusResp(const SetPlayStatusResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.SetPlayStatusResp)
}

void SetPlayStatusResp::SharedCtor() {
  _cached_size_ = 0;
  shipping_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPlayStatusResp::~SetPlayStatusResp() {
  // @@protoc_insertion_point(destructor:ProtoShipping.SetPlayStatusResp)
  SharedDtor();
}

void SetPlayStatusResp::SharedDtor() {
  if (this != default_instance_) {
    delete shipping_;
  }
}

void SetPlayStatusResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPlayStatusResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPlayStatusResp_descriptor_;
}

const SetPlayStatusResp& SetPlayStatusResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

SetPlayStatusResp* SetPlayStatusResp::default_instance_ = NULL;

SetPlayStatusResp* SetPlayStatusResp::New() const {
  return new SetPlayStatusResp;
}

void SetPlayStatusResp::Clear() {
  if (has_shipping()) {
    if (shipping_ != NULL) shipping_->::ProtoShipping::ShippingCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPlayStatusResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.SetPlayStatusResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoShipping.ShippingCPP shipping = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shipping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.SetPlayStatusResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.SetPlayStatusResp)
  return false;
#undef DO_
}

void SetPlayStatusResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.SetPlayStatusResp)
  // required .ProtoShipping.ShippingCPP shipping = 1;
  if (has_shipping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shipping(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.SetPlayStatusResp)
}

::google::protobuf::uint8* SetPlayStatusResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.SetPlayStatusResp)
  // required .ProtoShipping.ShippingCPP shipping = 1;
  if (has_shipping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shipping(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.SetPlayStatusResp)
  return target;
}

int SetPlayStatusResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoShipping.ShippingCPP shipping = 1;
    if (has_shipping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shipping());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPlayStatusResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPlayStatusResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPlayStatusResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPlayStatusResp::MergeFrom(const SetPlayStatusResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shipping()) {
      mutable_shipping()->::ProtoShipping::ShippingCPP::MergeFrom(from.shipping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPlayStatusResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPlayStatusResp::CopyFrom(const SetPlayStatusResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPlayStatusResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_shipping()) {
    if (!this->shipping().IsInitialized()) return false;
  }
  return true;
}

void SetPlayStatusResp::Swap(SetPlayStatusResp* other) {
  if (other != this) {
    std::swap(shipping_, other->shipping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPlayStatusResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPlayStatusResp_descriptor_;
  metadata.reflection = SetPlayStatusResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushShipBox::kBoxFieldNumber;
#endif  // !_MSC_VER

PushShipBox::PushShipBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.PushShipBox)
}

void PushShipBox::InitAsDefaultInstance() {
  box_ = const_cast< ::ProtoShipping::ShippingBoxCPP*>(&::ProtoShipping::ShippingBoxCPP::default_instance());
}

PushShipBox::PushShipBox(const PushShipBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.PushShipBox)
}

void PushShipBox::SharedCtor() {
  _cached_size_ = 0;
  box_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushShipBox::~PushShipBox() {
  // @@protoc_insertion_point(destructor:ProtoShipping.PushShipBox)
  SharedDtor();
}

void PushShipBox::SharedDtor() {
  if (this != default_instance_) {
    delete box_;
  }
}

void PushShipBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushShipBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushShipBox_descriptor_;
}

const PushShipBox& PushShipBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

PushShipBox* PushShipBox::default_instance_ = NULL;

PushShipBox* PushShipBox::New() const {
  return new PushShipBox;
}

void PushShipBox::Clear() {
  if (has_box()) {
    if (box_ != NULL) box_->::ProtoShipping::ShippingBoxCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushShipBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.PushShipBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoShipping.ShippingBoxCPP box = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.PushShipBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.PushShipBox)
  return false;
#undef DO_
}

void PushShipBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.PushShipBox)
  // required .ProtoShipping.ShippingBoxCPP box = 1;
  if (has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->box(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.PushShipBox)
}

::google::protobuf::uint8* PushShipBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.PushShipBox)
  // required .ProtoShipping.ShippingBoxCPP box = 1;
  if (has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->box(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.PushShipBox)
  return target;
}

int PushShipBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoShipping.ShippingBoxCPP box = 1;
    if (has_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->box());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushShipBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushShipBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushShipBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushShipBox::MergeFrom(const PushShipBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_box()) {
      mutable_box()->::ProtoShipping::ShippingBoxCPP::MergeFrom(from.box());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushShipBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushShipBox::CopyFrom(const PushShipBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushShipBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_box()) {
    if (!this->box().IsInitialized()) return false;
  }
  return true;
}

void PushShipBox::Swap(PushShipBox* other) {
  if (other != this) {
    std::swap(box_, other->box_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushShipBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushShipBox_descriptor_;
  metadata.reflection = PushShipBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipVIPBonusCPP::kRemaincntFieldNumber;
#endif  // !_MSC_VER

ShipVIPBonusCPP::ShipVIPBonusCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.ShipVIPBonusCPP)
}

void ShipVIPBonusCPP::InitAsDefaultInstance() {
}

ShipVIPBonusCPP::ShipVIPBonusCPP(const ShipVIPBonusCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.ShipVIPBonusCPP)
}

void ShipVIPBonusCPP::SharedCtor() {
  _cached_size_ = 0;
  remaincnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipVIPBonusCPP::~ShipVIPBonusCPP() {
  // @@protoc_insertion_point(destructor:ProtoShipping.ShipVIPBonusCPP)
  SharedDtor();
}

void ShipVIPBonusCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShipVIPBonusCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipVIPBonusCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipVIPBonusCPP_descriptor_;
}

const ShipVIPBonusCPP& ShipVIPBonusCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

ShipVIPBonusCPP* ShipVIPBonusCPP::default_instance_ = NULL;

ShipVIPBonusCPP* ShipVIPBonusCPP::New() const {
  return new ShipVIPBonusCPP;
}

void ShipVIPBonusCPP::Clear() {
  remaincnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipVIPBonusCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.ShipVIPBonusCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 remaincnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaincnt_)));
          set_has_remaincnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.ShipVIPBonusCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.ShipVIPBonusCPP)
  return false;
#undef DO_
}

void ShipVIPBonusCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.ShipVIPBonusCPP)
  // required uint32 remaincnt = 1;
  if (has_remaincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remaincnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.ShipVIPBonusCPP)
}

::google::protobuf::uint8* ShipVIPBonusCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.ShipVIPBonusCPP)
  // required uint32 remaincnt = 1;
  if (has_remaincnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remaincnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.ShipVIPBonusCPP)
  return target;
}

int ShipVIPBonusCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 remaincnt = 1;
    if (has_remaincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaincnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipVIPBonusCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipVIPBonusCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipVIPBonusCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipVIPBonusCPP::MergeFrom(const ShipVIPBonusCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remaincnt()) {
      set_remaincnt(from.remaincnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipVIPBonusCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipVIPBonusCPP::CopyFrom(const ShipVIPBonusCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipVIPBonusCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShipVIPBonusCPP::Swap(ShipVIPBonusCPP* other) {
  if (other != this) {
    std::swap(remaincnt_, other->remaincnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipVIPBonusCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipVIPBonusCPP_descriptor_;
  metadata.reflection = ShipVIPBonusCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetShipBonusInfoReq::GetShipBonusInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.GetShipBonusInfoReq)
}

void GetShipBonusInfoReq::InitAsDefaultInstance() {
}

GetShipBonusInfoReq::GetShipBonusInfoReq(const GetShipBonusInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.GetShipBonusInfoReq)
}

void GetShipBonusInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetShipBonusInfoReq::~GetShipBonusInfoReq() {
  // @@protoc_insertion_point(destructor:ProtoShipping.GetShipBonusInfoReq)
  SharedDtor();
}

void GetShipBonusInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetShipBonusInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetShipBonusInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetShipBonusInfoReq_descriptor_;
}

const GetShipBonusInfoReq& GetShipBonusInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

GetShipBonusInfoReq* GetShipBonusInfoReq::default_instance_ = NULL;

GetShipBonusInfoReq* GetShipBonusInfoReq::New() const {
  return new GetShipBonusInfoReq;
}

void GetShipBonusInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetShipBonusInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.GetShipBonusInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.GetShipBonusInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.GetShipBonusInfoReq)
  return false;
#undef DO_
}

void GetShipBonusInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.GetShipBonusInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.GetShipBonusInfoReq)
}

::google::protobuf::uint8* GetShipBonusInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.GetShipBonusInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.GetShipBonusInfoReq)
  return target;
}

int GetShipBonusInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetShipBonusInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetShipBonusInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetShipBonusInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetShipBonusInfoReq::MergeFrom(const GetShipBonusInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetShipBonusInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShipBonusInfoReq::CopyFrom(const GetShipBonusInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShipBonusInfoReq::IsInitialized() const {

  return true;
}

void GetShipBonusInfoReq::Swap(GetShipBonusInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetShipBonusInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetShipBonusInfoReq_descriptor_;
  metadata.reflection = GetShipBonusInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetShipBonusInfoResp::kVipshipbonusFieldNumber;
const int GetShipBonusInfoResp::kPointFieldNumber;
#endif  // !_MSC_VER

GetShipBonusInfoResp::GetShipBonusInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.GetShipBonusInfoResp)
}

void GetShipBonusInfoResp::InitAsDefaultInstance() {
  vipshipbonus_ = const_cast< ::ProtoShipping::ShipVIPBonusCPP*>(&::ProtoShipping::ShipVIPBonusCPP::default_instance());
  point_ = const_cast< ::ProtoShipping::FullBoxShipCPP*>(&::ProtoShipping::FullBoxShipCPP::default_instance());
}

GetShipBonusInfoResp::GetShipBonusInfoResp(const GetShipBonusInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.GetShipBonusInfoResp)
}

void GetShipBonusInfoResp::SharedCtor() {
  _cached_size_ = 0;
  vipshipbonus_ = NULL;
  point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetShipBonusInfoResp::~GetShipBonusInfoResp() {
  // @@protoc_insertion_point(destructor:ProtoShipping.GetShipBonusInfoResp)
  SharedDtor();
}

void GetShipBonusInfoResp::SharedDtor() {
  if (this != default_instance_) {
    delete vipshipbonus_;
    delete point_;
  }
}

void GetShipBonusInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetShipBonusInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetShipBonusInfoResp_descriptor_;
}

const GetShipBonusInfoResp& GetShipBonusInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

GetShipBonusInfoResp* GetShipBonusInfoResp::default_instance_ = NULL;

GetShipBonusInfoResp* GetShipBonusInfoResp::New() const {
  return new GetShipBonusInfoResp;
}

void GetShipBonusInfoResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_vipshipbonus()) {
      if (vipshipbonus_ != NULL) vipshipbonus_->::ProtoShipping::ShipVIPBonusCPP::Clear();
    }
    if (has_point()) {
      if (point_ != NULL) point_->::ProtoShipping::FullBoxShipCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetShipBonusInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.GetShipBonusInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoShipping.ShipVIPBonusCPP vipshipbonus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipshipbonus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_point;
        break;
      }

      // optional .ProtoShipping.FullBoxShipCPP point = 2;
      case 2: {
        if (tag == 18) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.GetShipBonusInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.GetShipBonusInfoResp)
  return false;
#undef DO_
}

void GetShipBonusInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.GetShipBonusInfoResp)
  // required .ProtoShipping.ShipVIPBonusCPP vipshipbonus = 1;
  if (has_vipshipbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vipshipbonus(), output);
  }

  // optional .ProtoShipping.FullBoxShipCPP point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.GetShipBonusInfoResp)
}

::google::protobuf::uint8* GetShipBonusInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.GetShipBonusInfoResp)
  // required .ProtoShipping.ShipVIPBonusCPP vipshipbonus = 1;
  if (has_vipshipbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vipshipbonus(), target);
  }

  // optional .ProtoShipping.FullBoxShipCPP point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.GetShipBonusInfoResp)
  return target;
}

int GetShipBonusInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoShipping.ShipVIPBonusCPP vipshipbonus = 1;
    if (has_vipshipbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipshipbonus());
    }

    // optional .ProtoShipping.FullBoxShipCPP point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetShipBonusInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetShipBonusInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetShipBonusInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetShipBonusInfoResp::MergeFrom(const GetShipBonusInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vipshipbonus()) {
      mutable_vipshipbonus()->::ProtoShipping::ShipVIPBonusCPP::MergeFrom(from.vipshipbonus());
    }
    if (from.has_point()) {
      mutable_point()->::ProtoShipping::FullBoxShipCPP::MergeFrom(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetShipBonusInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShipBonusInfoResp::CopyFrom(const GetShipBonusInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShipBonusInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_vipshipbonus()) {
    if (!this->vipshipbonus().IsInitialized()) return false;
  }
  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  return true;
}

void GetShipBonusInfoResp::Swap(GetShipBonusInfoResp* other) {
  if (other != this) {
    std::swap(vipshipbonus_, other->vipshipbonus_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetShipBonusInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetShipBonusInfoResp_descriptor_;
  metadata.reflection = GetShipBonusInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushShipBonusInfoMsg::kVipshipbonusFieldNumber;
#endif  // !_MSC_VER

PushShipBonusInfoMsg::PushShipBonusInfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.PushShipBonusInfoMsg)
}

void PushShipBonusInfoMsg::InitAsDefaultInstance() {
  vipshipbonus_ = const_cast< ::ProtoShipping::ShipVIPBonusCPP*>(&::ProtoShipping::ShipVIPBonusCPP::default_instance());
}

PushShipBonusInfoMsg::PushShipBonusInfoMsg(const PushShipBonusInfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.PushShipBonusInfoMsg)
}

void PushShipBonusInfoMsg::SharedCtor() {
  _cached_size_ = 0;
  vipshipbonus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushShipBonusInfoMsg::~PushShipBonusInfoMsg() {
  // @@protoc_insertion_point(destructor:ProtoShipping.PushShipBonusInfoMsg)
  SharedDtor();
}

void PushShipBonusInfoMsg::SharedDtor() {
  if (this != default_instance_) {
    delete vipshipbonus_;
  }
}

void PushShipBonusInfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushShipBonusInfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushShipBonusInfoMsg_descriptor_;
}

const PushShipBonusInfoMsg& PushShipBonusInfoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

PushShipBonusInfoMsg* PushShipBonusInfoMsg::default_instance_ = NULL;

PushShipBonusInfoMsg* PushShipBonusInfoMsg::New() const {
  return new PushShipBonusInfoMsg;
}

void PushShipBonusInfoMsg::Clear() {
  if (has_vipshipbonus()) {
    if (vipshipbonus_ != NULL) vipshipbonus_->::ProtoShipping::ShipVIPBonusCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushShipBonusInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.PushShipBonusInfoMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoShipping.ShipVIPBonusCPP vipshipbonus = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipshipbonus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.PushShipBonusInfoMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.PushShipBonusInfoMsg)
  return false;
#undef DO_
}

void PushShipBonusInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.PushShipBonusInfoMsg)
  // required .ProtoShipping.ShipVIPBonusCPP vipshipbonus = 1;
  if (has_vipshipbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vipshipbonus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.PushShipBonusInfoMsg)
}

::google::protobuf::uint8* PushShipBonusInfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.PushShipBonusInfoMsg)
  // required .ProtoShipping.ShipVIPBonusCPP vipshipbonus = 1;
  if (has_vipshipbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vipshipbonus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.PushShipBonusInfoMsg)
  return target;
}

int PushShipBonusInfoMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoShipping.ShipVIPBonusCPP vipshipbonus = 1;
    if (has_vipshipbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipshipbonus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushShipBonusInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushShipBonusInfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushShipBonusInfoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushShipBonusInfoMsg::MergeFrom(const PushShipBonusInfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vipshipbonus()) {
      mutable_vipshipbonus()->::ProtoShipping::ShipVIPBonusCPP::MergeFrom(from.vipshipbonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushShipBonusInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushShipBonusInfoMsg::CopyFrom(const PushShipBonusInfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushShipBonusInfoMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_vipshipbonus()) {
    if (!this->vipshipbonus().IsInitialized()) return false;
  }
  return true;
}

void PushShipBonusInfoMsg::Swap(PushShipBonusInfoMsg* other) {
  if (other != this) {
    std::swap(vipshipbonus_, other->vipshipbonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushShipBonusInfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushShipBonusInfoMsg_descriptor_;
  metadata.reflection = PushShipBonusInfoMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushFullBoxShipMsg::kPointFieldNumber;
#endif  // !_MSC_VER

PushFullBoxShipMsg::PushFullBoxShipMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoShipping.PushFullBoxShipMsg)
}

void PushFullBoxShipMsg::InitAsDefaultInstance() {
  point_ = const_cast< ::ProtoShipping::FullBoxShipCPP*>(&::ProtoShipping::FullBoxShipCPP::default_instance());
}

PushFullBoxShipMsg::PushFullBoxShipMsg(const PushFullBoxShipMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoShipping.PushFullBoxShipMsg)
}

void PushFullBoxShipMsg::SharedCtor() {
  _cached_size_ = 0;
  point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushFullBoxShipMsg::~PushFullBoxShipMsg() {
  // @@protoc_insertion_point(destructor:ProtoShipping.PushFullBoxShipMsg)
  SharedDtor();
}

void PushFullBoxShipMsg::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void PushFullBoxShipMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushFullBoxShipMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushFullBoxShipMsg_descriptor_;
}

const PushFullBoxShipMsg& PushFullBoxShipMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoShipping_2eproto();
  return *default_instance_;
}

PushFullBoxShipMsg* PushFullBoxShipMsg::default_instance_ = NULL;

PushFullBoxShipMsg* PushFullBoxShipMsg::New() const {
  return new PushFullBoxShipMsg;
}

void PushFullBoxShipMsg::Clear() {
  if (has_point()) {
    if (point_ != NULL) point_->::ProtoShipping::FullBoxShipCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushFullBoxShipMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoShipping.PushFullBoxShipMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoShipping.FullBoxShipCPP point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoShipping.PushFullBoxShipMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoShipping.PushFullBoxShipMsg)
  return false;
#undef DO_
}

void PushFullBoxShipMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoShipping.PushFullBoxShipMsg)
  // required .ProtoShipping.FullBoxShipCPP point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoShipping.PushFullBoxShipMsg)
}

::google::protobuf::uint8* PushFullBoxShipMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoShipping.PushFullBoxShipMsg)
  // required .ProtoShipping.FullBoxShipCPP point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoShipping.PushFullBoxShipMsg)
  return target;
}

int PushFullBoxShipMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoShipping.FullBoxShipCPP point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushFullBoxShipMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushFullBoxShipMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushFullBoxShipMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushFullBoxShipMsg::MergeFrom(const PushFullBoxShipMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      mutable_point()->::ProtoShipping::FullBoxShipCPP::MergeFrom(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushFullBoxShipMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushFullBoxShipMsg::CopyFrom(const PushFullBoxShipMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushFullBoxShipMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  return true;
}

void PushFullBoxShipMsg::Swap(PushFullBoxShipMsg* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushFullBoxShipMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushFullBoxShipMsg_descriptor_;
  metadata.reflection = PushFullBoxShipMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoShipping

// @@protoc_insertion_point(global_scope)
