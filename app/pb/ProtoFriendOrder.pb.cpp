// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoFriendOrder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoFriendOrder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoFriendOrder {

namespace {

const ::google::protobuf::Descriptor* FriendOrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendOrderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendOrderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendOrderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendOrderResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendOrderResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendFriendOrderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendFriendOrderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendFriendOrderResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendFriendOrderResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClickFriendOrderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClickFriendOrderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClickFriendOrderResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClickFriendOrderResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyFriendOrderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyFriendOrderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyFriendOrderResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyFriendOrderResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOrderRewardsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOrderRewardsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOrderRewardsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOrderRewardsResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CostDiamondReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostDiamondReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CostDiamondResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostDiamondResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendOtherServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendOtherServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecallSourceFoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecallSourceFoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecallCanBuyFoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecallCanBuyFoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeFoStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeFoStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerWhetherCanBuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerWhetherCanBuyReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoFriendOrder_2eproto() {
  protobuf_AddDesc_ProtoFriendOrder_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoFriendOrder.proto");
  GOOGLE_CHECK(file != NULL);
  FriendOrderInfo_descriptor_ = file->message_type(0);
  static const int FriendOrderInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOrderInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOrderInfo, senderuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOrderInfo, deadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOrderInfo, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOrderInfo, helperuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOrderInfo, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOrderInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOrderInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOrderInfo, index_),
  };
  FriendOrderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendOrderInfo_descriptor_,
      FriendOrderInfo::default_instance_,
      FriendOrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOrderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendOrderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendOrderInfo));
  GetFriendOrderReq_descriptor_ = file->message_type(1);
  static const int GetFriendOrderReq_offsets_[1] = {
  };
  GetFriendOrderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendOrderReq_descriptor_,
      GetFriendOrderReq::default_instance_,
      GetFriendOrderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendOrderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendOrderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendOrderReq));
  GetFriendOrderResp_descriptor_ = file->message_type(2);
  static const int GetFriendOrderResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendOrderResp, arrayfoinfo_),
  };
  GetFriendOrderResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendOrderResp_descriptor_,
      GetFriendOrderResp::default_instance_,
      GetFriendOrderResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendOrderResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendOrderResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendOrderResp));
  SendFriendOrderReq_descriptor_ = file->message_type(3);
  static const int SendFriendOrderReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendOrderReq, basket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendOrderReq, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendOrderReq, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendOrderReq, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendOrderReq, arrayuid_),
  };
  SendFriendOrderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendFriendOrderReq_descriptor_,
      SendFriendOrderReq::default_instance_,
      SendFriendOrderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendOrderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendOrderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendFriendOrderReq));
  SendFriendOrderResp_descriptor_ = file->message_type(4);
  static const int SendFriendOrderResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendOrderResp, basket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendOrderResp, newsourcefo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendOrderResp, commons_),
  };
  SendFriendOrderResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendFriendOrderResp_descriptor_,
      SendFriendOrderResp::default_instance_,
      SendFriendOrderResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendOrderResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFriendOrderResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendFriendOrderResp));
  ClickFriendOrderReq_descriptor_ = file->message_type(5);
  static const int ClickFriendOrderReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickFriendOrderReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickFriendOrderReq, status_),
  };
  ClickFriendOrderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClickFriendOrderReq_descriptor_,
      ClickFriendOrderReq::default_instance_,
      ClickFriendOrderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickFriendOrderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickFriendOrderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClickFriendOrderReq));
  ClickFriendOrderResp_descriptor_ = file->message_type(6);
  static const int ClickFriendOrderResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickFriendOrderResp, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickFriendOrderResp, newstatus_),
  };
  ClickFriendOrderResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClickFriendOrderResp_descriptor_,
      ClickFriendOrderResp::default_instance_,
      ClickFriendOrderResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickFriendOrderResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickFriendOrderResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClickFriendOrderResp));
  BuyFriendOrderReq_descriptor_ = file->message_type(7);
  static const int BuyFriendOrderReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFriendOrderReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFriendOrderReq, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFriendOrderReq, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFriendOrderReq, senderuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFriendOrderReq, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFriendOrderReq, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFriendOrderReq, coin_),
  };
  BuyFriendOrderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyFriendOrderReq_descriptor_,
      BuyFriendOrderReq::default_instance_,
      BuyFriendOrderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFriendOrderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFriendOrderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyFriendOrderReq));
  BuyFriendOrderResp_descriptor_ = file->message_type(8);
  static const int BuyFriendOrderResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFriendOrderResp, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFriendOrderResp, newstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFriendOrderResp, commons_),
  };
  BuyFriendOrderResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyFriendOrderResp_descriptor_,
      BuyFriendOrderResp::default_instance_,
      BuyFriendOrderResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFriendOrderResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFriendOrderResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyFriendOrderResp));
  GetOrderRewardsReq_descriptor_ = file->message_type(9);
  static const int GetOrderRewardsReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderRewardsReq, basket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderRewardsReq, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderRewardsReq, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderRewardsReq, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderRewardsReq, coin_),
  };
  GetOrderRewardsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOrderRewardsReq_descriptor_,
      GetOrderRewardsReq::default_instance_,
      GetOrderRewardsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderRewardsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderRewardsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOrderRewardsReq));
  GetOrderRewardsResp_descriptor_ = file->message_type(10);
  static const int GetOrderRewardsResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderRewardsResp, basket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderRewardsResp, newstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderRewardsResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderRewardsResp, deadtime_),
  };
  GetOrderRewardsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOrderRewardsResp_descriptor_,
      GetOrderRewardsResp::default_instance_,
      GetOrderRewardsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderRewardsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOrderRewardsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOrderRewardsResp));
  CostDiamondReq_descriptor_ = file->message_type(11);
  static const int CostDiamondReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostDiamondReq, basket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostDiamondReq, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostDiamondReq, diamonds_),
  };
  CostDiamondReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CostDiamondReq_descriptor_,
      CostDiamondReq::default_instance_,
      CostDiamondReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostDiamondReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostDiamondReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CostDiamondReq));
  CostDiamondResp_descriptor_ = file->message_type(12);
  static const int CostDiamondResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostDiamondResp, basket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostDiamondResp, newstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostDiamondResp, commons_),
  };
  CostDiamondResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CostDiamondResp_descriptor_,
      CostDiamondResp::default_instance_,
      CostDiamondResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostDiamondResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostDiamondResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CostDiamondResp));
  SendOtherServerReq_descriptor_ = file->message_type(13);
  static const int SendOtherServerReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtherServerReq, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtherServerReq, senderuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtherServerReq, deadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtherServerReq, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtherServerReq, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtherServerReq, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtherServerReq, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtherServerReq, receiveruid_),
  };
  SendOtherServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendOtherServerReq_descriptor_,
      SendOtherServerReq::default_instance_,
      SendOtherServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtherServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendOtherServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendOtherServerReq));
  RecallSourceFoReq_descriptor_ = file->message_type(14);
  static const int RecallSourceFoReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallSourceFoReq, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallSourceFoReq, myindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallSourceFoReq, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallSourceFoReq, senderuid_),
  };
  RecallSourceFoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecallSourceFoReq_descriptor_,
      RecallSourceFoReq::default_instance_,
      RecallSourceFoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallSourceFoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallSourceFoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecallSourceFoReq));
  RecallCanBuyFoReq_descriptor_ = file->message_type(15);
  static const int RecallCanBuyFoReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallCanBuyFoReq, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallCanBuyFoReq, myindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallCanBuyFoReq, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallCanBuyFoReq, senderuid_),
  };
  RecallCanBuyFoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecallCanBuyFoReq_descriptor_,
      RecallCanBuyFoReq::default_instance_,
      RecallCanBuyFoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallCanBuyFoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallCanBuyFoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecallCanBuyFoReq));
  ChangeFoStatusReq_descriptor_ = file->message_type(16);
  static const int ChangeFoStatusReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFoStatusReq, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFoStatusReq, myindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFoStatusReq, newstatus_),
  };
  ChangeFoStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeFoStatusReq_descriptor_,
      ChangeFoStatusReq::default_instance_,
      ChangeFoStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFoStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeFoStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeFoStatusReq));
  AnswerWhetherCanBuyReq_descriptor_ = file->message_type(17);
  static const int AnswerWhetherCanBuyReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerWhetherCanBuyReq, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerWhetherCanBuyReq, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerWhetherCanBuyReq, myindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerWhetherCanBuyReq, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerWhetherCanBuyReq, senderuid_),
  };
  AnswerWhetherCanBuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerWhetherCanBuyReq_descriptor_,
      AnswerWhetherCanBuyReq::default_instance_,
      AnswerWhetherCanBuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerWhetherCanBuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerWhetherCanBuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerWhetherCanBuyReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoFriendOrder_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendOrderInfo_descriptor_, &FriendOrderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendOrderReq_descriptor_, &GetFriendOrderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendOrderResp_descriptor_, &GetFriendOrderResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendFriendOrderReq_descriptor_, &SendFriendOrderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendFriendOrderResp_descriptor_, &SendFriendOrderResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClickFriendOrderReq_descriptor_, &ClickFriendOrderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClickFriendOrderResp_descriptor_, &ClickFriendOrderResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyFriendOrderReq_descriptor_, &BuyFriendOrderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyFriendOrderResp_descriptor_, &BuyFriendOrderResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOrderRewardsReq_descriptor_, &GetOrderRewardsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOrderRewardsResp_descriptor_, &GetOrderRewardsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CostDiamondReq_descriptor_, &CostDiamondReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CostDiamondResp_descriptor_, &CostDiamondResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendOtherServerReq_descriptor_, &SendOtherServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecallSourceFoReq_descriptor_, &RecallSourceFoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecallCanBuyFoReq_descriptor_, &RecallCanBuyFoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeFoStatusReq_descriptor_, &ChangeFoStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerWhetherCanBuyReq_descriptor_, &AnswerWhetherCanBuyReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoFriendOrder_2eproto() {
  delete FriendOrderInfo::default_instance_;
  delete FriendOrderInfo_reflection_;
  delete GetFriendOrderReq::default_instance_;
  delete GetFriendOrderReq_reflection_;
  delete GetFriendOrderResp::default_instance_;
  delete GetFriendOrderResp_reflection_;
  delete SendFriendOrderReq::default_instance_;
  delete SendFriendOrderReq_reflection_;
  delete SendFriendOrderResp::default_instance_;
  delete SendFriendOrderResp_reflection_;
  delete ClickFriendOrderReq::default_instance_;
  delete ClickFriendOrderReq_reflection_;
  delete ClickFriendOrderResp::default_instance_;
  delete ClickFriendOrderResp_reflection_;
  delete BuyFriendOrderReq::default_instance_;
  delete BuyFriendOrderReq_reflection_;
  delete BuyFriendOrderResp::default_instance_;
  delete BuyFriendOrderResp_reflection_;
  delete GetOrderRewardsReq::default_instance_;
  delete GetOrderRewardsReq_reflection_;
  delete GetOrderRewardsResp::default_instance_;
  delete GetOrderRewardsResp_reflection_;
  delete CostDiamondReq::default_instance_;
  delete CostDiamondReq_reflection_;
  delete CostDiamondResp::default_instance_;
  delete CostDiamondResp_reflection_;
  delete SendOtherServerReq::default_instance_;
  delete SendOtherServerReq_reflection_;
  delete RecallSourceFoReq::default_instance_;
  delete RecallSourceFoReq_reflection_;
  delete RecallCanBuyFoReq::default_instance_;
  delete RecallCanBuyFoReq_reflection_;
  delete ChangeFoStatusReq::default_instance_;
  delete ChangeFoStatusReq_reflection_;
  delete AnswerWhetherCanBuyReq::default_instance_;
  delete AnswerWhetherCanBuyReq_reflection_;
}

void protobuf_AddDesc_ProtoFriendOrder_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ProtoFriendOrder.proto\022\020ProtoFriendOrd"
    "er\032\020DataCommon.proto\"\252\001\n\017FriendOrderInfo"
    "\022\016\n\006status\030\001 \002(\r\022\021\n\tsenderUid\030\002 \002(\r\022\020\n\010d"
    "eadtime\030\003 \002(\r\022\020\n\010sourceId\030\004 \002(\r\022\021\n\tHelpe"
    "rUid\030\005 \001(\r\022\021\n\tproductId\030\006 \002(\r\022\r\n\005count\030\007"
    " \002(\r\022\014\n\004coin\030\010 \002(\r\022\r\n\005index\030\t \002(\r\"\023\n\021Get"
    "FriendOrderReq\"L\n\022GetFriendOrderResp\0226\n\013"
    "arrayFoInfo\030\001 \003(\0132!.ProtoFriendOrder.Fri"
    "endOrderInfo\"f\n\022SendFriendOrderReq\022\016\n\006ba"
    "sket\030\001 \002(\r\022\021\n\tproductId\030\002 \002(\r\022\r\n\005count\030\003"
    " \002(\r\022\014\n\004coin\030\004 \002(\r\022\020\n\010arrayuid\030\005 \003(\r\"\212\001\n"
    "\023SendFriendOrderResp\022\016\n\006basket\030\001 \002(\r\0226\n\013"
    "newSourceFo\030\002 \002(\0132!.ProtoFriendOrder.Fri"
    "endOrderInfo\022+\n\007commons\030\003 \001(\0132\032.DataComm"
    "on.CommonItemsCPP\"4\n\023ClickFriendOrderReq"
    "\022\r\n\005index\030\001 \002(\r\022\016\n\006Status\030\002 \002(\r\"8\n\024Click"
    "FriendOrderResp\022\r\n\005index\030\001 \002(\r\022\021\n\tnewSta"
    "tus\030\002 \002(\r\"\207\001\n\021BuyFriendOrderReq\022\r\n\005index"
    "\030\001 \002(\r\022\016\n\006Status\030\002 \002(\r\022\020\n\010sourceId\030\003 \002(\r"
    "\022\021\n\tsenderUid\030\004 \002(\r\022\021\n\tproductId\030\005 \002(\r\022\r"
    "\n\005count\030\006 \002(\r\022\014\n\004coin\030\007 \002(\r\"c\n\022BuyFriend"
    "OrderResp\022\r\n\005index\030\001 \002(\r\022\021\n\tnewstatus\030\002 "
    "\002(\r\022+\n\007commons\030\003 \001(\0132\032.DataCommon.Common"
    "ItemsCPP\"d\n\022GetOrderRewardsReq\022\016\n\006basket"
    "\030\001 \002(\r\022\016\n\006Status\030\002 \002(\r\022\021\n\tproductId\030\003 \002("
    "\r\022\r\n\005count\030\004 \002(\r\022\014\n\004coin\030\005 \002(\r\"w\n\023GetOrd"
    "erRewardsResp\022\016\n\006basket\030\001 \002(\r\022\021\n\tnewstat"
    "us\030\002 \002(\r\022+\n\007commons\030\003 \001(\0132\032.DataCommon.C"
    "ommonItemsCPP\022\020\n\010deadtime\030\004 \001(\r\"B\n\016CostD"
    "iamondReq\022\016\n\006basket\030\001 \002(\r\022\016\n\006status\030\002 \002("
    "\r\022\020\n\010diamonds\030\003 \002(\r\"a\n\017CostDiamondResp\022\016"
    "\n\006basket\030\001 \002(\r\022\021\n\tnewstatus\030\002 \002(\r\022+\n\007com"
    "mons\030\003 \001(\0132\032.DataCommon.CommonItemsCPP\"\240"
    "\001\n\022SendOtherServerReq\022\016\n\006status\030\001 \002(\r\022\021\n"
    "\tsenderUid\030\002 \002(\r\022\020\n\010deadtime\030\003 \002(\r\022\020\n\010so"
    "urceId\030\004 \002(\r\022\021\n\tproductId\030\005 \002(\r\022\r\n\005count"
    "\030\006 \002(\r\022\014\n\004coin\030\007 \002(\r\022\023\n\013receiverUid\030\010 \002("
    "\r\"X\n\021RecallSourceFoReq\022\r\n\005myuid\030\001 \002(\r\022\017\n"
    "\007myindex\030\002 \002(\r\022\020\n\010sourceId\030\003 \002(\r\022\021\n\tsend"
    "erUid\030\004 \001(\r\"X\n\021RecallCanBuyFoReq\022\r\n\005myui"
    "d\030\001 \002(\r\022\017\n\007myindex\030\002 \002(\r\022\020\n\010sourceId\030\003 \002"
    "(\r\022\021\n\tsenderUid\030\004 \001(\r\"F\n\021ChangeFoStatusR"
    "eq\022\r\n\005myuid\030\001 \002(\r\022\017\n\007myindex\030\002 \002(\r\022\021\n\tne"
    "wstatus\030\003 \002(\r\"m\n\026AnswerWhetherCanBuyReq\022"
    "\016\n\006result\030\001 \002(\r\022\r\n\005myuid\030\002 \002(\r\022\017\n\007myinde"
    "x\030\003 \002(\r\022\020\n\010sourceId\030\004 \002(\r\022\021\n\tsenderUid\030\005"
    " \001(\r", 1844);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoFriendOrder.proto", &protobuf_RegisterTypes);
  FriendOrderInfo::default_instance_ = new FriendOrderInfo();
  GetFriendOrderReq::default_instance_ = new GetFriendOrderReq();
  GetFriendOrderResp::default_instance_ = new GetFriendOrderResp();
  SendFriendOrderReq::default_instance_ = new SendFriendOrderReq();
  SendFriendOrderResp::default_instance_ = new SendFriendOrderResp();
  ClickFriendOrderReq::default_instance_ = new ClickFriendOrderReq();
  ClickFriendOrderResp::default_instance_ = new ClickFriendOrderResp();
  BuyFriendOrderReq::default_instance_ = new BuyFriendOrderReq();
  BuyFriendOrderResp::default_instance_ = new BuyFriendOrderResp();
  GetOrderRewardsReq::default_instance_ = new GetOrderRewardsReq();
  GetOrderRewardsResp::default_instance_ = new GetOrderRewardsResp();
  CostDiamondReq::default_instance_ = new CostDiamondReq();
  CostDiamondResp::default_instance_ = new CostDiamondResp();
  SendOtherServerReq::default_instance_ = new SendOtherServerReq();
  RecallSourceFoReq::default_instance_ = new RecallSourceFoReq();
  RecallCanBuyFoReq::default_instance_ = new RecallCanBuyFoReq();
  ChangeFoStatusReq::default_instance_ = new ChangeFoStatusReq();
  AnswerWhetherCanBuyReq::default_instance_ = new AnswerWhetherCanBuyReq();
  FriendOrderInfo::default_instance_->InitAsDefaultInstance();
  GetFriendOrderReq::default_instance_->InitAsDefaultInstance();
  GetFriendOrderResp::default_instance_->InitAsDefaultInstance();
  SendFriendOrderReq::default_instance_->InitAsDefaultInstance();
  SendFriendOrderResp::default_instance_->InitAsDefaultInstance();
  ClickFriendOrderReq::default_instance_->InitAsDefaultInstance();
  ClickFriendOrderResp::default_instance_->InitAsDefaultInstance();
  BuyFriendOrderReq::default_instance_->InitAsDefaultInstance();
  BuyFriendOrderResp::default_instance_->InitAsDefaultInstance();
  GetOrderRewardsReq::default_instance_->InitAsDefaultInstance();
  GetOrderRewardsResp::default_instance_->InitAsDefaultInstance();
  CostDiamondReq::default_instance_->InitAsDefaultInstance();
  CostDiamondResp::default_instance_->InitAsDefaultInstance();
  SendOtherServerReq::default_instance_->InitAsDefaultInstance();
  RecallSourceFoReq::default_instance_->InitAsDefaultInstance();
  RecallCanBuyFoReq::default_instance_->InitAsDefaultInstance();
  ChangeFoStatusReq::default_instance_->InitAsDefaultInstance();
  AnswerWhetherCanBuyReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoFriendOrder_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoFriendOrder_2eproto {
  StaticDescriptorInitializer_ProtoFriendOrder_2eproto() {
    protobuf_AddDesc_ProtoFriendOrder_2eproto();
  }
} static_descriptor_initializer_ProtoFriendOrder_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FriendOrderInfo::kStatusFieldNumber;
const int FriendOrderInfo::kSenderUidFieldNumber;
const int FriendOrderInfo::kDeadtimeFieldNumber;
const int FriendOrderInfo::kSourceIdFieldNumber;
const int FriendOrderInfo::kHelperUidFieldNumber;
const int FriendOrderInfo::kProductIdFieldNumber;
const int FriendOrderInfo::kCountFieldNumber;
const int FriendOrderInfo::kCoinFieldNumber;
const int FriendOrderInfo::kIndexFieldNumber;
#endif  // !_MSC_VER

FriendOrderInfo::FriendOrderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.FriendOrderInfo)
}

void FriendOrderInfo::InitAsDefaultInstance() {
}

FriendOrderInfo::FriendOrderInfo(const FriendOrderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.FriendOrderInfo)
}

void FriendOrderInfo::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  senderuid_ = 0u;
  deadtime_ = 0u;
  sourceid_ = 0u;
  helperuid_ = 0u;
  productid_ = 0u;
  count_ = 0u;
  coin_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendOrderInfo::~FriendOrderInfo() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.FriendOrderInfo)
  SharedDtor();
}

void FriendOrderInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendOrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendOrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendOrderInfo_descriptor_;
}

const FriendOrderInfo& FriendOrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

FriendOrderInfo* FriendOrderInfo::default_instance_ = NULL;

FriendOrderInfo* FriendOrderInfo::New() const {
  return new FriendOrderInfo;
}

void FriendOrderInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendOrderInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(status_, coin_);
  }
  index_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.FriendOrderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_senderUid;
        break;
      }

      // required uint32 senderUid = 2;
      case 2: {
        if (tag == 16) {
         parse_senderUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &senderuid_)));
          set_has_senderuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_deadtime;
        break;
      }

      // required uint32 deadtime = 3;
      case 3: {
        if (tag == 24) {
         parse_deadtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadtime_)));
          set_has_deadtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sourceId;
        break;
      }

      // required uint32 sourceId = 4;
      case 4: {
        if (tag == 32) {
         parse_sourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_HelperUid;
        break;
      }

      // optional uint32 HelperUid = 5;
      case 5: {
        if (tag == 40) {
         parse_HelperUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &helperuid_)));
          set_has_helperuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_productId;
        break;
      }

      // required uint32 productId = 6;
      case 6: {
        if (tag == 48) {
         parse_productId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }

      // required uint32 count = 7;
      case 7: {
        if (tag == 56) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_coin;
        break;
      }

      // required uint32 coin = 8;
      case 8: {
        if (tag == 64) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_index;
        break;
      }

      // required uint32 index = 9;
      case 9: {
        if (tag == 72) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.FriendOrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.FriendOrderInfo)
  return false;
#undef DO_
}

void FriendOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.FriendOrderInfo)
  // required uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // required uint32 senderUid = 2;
  if (has_senderuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->senderuid(), output);
  }

  // required uint32 deadtime = 3;
  if (has_deadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deadtime(), output);
  }

  // required uint32 sourceId = 4;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sourceid(), output);
  }

  // optional uint32 HelperUid = 5;
  if (has_helperuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->helperuid(), output);
  }

  // required uint32 productId = 6;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->productid(), output);
  }

  // required uint32 count = 7;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count(), output);
  }

  // required uint32 coin = 8;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->coin(), output);
  }

  // required uint32 index = 9;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.FriendOrderInfo)
}

::google::protobuf::uint8* FriendOrderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.FriendOrderInfo)
  // required uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // required uint32 senderUid = 2;
  if (has_senderuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->senderuid(), target);
  }

  // required uint32 deadtime = 3;
  if (has_deadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deadtime(), target);
  }

  // required uint32 sourceId = 4;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sourceid(), target);
  }

  // optional uint32 HelperUid = 5;
  if (has_helperuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->helperuid(), target);
  }

  // required uint32 productId = 6;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->productid(), target);
  }

  // required uint32 count = 7;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count(), target);
  }

  // required uint32 coin = 8;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->coin(), target);
  }

  // required uint32 index = 9;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.FriendOrderInfo)
  return target;
}

int FriendOrderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 senderUid = 2;
    if (has_senderuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->senderuid());
    }

    // required uint32 deadtime = 3;
    if (has_deadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadtime());
    }

    // required uint32 sourceId = 4;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

    // optional uint32 HelperUid = 5;
    if (has_helperuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->helperuid());
    }

    // required uint32 productId = 6;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productid());
    }

    // required uint32 count = 7;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 coin = 8;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 index = 9;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendOrderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendOrderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendOrderInfo::MergeFrom(const FriendOrderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_senderuid()) {
      set_senderuid(from.senderuid());
    }
    if (from.has_deadtime()) {
      set_deadtime(from.deadtime());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_helperuid()) {
      set_helperuid(from.helperuid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendOrderInfo::CopyFrom(const FriendOrderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendOrderInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ef) != 0x000001ef) return false;

  return true;
}

void FriendOrderInfo::Swap(FriendOrderInfo* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(senderuid_, other->senderuid_);
    std::swap(deadtime_, other->deadtime_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(helperuid_, other->helperuid_);
    std::swap(productid_, other->productid_);
    std::swap(count_, other->count_);
    std::swap(coin_, other->coin_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendOrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendOrderInfo_descriptor_;
  metadata.reflection = FriendOrderInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetFriendOrderReq::GetFriendOrderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.GetFriendOrderReq)
}

void GetFriendOrderReq::InitAsDefaultInstance() {
}

GetFriendOrderReq::GetFriendOrderReq(const GetFriendOrderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.GetFriendOrderReq)
}

void GetFriendOrderReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendOrderReq::~GetFriendOrderReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.GetFriendOrderReq)
  SharedDtor();
}

void GetFriendOrderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendOrderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendOrderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendOrderReq_descriptor_;
}

const GetFriendOrderReq& GetFriendOrderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

GetFriendOrderReq* GetFriendOrderReq::default_instance_ = NULL;

GetFriendOrderReq* GetFriendOrderReq::New() const {
  return new GetFriendOrderReq;
}

void GetFriendOrderReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendOrderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.GetFriendOrderReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.GetFriendOrderReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.GetFriendOrderReq)
  return false;
#undef DO_
}

void GetFriendOrderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.GetFriendOrderReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.GetFriendOrderReq)
}

::google::protobuf::uint8* GetFriendOrderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.GetFriendOrderReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.GetFriendOrderReq)
  return target;
}

int GetFriendOrderReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendOrderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendOrderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendOrderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendOrderReq::MergeFrom(const GetFriendOrderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendOrderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendOrderReq::CopyFrom(const GetFriendOrderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendOrderReq::IsInitialized() const {

  return true;
}

void GetFriendOrderReq::Swap(GetFriendOrderReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendOrderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendOrderReq_descriptor_;
  metadata.reflection = GetFriendOrderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendOrderResp::kArrayFoInfoFieldNumber;
#endif  // !_MSC_VER

GetFriendOrderResp::GetFriendOrderResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.GetFriendOrderResp)
}

void GetFriendOrderResp::InitAsDefaultInstance() {
}

GetFriendOrderResp::GetFriendOrderResp(const GetFriendOrderResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.GetFriendOrderResp)
}

void GetFriendOrderResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendOrderResp::~GetFriendOrderResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.GetFriendOrderResp)
  SharedDtor();
}

void GetFriendOrderResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendOrderResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendOrderResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendOrderResp_descriptor_;
}

const GetFriendOrderResp& GetFriendOrderResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

GetFriendOrderResp* GetFriendOrderResp::default_instance_ = NULL;

GetFriendOrderResp* GetFriendOrderResp::New() const {
  return new GetFriendOrderResp;
}

void GetFriendOrderResp::Clear() {
  arrayfoinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendOrderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.GetFriendOrderResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoFriendOrder.FriendOrderInfo arrayFoInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_arrayFoInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrayfoinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_arrayFoInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.GetFriendOrderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.GetFriendOrderResp)
  return false;
#undef DO_
}

void GetFriendOrderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.GetFriendOrderResp)
  // repeated .ProtoFriendOrder.FriendOrderInfo arrayFoInfo = 1;
  for (int i = 0; i < this->arrayfoinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrayfoinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.GetFriendOrderResp)
}

::google::protobuf::uint8* GetFriendOrderResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.GetFriendOrderResp)
  // repeated .ProtoFriendOrder.FriendOrderInfo arrayFoInfo = 1;
  for (int i = 0; i < this->arrayfoinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrayfoinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.GetFriendOrderResp)
  return target;
}

int GetFriendOrderResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoFriendOrder.FriendOrderInfo arrayFoInfo = 1;
  total_size += 1 * this->arrayfoinfo_size();
  for (int i = 0; i < this->arrayfoinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrayfoinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendOrderResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendOrderResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendOrderResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendOrderResp::MergeFrom(const GetFriendOrderResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrayfoinfo_.MergeFrom(from.arrayfoinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendOrderResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendOrderResp::CopyFrom(const GetFriendOrderResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendOrderResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->arrayfoinfo())) return false;
  return true;
}

void GetFriendOrderResp::Swap(GetFriendOrderResp* other) {
  if (other != this) {
    arrayfoinfo_.Swap(&other->arrayfoinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendOrderResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendOrderResp_descriptor_;
  metadata.reflection = GetFriendOrderResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendFriendOrderReq::kBasketFieldNumber;
const int SendFriendOrderReq::kProductIdFieldNumber;
const int SendFriendOrderReq::kCountFieldNumber;
const int SendFriendOrderReq::kCoinFieldNumber;
const int SendFriendOrderReq::kArrayuidFieldNumber;
#endif  // !_MSC_VER

SendFriendOrderReq::SendFriendOrderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.SendFriendOrderReq)
}

void SendFriendOrderReq::InitAsDefaultInstance() {
}

SendFriendOrderReq::SendFriendOrderReq(const SendFriendOrderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.SendFriendOrderReq)
}

void SendFriendOrderReq::SharedCtor() {
  _cached_size_ = 0;
  basket_ = 0u;
  productid_ = 0u;
  count_ = 0u;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendFriendOrderReq::~SendFriendOrderReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.SendFriendOrderReq)
  SharedDtor();
}

void SendFriendOrderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendFriendOrderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendFriendOrderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendFriendOrderReq_descriptor_;
}

const SendFriendOrderReq& SendFriendOrderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

SendFriendOrderReq* SendFriendOrderReq::default_instance_ = NULL;

SendFriendOrderReq* SendFriendOrderReq::New() const {
  return new SendFriendOrderReq;
}

void SendFriendOrderReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendFriendOrderReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(basket_, coin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrayuid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendFriendOrderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.SendFriendOrderReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 basket = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basket_)));
          set_has_basket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_productId;
        break;
      }

      // required uint32 productId = 2;
      case 2: {
        if (tag == 16) {
         parse_productId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_coin;
        break;
      }

      // required uint32 coin = 4;
      case 4: {
        if (tag == 32) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_arrayuid;
        break;
      }

      // repeated uint32 arrayuid = 5;
      case 5: {
        if (tag == 40) {
         parse_arrayuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_arrayuid())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrayuid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_arrayuid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.SendFriendOrderReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.SendFriendOrderReq)
  return false;
#undef DO_
}

void SendFriendOrderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.SendFriendOrderReq)
  // required uint32 basket = 1;
  if (has_basket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->basket(), output);
  }

  // required uint32 productId = 2;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->productid(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required uint32 coin = 4;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->coin(), output);
  }

  // repeated uint32 arrayuid = 5;
  for (int i = 0; i < this->arrayuid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->arrayuid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.SendFriendOrderReq)
}

::google::protobuf::uint8* SendFriendOrderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.SendFriendOrderReq)
  // required uint32 basket = 1;
  if (has_basket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->basket(), target);
  }

  // required uint32 productId = 2;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->productid(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required uint32 coin = 4;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->coin(), target);
  }

  // repeated uint32 arrayuid = 5;
  for (int i = 0; i < this->arrayuid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->arrayuid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.SendFriendOrderReq)
  return target;
}

int SendFriendOrderReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 basket = 1;
    if (has_basket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->basket());
    }

    // required uint32 productId = 2;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productid());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 coin = 4;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  // repeated uint32 arrayuid = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrayuid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrayuid(i));
    }
    total_size += 1 * this->arrayuid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFriendOrderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendFriendOrderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendFriendOrderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendFriendOrderReq::MergeFrom(const SendFriendOrderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrayuid_.MergeFrom(from.arrayuid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basket()) {
      set_basket(from.basket());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendFriendOrderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFriendOrderReq::CopyFrom(const SendFriendOrderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFriendOrderReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SendFriendOrderReq::Swap(SendFriendOrderReq* other) {
  if (other != this) {
    std::swap(basket_, other->basket_);
    std::swap(productid_, other->productid_);
    std::swap(count_, other->count_);
    std::swap(coin_, other->coin_);
    arrayuid_.Swap(&other->arrayuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendFriendOrderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendFriendOrderReq_descriptor_;
  metadata.reflection = SendFriendOrderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendFriendOrderResp::kBasketFieldNumber;
const int SendFriendOrderResp::kNewSourceFoFieldNumber;
const int SendFriendOrderResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

SendFriendOrderResp::SendFriendOrderResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.SendFriendOrderResp)
}

void SendFriendOrderResp::InitAsDefaultInstance() {
  newsourcefo_ = const_cast< ::ProtoFriendOrder::FriendOrderInfo*>(&::ProtoFriendOrder::FriendOrderInfo::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

SendFriendOrderResp::SendFriendOrderResp(const SendFriendOrderResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.SendFriendOrderResp)
}

void SendFriendOrderResp::SharedCtor() {
  _cached_size_ = 0;
  basket_ = 0u;
  newsourcefo_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendFriendOrderResp::~SendFriendOrderResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.SendFriendOrderResp)
  SharedDtor();
}

void SendFriendOrderResp::SharedDtor() {
  if (this != default_instance_) {
    delete newsourcefo_;
    delete commons_;
  }
}

void SendFriendOrderResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendFriendOrderResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendFriendOrderResp_descriptor_;
}

const SendFriendOrderResp& SendFriendOrderResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

SendFriendOrderResp* SendFriendOrderResp::default_instance_ = NULL;

SendFriendOrderResp* SendFriendOrderResp::New() const {
  return new SendFriendOrderResp;
}

void SendFriendOrderResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    basket_ = 0u;
    if (has_newsourcefo()) {
      if (newsourcefo_ != NULL) newsourcefo_->::ProtoFriendOrder::FriendOrderInfo::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendFriendOrderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.SendFriendOrderResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 basket = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basket_)));
          set_has_basket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_newSourceFo;
        break;
      }

      // required .ProtoFriendOrder.FriendOrderInfo newSourceFo = 2;
      case 2: {
        if (tag == 18) {
         parse_newSourceFo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newsourcefo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.SendFriendOrderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.SendFriendOrderResp)
  return false;
#undef DO_
}

void SendFriendOrderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.SendFriendOrderResp)
  // required uint32 basket = 1;
  if (has_basket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->basket(), output);
  }

  // required .ProtoFriendOrder.FriendOrderInfo newSourceFo = 2;
  if (has_newsourcefo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newsourcefo(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.SendFriendOrderResp)
}

::google::protobuf::uint8* SendFriendOrderResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.SendFriendOrderResp)
  // required uint32 basket = 1;
  if (has_basket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->basket(), target);
  }

  // required .ProtoFriendOrder.FriendOrderInfo newSourceFo = 2;
  if (has_newsourcefo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newsourcefo(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.SendFriendOrderResp)
  return target;
}

int SendFriendOrderResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 basket = 1;
    if (has_basket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->basket());
    }

    // required .ProtoFriendOrder.FriendOrderInfo newSourceFo = 2;
    if (has_newsourcefo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newsourcefo());
    }

    // optional .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFriendOrderResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendFriendOrderResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendFriendOrderResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendFriendOrderResp::MergeFrom(const SendFriendOrderResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basket()) {
      set_basket(from.basket());
    }
    if (from.has_newsourcefo()) {
      mutable_newsourcefo()->::ProtoFriendOrder::FriendOrderInfo::MergeFrom(from.newsourcefo());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendFriendOrderResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFriendOrderResp::CopyFrom(const SendFriendOrderResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFriendOrderResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_newsourcefo()) {
    if (!this->newsourcefo().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void SendFriendOrderResp::Swap(SendFriendOrderResp* other) {
  if (other != this) {
    std::swap(basket_, other->basket_);
    std::swap(newsourcefo_, other->newsourcefo_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendFriendOrderResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendFriendOrderResp_descriptor_;
  metadata.reflection = SendFriendOrderResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClickFriendOrderReq::kIndexFieldNumber;
const int ClickFriendOrderReq::kStatusFieldNumber;
#endif  // !_MSC_VER

ClickFriendOrderReq::ClickFriendOrderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.ClickFriendOrderReq)
}

void ClickFriendOrderReq::InitAsDefaultInstance() {
}

ClickFriendOrderReq::ClickFriendOrderReq(const ClickFriendOrderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.ClickFriendOrderReq)
}

void ClickFriendOrderReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClickFriendOrderReq::~ClickFriendOrderReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.ClickFriendOrderReq)
  SharedDtor();
}

void ClickFriendOrderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClickFriendOrderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClickFriendOrderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClickFriendOrderReq_descriptor_;
}

const ClickFriendOrderReq& ClickFriendOrderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

ClickFriendOrderReq* ClickFriendOrderReq::default_instance_ = NULL;

ClickFriendOrderReq* ClickFriendOrderReq::New() const {
  return new ClickFriendOrderReq;
}

void ClickFriendOrderReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClickFriendOrderReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClickFriendOrderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.ClickFriendOrderReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // required uint32 Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.ClickFriendOrderReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.ClickFriendOrderReq)
  return false;
#undef DO_
}

void ClickFriendOrderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.ClickFriendOrderReq)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required uint32 Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.ClickFriendOrderReq)
}

::google::protobuf::uint8* ClickFriendOrderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.ClickFriendOrderReq)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required uint32 Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.ClickFriendOrderReq)
  return target;
}

int ClickFriendOrderReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClickFriendOrderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClickFriendOrderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClickFriendOrderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClickFriendOrderReq::MergeFrom(const ClickFriendOrderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClickFriendOrderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClickFriendOrderReq::CopyFrom(const ClickFriendOrderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClickFriendOrderReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClickFriendOrderReq::Swap(ClickFriendOrderReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClickFriendOrderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClickFriendOrderReq_descriptor_;
  metadata.reflection = ClickFriendOrderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClickFriendOrderResp::kIndexFieldNumber;
const int ClickFriendOrderResp::kNewStatusFieldNumber;
#endif  // !_MSC_VER

ClickFriendOrderResp::ClickFriendOrderResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.ClickFriendOrderResp)
}

void ClickFriendOrderResp::InitAsDefaultInstance() {
}

ClickFriendOrderResp::ClickFriendOrderResp(const ClickFriendOrderResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.ClickFriendOrderResp)
}

void ClickFriendOrderResp::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  newstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClickFriendOrderResp::~ClickFriendOrderResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.ClickFriendOrderResp)
  SharedDtor();
}

void ClickFriendOrderResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClickFriendOrderResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClickFriendOrderResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClickFriendOrderResp_descriptor_;
}

const ClickFriendOrderResp& ClickFriendOrderResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

ClickFriendOrderResp* ClickFriendOrderResp::default_instance_ = NULL;

ClickFriendOrderResp* ClickFriendOrderResp::New() const {
  return new ClickFriendOrderResp;
}

void ClickFriendOrderResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClickFriendOrderResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, newstatus_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClickFriendOrderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.ClickFriendOrderResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_newStatus;
        break;
      }

      // required uint32 newStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_newStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newstatus_)));
          set_has_newstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.ClickFriendOrderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.ClickFriendOrderResp)
  return false;
#undef DO_
}

void ClickFriendOrderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.ClickFriendOrderResp)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required uint32 newStatus = 2;
  if (has_newstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.ClickFriendOrderResp)
}

::google::protobuf::uint8* ClickFriendOrderResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.ClickFriendOrderResp)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required uint32 newStatus = 2;
  if (has_newstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.ClickFriendOrderResp)
  return target;
}

int ClickFriendOrderResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 newStatus = 2;
    if (has_newstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClickFriendOrderResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClickFriendOrderResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClickFriendOrderResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClickFriendOrderResp::MergeFrom(const ClickFriendOrderResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_newstatus()) {
      set_newstatus(from.newstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClickFriendOrderResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClickFriendOrderResp::CopyFrom(const ClickFriendOrderResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClickFriendOrderResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClickFriendOrderResp::Swap(ClickFriendOrderResp* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(newstatus_, other->newstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClickFriendOrderResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClickFriendOrderResp_descriptor_;
  metadata.reflection = ClickFriendOrderResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyFriendOrderReq::kIndexFieldNumber;
const int BuyFriendOrderReq::kStatusFieldNumber;
const int BuyFriendOrderReq::kSourceIdFieldNumber;
const int BuyFriendOrderReq::kSenderUidFieldNumber;
const int BuyFriendOrderReq::kProductIdFieldNumber;
const int BuyFriendOrderReq::kCountFieldNumber;
const int BuyFriendOrderReq::kCoinFieldNumber;
#endif  // !_MSC_VER

BuyFriendOrderReq::BuyFriendOrderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.BuyFriendOrderReq)
}

void BuyFriendOrderReq::InitAsDefaultInstance() {
}

BuyFriendOrderReq::BuyFriendOrderReq(const BuyFriendOrderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.BuyFriendOrderReq)
}

void BuyFriendOrderReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  status_ = 0u;
  sourceid_ = 0u;
  senderuid_ = 0u;
  productid_ = 0u;
  count_ = 0u;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyFriendOrderReq::~BuyFriendOrderReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.BuyFriendOrderReq)
  SharedDtor();
}

void BuyFriendOrderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyFriendOrderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyFriendOrderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyFriendOrderReq_descriptor_;
}

const BuyFriendOrderReq& BuyFriendOrderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

BuyFriendOrderReq* BuyFriendOrderReq::default_instance_ = NULL;

BuyFriendOrderReq* BuyFriendOrderReq::New() const {
  return new BuyFriendOrderReq;
}

void BuyFriendOrderReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuyFriendOrderReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(index_, coin_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyFriendOrderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.BuyFriendOrderReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // required uint32 Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sourceId;
        break;
      }

      // required uint32 sourceId = 3;
      case 3: {
        if (tag == 24) {
         parse_sourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_senderUid;
        break;
      }

      // required uint32 senderUid = 4;
      case 4: {
        if (tag == 32) {
         parse_senderUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &senderuid_)));
          set_has_senderuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_productId;
        break;
      }

      // required uint32 productId = 5;
      case 5: {
        if (tag == 40) {
         parse_productId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // required uint32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_coin;
        break;
      }

      // required uint32 coin = 7;
      case 7: {
        if (tag == 56) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.BuyFriendOrderReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.BuyFriendOrderReq)
  return false;
#undef DO_
}

void BuyFriendOrderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.BuyFriendOrderReq)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required uint32 Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // required uint32 sourceId = 3;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sourceid(), output);
  }

  // required uint32 senderUid = 4;
  if (has_senderuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->senderuid(), output);
  }

  // required uint32 productId = 5;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->productid(), output);
  }

  // required uint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  // required uint32 coin = 7;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.BuyFriendOrderReq)
}

::google::protobuf::uint8* BuyFriendOrderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.BuyFriendOrderReq)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required uint32 Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // required uint32 sourceId = 3;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sourceid(), target);
  }

  // required uint32 senderUid = 4;
  if (has_senderuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->senderuid(), target);
  }

  // required uint32 productId = 5;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->productid(), target);
  }

  // required uint32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  // required uint32 coin = 7;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.BuyFriendOrderReq)
  return target;
}

int BuyFriendOrderReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 sourceId = 3;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

    // required uint32 senderUid = 4;
    if (has_senderuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->senderuid());
    }

    // required uint32 productId = 5;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productid());
    }

    // required uint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 coin = 7;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyFriendOrderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyFriendOrderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyFriendOrderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyFriendOrderReq::MergeFrom(const BuyFriendOrderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_senderuid()) {
      set_senderuid(from.senderuid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyFriendOrderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyFriendOrderReq::CopyFrom(const BuyFriendOrderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyFriendOrderReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void BuyFriendOrderReq::Swap(BuyFriendOrderReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(status_, other->status_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(senderuid_, other->senderuid_);
    std::swap(productid_, other->productid_);
    std::swap(count_, other->count_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyFriendOrderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyFriendOrderReq_descriptor_;
  metadata.reflection = BuyFriendOrderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyFriendOrderResp::kIndexFieldNumber;
const int BuyFriendOrderResp::kNewstatusFieldNumber;
const int BuyFriendOrderResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

BuyFriendOrderResp::BuyFriendOrderResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.BuyFriendOrderResp)
}

void BuyFriendOrderResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

BuyFriendOrderResp::BuyFriendOrderResp(const BuyFriendOrderResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.BuyFriendOrderResp)
}

void BuyFriendOrderResp::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  newstatus_ = 0u;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyFriendOrderResp::~BuyFriendOrderResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.BuyFriendOrderResp)
  SharedDtor();
}

void BuyFriendOrderResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void BuyFriendOrderResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyFriendOrderResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyFriendOrderResp_descriptor_;
}

const BuyFriendOrderResp& BuyFriendOrderResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

BuyFriendOrderResp* BuyFriendOrderResp::default_instance_ = NULL;

BuyFriendOrderResp* BuyFriendOrderResp::New() const {
  return new BuyFriendOrderResp;
}

void BuyFriendOrderResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuyFriendOrderResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(index_, newstatus_);
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyFriendOrderResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.BuyFriendOrderResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_newstatus;
        break;
      }

      // required uint32 newstatus = 2;
      case 2: {
        if (tag == 16) {
         parse_newstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newstatus_)));
          set_has_newstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.BuyFriendOrderResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.BuyFriendOrderResp)
  return false;
#undef DO_
}

void BuyFriendOrderResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.BuyFriendOrderResp)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required uint32 newstatus = 2;
  if (has_newstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newstatus(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.BuyFriendOrderResp)
}

::google::protobuf::uint8* BuyFriendOrderResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.BuyFriendOrderResp)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required uint32 newstatus = 2;
  if (has_newstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newstatus(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.BuyFriendOrderResp)
  return target;
}

int BuyFriendOrderResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 newstatus = 2;
    if (has_newstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newstatus());
    }

    // optional .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyFriendOrderResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyFriendOrderResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyFriendOrderResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyFriendOrderResp::MergeFrom(const BuyFriendOrderResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_newstatus()) {
      set_newstatus(from.newstatus());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyFriendOrderResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyFriendOrderResp::CopyFrom(const BuyFriendOrderResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyFriendOrderResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void BuyFriendOrderResp::Swap(BuyFriendOrderResp* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(newstatus_, other->newstatus_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyFriendOrderResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyFriendOrderResp_descriptor_;
  metadata.reflection = BuyFriendOrderResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOrderRewardsReq::kBasketFieldNumber;
const int GetOrderRewardsReq::kStatusFieldNumber;
const int GetOrderRewardsReq::kProductIdFieldNumber;
const int GetOrderRewardsReq::kCountFieldNumber;
const int GetOrderRewardsReq::kCoinFieldNumber;
#endif  // !_MSC_VER

GetOrderRewardsReq::GetOrderRewardsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.GetOrderRewardsReq)
}

void GetOrderRewardsReq::InitAsDefaultInstance() {
}

GetOrderRewardsReq::GetOrderRewardsReq(const GetOrderRewardsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.GetOrderRewardsReq)
}

void GetOrderRewardsReq::SharedCtor() {
  _cached_size_ = 0;
  basket_ = 0u;
  status_ = 0u;
  productid_ = 0u;
  count_ = 0u;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOrderRewardsReq::~GetOrderRewardsReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.GetOrderRewardsReq)
  SharedDtor();
}

void GetOrderRewardsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOrderRewardsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOrderRewardsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOrderRewardsReq_descriptor_;
}

const GetOrderRewardsReq& GetOrderRewardsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

GetOrderRewardsReq* GetOrderRewardsReq::default_instance_ = NULL;

GetOrderRewardsReq* GetOrderRewardsReq::New() const {
  return new GetOrderRewardsReq;
}

void GetOrderRewardsReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetOrderRewardsReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(basket_, coin_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOrderRewardsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.GetOrderRewardsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 basket = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basket_)));
          set_has_basket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // required uint32 Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_productId;
        break;
      }

      // required uint32 productId = 3;
      case 3: {
        if (tag == 24) {
         parse_productId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required uint32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_coin;
        break;
      }

      // required uint32 coin = 5;
      case 5: {
        if (tag == 40) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.GetOrderRewardsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.GetOrderRewardsReq)
  return false;
#undef DO_
}

void GetOrderRewardsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.GetOrderRewardsReq)
  // required uint32 basket = 1;
  if (has_basket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->basket(), output);
  }

  // required uint32 Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // required uint32 productId = 3;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->productid(), output);
  }

  // required uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // required uint32 coin = 5;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.GetOrderRewardsReq)
}

::google::protobuf::uint8* GetOrderRewardsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.GetOrderRewardsReq)
  // required uint32 basket = 1;
  if (has_basket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->basket(), target);
  }

  // required uint32 Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // required uint32 productId = 3;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->productid(), target);
  }

  // required uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // required uint32 coin = 5;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.GetOrderRewardsReq)
  return target;
}

int GetOrderRewardsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 basket = 1;
    if (has_basket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->basket());
    }

    // required uint32 Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 productId = 3;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productid());
    }

    // required uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 coin = 5;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOrderRewardsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOrderRewardsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOrderRewardsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOrderRewardsReq::MergeFrom(const GetOrderRewardsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basket()) {
      set_basket(from.basket());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOrderRewardsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOrderRewardsReq::CopyFrom(const GetOrderRewardsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderRewardsReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GetOrderRewardsReq::Swap(GetOrderRewardsReq* other) {
  if (other != this) {
    std::swap(basket_, other->basket_);
    std::swap(status_, other->status_);
    std::swap(productid_, other->productid_);
    std::swap(count_, other->count_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOrderRewardsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOrderRewardsReq_descriptor_;
  metadata.reflection = GetOrderRewardsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOrderRewardsResp::kBasketFieldNumber;
const int GetOrderRewardsResp::kNewstatusFieldNumber;
const int GetOrderRewardsResp::kCommonsFieldNumber;
const int GetOrderRewardsResp::kDeadtimeFieldNumber;
#endif  // !_MSC_VER

GetOrderRewardsResp::GetOrderRewardsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.GetOrderRewardsResp)
}

void GetOrderRewardsResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

GetOrderRewardsResp::GetOrderRewardsResp(const GetOrderRewardsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.GetOrderRewardsResp)
}

void GetOrderRewardsResp::SharedCtor() {
  _cached_size_ = 0;
  basket_ = 0u;
  newstatus_ = 0u;
  commons_ = NULL;
  deadtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOrderRewardsResp::~GetOrderRewardsResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.GetOrderRewardsResp)
  SharedDtor();
}

void GetOrderRewardsResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void GetOrderRewardsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOrderRewardsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOrderRewardsResp_descriptor_;
}

const GetOrderRewardsResp& GetOrderRewardsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

GetOrderRewardsResp* GetOrderRewardsResp::default_instance_ = NULL;

GetOrderRewardsResp* GetOrderRewardsResp::New() const {
  return new GetOrderRewardsResp;
}

void GetOrderRewardsResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetOrderRewardsResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(basket_, newstatus_);
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    deadtime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOrderRewardsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.GetOrderRewardsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 basket = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basket_)));
          set_has_basket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_newstatus;
        break;
      }

      // required uint32 newstatus = 2;
      case 2: {
        if (tag == 16) {
         parse_newstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newstatus_)));
          set_has_newstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_deadtime;
        break;
      }

      // optional uint32 deadtime = 4;
      case 4: {
        if (tag == 32) {
         parse_deadtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadtime_)));
          set_has_deadtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.GetOrderRewardsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.GetOrderRewardsResp)
  return false;
#undef DO_
}

void GetOrderRewardsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.GetOrderRewardsResp)
  // required uint32 basket = 1;
  if (has_basket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->basket(), output);
  }

  // required uint32 newstatus = 2;
  if (has_newstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newstatus(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  // optional uint32 deadtime = 4;
  if (has_deadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deadtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.GetOrderRewardsResp)
}

::google::protobuf::uint8* GetOrderRewardsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.GetOrderRewardsResp)
  // required uint32 basket = 1;
  if (has_basket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->basket(), target);
  }

  // required uint32 newstatus = 2;
  if (has_newstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newstatus(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  // optional uint32 deadtime = 4;
  if (has_deadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deadtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.GetOrderRewardsResp)
  return target;
}

int GetOrderRewardsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 basket = 1;
    if (has_basket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->basket());
    }

    // required uint32 newstatus = 2;
    if (has_newstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newstatus());
    }

    // optional .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // optional uint32 deadtime = 4;
    if (has_deadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOrderRewardsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOrderRewardsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOrderRewardsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOrderRewardsResp::MergeFrom(const GetOrderRewardsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basket()) {
      set_basket(from.basket());
    }
    if (from.has_newstatus()) {
      set_newstatus(from.newstatus());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_deadtime()) {
      set_deadtime(from.deadtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOrderRewardsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOrderRewardsResp::CopyFrom(const GetOrderRewardsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrderRewardsResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void GetOrderRewardsResp::Swap(GetOrderRewardsResp* other) {
  if (other != this) {
    std::swap(basket_, other->basket_);
    std::swap(newstatus_, other->newstatus_);
    std::swap(commons_, other->commons_);
    std::swap(deadtime_, other->deadtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOrderRewardsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOrderRewardsResp_descriptor_;
  metadata.reflection = GetOrderRewardsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CostDiamondReq::kBasketFieldNumber;
const int CostDiamondReq::kStatusFieldNumber;
const int CostDiamondReq::kDiamondsFieldNumber;
#endif  // !_MSC_VER

CostDiamondReq::CostDiamondReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.CostDiamondReq)
}

void CostDiamondReq::InitAsDefaultInstance() {
}

CostDiamondReq::CostDiamondReq(const CostDiamondReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.CostDiamondReq)
}

void CostDiamondReq::SharedCtor() {
  _cached_size_ = 0;
  basket_ = 0u;
  status_ = 0u;
  diamonds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CostDiamondReq::~CostDiamondReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.CostDiamondReq)
  SharedDtor();
}

void CostDiamondReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CostDiamondReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostDiamondReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostDiamondReq_descriptor_;
}

const CostDiamondReq& CostDiamondReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

CostDiamondReq* CostDiamondReq::default_instance_ = NULL;

CostDiamondReq* CostDiamondReq::New() const {
  return new CostDiamondReq;
}

void CostDiamondReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CostDiamondReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(basket_, diamonds_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CostDiamondReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.CostDiamondReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 basket = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basket_)));
          set_has_basket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_diamonds;
        break;
      }

      // required uint32 diamonds = 3;
      case 3: {
        if (tag == 24) {
         parse_diamonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamonds_)));
          set_has_diamonds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.CostDiamondReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.CostDiamondReq)
  return false;
#undef DO_
}

void CostDiamondReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.CostDiamondReq)
  // required uint32 basket = 1;
  if (has_basket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->basket(), output);
  }

  // required uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // required uint32 diamonds = 3;
  if (has_diamonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->diamonds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.CostDiamondReq)
}

::google::protobuf::uint8* CostDiamondReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.CostDiamondReq)
  // required uint32 basket = 1;
  if (has_basket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->basket(), target);
  }

  // required uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // required uint32 diamonds = 3;
  if (has_diamonds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->diamonds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.CostDiamondReq)
  return target;
}

int CostDiamondReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 basket = 1;
    if (has_basket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->basket());
    }

    // required uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 diamonds = 3;
    if (has_diamonds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamonds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostDiamondReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CostDiamondReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CostDiamondReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CostDiamondReq::MergeFrom(const CostDiamondReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basket()) {
      set_basket(from.basket());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_diamonds()) {
      set_diamonds(from.diamonds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CostDiamondReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostDiamondReq::CopyFrom(const CostDiamondReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostDiamondReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CostDiamondReq::Swap(CostDiamondReq* other) {
  if (other != this) {
    std::swap(basket_, other->basket_);
    std::swap(status_, other->status_);
    std::swap(diamonds_, other->diamonds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CostDiamondReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostDiamondReq_descriptor_;
  metadata.reflection = CostDiamondReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CostDiamondResp::kBasketFieldNumber;
const int CostDiamondResp::kNewstatusFieldNumber;
const int CostDiamondResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

CostDiamondResp::CostDiamondResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.CostDiamondResp)
}

void CostDiamondResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

CostDiamondResp::CostDiamondResp(const CostDiamondResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.CostDiamondResp)
}

void CostDiamondResp::SharedCtor() {
  _cached_size_ = 0;
  basket_ = 0u;
  newstatus_ = 0u;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CostDiamondResp::~CostDiamondResp() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.CostDiamondResp)
  SharedDtor();
}

void CostDiamondResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void CostDiamondResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostDiamondResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostDiamondResp_descriptor_;
}

const CostDiamondResp& CostDiamondResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

CostDiamondResp* CostDiamondResp::default_instance_ = NULL;

CostDiamondResp* CostDiamondResp::New() const {
  return new CostDiamondResp;
}

void CostDiamondResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CostDiamondResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(basket_, newstatus_);
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CostDiamondResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.CostDiamondResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 basket = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basket_)));
          set_has_basket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_newstatus;
        break;
      }

      // required uint32 newstatus = 2;
      case 2: {
        if (tag == 16) {
         parse_newstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newstatus_)));
          set_has_newstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.CostDiamondResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.CostDiamondResp)
  return false;
#undef DO_
}

void CostDiamondResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.CostDiamondResp)
  // required uint32 basket = 1;
  if (has_basket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->basket(), output);
  }

  // required uint32 newstatus = 2;
  if (has_newstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newstatus(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.CostDiamondResp)
}

::google::protobuf::uint8* CostDiamondResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.CostDiamondResp)
  // required uint32 basket = 1;
  if (has_basket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->basket(), target);
  }

  // required uint32 newstatus = 2;
  if (has_newstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newstatus(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.CostDiamondResp)
  return target;
}

int CostDiamondResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 basket = 1;
    if (has_basket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->basket());
    }

    // required uint32 newstatus = 2;
    if (has_newstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newstatus());
    }

    // optional .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostDiamondResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CostDiamondResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CostDiamondResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CostDiamondResp::MergeFrom(const CostDiamondResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basket()) {
      set_basket(from.basket());
    }
    if (from.has_newstatus()) {
      set_newstatus(from.newstatus());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CostDiamondResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostDiamondResp::CopyFrom(const CostDiamondResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostDiamondResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void CostDiamondResp::Swap(CostDiamondResp* other) {
  if (other != this) {
    std::swap(basket_, other->basket_);
    std::swap(newstatus_, other->newstatus_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CostDiamondResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostDiamondResp_descriptor_;
  metadata.reflection = CostDiamondResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendOtherServerReq::kStatusFieldNumber;
const int SendOtherServerReq::kSenderUidFieldNumber;
const int SendOtherServerReq::kDeadtimeFieldNumber;
const int SendOtherServerReq::kSourceIdFieldNumber;
const int SendOtherServerReq::kProductIdFieldNumber;
const int SendOtherServerReq::kCountFieldNumber;
const int SendOtherServerReq::kCoinFieldNumber;
const int SendOtherServerReq::kReceiverUidFieldNumber;
#endif  // !_MSC_VER

SendOtherServerReq::SendOtherServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.SendOtherServerReq)
}

void SendOtherServerReq::InitAsDefaultInstance() {
}

SendOtherServerReq::SendOtherServerReq(const SendOtherServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.SendOtherServerReq)
}

void SendOtherServerReq::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  senderuid_ = 0u;
  deadtime_ = 0u;
  sourceid_ = 0u;
  productid_ = 0u;
  count_ = 0u;
  coin_ = 0u;
  receiveruid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendOtherServerReq::~SendOtherServerReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.SendOtherServerReq)
  SharedDtor();
}

void SendOtherServerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendOtherServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendOtherServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendOtherServerReq_descriptor_;
}

const SendOtherServerReq& SendOtherServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

SendOtherServerReq* SendOtherServerReq::default_instance_ = NULL;

SendOtherServerReq* SendOtherServerReq::New() const {
  return new SendOtherServerReq;
}

void SendOtherServerReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendOtherServerReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(status_, receiveruid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendOtherServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.SendOtherServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_senderUid;
        break;
      }

      // required uint32 senderUid = 2;
      case 2: {
        if (tag == 16) {
         parse_senderUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &senderuid_)));
          set_has_senderuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_deadtime;
        break;
      }

      // required uint32 deadtime = 3;
      case 3: {
        if (tag == 24) {
         parse_deadtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadtime_)));
          set_has_deadtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sourceId;
        break;
      }

      // required uint32 sourceId = 4;
      case 4: {
        if (tag == 32) {
         parse_sourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_productId;
        break;
      }

      // required uint32 productId = 5;
      case 5: {
        if (tag == 40) {
         parse_productId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // required uint32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_coin;
        break;
      }

      // required uint32 coin = 7;
      case 7: {
        if (tag == 56) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_receiverUid;
        break;
      }

      // required uint32 receiverUid = 8;
      case 8: {
        if (tag == 64) {
         parse_receiverUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiveruid_)));
          set_has_receiveruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.SendOtherServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.SendOtherServerReq)
  return false;
#undef DO_
}

void SendOtherServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.SendOtherServerReq)
  // required uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // required uint32 senderUid = 2;
  if (has_senderuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->senderuid(), output);
  }

  // required uint32 deadtime = 3;
  if (has_deadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deadtime(), output);
  }

  // required uint32 sourceId = 4;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sourceid(), output);
  }

  // required uint32 productId = 5;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->productid(), output);
  }

  // required uint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  // required uint32 coin = 7;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->coin(), output);
  }

  // required uint32 receiverUid = 8;
  if (has_receiveruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->receiveruid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.SendOtherServerReq)
}

::google::protobuf::uint8* SendOtherServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.SendOtherServerReq)
  // required uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // required uint32 senderUid = 2;
  if (has_senderuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->senderuid(), target);
  }

  // required uint32 deadtime = 3;
  if (has_deadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deadtime(), target);
  }

  // required uint32 sourceId = 4;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sourceid(), target);
  }

  // required uint32 productId = 5;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->productid(), target);
  }

  // required uint32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  // required uint32 coin = 7;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->coin(), target);
  }

  // required uint32 receiverUid = 8;
  if (has_receiveruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->receiveruid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.SendOtherServerReq)
  return target;
}

int SendOtherServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 senderUid = 2;
    if (has_senderuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->senderuid());
    }

    // required uint32 deadtime = 3;
    if (has_deadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadtime());
    }

    // required uint32 sourceId = 4;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

    // required uint32 productId = 5;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productid());
    }

    // required uint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 coin = 7;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 receiverUid = 8;
    if (has_receiveruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiveruid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendOtherServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendOtherServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendOtherServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendOtherServerReq::MergeFrom(const SendOtherServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_senderuid()) {
      set_senderuid(from.senderuid());
    }
    if (from.has_deadtime()) {
      set_deadtime(from.deadtime());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_receiveruid()) {
      set_receiveruid(from.receiveruid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendOtherServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendOtherServerReq::CopyFrom(const SendOtherServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendOtherServerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void SendOtherServerReq::Swap(SendOtherServerReq* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(senderuid_, other->senderuid_);
    std::swap(deadtime_, other->deadtime_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(productid_, other->productid_);
    std::swap(count_, other->count_);
    std::swap(coin_, other->coin_);
    std::swap(receiveruid_, other->receiveruid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendOtherServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendOtherServerReq_descriptor_;
  metadata.reflection = SendOtherServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecallSourceFoReq::kMyuidFieldNumber;
const int RecallSourceFoReq::kMyindexFieldNumber;
const int RecallSourceFoReq::kSourceIdFieldNumber;
const int RecallSourceFoReq::kSenderUidFieldNumber;
#endif  // !_MSC_VER

RecallSourceFoReq::RecallSourceFoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.RecallSourceFoReq)
}

void RecallSourceFoReq::InitAsDefaultInstance() {
}

RecallSourceFoReq::RecallSourceFoReq(const RecallSourceFoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.RecallSourceFoReq)
}

void RecallSourceFoReq::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  myindex_ = 0u;
  sourceid_ = 0u;
  senderuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecallSourceFoReq::~RecallSourceFoReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.RecallSourceFoReq)
  SharedDtor();
}

void RecallSourceFoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecallSourceFoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecallSourceFoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecallSourceFoReq_descriptor_;
}

const RecallSourceFoReq& RecallSourceFoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

RecallSourceFoReq* RecallSourceFoReq::default_instance_ = NULL;

RecallSourceFoReq* RecallSourceFoReq::New() const {
  return new RecallSourceFoReq;
}

void RecallSourceFoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RecallSourceFoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(myuid_, senderuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecallSourceFoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.RecallSourceFoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myindex;
        break;
      }

      // required uint32 myindex = 2;
      case 2: {
        if (tag == 16) {
         parse_myindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myindex_)));
          set_has_myindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sourceId;
        break;
      }

      // required uint32 sourceId = 3;
      case 3: {
        if (tag == 24) {
         parse_sourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_senderUid;
        break;
      }

      // optional uint32 senderUid = 4;
      case 4: {
        if (tag == 32) {
         parse_senderUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &senderuid_)));
          set_has_senderuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.RecallSourceFoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.RecallSourceFoReq)
  return false;
#undef DO_
}

void RecallSourceFoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.RecallSourceFoReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }

  // required uint32 myindex = 2;
  if (has_myindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myindex(), output);
  }

  // required uint32 sourceId = 3;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sourceid(), output);
  }

  // optional uint32 senderUid = 4;
  if (has_senderuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->senderuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.RecallSourceFoReq)
}

::google::protobuf::uint8* RecallSourceFoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.RecallSourceFoReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }

  // required uint32 myindex = 2;
  if (has_myindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myindex(), target);
  }

  // required uint32 sourceId = 3;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sourceid(), target);
  }

  // optional uint32 senderUid = 4;
  if (has_senderuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->senderuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.RecallSourceFoReq)
  return target;
}

int RecallSourceFoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myuid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // required uint32 myindex = 2;
    if (has_myindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myindex());
    }

    // required uint32 sourceId = 3;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

    // optional uint32 senderUid = 4;
    if (has_senderuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->senderuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecallSourceFoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecallSourceFoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecallSourceFoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecallSourceFoReq::MergeFrom(const RecallSourceFoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_myindex()) {
      set_myindex(from.myindex());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_senderuid()) {
      set_senderuid(from.senderuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecallSourceFoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecallSourceFoReq::CopyFrom(const RecallSourceFoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecallSourceFoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RecallSourceFoReq::Swap(RecallSourceFoReq* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(myindex_, other->myindex_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(senderuid_, other->senderuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecallSourceFoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecallSourceFoReq_descriptor_;
  metadata.reflection = RecallSourceFoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecallCanBuyFoReq::kMyuidFieldNumber;
const int RecallCanBuyFoReq::kMyindexFieldNumber;
const int RecallCanBuyFoReq::kSourceIdFieldNumber;
const int RecallCanBuyFoReq::kSenderUidFieldNumber;
#endif  // !_MSC_VER

RecallCanBuyFoReq::RecallCanBuyFoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.RecallCanBuyFoReq)
}

void RecallCanBuyFoReq::InitAsDefaultInstance() {
}

RecallCanBuyFoReq::RecallCanBuyFoReq(const RecallCanBuyFoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.RecallCanBuyFoReq)
}

void RecallCanBuyFoReq::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  myindex_ = 0u;
  sourceid_ = 0u;
  senderuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecallCanBuyFoReq::~RecallCanBuyFoReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.RecallCanBuyFoReq)
  SharedDtor();
}

void RecallCanBuyFoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecallCanBuyFoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecallCanBuyFoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecallCanBuyFoReq_descriptor_;
}

const RecallCanBuyFoReq& RecallCanBuyFoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

RecallCanBuyFoReq* RecallCanBuyFoReq::default_instance_ = NULL;

RecallCanBuyFoReq* RecallCanBuyFoReq::New() const {
  return new RecallCanBuyFoReq;
}

void RecallCanBuyFoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RecallCanBuyFoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(myuid_, senderuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecallCanBuyFoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.RecallCanBuyFoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myindex;
        break;
      }

      // required uint32 myindex = 2;
      case 2: {
        if (tag == 16) {
         parse_myindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myindex_)));
          set_has_myindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sourceId;
        break;
      }

      // required uint32 sourceId = 3;
      case 3: {
        if (tag == 24) {
         parse_sourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_senderUid;
        break;
      }

      // optional uint32 senderUid = 4;
      case 4: {
        if (tag == 32) {
         parse_senderUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &senderuid_)));
          set_has_senderuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.RecallCanBuyFoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.RecallCanBuyFoReq)
  return false;
#undef DO_
}

void RecallCanBuyFoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.RecallCanBuyFoReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }

  // required uint32 myindex = 2;
  if (has_myindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myindex(), output);
  }

  // required uint32 sourceId = 3;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sourceid(), output);
  }

  // optional uint32 senderUid = 4;
  if (has_senderuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->senderuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.RecallCanBuyFoReq)
}

::google::protobuf::uint8* RecallCanBuyFoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.RecallCanBuyFoReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }

  // required uint32 myindex = 2;
  if (has_myindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myindex(), target);
  }

  // required uint32 sourceId = 3;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sourceid(), target);
  }

  // optional uint32 senderUid = 4;
  if (has_senderuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->senderuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.RecallCanBuyFoReq)
  return target;
}

int RecallCanBuyFoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myuid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // required uint32 myindex = 2;
    if (has_myindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myindex());
    }

    // required uint32 sourceId = 3;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

    // optional uint32 senderUid = 4;
    if (has_senderuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->senderuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecallCanBuyFoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecallCanBuyFoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecallCanBuyFoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecallCanBuyFoReq::MergeFrom(const RecallCanBuyFoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_myindex()) {
      set_myindex(from.myindex());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_senderuid()) {
      set_senderuid(from.senderuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecallCanBuyFoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecallCanBuyFoReq::CopyFrom(const RecallCanBuyFoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecallCanBuyFoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RecallCanBuyFoReq::Swap(RecallCanBuyFoReq* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(myindex_, other->myindex_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(senderuid_, other->senderuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecallCanBuyFoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecallCanBuyFoReq_descriptor_;
  metadata.reflection = RecallCanBuyFoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeFoStatusReq::kMyuidFieldNumber;
const int ChangeFoStatusReq::kMyindexFieldNumber;
const int ChangeFoStatusReq::kNewstatusFieldNumber;
#endif  // !_MSC_VER

ChangeFoStatusReq::ChangeFoStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.ChangeFoStatusReq)
}

void ChangeFoStatusReq::InitAsDefaultInstance() {
}

ChangeFoStatusReq::ChangeFoStatusReq(const ChangeFoStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.ChangeFoStatusReq)
}

void ChangeFoStatusReq::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  myindex_ = 0u;
  newstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeFoStatusReq::~ChangeFoStatusReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.ChangeFoStatusReq)
  SharedDtor();
}

void ChangeFoStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeFoStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeFoStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeFoStatusReq_descriptor_;
}

const ChangeFoStatusReq& ChangeFoStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

ChangeFoStatusReq* ChangeFoStatusReq::default_instance_ = NULL;

ChangeFoStatusReq* ChangeFoStatusReq::New() const {
  return new ChangeFoStatusReq;
}

void ChangeFoStatusReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeFoStatusReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(myuid_, newstatus_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeFoStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.ChangeFoStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myindex;
        break;
      }

      // required uint32 myindex = 2;
      case 2: {
        if (tag == 16) {
         parse_myindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myindex_)));
          set_has_myindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_newstatus;
        break;
      }

      // required uint32 newstatus = 3;
      case 3: {
        if (tag == 24) {
         parse_newstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newstatus_)));
          set_has_newstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.ChangeFoStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.ChangeFoStatusReq)
  return false;
#undef DO_
}

void ChangeFoStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.ChangeFoStatusReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }

  // required uint32 myindex = 2;
  if (has_myindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myindex(), output);
  }

  // required uint32 newstatus = 3;
  if (has_newstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->newstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.ChangeFoStatusReq)
}

::google::protobuf::uint8* ChangeFoStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.ChangeFoStatusReq)
  // required uint32 myuid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }

  // required uint32 myindex = 2;
  if (has_myindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myindex(), target);
  }

  // required uint32 newstatus = 3;
  if (has_newstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->newstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.ChangeFoStatusReq)
  return target;
}

int ChangeFoStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myuid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // required uint32 myindex = 2;
    if (has_myindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myindex());
    }

    // required uint32 newstatus = 3;
    if (has_newstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeFoStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeFoStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeFoStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeFoStatusReq::MergeFrom(const ChangeFoStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_myindex()) {
      set_myindex(from.myindex());
    }
    if (from.has_newstatus()) {
      set_newstatus(from.newstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeFoStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeFoStatusReq::CopyFrom(const ChangeFoStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeFoStatusReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ChangeFoStatusReq::Swap(ChangeFoStatusReq* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(myindex_, other->myindex_);
    std::swap(newstatus_, other->newstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeFoStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeFoStatusReq_descriptor_;
  metadata.reflection = ChangeFoStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerWhetherCanBuyReq::kResultFieldNumber;
const int AnswerWhetherCanBuyReq::kMyuidFieldNumber;
const int AnswerWhetherCanBuyReq::kMyindexFieldNumber;
const int AnswerWhetherCanBuyReq::kSourceIdFieldNumber;
const int AnswerWhetherCanBuyReq::kSenderUidFieldNumber;
#endif  // !_MSC_VER

AnswerWhetherCanBuyReq::AnswerWhetherCanBuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFriendOrder.AnswerWhetherCanBuyReq)
}

void AnswerWhetherCanBuyReq::InitAsDefaultInstance() {
}

AnswerWhetherCanBuyReq::AnswerWhetherCanBuyReq(const AnswerWhetherCanBuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFriendOrder.AnswerWhetherCanBuyReq)
}

void AnswerWhetherCanBuyReq::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  myuid_ = 0u;
  myindex_ = 0u;
  sourceid_ = 0u;
  senderuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerWhetherCanBuyReq::~AnswerWhetherCanBuyReq() {
  // @@protoc_insertion_point(destructor:ProtoFriendOrder.AnswerWhetherCanBuyReq)
  SharedDtor();
}

void AnswerWhetherCanBuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnswerWhetherCanBuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerWhetherCanBuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerWhetherCanBuyReq_descriptor_;
}

const AnswerWhetherCanBuyReq& AnswerWhetherCanBuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFriendOrder_2eproto();
  return *default_instance_;
}

AnswerWhetherCanBuyReq* AnswerWhetherCanBuyReq::default_instance_ = NULL;

AnswerWhetherCanBuyReq* AnswerWhetherCanBuyReq::New() const {
  return new AnswerWhetherCanBuyReq;
}

void AnswerWhetherCanBuyReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AnswerWhetherCanBuyReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(result_, senderuid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerWhetherCanBuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFriendOrder.AnswerWhetherCanBuyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myuid;
        break;
      }

      // required uint32 myuid = 2;
      case 2: {
        if (tag == 16) {
         parse_myuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_myindex;
        break;
      }

      // required uint32 myindex = 3;
      case 3: {
        if (tag == 24) {
         parse_myindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myindex_)));
          set_has_myindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sourceId;
        break;
      }

      // required uint32 sourceId = 4;
      case 4: {
        if (tag == 32) {
         parse_sourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          set_has_sourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_senderUid;
        break;
      }

      // optional uint32 senderUid = 5;
      case 5: {
        if (tag == 40) {
         parse_senderUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &senderuid_)));
          set_has_senderuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFriendOrder.AnswerWhetherCanBuyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFriendOrder.AnswerWhetherCanBuyReq)
  return false;
#undef DO_
}

void AnswerWhetherCanBuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFriendOrder.AnswerWhetherCanBuyReq)
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // required uint32 myuid = 2;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myuid(), output);
  }

  // required uint32 myindex = 3;
  if (has_myindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->myindex(), output);
  }

  // required uint32 sourceId = 4;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sourceid(), output);
  }

  // optional uint32 senderUid = 5;
  if (has_senderuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->senderuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFriendOrder.AnswerWhetherCanBuyReq)
}

::google::protobuf::uint8* AnswerWhetherCanBuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFriendOrder.AnswerWhetherCanBuyReq)
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // required uint32 myuid = 2;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myuid(), target);
  }

  // required uint32 myindex = 3;
  if (has_myindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->myindex(), target);
  }

  // required uint32 sourceId = 4;
  if (has_sourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sourceid(), target);
  }

  // optional uint32 senderUid = 5;
  if (has_senderuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->senderuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFriendOrder.AnswerWhetherCanBuyReq)
  return target;
}

int AnswerWhetherCanBuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 myuid = 2;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }

    // required uint32 myindex = 3;
    if (has_myindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myindex());
    }

    // required uint32 sourceId = 4;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }

    // optional uint32 senderUid = 5;
    if (has_senderuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->senderuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerWhetherCanBuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerWhetherCanBuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerWhetherCanBuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerWhetherCanBuyReq::MergeFrom(const AnswerWhetherCanBuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_myindex()) {
      set_myindex(from.myindex());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_senderuid()) {
      set_senderuid(from.senderuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerWhetherCanBuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerWhetherCanBuyReq::CopyFrom(const AnswerWhetherCanBuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerWhetherCanBuyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AnswerWhetherCanBuyReq::Swap(AnswerWhetherCanBuyReq* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(myuid_, other->myuid_);
    std::swap(myindex_, other->myindex_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(senderuid_, other->senderuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerWhetherCanBuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerWhetherCanBuyReq_descriptor_;
  metadata.reflection = AnswerWhetherCanBuyReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoFriendOrder

// @@protoc_insertion_point(global_scope)
