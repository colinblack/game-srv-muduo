// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoReward.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoReward.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoReward {

namespace {

const ::google::protobuf::Descriptor* GetFirstRechargeRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFirstRechargeRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFirstRechargeRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFirstRechargeRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFollowPublicRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFollowPublicRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFollowPublicRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFollowPublicRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchProductWatchAdsReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchProductWatchAdsReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchProductWatchAdsRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchProductWatchAdsRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchProductWatchAdsRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchProductWatchAdsRewardResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoReward_2eproto() {
  protobuf_AddDesc_ProtoReward_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoReward.proto");
  GOOGLE_CHECK(file != NULL);
  GetFirstRechargeRewardReq_descriptor_ = file->message_type(0);
  static const int GetFirstRechargeRewardReq_offsets_[1] = {
  };
  GetFirstRechargeRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFirstRechargeRewardReq_descriptor_,
      GetFirstRechargeRewardReq::default_instance_,
      GetFirstRechargeRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFirstRechargeRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFirstRechargeRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFirstRechargeRewardReq));
  GetFirstRechargeRewardResp_descriptor_ = file->message_type(1);
  static const int GetFirstRechargeRewardResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFirstRechargeRewardResp, firstrecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFirstRechargeRewardResp, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFirstRechargeRewardResp, theme_),
  };
  GetFirstRechargeRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFirstRechargeRewardResp_descriptor_,
      GetFirstRechargeRewardResp::default_instance_,
      GetFirstRechargeRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFirstRechargeRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFirstRechargeRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFirstRechargeRewardResp));
  GetFollowPublicRewardReq_descriptor_ = file->message_type(2);
  static const int GetFollowPublicRewardReq_offsets_[1] = {
  };
  GetFollowPublicRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFollowPublicRewardReq_descriptor_,
      GetFollowPublicRewardReq::default_instance_,
      GetFollowPublicRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowPublicRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowPublicRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFollowPublicRewardReq));
  GetFollowPublicRewardResp_descriptor_ = file->message_type(3);
  static const int GetFollowPublicRewardResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowPublicRewardResp, common_),
  };
  GetFollowPublicRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFollowPublicRewardResp_descriptor_,
      GetFollowPublicRewardResp::default_instance_,
      GetFollowPublicRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowPublicRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFollowPublicRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFollowPublicRewardResp));
  RewardInfo_descriptor_ = file->message_type(4);
  static const int RewardInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, common_),
  };
  RewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardInfo_descriptor_,
      RewardInfo::default_instance_,
      RewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardInfo));
  FetchProductWatchAdsReward_descriptor_ = file->message_type(5);
  static const int FetchProductWatchAdsReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAdsReward, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAdsReward, count_),
  };
  FetchProductWatchAdsReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchProductWatchAdsReward_descriptor_,
      FetchProductWatchAdsReward::default_instance_,
      FetchProductWatchAdsReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAdsReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAdsReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchProductWatchAdsReward));
  FetchProductWatchAdsRewardReq_descriptor_ = file->message_type(6);
  static const int FetchProductWatchAdsRewardReq_offsets_[1] = {
  };
  FetchProductWatchAdsRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchProductWatchAdsRewardReq_descriptor_,
      FetchProductWatchAdsRewardReq::default_instance_,
      FetchProductWatchAdsRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAdsRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAdsRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchProductWatchAdsRewardReq));
  FetchProductWatchAdsRewardResp_descriptor_ = file->message_type(7);
  static const int FetchProductWatchAdsRewardResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAdsRewardResp, common_),
  };
  FetchProductWatchAdsRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchProductWatchAdsRewardResp_descriptor_,
      FetchProductWatchAdsRewardResp::default_instance_,
      FetchProductWatchAdsRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAdsRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductWatchAdsRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchProductWatchAdsRewardResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoReward_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFirstRechargeRewardReq_descriptor_, &GetFirstRechargeRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFirstRechargeRewardResp_descriptor_, &GetFirstRechargeRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFollowPublicRewardReq_descriptor_, &GetFollowPublicRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFollowPublicRewardResp_descriptor_, &GetFollowPublicRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardInfo_descriptor_, &RewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchProductWatchAdsReward_descriptor_, &FetchProductWatchAdsReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchProductWatchAdsRewardReq_descriptor_, &FetchProductWatchAdsRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchProductWatchAdsRewardResp_descriptor_, &FetchProductWatchAdsRewardResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoReward_2eproto() {
  delete GetFirstRechargeRewardReq::default_instance_;
  delete GetFirstRechargeRewardReq_reflection_;
  delete GetFirstRechargeRewardResp::default_instance_;
  delete GetFirstRechargeRewardResp_reflection_;
  delete GetFollowPublicRewardReq::default_instance_;
  delete GetFollowPublicRewardReq_reflection_;
  delete GetFollowPublicRewardResp::default_instance_;
  delete GetFollowPublicRewardResp_reflection_;
  delete RewardInfo::default_instance_;
  delete RewardInfo_reflection_;
  delete FetchProductWatchAdsReward::default_instance_;
  delete FetchProductWatchAdsReward_reflection_;
  delete FetchProductWatchAdsRewardReq::default_instance_;
  delete FetchProductWatchAdsRewardReq_reflection_;
  delete FetchProductWatchAdsRewardResp::default_instance_;
  delete FetchProductWatchAdsRewardResp_reflection_;
}

void protobuf_AddDesc_ProtoReward_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::ProtoTheme::protobuf_AddDesc_ProtoTheme_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ProtoReward.proto\022\013ProtoReward\032\020DataCo"
    "mmon.proto\032\020ProtoTheme.proto\"\033\n\031GetFirst"
    "RechargeRewardReq\"\211\001\n\032GetFirstRechargeRe"
    "wardResp\022\025\n\rfirstRecharge\030\001 \002(\r\022*\n\006commo"
    "n\030\002 \002(\0132\032.DataCommon.CommonItemsCPP\022(\n\005t"
    "heme\030\003 \001(\0132\031.ProtoTheme.ThemeInfoResp\"\032\n"
    "\030GetFollowPublicRewardReq\"G\n\031GetFollowPu"
    "blicRewardResp\022*\n\006common\030\001 \002(\0132\032.DataCom"
    "mon.CommonItemsCPP\"8\n\nRewardInfo\022*\n\006comm"
    "on\030\001 \002(\0132\032.DataCommon.CommonItemsCPP\"<\n\032"
    "FetchProductWatchAdsReward\022\017\n\007propsId\030\001 "
    "\002(\r\022\r\n\005count\030\002 \002(\r\"\037\n\035FetchProductWatchA"
    "dsRewardReq\"L\n\036FetchProductWatchAdsRewar"
    "dResp\022*\n\006common\030\001 \002(\0132\032.DataCommon.Commo"
    "nItemsCPP", 569);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoReward.proto", &protobuf_RegisterTypes);
  GetFirstRechargeRewardReq::default_instance_ = new GetFirstRechargeRewardReq();
  GetFirstRechargeRewardResp::default_instance_ = new GetFirstRechargeRewardResp();
  GetFollowPublicRewardReq::default_instance_ = new GetFollowPublicRewardReq();
  GetFollowPublicRewardResp::default_instance_ = new GetFollowPublicRewardResp();
  RewardInfo::default_instance_ = new RewardInfo();
  FetchProductWatchAdsReward::default_instance_ = new FetchProductWatchAdsReward();
  FetchProductWatchAdsRewardReq::default_instance_ = new FetchProductWatchAdsRewardReq();
  FetchProductWatchAdsRewardResp::default_instance_ = new FetchProductWatchAdsRewardResp();
  GetFirstRechargeRewardReq::default_instance_->InitAsDefaultInstance();
  GetFirstRechargeRewardResp::default_instance_->InitAsDefaultInstance();
  GetFollowPublicRewardReq::default_instance_->InitAsDefaultInstance();
  GetFollowPublicRewardResp::default_instance_->InitAsDefaultInstance();
  RewardInfo::default_instance_->InitAsDefaultInstance();
  FetchProductWatchAdsReward::default_instance_->InitAsDefaultInstance();
  FetchProductWatchAdsRewardReq::default_instance_->InitAsDefaultInstance();
  FetchProductWatchAdsRewardResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoReward_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoReward_2eproto {
  StaticDescriptorInitializer_ProtoReward_2eproto() {
    protobuf_AddDesc_ProtoReward_2eproto();
  }
} static_descriptor_initializer_ProtoReward_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetFirstRechargeRewardReq::GetFirstRechargeRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoReward.GetFirstRechargeRewardReq)
}

void GetFirstRechargeRewardReq::InitAsDefaultInstance() {
}

GetFirstRechargeRewardReq::GetFirstRechargeRewardReq(const GetFirstRechargeRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoReward.GetFirstRechargeRewardReq)
}

void GetFirstRechargeRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFirstRechargeRewardReq::~GetFirstRechargeRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoReward.GetFirstRechargeRewardReq)
  SharedDtor();
}

void GetFirstRechargeRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFirstRechargeRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFirstRechargeRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFirstRechargeRewardReq_descriptor_;
}

const GetFirstRechargeRewardReq& GetFirstRechargeRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoReward_2eproto();
  return *default_instance_;
}

GetFirstRechargeRewardReq* GetFirstRechargeRewardReq::default_instance_ = NULL;

GetFirstRechargeRewardReq* GetFirstRechargeRewardReq::New() const {
  return new GetFirstRechargeRewardReq;
}

void GetFirstRechargeRewardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFirstRechargeRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoReward.GetFirstRechargeRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoReward.GetFirstRechargeRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoReward.GetFirstRechargeRewardReq)
  return false;
#undef DO_
}

void GetFirstRechargeRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoReward.GetFirstRechargeRewardReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoReward.GetFirstRechargeRewardReq)
}

::google::protobuf::uint8* GetFirstRechargeRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoReward.GetFirstRechargeRewardReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoReward.GetFirstRechargeRewardReq)
  return target;
}

int GetFirstRechargeRewardReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFirstRechargeRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFirstRechargeRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFirstRechargeRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFirstRechargeRewardReq::MergeFrom(const GetFirstRechargeRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFirstRechargeRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFirstRechargeRewardReq::CopyFrom(const GetFirstRechargeRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFirstRechargeRewardReq::IsInitialized() const {

  return true;
}

void GetFirstRechargeRewardReq::Swap(GetFirstRechargeRewardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFirstRechargeRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFirstRechargeRewardReq_descriptor_;
  metadata.reflection = GetFirstRechargeRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFirstRechargeRewardResp::kFirstRechargeFieldNumber;
const int GetFirstRechargeRewardResp::kCommonFieldNumber;
const int GetFirstRechargeRewardResp::kThemeFieldNumber;
#endif  // !_MSC_VER

GetFirstRechargeRewardResp::GetFirstRechargeRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoReward.GetFirstRechargeRewardResp)
}

void GetFirstRechargeRewardResp::InitAsDefaultInstance() {
  common_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  theme_ = const_cast< ::ProtoTheme::ThemeInfoResp*>(&::ProtoTheme::ThemeInfoResp::default_instance());
}

GetFirstRechargeRewardResp::GetFirstRechargeRewardResp(const GetFirstRechargeRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoReward.GetFirstRechargeRewardResp)
}

void GetFirstRechargeRewardResp::SharedCtor() {
  _cached_size_ = 0;
  firstrecharge_ = 0u;
  common_ = NULL;
  theme_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFirstRechargeRewardResp::~GetFirstRechargeRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoReward.GetFirstRechargeRewardResp)
  SharedDtor();
}

void GetFirstRechargeRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
    delete theme_;
  }
}

void GetFirstRechargeRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFirstRechargeRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFirstRechargeRewardResp_descriptor_;
}

const GetFirstRechargeRewardResp& GetFirstRechargeRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoReward_2eproto();
  return *default_instance_;
}

GetFirstRechargeRewardResp* GetFirstRechargeRewardResp::default_instance_ = NULL;

GetFirstRechargeRewardResp* GetFirstRechargeRewardResp::New() const {
  return new GetFirstRechargeRewardResp;
}

void GetFirstRechargeRewardResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    firstrecharge_ = 0u;
    if (has_common()) {
      if (common_ != NULL) common_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_theme()) {
      if (theme_ != NULL) theme_->::ProtoTheme::ThemeInfoResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFirstRechargeRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoReward.GetFirstRechargeRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 firstRecharge = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstrecharge_)));
          set_has_firstrecharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_common;
        break;
      }

      // required .DataCommon.CommonItemsCPP common = 2;
      case 2: {
        if (tag == 18) {
         parse_common:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_theme;
        break;
      }

      // optional .ProtoTheme.ThemeInfoResp theme = 3;
      case 3: {
        if (tag == 26) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theme()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoReward.GetFirstRechargeRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoReward.GetFirstRechargeRewardResp)
  return false;
#undef DO_
}

void GetFirstRechargeRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoReward.GetFirstRechargeRewardResp)
  // required uint32 firstRecharge = 1;
  if (has_firstrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->firstrecharge(), output);
  }

  // required .DataCommon.CommonItemsCPP common = 2;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->common(), output);
  }

  // optional .ProtoTheme.ThemeInfoResp theme = 3;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->theme(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoReward.GetFirstRechargeRewardResp)
}

::google::protobuf::uint8* GetFirstRechargeRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoReward.GetFirstRechargeRewardResp)
  // required uint32 firstRecharge = 1;
  if (has_firstrecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->firstrecharge(), target);
  }

  // required .DataCommon.CommonItemsCPP common = 2;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->common(), target);
  }

  // optional .ProtoTheme.ThemeInfoResp theme = 3;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->theme(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoReward.GetFirstRechargeRewardResp)
  return target;
}

int GetFirstRechargeRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 firstRecharge = 1;
    if (has_firstrecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstrecharge());
    }

    // required .DataCommon.CommonItemsCPP common = 2;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

    // optional .ProtoTheme.ThemeInfoResp theme = 3;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theme());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFirstRechargeRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFirstRechargeRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFirstRechargeRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFirstRechargeRewardResp::MergeFrom(const GetFirstRechargeRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstrecharge()) {
      set_firstrecharge(from.firstrecharge());
    }
    if (from.has_common()) {
      mutable_common()->::DataCommon::CommonItemsCPP::MergeFrom(from.common());
    }
    if (from.has_theme()) {
      mutable_theme()->::ProtoTheme::ThemeInfoResp::MergeFrom(from.theme());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFirstRechargeRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFirstRechargeRewardResp::CopyFrom(const GetFirstRechargeRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFirstRechargeRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void GetFirstRechargeRewardResp::Swap(GetFirstRechargeRewardResp* other) {
  if (other != this) {
    std::swap(firstrecharge_, other->firstrecharge_);
    std::swap(common_, other->common_);
    std::swap(theme_, other->theme_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFirstRechargeRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFirstRechargeRewardResp_descriptor_;
  metadata.reflection = GetFirstRechargeRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetFollowPublicRewardReq::GetFollowPublicRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoReward.GetFollowPublicRewardReq)
}

void GetFollowPublicRewardReq::InitAsDefaultInstance() {
}

GetFollowPublicRewardReq::GetFollowPublicRewardReq(const GetFollowPublicRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoReward.GetFollowPublicRewardReq)
}

void GetFollowPublicRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFollowPublicRewardReq::~GetFollowPublicRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoReward.GetFollowPublicRewardReq)
  SharedDtor();
}

void GetFollowPublicRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFollowPublicRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFollowPublicRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFollowPublicRewardReq_descriptor_;
}

const GetFollowPublicRewardReq& GetFollowPublicRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoReward_2eproto();
  return *default_instance_;
}

GetFollowPublicRewardReq* GetFollowPublicRewardReq::default_instance_ = NULL;

GetFollowPublicRewardReq* GetFollowPublicRewardReq::New() const {
  return new GetFollowPublicRewardReq;
}

void GetFollowPublicRewardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFollowPublicRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoReward.GetFollowPublicRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoReward.GetFollowPublicRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoReward.GetFollowPublicRewardReq)
  return false;
#undef DO_
}

void GetFollowPublicRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoReward.GetFollowPublicRewardReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoReward.GetFollowPublicRewardReq)
}

::google::protobuf::uint8* GetFollowPublicRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoReward.GetFollowPublicRewardReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoReward.GetFollowPublicRewardReq)
  return target;
}

int GetFollowPublicRewardReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFollowPublicRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFollowPublicRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFollowPublicRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFollowPublicRewardReq::MergeFrom(const GetFollowPublicRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFollowPublicRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFollowPublicRewardReq::CopyFrom(const GetFollowPublicRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowPublicRewardReq::IsInitialized() const {

  return true;
}

void GetFollowPublicRewardReq::Swap(GetFollowPublicRewardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFollowPublicRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFollowPublicRewardReq_descriptor_;
  metadata.reflection = GetFollowPublicRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFollowPublicRewardResp::kCommonFieldNumber;
#endif  // !_MSC_VER

GetFollowPublicRewardResp::GetFollowPublicRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoReward.GetFollowPublicRewardResp)
}

void GetFollowPublicRewardResp::InitAsDefaultInstance() {
  common_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

GetFollowPublicRewardResp::GetFollowPublicRewardResp(const GetFollowPublicRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoReward.GetFollowPublicRewardResp)
}

void GetFollowPublicRewardResp::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFollowPublicRewardResp::~GetFollowPublicRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoReward.GetFollowPublicRewardResp)
  SharedDtor();
}

void GetFollowPublicRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void GetFollowPublicRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFollowPublicRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFollowPublicRewardResp_descriptor_;
}

const GetFollowPublicRewardResp& GetFollowPublicRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoReward_2eproto();
  return *default_instance_;
}

GetFollowPublicRewardResp* GetFollowPublicRewardResp::default_instance_ = NULL;

GetFollowPublicRewardResp* GetFollowPublicRewardResp::New() const {
  return new GetFollowPublicRewardResp;
}

void GetFollowPublicRewardResp::Clear() {
  if (has_common()) {
    if (common_ != NULL) common_->::DataCommon::CommonItemsCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFollowPublicRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoReward.GetFollowPublicRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoReward.GetFollowPublicRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoReward.GetFollowPublicRewardResp)
  return false;
#undef DO_
}

void GetFollowPublicRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoReward.GetFollowPublicRewardResp)
  // required .DataCommon.CommonItemsCPP common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoReward.GetFollowPublicRewardResp)
}

::google::protobuf::uint8* GetFollowPublicRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoReward.GetFollowPublicRewardResp)
  // required .DataCommon.CommonItemsCPP common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoReward.GetFollowPublicRewardResp)
  return target;
}

int GetFollowPublicRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFollowPublicRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFollowPublicRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFollowPublicRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFollowPublicRewardResp::MergeFrom(const GetFollowPublicRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::DataCommon::CommonItemsCPP::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFollowPublicRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFollowPublicRewardResp::CopyFrom(const GetFollowPublicRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowPublicRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void GetFollowPublicRewardResp::Swap(GetFollowPublicRewardResp* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFollowPublicRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFollowPublicRewardResp_descriptor_;
  metadata.reflection = GetFollowPublicRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardInfo::kCommonFieldNumber;
#endif  // !_MSC_VER

RewardInfo::RewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoReward.RewardInfo)
}

void RewardInfo::InitAsDefaultInstance() {
  common_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

RewardInfo::RewardInfo(const RewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoReward.RewardInfo)
}

void RewardInfo::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardInfo::~RewardInfo() {
  // @@protoc_insertion_point(destructor:ProtoReward.RewardInfo)
  SharedDtor();
}

void RewardInfo::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void RewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardInfo_descriptor_;
}

const RewardInfo& RewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoReward_2eproto();
  return *default_instance_;
}

RewardInfo* RewardInfo::default_instance_ = NULL;

RewardInfo* RewardInfo::New() const {
  return new RewardInfo;
}

void RewardInfo::Clear() {
  if (has_common()) {
    if (common_ != NULL) common_->::DataCommon::CommonItemsCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoReward.RewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoReward.RewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoReward.RewardInfo)
  return false;
#undef DO_
}

void RewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoReward.RewardInfo)
  // required .DataCommon.CommonItemsCPP common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoReward.RewardInfo)
}

::google::protobuf::uint8* RewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoReward.RewardInfo)
  // required .DataCommon.CommonItemsCPP common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoReward.RewardInfo)
  return target;
}

int RewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardInfo::MergeFrom(const RewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::DataCommon::CommonItemsCPP::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardInfo::CopyFrom(const RewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void RewardInfo::Swap(RewardInfo* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardInfo_descriptor_;
  metadata.reflection = RewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchProductWatchAdsReward::kPropsIdFieldNumber;
const int FetchProductWatchAdsReward::kCountFieldNumber;
#endif  // !_MSC_VER

FetchProductWatchAdsReward::FetchProductWatchAdsReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoReward.FetchProductWatchAdsReward)
}

void FetchProductWatchAdsReward::InitAsDefaultInstance() {
}

FetchProductWatchAdsReward::FetchProductWatchAdsReward(const FetchProductWatchAdsReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoReward.FetchProductWatchAdsReward)
}

void FetchProductWatchAdsReward::SharedCtor() {
  _cached_size_ = 0;
  propsid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchProductWatchAdsReward::~FetchProductWatchAdsReward() {
  // @@protoc_insertion_point(destructor:ProtoReward.FetchProductWatchAdsReward)
  SharedDtor();
}

void FetchProductWatchAdsReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FetchProductWatchAdsReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchProductWatchAdsReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchProductWatchAdsReward_descriptor_;
}

const FetchProductWatchAdsReward& FetchProductWatchAdsReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoReward_2eproto();
  return *default_instance_;
}

FetchProductWatchAdsReward* FetchProductWatchAdsReward::default_instance_ = NULL;

FetchProductWatchAdsReward* FetchProductWatchAdsReward::New() const {
  return new FetchProductWatchAdsReward;
}

void FetchProductWatchAdsReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FetchProductWatchAdsReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(propsid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchProductWatchAdsReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoReward.FetchProductWatchAdsReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 propsId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoReward.FetchProductWatchAdsReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoReward.FetchProductWatchAdsReward)
  return false;
#undef DO_
}

void FetchProductWatchAdsReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoReward.FetchProductWatchAdsReward)
  // required uint32 propsId = 1;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoReward.FetchProductWatchAdsReward)
}

::google::protobuf::uint8* FetchProductWatchAdsReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoReward.FetchProductWatchAdsReward)
  // required uint32 propsId = 1;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoReward.FetchProductWatchAdsReward)
  return target;
}

int FetchProductWatchAdsReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 propsId = 1;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchProductWatchAdsReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchProductWatchAdsReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchProductWatchAdsReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchProductWatchAdsReward::MergeFrom(const FetchProductWatchAdsReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchProductWatchAdsReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchProductWatchAdsReward::CopyFrom(const FetchProductWatchAdsReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchProductWatchAdsReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FetchProductWatchAdsReward::Swap(FetchProductWatchAdsReward* other) {
  if (other != this) {
    std::swap(propsid_, other->propsid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchProductWatchAdsReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchProductWatchAdsReward_descriptor_;
  metadata.reflection = FetchProductWatchAdsReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FetchProductWatchAdsRewardReq::FetchProductWatchAdsRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoReward.FetchProductWatchAdsRewardReq)
}

void FetchProductWatchAdsRewardReq::InitAsDefaultInstance() {
}

FetchProductWatchAdsRewardReq::FetchProductWatchAdsRewardReq(const FetchProductWatchAdsRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoReward.FetchProductWatchAdsRewardReq)
}

void FetchProductWatchAdsRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchProductWatchAdsRewardReq::~FetchProductWatchAdsRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoReward.FetchProductWatchAdsRewardReq)
  SharedDtor();
}

void FetchProductWatchAdsRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FetchProductWatchAdsRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchProductWatchAdsRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchProductWatchAdsRewardReq_descriptor_;
}

const FetchProductWatchAdsRewardReq& FetchProductWatchAdsRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoReward_2eproto();
  return *default_instance_;
}

FetchProductWatchAdsRewardReq* FetchProductWatchAdsRewardReq::default_instance_ = NULL;

FetchProductWatchAdsRewardReq* FetchProductWatchAdsRewardReq::New() const {
  return new FetchProductWatchAdsRewardReq;
}

void FetchProductWatchAdsRewardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchProductWatchAdsRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoReward.FetchProductWatchAdsRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoReward.FetchProductWatchAdsRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoReward.FetchProductWatchAdsRewardReq)
  return false;
#undef DO_
}

void FetchProductWatchAdsRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoReward.FetchProductWatchAdsRewardReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoReward.FetchProductWatchAdsRewardReq)
}

::google::protobuf::uint8* FetchProductWatchAdsRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoReward.FetchProductWatchAdsRewardReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoReward.FetchProductWatchAdsRewardReq)
  return target;
}

int FetchProductWatchAdsRewardReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchProductWatchAdsRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchProductWatchAdsRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchProductWatchAdsRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchProductWatchAdsRewardReq::MergeFrom(const FetchProductWatchAdsRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchProductWatchAdsRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchProductWatchAdsRewardReq::CopyFrom(const FetchProductWatchAdsRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchProductWatchAdsRewardReq::IsInitialized() const {

  return true;
}

void FetchProductWatchAdsRewardReq::Swap(FetchProductWatchAdsRewardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchProductWatchAdsRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchProductWatchAdsRewardReq_descriptor_;
  metadata.reflection = FetchProductWatchAdsRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchProductWatchAdsRewardResp::kCommonFieldNumber;
#endif  // !_MSC_VER

FetchProductWatchAdsRewardResp::FetchProductWatchAdsRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoReward.FetchProductWatchAdsRewardResp)
}

void FetchProductWatchAdsRewardResp::InitAsDefaultInstance() {
  common_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

FetchProductWatchAdsRewardResp::FetchProductWatchAdsRewardResp(const FetchProductWatchAdsRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoReward.FetchProductWatchAdsRewardResp)
}

void FetchProductWatchAdsRewardResp::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchProductWatchAdsRewardResp::~FetchProductWatchAdsRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoReward.FetchProductWatchAdsRewardResp)
  SharedDtor();
}

void FetchProductWatchAdsRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void FetchProductWatchAdsRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchProductWatchAdsRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchProductWatchAdsRewardResp_descriptor_;
}

const FetchProductWatchAdsRewardResp& FetchProductWatchAdsRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoReward_2eproto();
  return *default_instance_;
}

FetchProductWatchAdsRewardResp* FetchProductWatchAdsRewardResp::default_instance_ = NULL;

FetchProductWatchAdsRewardResp* FetchProductWatchAdsRewardResp::New() const {
  return new FetchProductWatchAdsRewardResp;
}

void FetchProductWatchAdsRewardResp::Clear() {
  if (has_common()) {
    if (common_ != NULL) common_->::DataCommon::CommonItemsCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchProductWatchAdsRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoReward.FetchProductWatchAdsRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoReward.FetchProductWatchAdsRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoReward.FetchProductWatchAdsRewardResp)
  return false;
#undef DO_
}

void FetchProductWatchAdsRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoReward.FetchProductWatchAdsRewardResp)
  // required .DataCommon.CommonItemsCPP common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoReward.FetchProductWatchAdsRewardResp)
}

::google::protobuf::uint8* FetchProductWatchAdsRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoReward.FetchProductWatchAdsRewardResp)
  // required .DataCommon.CommonItemsCPP common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoReward.FetchProductWatchAdsRewardResp)
  return target;
}

int FetchProductWatchAdsRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchProductWatchAdsRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchProductWatchAdsRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchProductWatchAdsRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchProductWatchAdsRewardResp::MergeFrom(const FetchProductWatchAdsRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::DataCommon::CommonItemsCPP::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchProductWatchAdsRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchProductWatchAdsRewardResp::CopyFrom(const FetchProductWatchAdsRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchProductWatchAdsRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_common()) {
    if (!this->common().IsInitialized()) return false;
  }
  return true;
}

void FetchProductWatchAdsRewardResp::Swap(FetchProductWatchAdsRewardResp* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchProductWatchAdsRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchProductWatchAdsRewardResp_descriptor_;
  metadata.reflection = FetchProductWatchAdsRewardResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoReward

// @@protoc_insertion_point(global_scope)
