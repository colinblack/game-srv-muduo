// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoNPCUser.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoNPCUser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoNPCUser {

namespace {

const ::google::protobuf::Descriptor* Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Base_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CropLandCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CropLandCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OthProduceCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OthProduceCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnimalCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnimalCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentStarCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentStarCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FruitCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FruitCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShippingCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShippingCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShippingBoxCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShippingBoxCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCShopCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCShopCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendlyTreeBasicCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendlyTreeBasicCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendlyTreeStatusCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendlyTreeStatusCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendlyTreeCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendlyTreeCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestNPCUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestNPCUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNPCShopReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNPCShopReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNPCShopResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNPCShopResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PurchaseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PurchaseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PurchaseResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PurchaseResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoNPCUser_2eproto() {
  protobuf_AddDesc_ProtoNPCUser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoNPCUser.proto");
  GOOGLE_CHECK(file != NULL);
  Base_descriptor_ = file->message_type(0);
  static const int Base_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, registerplatform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, registertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, lastloginplatform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, logintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, logindays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, lastactivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, lastofftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, forbidts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, forbidreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, tutorialstage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, acccharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, firstrecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, barrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, lastcreateadts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, allianallowts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, nextdonationts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, helptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, viprewarddailygiftts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, vipdailyspeedproductcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, vipdailyremoveordercdcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, switchstatus_),
  };
  Base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Base_descriptor_,
      Base::default_instance_,
      Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Base));
  BuildingCPP_descriptor_ = file->message_type(1);
  static const int BuildingCPP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, buildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, donetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, level_),
  };
  BuildingCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingCPP_descriptor_,
      BuildingCPP::default_instance_,
      BuildingCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingCPP));
  CropLandCPP_descriptor_ = file->message_type(2);
  static const int CropLandCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, plant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, harvesttime_),
  };
  CropLandCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CropLandCPP_descriptor_,
      CropLandCPP::default_instance_,
      CropLandCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CropLandCPP));
  OthProduceCPP_descriptor_ = file->message_type(3);
  static const int OthProduceCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OthProduceCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OthProduceCPP, status_),
  };
  OthProduceCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OthProduceCPP_descriptor_,
      OthProduceCPP::default_instance_,
      OthProduceCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OthProduceCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OthProduceCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OthProduceCPP));
  AnimalCPP_descriptor_ = file->message_type(4);
  static const int AnimalCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, residenceud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, animalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, fulltime_),
  };
  AnimalCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnimalCPP_descriptor_,
      AnimalCPP::default_instance_,
      AnimalCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnimalCPP));
  EquipmentStarCPP_descriptor_ = file->message_type(5);
  static const int EquipmentStarCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, usedtime_),
  };
  EquipmentStarCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentStarCPP_descriptor_,
      EquipmentStarCPP::default_instance_,
      EquipmentStarCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentStarCPP));
  FruitCPP_descriptor_ = file->message_type(6);
  static const int FruitCPP_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, treeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, fruitleftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, harvesttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, fig_),
  };
  FruitCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FruitCPP_descriptor_,
      FruitCPP::default_instance_,
      FruitCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FruitCPP));
  ShippingCPP_descriptor_ = file->message_type(7);
  static const int ShippingCPP_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, badge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, unlockendts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, arrivets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, publicaidtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, commercialaidtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, playstatus_),
  };
  ShippingCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShippingCPP_descriptor_,
      ShippingCPP::default_instance_,
      ShippingCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShippingCPP));
  ShippingBoxCPP_descriptor_ = file->message_type(8);
  static const int ShippingBoxCPP_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, aidstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, name_),
  };
  ShippingBoxCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShippingBoxCPP_descriptor_,
      ShippingBoxCPP::default_instance_,
      ShippingBoxCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShippingBoxCPP));
  NPCShopCPP_descriptor_ = file->message_type(9);
  static const int NPCShopCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCShopCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCShopCPP, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCShopCPP, propscnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCShopCPP, sellflag_),
  };
  NPCShopCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCShopCPP_descriptor_,
      NPCShopCPP::default_instance_,
      NPCShopCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCShopCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCShopCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCShopCPP));
  FriendlyTreeBasicCPP_descriptor_ = file->message_type(10);
  static const int FriendlyTreeBasicCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, ts_),
  };
  FriendlyTreeBasicCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendlyTreeBasicCPP_descriptor_,
      FriendlyTreeBasicCPP::default_instance_,
      FriendlyTreeBasicCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendlyTreeBasicCPP));
  FriendlyTreeStatusCPP_descriptor_ = file->message_type(11);
  static const int FriendlyTreeStatusCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeStatusCPP, treestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeStatusCPP, nextwaterts_),
  };
  FriendlyTreeStatusCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendlyTreeStatusCPP_descriptor_,
      FriendlyTreeStatusCPP::default_instance_,
      FriendlyTreeStatusCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeStatusCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeStatusCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendlyTreeStatusCPP));
  FriendlyTreeCPP_descriptor_ = file->message_type(12);
  static const int FriendlyTreeCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeCPP, basictreeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeCPP, statustreeinfo_),
  };
  FriendlyTreeCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendlyTreeCPP_descriptor_,
      FriendlyTreeCPP::default_instance_,
      FriendlyTreeCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendlyTreeCPP));
  RequestNPCUser_descriptor_ = file->message_type(13);
  static const int RequestNPCUser_offsets_[1] = {
  };
  RequestNPCUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestNPCUser_descriptor_,
      RequestNPCUser::default_instance_,
      RequestNPCUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNPCUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNPCUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestNPCUser));
  NPCUser_descriptor_ = file->message_type(14);
  static const int NPCUser_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCUser, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCUser, builds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCUser, cropland_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCUser, equipments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCUser, animals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCUser, equipmentstars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCUser, fruits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCUser, shopstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCUser, shipping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCUser, shipboxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCUser, friendlytree_),
  };
  NPCUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCUser_descriptor_,
      NPCUser::default_instance_,
      NPCUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCUser));
  GetNPCShopReq_descriptor_ = file->message_type(15);
  static const int GetNPCShopReq_offsets_[1] = {
  };
  GetNPCShopReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNPCShopReq_descriptor_,
      GetNPCShopReq::default_instance_,
      GetNPCShopReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNPCShopReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNPCShopReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNPCShopReq));
  GetNPCShopResp_descriptor_ = file->message_type(16);
  static const int GetNPCShopResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNPCShopResp, shop_),
  };
  GetNPCShopResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNPCShopResp_descriptor_,
      GetNPCShopResp::default_instance_,
      GetNPCShopResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNPCShopResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNPCShopResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNPCShopResp));
  PurchaseReq_descriptor_ = file->message_type(17);
  static const int PurchaseReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseReq, ud_),
  };
  PurchaseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PurchaseReq_descriptor_,
      PurchaseReq::default_instance_,
      PurchaseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PurchaseReq));
  PurchaseResp_descriptor_ = file->message_type(18);
  static const int PurchaseResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseResp, npcshop_),
  };
  PurchaseResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PurchaseResp_descriptor_,
      PurchaseResp::default_instance_,
      PurchaseResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PurchaseResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoNPCUser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Base_descriptor_, &Base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingCPP_descriptor_, &BuildingCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CropLandCPP_descriptor_, &CropLandCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OthProduceCPP_descriptor_, &OthProduceCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnimalCPP_descriptor_, &AnimalCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentStarCPP_descriptor_, &EquipmentStarCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FruitCPP_descriptor_, &FruitCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShippingCPP_descriptor_, &ShippingCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShippingBoxCPP_descriptor_, &ShippingBoxCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCShopCPP_descriptor_, &NPCShopCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendlyTreeBasicCPP_descriptor_, &FriendlyTreeBasicCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendlyTreeStatusCPP_descriptor_, &FriendlyTreeStatusCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendlyTreeCPP_descriptor_, &FriendlyTreeCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestNPCUser_descriptor_, &RequestNPCUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCUser_descriptor_, &NPCUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNPCShopReq_descriptor_, &GetNPCShopReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNPCShopResp_descriptor_, &GetNPCShopResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PurchaseReq_descriptor_, &PurchaseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PurchaseResp_descriptor_, &PurchaseResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoNPCUser_2eproto() {
  delete Base::default_instance_;
  delete Base_reflection_;
  delete BuildingCPP::default_instance_;
  delete BuildingCPP_reflection_;
  delete CropLandCPP::default_instance_;
  delete CropLandCPP_reflection_;
  delete OthProduceCPP::default_instance_;
  delete OthProduceCPP_reflection_;
  delete AnimalCPP::default_instance_;
  delete AnimalCPP_reflection_;
  delete EquipmentStarCPP::default_instance_;
  delete EquipmentStarCPP_reflection_;
  delete FruitCPP::default_instance_;
  delete FruitCPP_reflection_;
  delete ShippingCPP::default_instance_;
  delete ShippingCPP_reflection_;
  delete ShippingBoxCPP::default_instance_;
  delete ShippingBoxCPP_reflection_;
  delete NPCShopCPP::default_instance_;
  delete NPCShopCPP_reflection_;
  delete FriendlyTreeBasicCPP::default_instance_;
  delete FriendlyTreeBasicCPP_reflection_;
  delete FriendlyTreeStatusCPP::default_instance_;
  delete FriendlyTreeStatusCPP_reflection_;
  delete FriendlyTreeCPP::default_instance_;
  delete FriendlyTreeCPP_reflection_;
  delete RequestNPCUser::default_instance_;
  delete RequestNPCUser_reflection_;
  delete NPCUser::default_instance_;
  delete NPCUser_reflection_;
  delete GetNPCShopReq::default_instance_;
  delete GetNPCShopReq_reflection_;
  delete GetNPCShopResp::default_instance_;
  delete GetNPCShopResp_reflection_;
  delete PurchaseReq::default_instance_;
  delete PurchaseReq_reflection_;
  delete PurchaseResp::default_instance_;
  delete PurchaseResp_reflection_;
}

void protobuf_AddDesc_ProtoNPCUser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ProtoNPCUser.proto\022\014ProtoNPCUser\032\020Data"
    "Common.proto\"\215\005\n\004Base\022\013\n\003uid\030\001 \002(\r\022\030\n\020re"
    "gisterPlatform\030\002 \002(\r\022\024\n\014registerTime\030\003 \002"
    "(\r\022\031\n\021lastLoginPlatform\030\004 \002(\r\022\025\n\rlastLog"
    "inTime\030\005 \002(\r\022\022\n\nloginTimes\030\006 \002(\r\022\021\n\tlogi"
    "nDays\030\007 \002(\r\022\026\n\016lastActiveTime\030\010 \002(\r\022\023\n\013l"
    "astOffTime\030\t \002(\r\022\020\n\010forbidTs\030\n \002(\r\022\024\n\014fo"
    "rbidReason\030\013 \002(\014\022\025\n\rtutorialStage\030\014 \002(\r\022"
    "\014\n\004name\030\r \002(\014\022\013\n\003fig\030\016 \002(\014\022\013\n\003exp\030\017 \002(\004\022"
    "\r\n\005level\030\020 \002(\r\022\021\n\tacccharge\030\021 \002(\r\022\020\n\010vip"
    "level\030\022 \002(\r\022\014\n\004cash\030\023 \002(\r\022\014\n\004coin\030\024 \002(\r\022"
    "\025\n\rfirstRecharge\030\025 \002(\r\022\022\n\nallianceId\030\026 \002"
    "(\r\022\017\n\007barrier\030\027 \002(\014\022\026\n\016lastcreateadts\030\030 "
    "\002(\r\022\025\n\rallianAllowTs\030\031 \002(\r\022\026\n\016nextDonati"
    "onTs\030\032 \002(\r\022\021\n\thelptimes\030\033 \002(\r\022\034\n\024viprewa"
    "rddailygiftts\030\034 \002(\r\022\037\n\027vipdailyspeedprod"
    "uctcnt\030\035 \002(\r\022 \n\030vipdailyremoveordercdcnt"
    "\030\036 \002(\r\022\024\n\014switchStatus\030\037 \002(\r\"m\n\013Building"
    "CPP\022\n\n\002ud\030\001 \002(\r\022\017\n\007buildId\030\002 \002(\r\022\020\n\010posi"
    "tion\030\003 \003(\r\022\016\n\006direct\030\004 \002(\r\022\020\n\010doneTime\030\005"
    " \002(\r\022\r\n\005level\030\006 \002(\r\"M\n\013CropLandCPP\022\n\n\002ud"
    "\030\001 \002(\r\022\r\n\005plant\030\002 \002(\r\022\016\n\006status\030\003 \002(\r\022\023\n"
    "\013harvestTime\030\004 \002(\r\"+\n\rOthProduceCPP\022\n\n\002u"
    "d\030\001 \002(\r\022\016\n\006status\030\002 \002(\r\"`\n\tAnimalCPP\022\n\n\002"
    "ud\030\001 \002(\r\022\023\n\013residenceUd\030\002 \002(\r\022\020\n\010animalI"
    "d\030\003 \002(\r\022\016\n\006status\030\004 \002(\r\022\020\n\010fullTime\030\005 \002("
    "\r\">\n\020EquipmentStarCPP\022\n\n\002id\030\001 \002(\r\022\014\n\004sta"
    "r\030\002 \002(\r\022\020\n\010usedtime\030\003 \002(\r\"\213\001\n\010FruitCPP\022\n"
    "\n\002ud\030\001 \002(\r\022\016\n\006treeid\030\002 \002(\r\022\016\n\006status\030\003 \002"
    "(\r\022\r\n\005stage\030\004 \002(\r\022\024\n\014fruitLeftNum\030\005 \002(\r\022"
    "\023\n\013harvestTime\030\006 \002(\r\022\014\n\004name\030\007 \001(\014\022\013\n\003fi"
    "g\030\010 \001(\014\"\233\001\n\013ShippingCPP\022\r\n\005badge\030\001 \002(\r\022\023"
    "\n\013unlockEndts\030\002 \002(\r\022\020\n\010arriveTs\030\003 \002(\r\022\026\n"
    "\016publicAidTimes\030\004 \002(\r\022\032\n\022commercialAidTi"
    "mes\030\005 \002(\r\022\016\n\006status\030\006 \002(\r\022\022\n\nplayStatus\030"
    "\007 \002(\r\"\230\001\n\016ShippingBoxCPP\022\r\n\005boxid\030\001 \002(\r\022"
    "\017\n\007propsid\030\002 \002(\r\022\r\n\005count\030\003 \002(\r\022\021\n\taidSt"
    "atus\030\004 \002(\r\022\016\n\006status\030\005 \002(\r\022\014\n\004coin\030\006 \002(\r"
    "\022\013\n\003exp\030\007 \002(\r\022\013\n\003fig\030\010 \001(\014\022\014\n\004name\030\t \001(\014"
    "\"M\n\nNPCShopCPP\022\n\n\002ud\030\001 \002(\r\022\017\n\007propsid\030\002 "
    "\002(\r\022\020\n\010propscnt\030\003 \002(\r\022\020\n\010sellflag\030\004 \002(\r\""
    "Z\n\024FriendlyTreeBasicCPP\022\n\n\002id\030\001 \002(\r\022\016\n\006o"
    "thuid\030\002 \002(\r\022\014\n\004name\030\003 \002(\014\022\014\n\004head\030\004 \002(\014\022"
    "\n\n\002ts\030\005 \002(\r\"@\n\025FriendlyTreeStatusCPP\022\022\n\n"
    "treestatus\030\001 \002(\r\022\023\n\013nextwaterts\030\002 \001(\r\"\211\001"
    "\n\017FriendlyTreeCPP\0229\n\rbasictreeinfo\030\001 \003(\013"
    "2\".ProtoNPCUser.FriendlyTreeBasicCPP\022;\n\016"
    "statustreeinfo\030\002 \002(\0132#.ProtoNPCUser.Frie"
    "ndlyTreeStatusCPP\"\020\n\016RequestNPCUser\"\345\003\n\007"
    "NPCUser\022 \n\004base\030\001 \002(\0132\022.ProtoNPCUser.Bas"
    "e\022)\n\006builds\030\002 \003(\0132\031.ProtoNPCUser.Buildin"
    "gCPP\022+\n\010cropland\030\003 \003(\0132\031.ProtoNPCUser.Cr"
    "opLandCPP\022/\n\nequipments\030\004 \003(\0132\033.ProtoNPC"
    "User.OthProduceCPP\022(\n\007animals\030\005 \003(\0132\027.Pr"
    "otoNPCUser.AnimalCPP\0226\n\016equipmentstars\030\006"
    " \003(\0132\036.ProtoNPCUser.EquipmentStarCPP\022&\n\006"
    "fruits\030\007 \003(\0132\026.ProtoNPCUser.FruitCPP\022\022\n\n"
    "shopStatus\030\010 \002(\r\022+\n\010shipping\030\t \001(\0132\031.Pro"
    "toNPCUser.ShippingCPP\022/\n\tshipboxes\030\n \003(\013"
    "2\034.ProtoNPCUser.ShippingBoxCPP\0223\n\014friend"
    "lytree\030\013 \002(\0132\035.ProtoNPCUser.FriendlyTree"
    "CPP\"\017\n\rGetNPCShopReq\"8\n\016GetNPCShopResp\022&"
    "\n\004shop\030\001 \003(\0132\030.ProtoNPCUser.NPCShopCPP\"\031"
    "\n\013PurchaseReq\022\n\n\002ud\030\001 \002(\r\"f\n\014PurchaseRes"
    "p\022+\n\007commons\030\001 \002(\0132\032.DataCommon.CommonIt"
    "emsCPP\022)\n\007npcshop\030\002 \002(\0132\030.ProtoNPCUser.N"
    "PCShopCPP", 2649);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoNPCUser.proto", &protobuf_RegisterTypes);
  Base::default_instance_ = new Base();
  BuildingCPP::default_instance_ = new BuildingCPP();
  CropLandCPP::default_instance_ = new CropLandCPP();
  OthProduceCPP::default_instance_ = new OthProduceCPP();
  AnimalCPP::default_instance_ = new AnimalCPP();
  EquipmentStarCPP::default_instance_ = new EquipmentStarCPP();
  FruitCPP::default_instance_ = new FruitCPP();
  ShippingCPP::default_instance_ = new ShippingCPP();
  ShippingBoxCPP::default_instance_ = new ShippingBoxCPP();
  NPCShopCPP::default_instance_ = new NPCShopCPP();
  FriendlyTreeBasicCPP::default_instance_ = new FriendlyTreeBasicCPP();
  FriendlyTreeStatusCPP::default_instance_ = new FriendlyTreeStatusCPP();
  FriendlyTreeCPP::default_instance_ = new FriendlyTreeCPP();
  RequestNPCUser::default_instance_ = new RequestNPCUser();
  NPCUser::default_instance_ = new NPCUser();
  GetNPCShopReq::default_instance_ = new GetNPCShopReq();
  GetNPCShopResp::default_instance_ = new GetNPCShopResp();
  PurchaseReq::default_instance_ = new PurchaseReq();
  PurchaseResp::default_instance_ = new PurchaseResp();
  Base::default_instance_->InitAsDefaultInstance();
  BuildingCPP::default_instance_->InitAsDefaultInstance();
  CropLandCPP::default_instance_->InitAsDefaultInstance();
  OthProduceCPP::default_instance_->InitAsDefaultInstance();
  AnimalCPP::default_instance_->InitAsDefaultInstance();
  EquipmentStarCPP::default_instance_->InitAsDefaultInstance();
  FruitCPP::default_instance_->InitAsDefaultInstance();
  ShippingCPP::default_instance_->InitAsDefaultInstance();
  ShippingBoxCPP::default_instance_->InitAsDefaultInstance();
  NPCShopCPP::default_instance_->InitAsDefaultInstance();
  FriendlyTreeBasicCPP::default_instance_->InitAsDefaultInstance();
  FriendlyTreeStatusCPP::default_instance_->InitAsDefaultInstance();
  FriendlyTreeCPP::default_instance_->InitAsDefaultInstance();
  RequestNPCUser::default_instance_->InitAsDefaultInstance();
  NPCUser::default_instance_->InitAsDefaultInstance();
  GetNPCShopReq::default_instance_->InitAsDefaultInstance();
  GetNPCShopResp::default_instance_->InitAsDefaultInstance();
  PurchaseReq::default_instance_->InitAsDefaultInstance();
  PurchaseResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoNPCUser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoNPCUser_2eproto {
  StaticDescriptorInitializer_ProtoNPCUser_2eproto() {
    protobuf_AddDesc_ProtoNPCUser_2eproto();
  }
} static_descriptor_initializer_ProtoNPCUser_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Base::kUidFieldNumber;
const int Base::kRegisterPlatformFieldNumber;
const int Base::kRegisterTimeFieldNumber;
const int Base::kLastLoginPlatformFieldNumber;
const int Base::kLastLoginTimeFieldNumber;
const int Base::kLoginTimesFieldNumber;
const int Base::kLoginDaysFieldNumber;
const int Base::kLastActiveTimeFieldNumber;
const int Base::kLastOffTimeFieldNumber;
const int Base::kForbidTsFieldNumber;
const int Base::kForbidReasonFieldNumber;
const int Base::kTutorialStageFieldNumber;
const int Base::kNameFieldNumber;
const int Base::kFigFieldNumber;
const int Base::kExpFieldNumber;
const int Base::kLevelFieldNumber;
const int Base::kAccchargeFieldNumber;
const int Base::kViplevelFieldNumber;
const int Base::kCashFieldNumber;
const int Base::kCoinFieldNumber;
const int Base::kFirstRechargeFieldNumber;
const int Base::kAllianceIdFieldNumber;
const int Base::kBarrierFieldNumber;
const int Base::kLastcreateadtsFieldNumber;
const int Base::kAllianAllowTsFieldNumber;
const int Base::kNextDonationTsFieldNumber;
const int Base::kHelptimesFieldNumber;
const int Base::kViprewarddailygifttsFieldNumber;
const int Base::kVipdailyspeedproductcntFieldNumber;
const int Base::kVipdailyremoveordercdcntFieldNumber;
const int Base::kSwitchStatusFieldNumber;
#endif  // !_MSC_VER

Base::Base()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.Base)
}

void Base::InitAsDefaultInstance() {
}

Base::Base(const Base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.Base)
}

void Base::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  registerplatform_ = 0u;
  registertime_ = 0u;
  lastloginplatform_ = 0u;
  lastlogintime_ = 0u;
  logintimes_ = 0u;
  logindays_ = 0u;
  lastactivetime_ = 0u;
  lastofftime_ = 0u;
  forbidts_ = 0u;
  forbidreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tutorialstage_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  acccharge_ = 0u;
  viplevel_ = 0u;
  cash_ = 0u;
  coin_ = 0u;
  firstrecharge_ = 0u;
  allianceid_ = 0u;
  barrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastcreateadts_ = 0u;
  allianallowts_ = 0u;
  nextdonationts_ = 0u;
  helptimes_ = 0u;
  viprewarddailygiftts_ = 0u;
  vipdailyspeedproductcnt_ = 0u;
  vipdailyremoveordercdcnt_ = 0u;
  switchstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Base::~Base() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.Base)
  SharedDtor();
}

void Base::SharedDtor() {
  if (forbidreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete forbidreason_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (barrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete barrier_;
  }
  if (this != default_instance_) {
  }
}

void Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Base_descriptor_;
}

const Base& Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

Base* Base::default_instance_ = NULL;

Base* Base::New() const {
  return new Base;
}

void Base::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Base*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, lastactivetime_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(lastofftime_, forbidts_);
    ZR_(tutorialstage_, exp_);
    if (has_forbidreason()) {
      if (forbidreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        forbidreason_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(acccharge_, allianceid_);
    if (has_barrier()) {
      if (barrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        barrier_->clear();
      }
    }
    lastcreateadts_ = 0u;
  }
  if (_has_bits_[24 / 32] & 2130706432) {
    ZR_(allianallowts_, switchstatus_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.Base)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_registerPlatform;
        break;
      }

      // required uint32 registerPlatform = 2;
      case 2: {
        if (tag == 16) {
         parse_registerPlatform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &registerplatform_)));
          set_has_registerplatform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_registerTime;
        break;
      }

      // required uint32 registerTime = 3;
      case 3: {
        if (tag == 24) {
         parse_registerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &registertime_)));
          set_has_registertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lastLoginPlatform;
        break;
      }

      // required uint32 lastLoginPlatform = 4;
      case 4: {
        if (tag == 32) {
         parse_lastLoginPlatform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastloginplatform_)));
          set_has_lastloginplatform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lastLoginTime;
        break;
      }

      // required uint32 lastLoginTime = 5;
      case 5: {
        if (tag == 40) {
         parse_lastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_loginTimes;
        break;
      }

      // required uint32 loginTimes = 6;
      case 6: {
        if (tag == 48) {
         parse_loginTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintimes_)));
          set_has_logintimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_loginDays;
        break;
      }

      // required uint32 loginDays = 7;
      case 7: {
        if (tag == 56) {
         parse_loginDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logindays_)));
          set_has_logindays();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lastActiveTime;
        break;
      }

      // required uint32 lastActiveTime = 8;
      case 8: {
        if (tag == 64) {
         parse_lastActiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastactivetime_)));
          set_has_lastactivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_lastOffTime;
        break;
      }

      // required uint32 lastOffTime = 9;
      case 9: {
        if (tag == 72) {
         parse_lastOffTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastofftime_)));
          set_has_lastofftime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_forbidTs;
        break;
      }

      // required uint32 forbidTs = 10;
      case 10: {
        if (tag == 80) {
         parse_forbidTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forbidts_)));
          set_has_forbidts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_forbidReason;
        break;
      }

      // required bytes forbidReason = 11;
      case 11: {
        if (tag == 90) {
         parse_forbidReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_forbidreason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_tutorialStage;
        break;
      }

      // required uint32 tutorialStage = 12;
      case 12: {
        if (tag == 96) {
         parse_tutorialStage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tutorialstage_)));
          set_has_tutorialstage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_name;
        break;
      }

      // required bytes name = 13;
      case 13: {
        if (tag == 106) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_fig;
        break;
      }

      // required bytes fig = 14;
      case 14: {
        if (tag == 114) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_exp;
        break;
      }

      // required uint64 exp = 15;
      case 15: {
        if (tag == 120) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_level;
        break;
      }

      // required uint32 level = 16;
      case 16: {
        if (tag == 128) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_acccharge;
        break;
      }

      // required uint32 acccharge = 17;
      case 17: {
        if (tag == 136) {
         parse_acccharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acccharge_)));
          set_has_acccharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_viplevel;
        break;
      }

      // required uint32 viplevel = 18;
      case 18: {
        if (tag == 144) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_cash;
        break;
      }

      // required uint32 cash = 19;
      case 19: {
        if (tag == 152) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_coin;
        break;
      }

      // required uint32 coin = 20;
      case 20: {
        if (tag == 160) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_firstRecharge;
        break;
      }

      // required uint32 firstRecharge = 21;
      case 21: {
        if (tag == 168) {
         parse_firstRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstrecharge_)));
          set_has_firstrecharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_allianceId;
        break;
      }

      // required uint32 allianceId = 22;
      case 22: {
        if (tag == 176) {
         parse_allianceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_barrier;
        break;
      }

      // required bytes barrier = 23;
      case 23: {
        if (tag == 186) {
         parse_barrier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_barrier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_lastcreateadts;
        break;
      }

      // required uint32 lastcreateadts = 24;
      case 24: {
        if (tag == 192) {
         parse_lastcreateadts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastcreateadts_)));
          set_has_lastcreateadts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_allianAllowTs;
        break;
      }

      // required uint32 allianAllowTs = 25;
      case 25: {
        if (tag == 200) {
         parse_allianAllowTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianallowts_)));
          set_has_allianallowts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_nextDonationTs;
        break;
      }

      // required uint32 nextDonationTs = 26;
      case 26: {
        if (tag == 208) {
         parse_nextDonationTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextdonationts_)));
          set_has_nextdonationts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_helptimes;
        break;
      }

      // required uint32 helptimes = 27;
      case 27: {
        if (tag == 216) {
         parse_helptimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &helptimes_)));
          set_has_helptimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_viprewarddailygiftts;
        break;
      }

      // required uint32 viprewarddailygiftts = 28;
      case 28: {
        if (tag == 224) {
         parse_viprewarddailygiftts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viprewarddailygiftts_)));
          set_has_viprewarddailygiftts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_vipdailyspeedproductcnt;
        break;
      }

      // required uint32 vipdailyspeedproductcnt = 29;
      case 29: {
        if (tag == 232) {
         parse_vipdailyspeedproductcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipdailyspeedproductcnt_)));
          set_has_vipdailyspeedproductcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_vipdailyremoveordercdcnt;
        break;
      }

      // required uint32 vipdailyremoveordercdcnt = 30;
      case 30: {
        if (tag == 240) {
         parse_vipdailyremoveordercdcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipdailyremoveordercdcnt_)));
          set_has_vipdailyremoveordercdcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_switchStatus;
        break;
      }

      // required uint32 switchStatus = 31;
      case 31: {
        if (tag == 248) {
         parse_switchStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &switchstatus_)));
          set_has_switchstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.Base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.Base)
  return false;
#undef DO_
}

void Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.Base)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 registerPlatform = 2;
  if (has_registerplatform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->registerplatform(), output);
  }

  // required uint32 registerTime = 3;
  if (has_registertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->registertime(), output);
  }

  // required uint32 lastLoginPlatform = 4;
  if (has_lastloginplatform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lastloginplatform(), output);
  }

  // required uint32 lastLoginTime = 5;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lastlogintime(), output);
  }

  // required uint32 loginTimes = 6;
  if (has_logintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->logintimes(), output);
  }

  // required uint32 loginDays = 7;
  if (has_logindays()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->logindays(), output);
  }

  // required uint32 lastActiveTime = 8;
  if (has_lastactivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lastactivetime(), output);
  }

  // required uint32 lastOffTime = 9;
  if (has_lastofftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->lastofftime(), output);
  }

  // required uint32 forbidTs = 10;
  if (has_forbidts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->forbidts(), output);
  }

  // required bytes forbidReason = 11;
  if (has_forbidreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->forbidreason(), output);
  }

  // required uint32 tutorialStage = 12;
  if (has_tutorialstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tutorialstage(), output);
  }

  // required bytes name = 13;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->name(), output);
  }

  // required bytes fig = 14;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->fig(), output);
  }

  // required uint64 exp = 15;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->exp(), output);
  }

  // required uint32 level = 16;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->level(), output);
  }

  // required uint32 acccharge = 17;
  if (has_acccharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->acccharge(), output);
  }

  // required uint32 viplevel = 18;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->viplevel(), output);
  }

  // required uint32 cash = 19;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->cash(), output);
  }

  // required uint32 coin = 20;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->coin(), output);
  }

  // required uint32 firstRecharge = 21;
  if (has_firstrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->firstrecharge(), output);
  }

  // required uint32 allianceId = 22;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->allianceid(), output);
  }

  // required bytes barrier = 23;
  if (has_barrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->barrier(), output);
  }

  // required uint32 lastcreateadts = 24;
  if (has_lastcreateadts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->lastcreateadts(), output);
  }

  // required uint32 allianAllowTs = 25;
  if (has_allianallowts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->allianallowts(), output);
  }

  // required uint32 nextDonationTs = 26;
  if (has_nextdonationts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->nextdonationts(), output);
  }

  // required uint32 helptimes = 27;
  if (has_helptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->helptimes(), output);
  }

  // required uint32 viprewarddailygiftts = 28;
  if (has_viprewarddailygiftts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->viprewarddailygiftts(), output);
  }

  // required uint32 vipdailyspeedproductcnt = 29;
  if (has_vipdailyspeedproductcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->vipdailyspeedproductcnt(), output);
  }

  // required uint32 vipdailyremoveordercdcnt = 30;
  if (has_vipdailyremoveordercdcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->vipdailyremoveordercdcnt(), output);
  }

  // required uint32 switchStatus = 31;
  if (has_switchstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->switchstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.Base)
}

::google::protobuf::uint8* Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.Base)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 registerPlatform = 2;
  if (has_registerplatform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->registerplatform(), target);
  }

  // required uint32 registerTime = 3;
  if (has_registertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->registertime(), target);
  }

  // required uint32 lastLoginPlatform = 4;
  if (has_lastloginplatform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lastloginplatform(), target);
  }

  // required uint32 lastLoginTime = 5;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lastlogintime(), target);
  }

  // required uint32 loginTimes = 6;
  if (has_logintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->logintimes(), target);
  }

  // required uint32 loginDays = 7;
  if (has_logindays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->logindays(), target);
  }

  // required uint32 lastActiveTime = 8;
  if (has_lastactivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->lastactivetime(), target);
  }

  // required uint32 lastOffTime = 9;
  if (has_lastofftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->lastofftime(), target);
  }

  // required uint32 forbidTs = 10;
  if (has_forbidts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->forbidts(), target);
  }

  // required bytes forbidReason = 11;
  if (has_forbidreason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->forbidreason(), target);
  }

  // required uint32 tutorialStage = 12;
  if (has_tutorialstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tutorialstage(), target);
  }

  // required bytes name = 13;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->name(), target);
  }

  // required bytes fig = 14;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->fig(), target);
  }

  // required uint64 exp = 15;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->exp(), target);
  }

  // required uint32 level = 16;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->level(), target);
  }

  // required uint32 acccharge = 17;
  if (has_acccharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->acccharge(), target);
  }

  // required uint32 viplevel = 18;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->viplevel(), target);
  }

  // required uint32 cash = 19;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->cash(), target);
  }

  // required uint32 coin = 20;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->coin(), target);
  }

  // required uint32 firstRecharge = 21;
  if (has_firstrecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->firstrecharge(), target);
  }

  // required uint32 allianceId = 22;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->allianceid(), target);
  }

  // required bytes barrier = 23;
  if (has_barrier()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->barrier(), target);
  }

  // required uint32 lastcreateadts = 24;
  if (has_lastcreateadts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->lastcreateadts(), target);
  }

  // required uint32 allianAllowTs = 25;
  if (has_allianallowts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->allianallowts(), target);
  }

  // required uint32 nextDonationTs = 26;
  if (has_nextdonationts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->nextdonationts(), target);
  }

  // required uint32 helptimes = 27;
  if (has_helptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->helptimes(), target);
  }

  // required uint32 viprewarddailygiftts = 28;
  if (has_viprewarddailygiftts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->viprewarddailygiftts(), target);
  }

  // required uint32 vipdailyspeedproductcnt = 29;
  if (has_vipdailyspeedproductcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->vipdailyspeedproductcnt(), target);
  }

  // required uint32 vipdailyremoveordercdcnt = 30;
  if (has_vipdailyremoveordercdcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->vipdailyremoveordercdcnt(), target);
  }

  // required uint32 switchStatus = 31;
  if (has_switchstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->switchstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.Base)
  return target;
}

int Base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 registerPlatform = 2;
    if (has_registerplatform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->registerplatform());
    }

    // required uint32 registerTime = 3;
    if (has_registertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->registertime());
    }

    // required uint32 lastLoginPlatform = 4;
    if (has_lastloginplatform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastloginplatform());
    }

    // required uint32 lastLoginTime = 5;
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastlogintime());
    }

    // required uint32 loginTimes = 6;
    if (has_logintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logintimes());
    }

    // required uint32 loginDays = 7;
    if (has_logindays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logindays());
    }

    // required uint32 lastActiveTime = 8;
    if (has_lastactivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastactivetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 lastOffTime = 9;
    if (has_lastofftime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastofftime());
    }

    // required uint32 forbidTs = 10;
    if (has_forbidts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forbidts());
    }

    // required bytes forbidReason = 11;
    if (has_forbidreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->forbidreason());
    }

    // required uint32 tutorialStage = 12;
    if (has_tutorialstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tutorialstage());
    }

    // required bytes name = 13;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes fig = 14;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }

    // required uint64 exp = 15;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // required uint32 level = 16;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 acccharge = 17;
    if (has_acccharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acccharge());
    }

    // required uint32 viplevel = 18;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // required uint32 cash = 19;
    if (has_cash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required uint32 coin = 20;
    if (has_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 firstRecharge = 21;
    if (has_firstrecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstrecharge());
    }

    // required uint32 allianceId = 22;
    if (has_allianceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

    // required bytes barrier = 23;
    if (has_barrier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->barrier());
    }

    // required uint32 lastcreateadts = 24;
    if (has_lastcreateadts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastcreateadts());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint32 allianAllowTs = 25;
    if (has_allianallowts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianallowts());
    }

    // required uint32 nextDonationTs = 26;
    if (has_nextdonationts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextdonationts());
    }

    // required uint32 helptimes = 27;
    if (has_helptimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->helptimes());
    }

    // required uint32 viprewarddailygiftts = 28;
    if (has_viprewarddailygiftts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viprewarddailygiftts());
    }

    // required uint32 vipdailyspeedproductcnt = 29;
    if (has_vipdailyspeedproductcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipdailyspeedproductcnt());
    }

    // required uint32 vipdailyremoveordercdcnt = 30;
    if (has_vipdailyremoveordercdcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipdailyremoveordercdcnt());
    }

    // required uint32 switchStatus = 31;
    if (has_switchstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->switchstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Base::MergeFrom(const Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_registerplatform()) {
      set_registerplatform(from.registerplatform());
    }
    if (from.has_registertime()) {
      set_registertime(from.registertime());
    }
    if (from.has_lastloginplatform()) {
      set_lastloginplatform(from.lastloginplatform());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_logintimes()) {
      set_logintimes(from.logintimes());
    }
    if (from.has_logindays()) {
      set_logindays(from.logindays());
    }
    if (from.has_lastactivetime()) {
      set_lastactivetime(from.lastactivetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lastofftime()) {
      set_lastofftime(from.lastofftime());
    }
    if (from.has_forbidts()) {
      set_forbidts(from.forbidts());
    }
    if (from.has_forbidreason()) {
      set_forbidreason(from.forbidreason());
    }
    if (from.has_tutorialstage()) {
      set_tutorialstage(from.tutorialstage());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_acccharge()) {
      set_acccharge(from.acccharge());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_firstrecharge()) {
      set_firstrecharge(from.firstrecharge());
    }
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_barrier()) {
      set_barrier(from.barrier());
    }
    if (from.has_lastcreateadts()) {
      set_lastcreateadts(from.lastcreateadts());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_allianallowts()) {
      set_allianallowts(from.allianallowts());
    }
    if (from.has_nextdonationts()) {
      set_nextdonationts(from.nextdonationts());
    }
    if (from.has_helptimes()) {
      set_helptimes(from.helptimes());
    }
    if (from.has_viprewarddailygiftts()) {
      set_viprewarddailygiftts(from.viprewarddailygiftts());
    }
    if (from.has_vipdailyspeedproductcnt()) {
      set_vipdailyspeedproductcnt(from.vipdailyspeedproductcnt());
    }
    if (from.has_vipdailyremoveordercdcnt()) {
      set_vipdailyremoveordercdcnt(from.vipdailyremoveordercdcnt());
    }
    if (from.has_switchstatus()) {
      set_switchstatus(from.switchstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Base::CopyFrom(const Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base::IsInitialized() const {
  if ((_has_bits_[0] & 0x7fffffff) != 0x7fffffff) return false;

  return true;
}

void Base::Swap(Base* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(registerplatform_, other->registerplatform_);
    std::swap(registertime_, other->registertime_);
    std::swap(lastloginplatform_, other->lastloginplatform_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(logintimes_, other->logintimes_);
    std::swap(logindays_, other->logindays_);
    std::swap(lastactivetime_, other->lastactivetime_);
    std::swap(lastofftime_, other->lastofftime_);
    std::swap(forbidts_, other->forbidts_);
    std::swap(forbidreason_, other->forbidreason_);
    std::swap(tutorialstage_, other->tutorialstage_);
    std::swap(name_, other->name_);
    std::swap(fig_, other->fig_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(acccharge_, other->acccharge_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(cash_, other->cash_);
    std::swap(coin_, other->coin_);
    std::swap(firstrecharge_, other->firstrecharge_);
    std::swap(allianceid_, other->allianceid_);
    std::swap(barrier_, other->barrier_);
    std::swap(lastcreateadts_, other->lastcreateadts_);
    std::swap(allianallowts_, other->allianallowts_);
    std::swap(nextdonationts_, other->nextdonationts_);
    std::swap(helptimes_, other->helptimes_);
    std::swap(viprewarddailygiftts_, other->viprewarddailygiftts_);
    std::swap(vipdailyspeedproductcnt_, other->vipdailyspeedproductcnt_);
    std::swap(vipdailyremoveordercdcnt_, other->vipdailyremoveordercdcnt_);
    std::swap(switchstatus_, other->switchstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Base_descriptor_;
  metadata.reflection = Base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingCPP::kUdFieldNumber;
const int BuildingCPP::kBuildIdFieldNumber;
const int BuildingCPP::kPositionFieldNumber;
const int BuildingCPP::kDirectFieldNumber;
const int BuildingCPP::kDoneTimeFieldNumber;
const int BuildingCPP::kLevelFieldNumber;
#endif  // !_MSC_VER

BuildingCPP::BuildingCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.BuildingCPP)
}

void BuildingCPP::InitAsDefaultInstance() {
}

BuildingCPP::BuildingCPP(const BuildingCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.BuildingCPP)
}

void BuildingCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  buildid_ = 0u;
  direct_ = 0u;
  donetime_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingCPP::~BuildingCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.BuildingCPP)
  SharedDtor();
}

void BuildingCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingCPP_descriptor_;
}

const BuildingCPP& BuildingCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

BuildingCPP* BuildingCPP::default_instance_ = NULL;

BuildingCPP* BuildingCPP::New() const {
  return new BuildingCPP;
}

void BuildingCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuildingCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(ud_, buildid_);
    ZR_(direct_, level_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  position_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.BuildingCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buildId;
        break;
      }

      // required uint32 buildId = 2;
      case 2: {
        if (tag == 16) {
         parse_buildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildid_)));
          set_has_buildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // repeated uint32 position = 3;
      case 3: {
        if (tag == 24) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_position())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        if (input->ExpectTag(32)) goto parse_direct;
        break;
      }

      // required uint32 direct = 4;
      case 4: {
        if (tag == 32) {
         parse_direct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direct_)));
          set_has_direct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_doneTime;
        break;
      }

      // required uint32 doneTime = 5;
      case 5: {
        if (tag == 40) {
         parse_doneTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donetime_)));
          set_has_donetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.BuildingCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.BuildingCPP)
  return false;
#undef DO_
}

void BuildingCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.BuildingCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 buildId = 2;
  if (has_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buildid(), output);
  }

  // repeated uint32 position = 3;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->position(i), output);
  }

  // required uint32 direct = 4;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->direct(), output);
  }

  // required uint32 doneTime = 5;
  if (has_donetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->donetime(), output);
  }

  // required uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.BuildingCPP)
}

::google::protobuf::uint8* BuildingCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.BuildingCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 buildId = 2;
  if (has_buildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buildid(), target);
  }

  // repeated uint32 position = 3;
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->position(i), target);
  }

  // required uint32 direct = 4;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->direct(), target);
  }

  // required uint32 doneTime = 5;
  if (has_donetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->donetime(), target);
  }

  // required uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.BuildingCPP)
  return target;
}

int BuildingCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 buildId = 2;
    if (has_buildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildid());
    }

    // required uint32 direct = 4;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direct());
    }

    // required uint32 doneTime = 5;
    if (has_donetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donetime());
    }

    // required uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  // repeated uint32 position = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->position_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->position(i));
    }
    total_size += 1 * this->position_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingCPP::MergeFrom(const BuildingCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_buildid()) {
      set_buildid(from.buildid());
    }
    if (from.has_direct()) {
      set_direct(from.direct());
    }
    if (from.has_donetime()) {
      set_donetime(from.donetime());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingCPP::CopyFrom(const BuildingCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  return true;
}

void BuildingCPP::Swap(BuildingCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(buildid_, other->buildid_);
    position_.Swap(&other->position_);
    std::swap(direct_, other->direct_);
    std::swap(donetime_, other->donetime_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingCPP_descriptor_;
  metadata.reflection = BuildingCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CropLandCPP::kUdFieldNumber;
const int CropLandCPP::kPlantFieldNumber;
const int CropLandCPP::kStatusFieldNumber;
const int CropLandCPP::kHarvestTimeFieldNumber;
#endif  // !_MSC_VER

CropLandCPP::CropLandCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.CropLandCPP)
}

void CropLandCPP::InitAsDefaultInstance() {
}

CropLandCPP::CropLandCPP(const CropLandCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.CropLandCPP)
}

void CropLandCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  plant_ = 0u;
  status_ = 0u;
  harvesttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CropLandCPP::~CropLandCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.CropLandCPP)
  SharedDtor();
}

void CropLandCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CropLandCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CropLandCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CropLandCPP_descriptor_;
}

const CropLandCPP& CropLandCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

CropLandCPP* CropLandCPP::default_instance_ = NULL;

CropLandCPP* CropLandCPP::New() const {
  return new CropLandCPP;
}

void CropLandCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CropLandCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ud_, harvesttime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CropLandCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.CropLandCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plant;
        break;
      }

      // required uint32 plant = 2;
      case 2: {
        if (tag == 16) {
         parse_plant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plant_)));
          set_has_plant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required uint32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_harvestTime;
        break;
      }

      // required uint32 harvestTime = 4;
      case 4: {
        if (tag == 32) {
         parse_harvestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harvesttime_)));
          set_has_harvesttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.CropLandCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.CropLandCPP)
  return false;
#undef DO_
}

void CropLandCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.CropLandCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 plant = 2;
  if (has_plant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->plant(), output);
  }

  // required uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // required uint32 harvestTime = 4;
  if (has_harvesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->harvesttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.CropLandCPP)
}

::google::protobuf::uint8* CropLandCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.CropLandCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 plant = 2;
  if (has_plant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->plant(), target);
  }

  // required uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // required uint32 harvestTime = 4;
  if (has_harvesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->harvesttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.CropLandCPP)
  return target;
}

int CropLandCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 plant = 2;
    if (has_plant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plant());
    }

    // required uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 harvestTime = 4;
    if (has_harvesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harvesttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CropLandCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CropLandCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CropLandCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CropLandCPP::MergeFrom(const CropLandCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_plant()) {
      set_plant(from.plant());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_harvesttime()) {
      set_harvesttime(from.harvesttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CropLandCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CropLandCPP::CopyFrom(const CropLandCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropLandCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CropLandCPP::Swap(CropLandCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(plant_, other->plant_);
    std::swap(status_, other->status_);
    std::swap(harvesttime_, other->harvesttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CropLandCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CropLandCPP_descriptor_;
  metadata.reflection = CropLandCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OthProduceCPP::kUdFieldNumber;
const int OthProduceCPP::kStatusFieldNumber;
#endif  // !_MSC_VER

OthProduceCPP::OthProduceCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.OthProduceCPP)
}

void OthProduceCPP::InitAsDefaultInstance() {
}

OthProduceCPP::OthProduceCPP(const OthProduceCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.OthProduceCPP)
}

void OthProduceCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OthProduceCPP::~OthProduceCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.OthProduceCPP)
  SharedDtor();
}

void OthProduceCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OthProduceCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OthProduceCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OthProduceCPP_descriptor_;
}

const OthProduceCPP& OthProduceCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

OthProduceCPP* OthProduceCPP::default_instance_ = NULL;

OthProduceCPP* OthProduceCPP::New() const {
  return new OthProduceCPP;
}

void OthProduceCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OthProduceCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ud_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OthProduceCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.OthProduceCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.OthProduceCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.OthProduceCPP)
  return false;
#undef DO_
}

void OthProduceCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.OthProduceCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.OthProduceCPP)
}

::google::protobuf::uint8* OthProduceCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.OthProduceCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.OthProduceCPP)
  return target;
}

int OthProduceCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OthProduceCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OthProduceCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OthProduceCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OthProduceCPP::MergeFrom(const OthProduceCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OthProduceCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OthProduceCPP::CopyFrom(const OthProduceCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OthProduceCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OthProduceCPP::Swap(OthProduceCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OthProduceCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OthProduceCPP_descriptor_;
  metadata.reflection = OthProduceCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnimalCPP::kUdFieldNumber;
const int AnimalCPP::kResidenceUdFieldNumber;
const int AnimalCPP::kAnimalIdFieldNumber;
const int AnimalCPP::kStatusFieldNumber;
const int AnimalCPP::kFullTimeFieldNumber;
#endif  // !_MSC_VER

AnimalCPP::AnimalCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.AnimalCPP)
}

void AnimalCPP::InitAsDefaultInstance() {
}

AnimalCPP::AnimalCPP(const AnimalCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.AnimalCPP)
}

void AnimalCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  residenceud_ = 0u;
  animalid_ = 0u;
  status_ = 0u;
  fulltime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnimalCPP::~AnimalCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.AnimalCPP)
  SharedDtor();
}

void AnimalCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnimalCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnimalCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnimalCPP_descriptor_;
}

const AnimalCPP& AnimalCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

AnimalCPP* AnimalCPP::default_instance_ = NULL;

AnimalCPP* AnimalCPP::New() const {
  return new AnimalCPP;
}

void AnimalCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AnimalCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ud_, fulltime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnimalCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.AnimalCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_residenceUd;
        break;
      }

      // required uint32 residenceUd = 2;
      case 2: {
        if (tag == 16) {
         parse_residenceUd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &residenceud_)));
          set_has_residenceud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_animalId;
        break;
      }

      // required uint32 animalId = 3;
      case 3: {
        if (tag == 24) {
         parse_animalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &animalid_)));
          set_has_animalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required uint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fullTime;
        break;
      }

      // required uint32 fullTime = 5;
      case 5: {
        if (tag == 40) {
         parse_fullTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fulltime_)));
          set_has_fulltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.AnimalCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.AnimalCPP)
  return false;
#undef DO_
}

void AnimalCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.AnimalCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 residenceUd = 2;
  if (has_residenceud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->residenceud(), output);
  }

  // required uint32 animalId = 3;
  if (has_animalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->animalid(), output);
  }

  // required uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // required uint32 fullTime = 5;
  if (has_fulltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fulltime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.AnimalCPP)
}

::google::protobuf::uint8* AnimalCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.AnimalCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 residenceUd = 2;
  if (has_residenceud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->residenceud(), target);
  }

  // required uint32 animalId = 3;
  if (has_animalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->animalid(), target);
  }

  // required uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // required uint32 fullTime = 5;
  if (has_fulltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fulltime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.AnimalCPP)
  return target;
}

int AnimalCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 residenceUd = 2;
    if (has_residenceud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->residenceud());
    }

    // required uint32 animalId = 3;
    if (has_animalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->animalid());
    }

    // required uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 fullTime = 5;
    if (has_fulltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fulltime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnimalCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnimalCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnimalCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnimalCPP::MergeFrom(const AnimalCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_residenceud()) {
      set_residenceud(from.residenceud());
    }
    if (from.has_animalid()) {
      set_animalid(from.animalid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_fulltime()) {
      set_fulltime(from.fulltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnimalCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimalCPP::CopyFrom(const AnimalCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimalCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AnimalCPP::Swap(AnimalCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(residenceud_, other->residenceud_);
    std::swap(animalid_, other->animalid_);
    std::swap(status_, other->status_);
    std::swap(fulltime_, other->fulltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnimalCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnimalCPP_descriptor_;
  metadata.reflection = AnimalCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentStarCPP::kIdFieldNumber;
const int EquipmentStarCPP::kStarFieldNumber;
const int EquipmentStarCPP::kUsedtimeFieldNumber;
#endif  // !_MSC_VER

EquipmentStarCPP::EquipmentStarCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.EquipmentStarCPP)
}

void EquipmentStarCPP::InitAsDefaultInstance() {
}

EquipmentStarCPP::EquipmentStarCPP(const EquipmentStarCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.EquipmentStarCPP)
}

void EquipmentStarCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  star_ = 0u;
  usedtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentStarCPP::~EquipmentStarCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.EquipmentStarCPP)
  SharedDtor();
}

void EquipmentStarCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentStarCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentStarCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentStarCPP_descriptor_;
}

const EquipmentStarCPP& EquipmentStarCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

EquipmentStarCPP* EquipmentStarCPP::default_instance_ = NULL;

EquipmentStarCPP* EquipmentStarCPP::New() const {
  return new EquipmentStarCPP;
}

void EquipmentStarCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipmentStarCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, usedtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentStarCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.EquipmentStarCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required uint32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_usedtime;
        break;
      }

      // required uint32 usedtime = 3;
      case 3: {
        if (tag == 24) {
         parse_usedtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedtime_)));
          set_has_usedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.EquipmentStarCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.EquipmentStarCPP)
  return false;
#undef DO_
}

void EquipmentStarCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.EquipmentStarCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // required uint32 usedtime = 3;
  if (has_usedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usedtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.EquipmentStarCPP)
}

::google::protobuf::uint8* EquipmentStarCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.EquipmentStarCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // required uint32 usedtime = 3;
  if (has_usedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usedtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.EquipmentStarCPP)
  return target;
}

int EquipmentStarCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 usedtime = 3;
    if (has_usedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentStarCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentStarCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentStarCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentStarCPP::MergeFrom(const EquipmentStarCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_usedtime()) {
      set_usedtime(from.usedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentStarCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentStarCPP::CopyFrom(const EquipmentStarCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentStarCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EquipmentStarCPP::Swap(EquipmentStarCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(star_, other->star_);
    std::swap(usedtime_, other->usedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentStarCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentStarCPP_descriptor_;
  metadata.reflection = EquipmentStarCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FruitCPP::kUdFieldNumber;
const int FruitCPP::kTreeidFieldNumber;
const int FruitCPP::kStatusFieldNumber;
const int FruitCPP::kStageFieldNumber;
const int FruitCPP::kFruitLeftNumFieldNumber;
const int FruitCPP::kHarvestTimeFieldNumber;
const int FruitCPP::kNameFieldNumber;
const int FruitCPP::kFigFieldNumber;
#endif  // !_MSC_VER

FruitCPP::FruitCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.FruitCPP)
}

void FruitCPP::InitAsDefaultInstance() {
}

FruitCPP::FruitCPP(const FruitCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.FruitCPP)
}

void FruitCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ud_ = 0u;
  treeid_ = 0u;
  status_ = 0u;
  stage_ = 0u;
  fruitleftnum_ = 0u;
  harvesttime_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FruitCPP::~FruitCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.FruitCPP)
  SharedDtor();
}

void FruitCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (this != default_instance_) {
  }
}

void FruitCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FruitCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FruitCPP_descriptor_;
}

const FruitCPP& FruitCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

FruitCPP* FruitCPP::default_instance_ = NULL;

FruitCPP* FruitCPP::New() const {
  return new FruitCPP;
}

void FruitCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FruitCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ud_, harvesttime_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FruitCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.FruitCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_treeid;
        break;
      }

      // required uint32 treeid = 2;
      case 2: {
        if (tag == 16) {
         parse_treeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treeid_)));
          set_has_treeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required uint32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stage;
        break;
      }

      // required uint32 stage = 4;
      case 4: {
        if (tag == 32) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fruitLeftNum;
        break;
      }

      // required uint32 fruitLeftNum = 5;
      case 5: {
        if (tag == 40) {
         parse_fruitLeftNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fruitleftnum_)));
          set_has_fruitleftnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_harvestTime;
        break;
      }

      // required uint32 harvestTime = 6;
      case 6: {
        if (tag == 48) {
         parse_harvestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harvesttime_)));
          set_has_harvesttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional bytes name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fig;
        break;
      }

      // optional bytes fig = 8;
      case 8: {
        if (tag == 66) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.FruitCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.FruitCPP)
  return false;
#undef DO_
}

void FruitCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.FruitCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 treeid = 2;
  if (has_treeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->treeid(), output);
  }

  // required uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // required uint32 stage = 4;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stage(), output);
  }

  // required uint32 fruitLeftNum = 5;
  if (has_fruitleftnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fruitleftnum(), output);
  }

  // required uint32 harvestTime = 6;
  if (has_harvesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->harvesttime(), output);
  }

  // optional bytes name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->name(), output);
  }

  // optional bytes fig = 8;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->fig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.FruitCPP)
}

::google::protobuf::uint8* FruitCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.FruitCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 treeid = 2;
  if (has_treeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->treeid(), target);
  }

  // required uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // required uint32 stage = 4;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stage(), target);
  }

  // required uint32 fruitLeftNum = 5;
  if (has_fruitleftnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fruitleftnum(), target);
  }

  // required uint32 harvestTime = 6;
  if (has_harvesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->harvesttime(), target);
  }

  // optional bytes name = 7;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->name(), target);
  }

  // optional bytes fig = 8;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->fig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.FruitCPP)
  return target;
}

int FruitCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 treeid = 2;
    if (has_treeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treeid());
    }

    // required uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 stage = 4;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

    // required uint32 fruitLeftNum = 5;
    if (has_fruitleftnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fruitleftnum());
    }

    // required uint32 harvestTime = 6;
    if (has_harvesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harvesttime());
    }

    // optional bytes name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes fig = 8;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FruitCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FruitCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FruitCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FruitCPP::MergeFrom(const FruitCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_treeid()) {
      set_treeid(from.treeid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_fruitleftnum()) {
      set_fruitleftnum(from.fruitleftnum());
    }
    if (from.has_harvesttime()) {
      set_harvesttime(from.harvesttime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FruitCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FruitCPP::CopyFrom(const FruitCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FruitCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FruitCPP::Swap(FruitCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(treeid_, other->treeid_);
    std::swap(status_, other->status_);
    std::swap(stage_, other->stage_);
    std::swap(fruitleftnum_, other->fruitleftnum_);
    std::swap(harvesttime_, other->harvesttime_);
    std::swap(name_, other->name_);
    std::swap(fig_, other->fig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FruitCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FruitCPP_descriptor_;
  metadata.reflection = FruitCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShippingCPP::kBadgeFieldNumber;
const int ShippingCPP::kUnlockEndtsFieldNumber;
const int ShippingCPP::kArriveTsFieldNumber;
const int ShippingCPP::kPublicAidTimesFieldNumber;
const int ShippingCPP::kCommercialAidTimesFieldNumber;
const int ShippingCPP::kStatusFieldNumber;
const int ShippingCPP::kPlayStatusFieldNumber;
#endif  // !_MSC_VER

ShippingCPP::ShippingCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.ShippingCPP)
}

void ShippingCPP::InitAsDefaultInstance() {
}

ShippingCPP::ShippingCPP(const ShippingCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.ShippingCPP)
}

void ShippingCPP::SharedCtor() {
  _cached_size_ = 0;
  badge_ = 0u;
  unlockendts_ = 0u;
  arrivets_ = 0u;
  publicaidtimes_ = 0u;
  commercialaidtimes_ = 0u;
  status_ = 0u;
  playstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShippingCPP::~ShippingCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.ShippingCPP)
  SharedDtor();
}

void ShippingCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShippingCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShippingCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShippingCPP_descriptor_;
}

const ShippingCPP& ShippingCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

ShippingCPP* ShippingCPP::default_instance_ = NULL;

ShippingCPP* ShippingCPP::New() const {
  return new ShippingCPP;
}

void ShippingCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShippingCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(badge_, playstatus_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShippingCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.ShippingCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 badge = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_)));
          set_has_badge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unlockEndts;
        break;
      }

      // required uint32 unlockEndts = 2;
      case 2: {
        if (tag == 16) {
         parse_unlockEndts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlockendts_)));
          set_has_unlockendts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_arriveTs;
        break;
      }

      // required uint32 arriveTs = 3;
      case 3: {
        if (tag == 24) {
         parse_arriveTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arrivets_)));
          set_has_arrivets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_publicAidTimes;
        break;
      }

      // required uint32 publicAidTimes = 4;
      case 4: {
        if (tag == 32) {
         parse_publicAidTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publicaidtimes_)));
          set_has_publicaidtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_commercialAidTimes;
        break;
      }

      // required uint32 commercialAidTimes = 5;
      case 5: {
        if (tag == 40) {
         parse_commercialAidTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commercialaidtimes_)));
          set_has_commercialaidtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required uint32 status = 6;
      case 6: {
        if (tag == 48) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_playStatus;
        break;
      }

      // required uint32 playStatus = 7;
      case 7: {
        if (tag == 56) {
         parse_playStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playstatus_)));
          set_has_playstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.ShippingCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.ShippingCPP)
  return false;
#undef DO_
}

void ShippingCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.ShippingCPP)
  // required uint32 badge = 1;
  if (has_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->badge(), output);
  }

  // required uint32 unlockEndts = 2;
  if (has_unlockendts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unlockendts(), output);
  }

  // required uint32 arriveTs = 3;
  if (has_arrivets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->arrivets(), output);
  }

  // required uint32 publicAidTimes = 4;
  if (has_publicaidtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->publicaidtimes(), output);
  }

  // required uint32 commercialAidTimes = 5;
  if (has_commercialaidtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->commercialaidtimes(), output);
  }

  // required uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  // required uint32 playStatus = 7;
  if (has_playstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->playstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.ShippingCPP)
}

::google::protobuf::uint8* ShippingCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.ShippingCPP)
  // required uint32 badge = 1;
  if (has_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->badge(), target);
  }

  // required uint32 unlockEndts = 2;
  if (has_unlockendts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unlockendts(), target);
  }

  // required uint32 arriveTs = 3;
  if (has_arrivets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->arrivets(), target);
  }

  // required uint32 publicAidTimes = 4;
  if (has_publicaidtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->publicaidtimes(), target);
  }

  // required uint32 commercialAidTimes = 5;
  if (has_commercialaidtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->commercialaidtimes(), target);
  }

  // required uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  // required uint32 playStatus = 7;
  if (has_playstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->playstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.ShippingCPP)
  return target;
}

int ShippingCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 badge = 1;
    if (has_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge());
    }

    // required uint32 unlockEndts = 2;
    if (has_unlockendts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlockendts());
    }

    // required uint32 arriveTs = 3;
    if (has_arrivets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arrivets());
    }

    // required uint32 publicAidTimes = 4;
    if (has_publicaidtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publicaidtimes());
    }

    // required uint32 commercialAidTimes = 5;
    if (has_commercialaidtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commercialaidtimes());
    }

    // required uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 playStatus = 7;
    if (has_playstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShippingCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShippingCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShippingCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShippingCPP::MergeFrom(const ShippingCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_badge()) {
      set_badge(from.badge());
    }
    if (from.has_unlockendts()) {
      set_unlockendts(from.unlockendts());
    }
    if (from.has_arrivets()) {
      set_arrivets(from.arrivets());
    }
    if (from.has_publicaidtimes()) {
      set_publicaidtimes(from.publicaidtimes());
    }
    if (from.has_commercialaidtimes()) {
      set_commercialaidtimes(from.commercialaidtimes());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_playstatus()) {
      set_playstatus(from.playstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShippingCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShippingCPP::CopyFrom(const ShippingCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShippingCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ShippingCPP::Swap(ShippingCPP* other) {
  if (other != this) {
    std::swap(badge_, other->badge_);
    std::swap(unlockendts_, other->unlockendts_);
    std::swap(arrivets_, other->arrivets_);
    std::swap(publicaidtimes_, other->publicaidtimes_);
    std::swap(commercialaidtimes_, other->commercialaidtimes_);
    std::swap(status_, other->status_);
    std::swap(playstatus_, other->playstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShippingCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShippingCPP_descriptor_;
  metadata.reflection = ShippingCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShippingBoxCPP::kBoxidFieldNumber;
const int ShippingBoxCPP::kPropsidFieldNumber;
const int ShippingBoxCPP::kCountFieldNumber;
const int ShippingBoxCPP::kAidStatusFieldNumber;
const int ShippingBoxCPP::kStatusFieldNumber;
const int ShippingBoxCPP::kCoinFieldNumber;
const int ShippingBoxCPP::kExpFieldNumber;
const int ShippingBoxCPP::kFigFieldNumber;
const int ShippingBoxCPP::kNameFieldNumber;
#endif  // !_MSC_VER

ShippingBoxCPP::ShippingBoxCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.ShippingBoxCPP)
}

void ShippingBoxCPP::InitAsDefaultInstance() {
}

ShippingBoxCPP::ShippingBoxCPP(const ShippingBoxCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.ShippingBoxCPP)
}

void ShippingBoxCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  boxid_ = 0u;
  propsid_ = 0u;
  count_ = 0u;
  aidstatus_ = 0u;
  status_ = 0u;
  coin_ = 0u;
  exp_ = 0u;
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShippingBoxCPP::~ShippingBoxCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.ShippingBoxCPP)
  SharedDtor();
}

void ShippingBoxCPP::SharedDtor() {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ShippingBoxCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShippingBoxCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShippingBoxCPP_descriptor_;
}

const ShippingBoxCPP& ShippingBoxCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

ShippingBoxCPP* ShippingBoxCPP::default_instance_ = NULL;

ShippingBoxCPP* ShippingBoxCPP::New() const {
  return new ShippingBoxCPP;
}

void ShippingBoxCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShippingBoxCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(boxid_, coin_);
    exp_ = 0u;
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
  }
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShippingBoxCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.ShippingBoxCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 boxid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsid;
        break;
      }

      // required uint32 propsid = 2;
      case 2: {
        if (tag == 16) {
         parse_propsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_aidStatus;
        break;
      }

      // required uint32 aidStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_aidStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aidstatus_)));
          set_has_aidstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required uint32 status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_coin;
        break;
      }

      // required uint32 coin = 6;
      case 6: {
        if (tag == 48) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // required uint32 exp = 7;
      case 7: {
        if (tag == 56) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fig;
        break;
      }

      // optional bytes fig = 8;
      case 8: {
        if (tag == 66) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }

      // optional bytes name = 9;
      case 9: {
        if (tag == 74) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.ShippingBoxCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.ShippingBoxCPP)
  return false;
#undef DO_
}

void ShippingBoxCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.ShippingBoxCPP)
  // required uint32 boxid = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->boxid(), output);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propsid(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required uint32 aidStatus = 4;
  if (has_aidstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->aidstatus(), output);
  }

  // required uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  // required uint32 coin = 6;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->coin(), output);
  }

  // required uint32 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->exp(), output);
  }

  // optional bytes fig = 8;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->fig(), output);
  }

  // optional bytes name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.ShippingBoxCPP)
}

::google::protobuf::uint8* ShippingBoxCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.ShippingBoxCPP)
  // required uint32 boxid = 1;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->boxid(), target);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propsid(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required uint32 aidStatus = 4;
  if (has_aidstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->aidstatus(), target);
  }

  // required uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  // required uint32 coin = 6;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->coin(), target);
  }

  // required uint32 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->exp(), target);
  }

  // optional bytes fig = 8;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->fig(), target);
  }

  // optional bytes name = 9;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.ShippingBoxCPP)
  return target;
}

int ShippingBoxCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 boxid = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

    // required uint32 propsid = 2;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 aidStatus = 4;
    if (has_aidstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aidstatus());
    }

    // required uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 coin = 6;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional bytes fig = 8;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShippingBoxCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShippingBoxCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShippingBoxCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShippingBoxCPP::MergeFrom(const ShippingBoxCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_aidstatus()) {
      set_aidstatus(from.aidstatus());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShippingBoxCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShippingBoxCPP::CopyFrom(const ShippingBoxCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShippingBoxCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ShippingBoxCPP::Swap(ShippingBoxCPP* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(propsid_, other->propsid_);
    std::swap(count_, other->count_);
    std::swap(aidstatus_, other->aidstatus_);
    std::swap(status_, other->status_);
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(fig_, other->fig_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShippingBoxCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShippingBoxCPP_descriptor_;
  metadata.reflection = ShippingBoxCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCShopCPP::kUdFieldNumber;
const int NPCShopCPP::kPropsidFieldNumber;
const int NPCShopCPP::kPropscntFieldNumber;
const int NPCShopCPP::kSellflagFieldNumber;
#endif  // !_MSC_VER

NPCShopCPP::NPCShopCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.NPCShopCPP)
}

void NPCShopCPP::InitAsDefaultInstance() {
}

NPCShopCPP::NPCShopCPP(const NPCShopCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.NPCShopCPP)
}

void NPCShopCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  propsid_ = 0u;
  propscnt_ = 0u;
  sellflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCShopCPP::~NPCShopCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.NPCShopCPP)
  SharedDtor();
}

void NPCShopCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCShopCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCShopCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCShopCPP_descriptor_;
}

const NPCShopCPP& NPCShopCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

NPCShopCPP* NPCShopCPP::default_instance_ = NULL;

NPCShopCPP* NPCShopCPP::New() const {
  return new NPCShopCPP;
}

void NPCShopCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NPCShopCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ud_, sellflag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCShopCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.NPCShopCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsid;
        break;
      }

      // required uint32 propsid = 2;
      case 2: {
        if (tag == 16) {
         parse_propsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_propscnt;
        break;
      }

      // required uint32 propscnt = 3;
      case 3: {
        if (tag == 24) {
         parse_propscnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propscnt_)));
          set_has_propscnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sellflag;
        break;
      }

      // required uint32 sellflag = 4;
      case 4: {
        if (tag == 32) {
         parse_sellflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sellflag_)));
          set_has_sellflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.NPCShopCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.NPCShopCPP)
  return false;
#undef DO_
}

void NPCShopCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.NPCShopCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propsid(), output);
  }

  // required uint32 propscnt = 3;
  if (has_propscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->propscnt(), output);
  }

  // required uint32 sellflag = 4;
  if (has_sellflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sellflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.NPCShopCPP)
}

::google::protobuf::uint8* NPCShopCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.NPCShopCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propsid(), target);
  }

  // required uint32 propscnt = 3;
  if (has_propscnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->propscnt(), target);
  }

  // required uint32 sellflag = 4;
  if (has_sellflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sellflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.NPCShopCPP)
  return target;
}

int NPCShopCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 propsid = 2;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 propscnt = 3;
    if (has_propscnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propscnt());
    }

    // required uint32 sellflag = 4;
    if (has_sellflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sellflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCShopCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCShopCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCShopCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCShopCPP::MergeFrom(const NPCShopCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_propscnt()) {
      set_propscnt(from.propscnt());
    }
    if (from.has_sellflag()) {
      set_sellflag(from.sellflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCShopCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCShopCPP::CopyFrom(const NPCShopCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCShopCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void NPCShopCPP::Swap(NPCShopCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(propsid_, other->propsid_);
    std::swap(propscnt_, other->propscnt_);
    std::swap(sellflag_, other->sellflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCShopCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCShopCPP_descriptor_;
  metadata.reflection = NPCShopCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendlyTreeBasicCPP::kIdFieldNumber;
const int FriendlyTreeBasicCPP::kOthuidFieldNumber;
const int FriendlyTreeBasicCPP::kNameFieldNumber;
const int FriendlyTreeBasicCPP::kHeadFieldNumber;
const int FriendlyTreeBasicCPP::kTsFieldNumber;
#endif  // !_MSC_VER

FriendlyTreeBasicCPP::FriendlyTreeBasicCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.FriendlyTreeBasicCPP)
}

void FriendlyTreeBasicCPP::InitAsDefaultInstance() {
}

FriendlyTreeBasicCPP::FriendlyTreeBasicCPP(const FriendlyTreeBasicCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.FriendlyTreeBasicCPP)
}

void FriendlyTreeBasicCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  othuid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendlyTreeBasicCPP::~FriendlyTreeBasicCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.FriendlyTreeBasicCPP)
  SharedDtor();
}

void FriendlyTreeBasicCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete head_;
  }
  if (this != default_instance_) {
  }
}

void FriendlyTreeBasicCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendlyTreeBasicCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendlyTreeBasicCPP_descriptor_;
}

const FriendlyTreeBasicCPP& FriendlyTreeBasicCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

FriendlyTreeBasicCPP* FriendlyTreeBasicCPP::default_instance_ = NULL;

FriendlyTreeBasicCPP* FriendlyTreeBasicCPP::New() const {
  return new FriendlyTreeBasicCPP;
}

void FriendlyTreeBasicCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendlyTreeBasicCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, othuid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        head_->clear();
      }
    }
    ts_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendlyTreeBasicCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.FriendlyTreeBasicCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_othuid;
        break;
      }

      // required uint32 othuid = 2;
      case 2: {
        if (tag == 16) {
         parse_othuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_head;
        break;
      }

      // required bytes head = 4;
      case 4: {
        if (tag == 34) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ts;
        break;
      }

      // required uint32 ts = 5;
      case 5: {
        if (tag == 40) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.FriendlyTreeBasicCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.FriendlyTreeBasicCPP)
  return false;
#undef DO_
}

void FriendlyTreeBasicCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.FriendlyTreeBasicCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->othuid(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required bytes head = 4;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->head(), output);
  }

  // required uint32 ts = 5;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.FriendlyTreeBasicCPP)
}

::google::protobuf::uint8* FriendlyTreeBasicCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.FriendlyTreeBasicCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->othuid(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes head = 4;
  if (has_head()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->head(), target);
  }

  // required uint32 ts = 5;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.FriendlyTreeBasicCPP)
  return target;
}

int FriendlyTreeBasicCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 othuid = 2;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes head = 4;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->head());
    }

    // required uint32 ts = 5;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendlyTreeBasicCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendlyTreeBasicCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendlyTreeBasicCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendlyTreeBasicCPP::MergeFrom(const FriendlyTreeBasicCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendlyTreeBasicCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendlyTreeBasicCPP::CopyFrom(const FriendlyTreeBasicCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendlyTreeBasicCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FriendlyTreeBasicCPP::Swap(FriendlyTreeBasicCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(othuid_, other->othuid_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendlyTreeBasicCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendlyTreeBasicCPP_descriptor_;
  metadata.reflection = FriendlyTreeBasicCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendlyTreeStatusCPP::kTreestatusFieldNumber;
const int FriendlyTreeStatusCPP::kNextwatertsFieldNumber;
#endif  // !_MSC_VER

FriendlyTreeStatusCPP::FriendlyTreeStatusCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.FriendlyTreeStatusCPP)
}

void FriendlyTreeStatusCPP::InitAsDefaultInstance() {
}

FriendlyTreeStatusCPP::FriendlyTreeStatusCPP(const FriendlyTreeStatusCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.FriendlyTreeStatusCPP)
}

void FriendlyTreeStatusCPP::SharedCtor() {
  _cached_size_ = 0;
  treestatus_ = 0u;
  nextwaterts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendlyTreeStatusCPP::~FriendlyTreeStatusCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.FriendlyTreeStatusCPP)
  SharedDtor();
}

void FriendlyTreeStatusCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendlyTreeStatusCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendlyTreeStatusCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendlyTreeStatusCPP_descriptor_;
}

const FriendlyTreeStatusCPP& FriendlyTreeStatusCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

FriendlyTreeStatusCPP* FriendlyTreeStatusCPP::default_instance_ = NULL;

FriendlyTreeStatusCPP* FriendlyTreeStatusCPP::New() const {
  return new FriendlyTreeStatusCPP;
}

void FriendlyTreeStatusCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendlyTreeStatusCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(treestatus_, nextwaterts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendlyTreeStatusCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.FriendlyTreeStatusCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 treestatus = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treestatus_)));
          set_has_treestatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nextwaterts;
        break;
      }

      // optional uint32 nextwaterts = 2;
      case 2: {
        if (tag == 16) {
         parse_nextwaterts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextwaterts_)));
          set_has_nextwaterts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.FriendlyTreeStatusCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.FriendlyTreeStatusCPP)
  return false;
#undef DO_
}

void FriendlyTreeStatusCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.FriendlyTreeStatusCPP)
  // required uint32 treestatus = 1;
  if (has_treestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->treestatus(), output);
  }

  // optional uint32 nextwaterts = 2;
  if (has_nextwaterts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nextwaterts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.FriendlyTreeStatusCPP)
}

::google::protobuf::uint8* FriendlyTreeStatusCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.FriendlyTreeStatusCPP)
  // required uint32 treestatus = 1;
  if (has_treestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->treestatus(), target);
  }

  // optional uint32 nextwaterts = 2;
  if (has_nextwaterts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nextwaterts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.FriendlyTreeStatusCPP)
  return target;
}

int FriendlyTreeStatusCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 treestatus = 1;
    if (has_treestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treestatus());
    }

    // optional uint32 nextwaterts = 2;
    if (has_nextwaterts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextwaterts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendlyTreeStatusCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendlyTreeStatusCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendlyTreeStatusCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendlyTreeStatusCPP::MergeFrom(const FriendlyTreeStatusCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_treestatus()) {
      set_treestatus(from.treestatus());
    }
    if (from.has_nextwaterts()) {
      set_nextwaterts(from.nextwaterts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendlyTreeStatusCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendlyTreeStatusCPP::CopyFrom(const FriendlyTreeStatusCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendlyTreeStatusCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FriendlyTreeStatusCPP::Swap(FriendlyTreeStatusCPP* other) {
  if (other != this) {
    std::swap(treestatus_, other->treestatus_);
    std::swap(nextwaterts_, other->nextwaterts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendlyTreeStatusCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendlyTreeStatusCPP_descriptor_;
  metadata.reflection = FriendlyTreeStatusCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendlyTreeCPP::kBasictreeinfoFieldNumber;
const int FriendlyTreeCPP::kStatustreeinfoFieldNumber;
#endif  // !_MSC_VER

FriendlyTreeCPP::FriendlyTreeCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.FriendlyTreeCPP)
}

void FriendlyTreeCPP::InitAsDefaultInstance() {
  statustreeinfo_ = const_cast< ::ProtoNPCUser::FriendlyTreeStatusCPP*>(&::ProtoNPCUser::FriendlyTreeStatusCPP::default_instance());
}

FriendlyTreeCPP::FriendlyTreeCPP(const FriendlyTreeCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.FriendlyTreeCPP)
}

void FriendlyTreeCPP::SharedCtor() {
  _cached_size_ = 0;
  statustreeinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendlyTreeCPP::~FriendlyTreeCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.FriendlyTreeCPP)
  SharedDtor();
}

void FriendlyTreeCPP::SharedDtor() {
  if (this != default_instance_) {
    delete statustreeinfo_;
  }
}

void FriendlyTreeCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendlyTreeCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendlyTreeCPP_descriptor_;
}

const FriendlyTreeCPP& FriendlyTreeCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

FriendlyTreeCPP* FriendlyTreeCPP::default_instance_ = NULL;

FriendlyTreeCPP* FriendlyTreeCPP::New() const {
  return new FriendlyTreeCPP;
}

void FriendlyTreeCPP::Clear() {
  if (has_statustreeinfo()) {
    if (statustreeinfo_ != NULL) statustreeinfo_->::ProtoNPCUser::FriendlyTreeStatusCPP::Clear();
  }
  basictreeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendlyTreeCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.FriendlyTreeCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoNPCUser.FriendlyTreeBasicCPP basictreeinfo = 1;
      case 1: {
        if (tag == 10) {
         parse_basictreeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basictreeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_basictreeinfo;
        if (input->ExpectTag(18)) goto parse_statustreeinfo;
        break;
      }

      // required .ProtoNPCUser.FriendlyTreeStatusCPP statustreeinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_statustreeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statustreeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.FriendlyTreeCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.FriendlyTreeCPP)
  return false;
#undef DO_
}

void FriendlyTreeCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.FriendlyTreeCPP)
  // repeated .ProtoNPCUser.FriendlyTreeBasicCPP basictreeinfo = 1;
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basictreeinfo(i), output);
  }

  // required .ProtoNPCUser.FriendlyTreeStatusCPP statustreeinfo = 2;
  if (has_statustreeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statustreeinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.FriendlyTreeCPP)
}

::google::protobuf::uint8* FriendlyTreeCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.FriendlyTreeCPP)
  // repeated .ProtoNPCUser.FriendlyTreeBasicCPP basictreeinfo = 1;
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basictreeinfo(i), target);
  }

  // required .ProtoNPCUser.FriendlyTreeStatusCPP statustreeinfo = 2;
  if (has_statustreeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->statustreeinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.FriendlyTreeCPP)
  return target;
}

int FriendlyTreeCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ProtoNPCUser.FriendlyTreeStatusCPP statustreeinfo = 2;
    if (has_statustreeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statustreeinfo());
    }

  }
  // repeated .ProtoNPCUser.FriendlyTreeBasicCPP basictreeinfo = 1;
  total_size += 1 * this->basictreeinfo_size();
  for (int i = 0; i < this->basictreeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basictreeinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendlyTreeCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendlyTreeCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendlyTreeCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendlyTreeCPP::MergeFrom(const FriendlyTreeCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  basictreeinfo_.MergeFrom(from.basictreeinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_statustreeinfo()) {
      mutable_statustreeinfo()->::ProtoNPCUser::FriendlyTreeStatusCPP::MergeFrom(from.statustreeinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendlyTreeCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendlyTreeCPP::CopyFrom(const FriendlyTreeCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendlyTreeCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->basictreeinfo())) return false;
  if (has_statustreeinfo()) {
    if (!this->statustreeinfo().IsInitialized()) return false;
  }
  return true;
}

void FriendlyTreeCPP::Swap(FriendlyTreeCPP* other) {
  if (other != this) {
    basictreeinfo_.Swap(&other->basictreeinfo_);
    std::swap(statustreeinfo_, other->statustreeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendlyTreeCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendlyTreeCPP_descriptor_;
  metadata.reflection = FriendlyTreeCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestNPCUser::RequestNPCUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.RequestNPCUser)
}

void RequestNPCUser::InitAsDefaultInstance() {
}

RequestNPCUser::RequestNPCUser(const RequestNPCUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.RequestNPCUser)
}

void RequestNPCUser::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestNPCUser::~RequestNPCUser() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.RequestNPCUser)
  SharedDtor();
}

void RequestNPCUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestNPCUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestNPCUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestNPCUser_descriptor_;
}

const RequestNPCUser& RequestNPCUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

RequestNPCUser* RequestNPCUser::default_instance_ = NULL;

RequestNPCUser* RequestNPCUser::New() const {
  return new RequestNPCUser;
}

void RequestNPCUser::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestNPCUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.RequestNPCUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.RequestNPCUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.RequestNPCUser)
  return false;
#undef DO_
}

void RequestNPCUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.RequestNPCUser)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.RequestNPCUser)
}

::google::protobuf::uint8* RequestNPCUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.RequestNPCUser)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.RequestNPCUser)
  return target;
}

int RequestNPCUser::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNPCUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestNPCUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestNPCUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestNPCUser::MergeFrom(const RequestNPCUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestNPCUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestNPCUser::CopyFrom(const RequestNPCUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNPCUser::IsInitialized() const {

  return true;
}

void RequestNPCUser::Swap(RequestNPCUser* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestNPCUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestNPCUser_descriptor_;
  metadata.reflection = RequestNPCUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCUser::kBaseFieldNumber;
const int NPCUser::kBuildsFieldNumber;
const int NPCUser::kCroplandFieldNumber;
const int NPCUser::kEquipmentsFieldNumber;
const int NPCUser::kAnimalsFieldNumber;
const int NPCUser::kEquipmentstarsFieldNumber;
const int NPCUser::kFruitsFieldNumber;
const int NPCUser::kShopStatusFieldNumber;
const int NPCUser::kShippingFieldNumber;
const int NPCUser::kShipboxesFieldNumber;
const int NPCUser::kFriendlytreeFieldNumber;
#endif  // !_MSC_VER

NPCUser::NPCUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.NPCUser)
}

void NPCUser::InitAsDefaultInstance() {
  base_ = const_cast< ::ProtoNPCUser::Base*>(&::ProtoNPCUser::Base::default_instance());
  shipping_ = const_cast< ::ProtoNPCUser::ShippingCPP*>(&::ProtoNPCUser::ShippingCPP::default_instance());
  friendlytree_ = const_cast< ::ProtoNPCUser::FriendlyTreeCPP*>(&::ProtoNPCUser::FriendlyTreeCPP::default_instance());
}

NPCUser::NPCUser(const NPCUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.NPCUser)
}

void NPCUser::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  shopstatus_ = 0u;
  shipping_ = NULL;
  friendlytree_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCUser::~NPCUser() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.NPCUser)
  SharedDtor();
}

void NPCUser::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete shipping_;
    delete friendlytree_;
  }
}

void NPCUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCUser_descriptor_;
}

const NPCUser& NPCUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

NPCUser* NPCUser::default_instance_ = NULL;

NPCUser* NPCUser::New() const {
  return new NPCUser;
}

void NPCUser::Clear() {
  if (_has_bits_[0 / 32] & 129) {
    if (has_base()) {
      if (base_ != NULL) base_->::ProtoNPCUser::Base::Clear();
    }
    shopstatus_ = 0u;
  }
  if (_has_bits_[8 / 32] & 1280) {
    if (has_shipping()) {
      if (shipping_ != NULL) shipping_->::ProtoNPCUser::ShippingCPP::Clear();
    }
    if (has_friendlytree()) {
      if (friendlytree_ != NULL) friendlytree_->::ProtoNPCUser::FriendlyTreeCPP::Clear();
    }
  }
  builds_.Clear();
  cropland_.Clear();
  equipments_.Clear();
  animals_.Clear();
  equipmentstars_.Clear();
  fruits_.Clear();
  shipboxes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.NPCUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNPCUser.Base base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_builds;
        break;
      }

      // repeated .ProtoNPCUser.BuildingCPP builds = 2;
      case 2: {
        if (tag == 18) {
         parse_builds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_builds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_builds;
        if (input->ExpectTag(26)) goto parse_cropland;
        break;
      }

      // repeated .ProtoNPCUser.CropLandCPP cropland = 3;
      case 3: {
        if (tag == 26) {
         parse_cropland:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cropland()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cropland;
        if (input->ExpectTag(34)) goto parse_equipments;
        break;
      }

      // repeated .ProtoNPCUser.OthProduceCPP equipments = 4;
      case 4: {
        if (tag == 34) {
         parse_equipments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equipments;
        if (input->ExpectTag(42)) goto parse_animals;
        break;
      }

      // repeated .ProtoNPCUser.AnimalCPP animals = 5;
      case 5: {
        if (tag == 42) {
         parse_animals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animals;
        if (input->ExpectTag(50)) goto parse_equipmentstars;
        break;
      }

      // repeated .ProtoNPCUser.EquipmentStarCPP equipmentstars = 6;
      case 6: {
        if (tag == 50) {
         parse_equipmentstars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentstars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_equipmentstars;
        if (input->ExpectTag(58)) goto parse_fruits;
        break;
      }

      // repeated .ProtoNPCUser.FruitCPP fruits = 7;
      case 7: {
        if (tag == 58) {
         parse_fruits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fruits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_fruits;
        if (input->ExpectTag(64)) goto parse_shopStatus;
        break;
      }

      // required uint32 shopStatus = 8;
      case 8: {
        if (tag == 64) {
         parse_shopStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopstatus_)));
          set_has_shopstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_shipping;
        break;
      }

      // optional .ProtoNPCUser.ShippingCPP shipping = 9;
      case 9: {
        if (tag == 74) {
         parse_shipping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shipping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_shipboxes;
        break;
      }

      // repeated .ProtoNPCUser.ShippingBoxCPP shipboxes = 10;
      case 10: {
        if (tag == 82) {
         parse_shipboxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shipboxes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_shipboxes;
        if (input->ExpectTag(90)) goto parse_friendlytree;
        break;
      }

      // required .ProtoNPCUser.FriendlyTreeCPP friendlytree = 11;
      case 11: {
        if (tag == 90) {
         parse_friendlytree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendlytree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.NPCUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.NPCUser)
  return false;
#undef DO_
}

void NPCUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.NPCUser)
  // required .ProtoNPCUser.Base base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // repeated .ProtoNPCUser.BuildingCPP builds = 2;
  for (int i = 0; i < this->builds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->builds(i), output);
  }

  // repeated .ProtoNPCUser.CropLandCPP cropland = 3;
  for (int i = 0; i < this->cropland_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cropland(i), output);
  }

  // repeated .ProtoNPCUser.OthProduceCPP equipments = 4;
  for (int i = 0; i < this->equipments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equipments(i), output);
  }

  // repeated .ProtoNPCUser.AnimalCPP animals = 5;
  for (int i = 0; i < this->animals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->animals(i), output);
  }

  // repeated .ProtoNPCUser.EquipmentStarCPP equipmentstars = 6;
  for (int i = 0; i < this->equipmentstars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->equipmentstars(i), output);
  }

  // repeated .ProtoNPCUser.FruitCPP fruits = 7;
  for (int i = 0; i < this->fruits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fruits(i), output);
  }

  // required uint32 shopStatus = 8;
  if (has_shopstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->shopstatus(), output);
  }

  // optional .ProtoNPCUser.ShippingCPP shipping = 9;
  if (has_shipping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->shipping(), output);
  }

  // repeated .ProtoNPCUser.ShippingBoxCPP shipboxes = 10;
  for (int i = 0; i < this->shipboxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->shipboxes(i), output);
  }

  // required .ProtoNPCUser.FriendlyTreeCPP friendlytree = 11;
  if (has_friendlytree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->friendlytree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.NPCUser)
}

::google::protobuf::uint8* NPCUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.NPCUser)
  // required .ProtoNPCUser.Base base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // repeated .ProtoNPCUser.BuildingCPP builds = 2;
  for (int i = 0; i < this->builds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->builds(i), target);
  }

  // repeated .ProtoNPCUser.CropLandCPP cropland = 3;
  for (int i = 0; i < this->cropland_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cropland(i), target);
  }

  // repeated .ProtoNPCUser.OthProduceCPP equipments = 4;
  for (int i = 0; i < this->equipments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equipments(i), target);
  }

  // repeated .ProtoNPCUser.AnimalCPP animals = 5;
  for (int i = 0; i < this->animals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->animals(i), target);
  }

  // repeated .ProtoNPCUser.EquipmentStarCPP equipmentstars = 6;
  for (int i = 0; i < this->equipmentstars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->equipmentstars(i), target);
  }

  // repeated .ProtoNPCUser.FruitCPP fruits = 7;
  for (int i = 0; i < this->fruits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fruits(i), target);
  }

  // required uint32 shopStatus = 8;
  if (has_shopstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->shopstatus(), target);
  }

  // optional .ProtoNPCUser.ShippingCPP shipping = 9;
  if (has_shipping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->shipping(), target);
  }

  // repeated .ProtoNPCUser.ShippingBoxCPP shipboxes = 10;
  for (int i = 0; i < this->shipboxes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->shipboxes(i), target);
  }

  // required .ProtoNPCUser.FriendlyTreeCPP friendlytree = 11;
  if (has_friendlytree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->friendlytree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.NPCUser)
  return target;
}

int NPCUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNPCUser.Base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required uint32 shopStatus = 8;
    if (has_shopstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopstatus());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ProtoNPCUser.ShippingCPP shipping = 9;
    if (has_shipping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shipping());
    }

    // required .ProtoNPCUser.FriendlyTreeCPP friendlytree = 11;
    if (has_friendlytree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendlytree());
    }

  }
  // repeated .ProtoNPCUser.BuildingCPP builds = 2;
  total_size += 1 * this->builds_size();
  for (int i = 0; i < this->builds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->builds(i));
  }

  // repeated .ProtoNPCUser.CropLandCPP cropland = 3;
  total_size += 1 * this->cropland_size();
  for (int i = 0; i < this->cropland_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cropland(i));
  }

  // repeated .ProtoNPCUser.OthProduceCPP equipments = 4;
  total_size += 1 * this->equipments_size();
  for (int i = 0; i < this->equipments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipments(i));
  }

  // repeated .ProtoNPCUser.AnimalCPP animals = 5;
  total_size += 1 * this->animals_size();
  for (int i = 0; i < this->animals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animals(i));
  }

  // repeated .ProtoNPCUser.EquipmentStarCPP equipmentstars = 6;
  total_size += 1 * this->equipmentstars_size();
  for (int i = 0; i < this->equipmentstars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentstars(i));
  }

  // repeated .ProtoNPCUser.FruitCPP fruits = 7;
  total_size += 1 * this->fruits_size();
  for (int i = 0; i < this->fruits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fruits(i));
  }

  // repeated .ProtoNPCUser.ShippingBoxCPP shipboxes = 10;
  total_size += 1 * this->shipboxes_size();
  for (int i = 0; i < this->shipboxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shipboxes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCUser::MergeFrom(const NPCUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  builds_.MergeFrom(from.builds_);
  cropland_.MergeFrom(from.cropland_);
  equipments_.MergeFrom(from.equipments_);
  animals_.MergeFrom(from.animals_);
  equipmentstars_.MergeFrom(from.equipmentstars_);
  fruits_.MergeFrom(from.fruits_);
  shipboxes_.MergeFrom(from.shipboxes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::ProtoNPCUser::Base::MergeFrom(from.base());
    }
    if (from.has_shopstatus()) {
      set_shopstatus(from.shopstatus());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_shipping()) {
      mutable_shipping()->::ProtoNPCUser::ShippingCPP::MergeFrom(from.shipping());
    }
    if (from.has_friendlytree()) {
      mutable_friendlytree()->::ProtoNPCUser::FriendlyTreeCPP::MergeFrom(from.friendlytree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCUser::CopyFrom(const NPCUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000481) != 0x00000481) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->builds())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cropland())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equipments())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->animals())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equipmentstars())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fruits())) return false;
  if (has_shipping()) {
    if (!this->shipping().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->shipboxes())) return false;
  if (has_friendlytree()) {
    if (!this->friendlytree().IsInitialized()) return false;
  }
  return true;
}

void NPCUser::Swap(NPCUser* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    builds_.Swap(&other->builds_);
    cropland_.Swap(&other->cropland_);
    equipments_.Swap(&other->equipments_);
    animals_.Swap(&other->animals_);
    equipmentstars_.Swap(&other->equipmentstars_);
    fruits_.Swap(&other->fruits_);
    std::swap(shopstatus_, other->shopstatus_);
    std::swap(shipping_, other->shipping_);
    shipboxes_.Swap(&other->shipboxes_);
    std::swap(friendlytree_, other->friendlytree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCUser_descriptor_;
  metadata.reflection = NPCUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetNPCShopReq::GetNPCShopReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.GetNPCShopReq)
}

void GetNPCShopReq::InitAsDefaultInstance() {
}

GetNPCShopReq::GetNPCShopReq(const GetNPCShopReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.GetNPCShopReq)
}

void GetNPCShopReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNPCShopReq::~GetNPCShopReq() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.GetNPCShopReq)
  SharedDtor();
}

void GetNPCShopReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNPCShopReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNPCShopReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNPCShopReq_descriptor_;
}

const GetNPCShopReq& GetNPCShopReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

GetNPCShopReq* GetNPCShopReq::default_instance_ = NULL;

GetNPCShopReq* GetNPCShopReq::New() const {
  return new GetNPCShopReq;
}

void GetNPCShopReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNPCShopReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.GetNPCShopReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.GetNPCShopReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.GetNPCShopReq)
  return false;
#undef DO_
}

void GetNPCShopReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.GetNPCShopReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.GetNPCShopReq)
}

::google::protobuf::uint8* GetNPCShopReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.GetNPCShopReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.GetNPCShopReq)
  return target;
}

int GetNPCShopReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNPCShopReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNPCShopReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNPCShopReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNPCShopReq::MergeFrom(const GetNPCShopReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNPCShopReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNPCShopReq::CopyFrom(const GetNPCShopReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNPCShopReq::IsInitialized() const {

  return true;
}

void GetNPCShopReq::Swap(GetNPCShopReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNPCShopReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNPCShopReq_descriptor_;
  metadata.reflection = GetNPCShopReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNPCShopResp::kShopFieldNumber;
#endif  // !_MSC_VER

GetNPCShopResp::GetNPCShopResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.GetNPCShopResp)
}

void GetNPCShopResp::InitAsDefaultInstance() {
}

GetNPCShopResp::GetNPCShopResp(const GetNPCShopResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.GetNPCShopResp)
}

void GetNPCShopResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNPCShopResp::~GetNPCShopResp() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.GetNPCShopResp)
  SharedDtor();
}

void GetNPCShopResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNPCShopResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNPCShopResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNPCShopResp_descriptor_;
}

const GetNPCShopResp& GetNPCShopResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

GetNPCShopResp* GetNPCShopResp::default_instance_ = NULL;

GetNPCShopResp* GetNPCShopResp::New() const {
  return new GetNPCShopResp;
}

void GetNPCShopResp::Clear() {
  shop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNPCShopResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.GetNPCShopResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoNPCUser.NPCShopCPP shop = 1;
      case 1: {
        if (tag == 10) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_shop;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.GetNPCShopResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.GetNPCShopResp)
  return false;
#undef DO_
}

void GetNPCShopResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.GetNPCShopResp)
  // repeated .ProtoNPCUser.NPCShopCPP shop = 1;
  for (int i = 0; i < this->shop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.GetNPCShopResp)
}

::google::protobuf::uint8* GetNPCShopResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.GetNPCShopResp)
  // repeated .ProtoNPCUser.NPCShopCPP shop = 1;
  for (int i = 0; i < this->shop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.GetNPCShopResp)
  return target;
}

int GetNPCShopResp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoNPCUser.NPCShopCPP shop = 1;
  total_size += 1 * this->shop_size();
  for (int i = 0; i < this->shop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNPCShopResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNPCShopResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNPCShopResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNPCShopResp::MergeFrom(const GetNPCShopResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  shop_.MergeFrom(from.shop_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNPCShopResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNPCShopResp::CopyFrom(const GetNPCShopResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNPCShopResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->shop())) return false;
  return true;
}

void GetNPCShopResp::Swap(GetNPCShopResp* other) {
  if (other != this) {
    shop_.Swap(&other->shop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNPCShopResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNPCShopResp_descriptor_;
  metadata.reflection = GetNPCShopResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PurchaseReq::kUdFieldNumber;
#endif  // !_MSC_VER

PurchaseReq::PurchaseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.PurchaseReq)
}

void PurchaseReq::InitAsDefaultInstance() {
}

PurchaseReq::PurchaseReq(const PurchaseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.PurchaseReq)
}

void PurchaseReq::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PurchaseReq::~PurchaseReq() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.PurchaseReq)
  SharedDtor();
}

void PurchaseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PurchaseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PurchaseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PurchaseReq_descriptor_;
}

const PurchaseReq& PurchaseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

PurchaseReq* PurchaseReq::default_instance_ = NULL;

PurchaseReq* PurchaseReq::New() const {
  return new PurchaseReq;
}

void PurchaseReq::Clear() {
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PurchaseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.PurchaseReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.PurchaseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.PurchaseReq)
  return false;
#undef DO_
}

void PurchaseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.PurchaseReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.PurchaseReq)
}

::google::protobuf::uint8* PurchaseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.PurchaseReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.PurchaseReq)
  return target;
}

int PurchaseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PurchaseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PurchaseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PurchaseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PurchaseReq::MergeFrom(const PurchaseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PurchaseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurchaseReq::CopyFrom(const PurchaseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PurchaseReq::Swap(PurchaseReq* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PurchaseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PurchaseReq_descriptor_;
  metadata.reflection = PurchaseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PurchaseResp::kCommonsFieldNumber;
const int PurchaseResp::kNpcshopFieldNumber;
#endif  // !_MSC_VER

PurchaseResp::PurchaseResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCUser.PurchaseResp)
}

void PurchaseResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  npcshop_ = const_cast< ::ProtoNPCUser::NPCShopCPP*>(&::ProtoNPCUser::NPCShopCPP::default_instance());
}

PurchaseResp::PurchaseResp(const PurchaseResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCUser.PurchaseResp)
}

void PurchaseResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  npcshop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PurchaseResp::~PurchaseResp() {
  // @@protoc_insertion_point(destructor:ProtoNPCUser.PurchaseResp)
  SharedDtor();
}

void PurchaseResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete npcshop_;
  }
}

void PurchaseResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PurchaseResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PurchaseResp_descriptor_;
}

const PurchaseResp& PurchaseResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCUser_2eproto();
  return *default_instance_;
}

PurchaseResp* PurchaseResp::default_instance_ = NULL;

PurchaseResp* PurchaseResp::New() const {
  return new PurchaseResp;
}

void PurchaseResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_npcshop()) {
      if (npcshop_ != NULL) npcshop_->::ProtoNPCUser::NPCShopCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PurchaseResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCUser.PurchaseResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_npcshop;
        break;
      }

      // required .ProtoNPCUser.NPCShopCPP npcshop = 2;
      case 2: {
        if (tag == 18) {
         parse_npcshop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npcshop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCUser.PurchaseResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCUser.PurchaseResp)
  return false;
#undef DO_
}

void PurchaseResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCUser.PurchaseResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  // required .ProtoNPCUser.NPCShopCPP npcshop = 2;
  if (has_npcshop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->npcshop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCUser.PurchaseResp)
}

::google::protobuf::uint8* PurchaseResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCUser.PurchaseResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  // required .ProtoNPCUser.NPCShopCPP npcshop = 2;
  if (has_npcshop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->npcshop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCUser.PurchaseResp)
  return target;
}

int PurchaseResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required .ProtoNPCUser.NPCShopCPP npcshop = 2;
    if (has_npcshop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npcshop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PurchaseResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PurchaseResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PurchaseResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PurchaseResp::MergeFrom(const PurchaseResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_npcshop()) {
      mutable_npcshop()->::ProtoNPCUser::NPCShopCPP::MergeFrom(from.npcshop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PurchaseResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurchaseResp::CopyFrom(const PurchaseResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_npcshop()) {
    if (!this->npcshop().IsInitialized()) return false;
  }
  return true;
}

void PurchaseResp::Swap(PurchaseResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(npcshop_, other->npcshop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PurchaseResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PurchaseResp_descriptor_;
  metadata.reflection = PurchaseResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoNPCUser

// @@protoc_insertion_point(global_scope)
