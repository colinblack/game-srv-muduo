// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoRandomBox.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoRandomBox.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoRandomBox {

namespace {

const ::google::protobuf::Descriptor* OpenBoxReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenBoxReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenBoxResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenBoxResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyBoxGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyBoxGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyBoxGiftResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyBoxGiftResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoRandomBox_2eproto() {
  protobuf_AddDesc_ProtoRandomBox_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoRandomBox.proto");
  GOOGLE_CHECK(file != NULL);
  OpenBoxReq_descriptor_ = file->message_type(0);
  static const int OpenBoxReq_offsets_[1] = {
  };
  OpenBoxReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenBoxReq_descriptor_,
      OpenBoxReq::default_instance_,
      OpenBoxReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenBoxReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenBoxReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenBoxReq));
  OpenBoxResp_descriptor_ = file->message_type(1);
  static const int OpenBoxResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenBoxResp, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenBoxResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenBoxResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenBoxResp, giftid_),
  };
  OpenBoxResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenBoxResp_descriptor_,
      OpenBoxResp::default_instance_,
      OpenBoxResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenBoxResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenBoxResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenBoxResp));
  BuyBoxGiftReq_descriptor_ = file->message_type(2);
  static const int BuyBoxGiftReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBoxGiftReq, type_),
  };
  BuyBoxGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyBoxGiftReq_descriptor_,
      BuyBoxGiftReq::default_instance_,
      BuyBoxGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBoxGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBoxGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyBoxGiftReq));
  BuyBoxGiftResp_descriptor_ = file->message_type(3);
  static const int BuyBoxGiftResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBoxGiftResp, commons_),
  };
  BuyBoxGiftResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyBoxGiftResp_descriptor_,
      BuyBoxGiftResp::default_instance_,
      BuyBoxGiftResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBoxGiftResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBoxGiftResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyBoxGiftResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoRandomBox_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenBoxReq_descriptor_, &OpenBoxReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenBoxResp_descriptor_, &OpenBoxResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyBoxGiftReq_descriptor_, &BuyBoxGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyBoxGiftResp_descriptor_, &BuyBoxGiftResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoRandomBox_2eproto() {
  delete OpenBoxReq::default_instance_;
  delete OpenBoxReq_reflection_;
  delete OpenBoxResp::default_instance_;
  delete OpenBoxResp_reflection_;
  delete BuyBoxGiftReq::default_instance_;
  delete BuyBoxGiftReq_reflection_;
  delete BuyBoxGiftResp::default_instance_;
  delete BuyBoxGiftResp_reflection_;
}

void protobuf_AddDesc_ProtoRandomBox_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ProtoRandomBox.proto\022\016ProtoRandomBox\032\020"
    "DataCommon.proto\"\014\n\nOpenBoxReq\"d\n\013OpenBo"
    "xResp\022\n\n\002ts\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022+\n\007commo"
    "ns\030\003 \001(\0132\032.DataCommon.CommonItemsCPP\022\016\n\006"
    "giftid\030\004 \001(\r\"\035\n\rBuyBoxGiftReq\022\014\n\004type\030\001 "
    "\001(\r\"=\n\016BuyBoxGiftResp\022+\n\007commons\030\003 \002(\0132\032"
    ".DataCommon.CommonItemsCPP", 266);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoRandomBox.proto", &protobuf_RegisterTypes);
  OpenBoxReq::default_instance_ = new OpenBoxReq();
  OpenBoxResp::default_instance_ = new OpenBoxResp();
  BuyBoxGiftReq::default_instance_ = new BuyBoxGiftReq();
  BuyBoxGiftResp::default_instance_ = new BuyBoxGiftResp();
  OpenBoxReq::default_instance_->InitAsDefaultInstance();
  OpenBoxResp::default_instance_->InitAsDefaultInstance();
  BuyBoxGiftReq::default_instance_->InitAsDefaultInstance();
  BuyBoxGiftResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoRandomBox_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoRandomBox_2eproto {
  StaticDescriptorInitializer_ProtoRandomBox_2eproto() {
    protobuf_AddDesc_ProtoRandomBox_2eproto();
  }
} static_descriptor_initializer_ProtoRandomBox_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenBoxReq::OpenBoxReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRandomBox.OpenBoxReq)
}

void OpenBoxReq::InitAsDefaultInstance() {
}

OpenBoxReq::OpenBoxReq(const OpenBoxReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRandomBox.OpenBoxReq)
}

void OpenBoxReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenBoxReq::~OpenBoxReq() {
  // @@protoc_insertion_point(destructor:ProtoRandomBox.OpenBoxReq)
  SharedDtor();
}

void OpenBoxReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenBoxReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenBoxReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenBoxReq_descriptor_;
}

const OpenBoxReq& OpenBoxReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoRandomBox_2eproto();
  return *default_instance_;
}

OpenBoxReq* OpenBoxReq::default_instance_ = NULL;

OpenBoxReq* OpenBoxReq::New() const {
  return new OpenBoxReq;
}

void OpenBoxReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenBoxReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRandomBox.OpenBoxReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRandomBox.OpenBoxReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRandomBox.OpenBoxReq)
  return false;
#undef DO_
}

void OpenBoxReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRandomBox.OpenBoxReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRandomBox.OpenBoxReq)
}

::google::protobuf::uint8* OpenBoxReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRandomBox.OpenBoxReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRandomBox.OpenBoxReq)
  return target;
}

int OpenBoxReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenBoxReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenBoxReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenBoxReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenBoxReq::MergeFrom(const OpenBoxReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenBoxReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenBoxReq::CopyFrom(const OpenBoxReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenBoxReq::IsInitialized() const {

  return true;
}

void OpenBoxReq::Swap(OpenBoxReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenBoxReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenBoxReq_descriptor_;
  metadata.reflection = OpenBoxReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenBoxResp::kTsFieldNumber;
const int OpenBoxResp::kTypeFieldNumber;
const int OpenBoxResp::kCommonsFieldNumber;
const int OpenBoxResp::kGiftidFieldNumber;
#endif  // !_MSC_VER

OpenBoxResp::OpenBoxResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRandomBox.OpenBoxResp)
}

void OpenBoxResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

OpenBoxResp::OpenBoxResp(const OpenBoxResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRandomBox.OpenBoxResp)
}

void OpenBoxResp::SharedCtor() {
  _cached_size_ = 0;
  ts_ = 0u;
  type_ = 0u;
  commons_ = NULL;
  giftid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenBoxResp::~OpenBoxResp() {
  // @@protoc_insertion_point(destructor:ProtoRandomBox.OpenBoxResp)
  SharedDtor();
}

void OpenBoxResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void OpenBoxResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenBoxResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenBoxResp_descriptor_;
}

const OpenBoxResp& OpenBoxResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoRandomBox_2eproto();
  return *default_instance_;
}

OpenBoxResp* OpenBoxResp::default_instance_ = NULL;

OpenBoxResp* OpenBoxResp::New() const {
  return new OpenBoxResp;
}

void OpenBoxResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpenBoxResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(ts_, type_);
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    giftid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenBoxResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRandomBox.OpenBoxResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_giftid;
        break;
      }

      // optional uint32 giftid = 4;
      case 4: {
        if (tag == 32) {
         parse_giftid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRandomBox.OpenBoxResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRandomBox.OpenBoxResp)
  return false;
#undef DO_
}

void OpenBoxResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRandomBox.OpenBoxResp)
  // required uint32 ts = 1;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ts(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  // optional uint32 giftid = 4;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->giftid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRandomBox.OpenBoxResp)
}

::google::protobuf::uint8* OpenBoxResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRandomBox.OpenBoxResp)
  // required uint32 ts = 1;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ts(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  // optional uint32 giftid = 4;
  if (has_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->giftid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRandomBox.OpenBoxResp)
  return target;
}

int OpenBoxResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ts = 1;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // optional uint32 giftid = 4;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giftid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenBoxResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenBoxResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenBoxResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenBoxResp::MergeFrom(const OpenBoxResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenBoxResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenBoxResp::CopyFrom(const OpenBoxResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenBoxResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void OpenBoxResp::Swap(OpenBoxResp* other) {
  if (other != this) {
    std::swap(ts_, other->ts_);
    std::swap(type_, other->type_);
    std::swap(commons_, other->commons_);
    std::swap(giftid_, other->giftid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenBoxResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenBoxResp_descriptor_;
  metadata.reflection = OpenBoxResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyBoxGiftReq::kTypeFieldNumber;
#endif  // !_MSC_VER

BuyBoxGiftReq::BuyBoxGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRandomBox.BuyBoxGiftReq)
}

void BuyBoxGiftReq::InitAsDefaultInstance() {
}

BuyBoxGiftReq::BuyBoxGiftReq(const BuyBoxGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRandomBox.BuyBoxGiftReq)
}

void BuyBoxGiftReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyBoxGiftReq::~BuyBoxGiftReq() {
  // @@protoc_insertion_point(destructor:ProtoRandomBox.BuyBoxGiftReq)
  SharedDtor();
}

void BuyBoxGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyBoxGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyBoxGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyBoxGiftReq_descriptor_;
}

const BuyBoxGiftReq& BuyBoxGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoRandomBox_2eproto();
  return *default_instance_;
}

BuyBoxGiftReq* BuyBoxGiftReq::default_instance_ = NULL;

BuyBoxGiftReq* BuyBoxGiftReq::New() const {
  return new BuyBoxGiftReq;
}

void BuyBoxGiftReq::Clear() {
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyBoxGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRandomBox.BuyBoxGiftReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRandomBox.BuyBoxGiftReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRandomBox.BuyBoxGiftReq)
  return false;
#undef DO_
}

void BuyBoxGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRandomBox.BuyBoxGiftReq)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRandomBox.BuyBoxGiftReq)
}

::google::protobuf::uint8* BuyBoxGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRandomBox.BuyBoxGiftReq)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRandomBox.BuyBoxGiftReq)
  return target;
}

int BuyBoxGiftReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyBoxGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyBoxGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyBoxGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyBoxGiftReq::MergeFrom(const BuyBoxGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyBoxGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyBoxGiftReq::CopyFrom(const BuyBoxGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyBoxGiftReq::IsInitialized() const {

  return true;
}

void BuyBoxGiftReq::Swap(BuyBoxGiftReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyBoxGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyBoxGiftReq_descriptor_;
  metadata.reflection = BuyBoxGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyBoxGiftResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

BuyBoxGiftResp::BuyBoxGiftResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRandomBox.BuyBoxGiftResp)
}

void BuyBoxGiftResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

BuyBoxGiftResp::BuyBoxGiftResp(const BuyBoxGiftResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRandomBox.BuyBoxGiftResp)
}

void BuyBoxGiftResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyBoxGiftResp::~BuyBoxGiftResp() {
  // @@protoc_insertion_point(destructor:ProtoRandomBox.BuyBoxGiftResp)
  SharedDtor();
}

void BuyBoxGiftResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void BuyBoxGiftResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyBoxGiftResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyBoxGiftResp_descriptor_;
}

const BuyBoxGiftResp& BuyBoxGiftResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoRandomBox_2eproto();
  return *default_instance_;
}

BuyBoxGiftResp* BuyBoxGiftResp::default_instance_ = NULL;

BuyBoxGiftResp* BuyBoxGiftResp::New() const {
  return new BuyBoxGiftResp;
}

void BuyBoxGiftResp::Clear() {
  if (has_commons()) {
    if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyBoxGiftResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRandomBox.BuyBoxGiftResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRandomBox.BuyBoxGiftResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRandomBox.BuyBoxGiftResp)
  return false;
#undef DO_
}

void BuyBoxGiftResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRandomBox.BuyBoxGiftResp)
  // required .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRandomBox.BuyBoxGiftResp)
}

::google::protobuf::uint8* BuyBoxGiftResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRandomBox.BuyBoxGiftResp)
  // required .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRandomBox.BuyBoxGiftResp)
  return target;
}

int BuyBoxGiftResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyBoxGiftResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyBoxGiftResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyBoxGiftResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyBoxGiftResp::MergeFrom(const BuyBoxGiftResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyBoxGiftResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyBoxGiftResp::CopyFrom(const BuyBoxGiftResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyBoxGiftResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void BuyBoxGiftResp::Swap(BuyBoxGiftResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyBoxGiftResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyBoxGiftResp_descriptor_;
  metadata.reflection = BuyBoxGiftResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoRandomBox

// @@protoc_insertion_point(global_scope)
