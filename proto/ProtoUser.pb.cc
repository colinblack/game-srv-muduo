// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoUser.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoUser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoUser {

namespace {

const ::google::protobuf::Descriptor* Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Base_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingsCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingsCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropsItemCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropsItemCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentStarCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentStarCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CropLandCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CropLandCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProduceEquipCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProduceEquipCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FruitCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FruitCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnimalCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnimalCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* TruckCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TruckCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShippingCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShippingCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShippingBoxCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShippingBoxCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaidDogCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaidDogCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendlyTreeBasicCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendlyTreeBasicCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopSellCoinCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopSellCoinCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendWorkerCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendWorkerCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockPetCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockPetCPP_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoUser_2eproto() {
  protobuf_AddDesc_ProtoUser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoUser.proto");
  GOOGLE_CHECK(file != NULL);
  Base_descriptor_ = file->message_type(0);
  static const int Base_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, acccharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, firstrecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, barrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, lastcreateadts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, flag_),
  };
  Base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Base_descriptor_,
      Base::default_instance_,
      Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Base));
  ChargeItem_descriptor_ = file->message_type(1);
  static const int ChargeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItem, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItem, ts_),
  };
  ChargeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeItem_descriptor_,
      ChargeItem::default_instance_,
      ChargeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeItem));
  BuildingsCPP_descriptor_ = file->message_type(2);
  static const int BuildingsCPP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingsCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingsCPP, buildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingsCPP, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingsCPP, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingsCPP, donetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingsCPP, level_),
  };
  BuildingsCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingsCPP_descriptor_,
      BuildingsCPP::default_instance_,
      BuildingsCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingsCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingsCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingsCPP));
  PropsItemCPP_descriptor_ = file->message_type(3);
  static const int PropsItemCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsItemCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsItemCPP, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsItemCPP, itemcnt_),
  };
  PropsItemCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropsItemCPP_descriptor_,
      PropsItemCPP::default_instance_,
      PropsItemCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsItemCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsItemCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropsItemCPP));
  EquipmentStarCPP_descriptor_ = file->message_type(4);
  static const int EquipmentStarCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, usedtime_),
  };
  EquipmentStarCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentStarCPP_descriptor_,
      EquipmentStarCPP::default_instance_,
      EquipmentStarCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentStarCPP));
  CropLandCPP_descriptor_ = file->message_type(5);
  static const int CropLandCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, plant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, harvesttime_),
  };
  CropLandCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CropLandCPP_descriptor_,
      CropLandCPP::default_instance_,
      CropLandCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CropLandCPP));
  ProduceEquipCPP_descriptor_ = file->message_type(6);
  static const int ProduceEquipCPP_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, queuenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, queuedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, shelfdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, shelfsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, keeper_),
  };
  ProduceEquipCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProduceEquipCPP_descriptor_,
      ProduceEquipCPP::default_instance_,
      ProduceEquipCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProduceEquipCPP));
  FruitCPP_descriptor_ = file->message_type(7);
  static const int FruitCPP_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, treeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, fruitleftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, harvesttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, fig_),
  };
  FruitCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FruitCPP_descriptor_,
      FruitCPP::default_instance_,
      FruitCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FruitCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FruitCPP));
  AnimalCPP_descriptor_ = file->message_type(8);
  static const int AnimalCPP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, residenceud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, animalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, fulltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, keeper_),
  };
  AnimalCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnimalCPP_descriptor_,
      AnimalCPP::default_instance_,
      AnimalCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnimalCPP));
  OrderCPP_descriptor_ = file->message_type(9);
  static const int OrderCPP_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, storageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, end_ts_),
  };
  OrderCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderCPP_descriptor_,
      OrderCPP::default_instance_,
      OrderCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderCPP));
  TruckCPP_descriptor_ = file->message_type(10);
  static const int TruckCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckCPP, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckCPP, end_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckCPP, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckCPP, exp_),
  };
  TruckCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TruckCPP_descriptor_,
      TruckCPP::default_instance_,
      TruckCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruckCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TruckCPP));
  ShippingCPP_descriptor_ = file->message_type(11);
  static const int ShippingCPP_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, badge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, unlockendts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, arrivets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, publicaidtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, commercialaidtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, playstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, viewadpackcnt_),
  };
  ShippingCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShippingCPP_descriptor_,
      ShippingCPP::default_instance_,
      ShippingCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShippingCPP));
  ShippingBoxCPP_descriptor_ = file->message_type(12);
  static const int ShippingBoxCPP_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, aidstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, name_),
  };
  ShippingBoxCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShippingBoxCPP_descriptor_,
      ShippingBoxCPP::default_instance_,
      ShippingBoxCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShippingBoxCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShippingBoxCPP));
  ShopCPP_descriptor_ = file->message_type(13);
  static const int ShopCPP_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, propscnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, propsprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, adflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, sellflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, buyerfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, buyername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, vipshelfflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, buyeruid_),
  };
  ShopCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopCPP_descriptor_,
      ShopCPP::default_instance_,
      ShopCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopCPP));
  TaskCPP_descriptor_ = file->message_type(14);
  static const int TaskCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, curtaskvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, curtaskstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, rewardstatus_),
  };
  TaskCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskCPP_descriptor_,
      TaskCPP::default_instance_,
      TaskCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskCPP));
  MissionCPP_descriptor_ = file->message_type(15);
  static const int MissionCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, value_),
  };
  MissionCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionCPP_descriptor_,
      MissionCPP::default_instance_,
      MissionCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionCPP));
  ActivityCPP_descriptor_ = file->message_type(16);
  static const int ActivityCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCPP, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCPP, data_),
  };
  ActivityCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityCPP_descriptor_,
      ActivityCPP::default_instance_,
      ActivityCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityCPP));
  MaidDogCPP_descriptor_ = file->message_type(17);
  static const int MaidDogCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaidDogCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaidDogCPP, value_),
  };
  MaidDogCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaidDogCPP_descriptor_,
      MaidDogCPP::default_instance_,
      MaidDogCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaidDogCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaidDogCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaidDogCPP));
  FriendlyTreeBasicCPP_descriptor_ = file->message_type(18);
  static const int FriendlyTreeBasicCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, ts_),
  };
  FriendlyTreeBasicCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendlyTreeBasicCPP_descriptor_,
      FriendlyTreeBasicCPP::default_instance_,
      FriendlyTreeBasicCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendlyTreeBasicCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendlyTreeBasicCPP));
  ShopSellCoinCPP_descriptor_ = file->message_type(19);
  static const int ShopSellCoinCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopSellCoinCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopSellCoinCPP, value_),
  };
  ShopSellCoinCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopSellCoinCPP_descriptor_,
      ShopSellCoinCPP::default_instance_,
      ShopSellCoinCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopSellCoinCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopSellCoinCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopSellCoinCPP));
  FriendWorkerCPP_descriptor_ = file->message_type(20);
  static const int FriendWorkerCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, workeruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, workerendts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, workerslotpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, workerinvitedts_),
  };
  FriendWorkerCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendWorkerCPP_descriptor_,
      FriendWorkerCPP::default_instance_,
      FriendWorkerCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendWorkerCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendWorkerCPP));
  UnlockPetCPP_descriptor_ = file->message_type(21);
  static const int UnlockPetCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetCPP, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetCPP, teaseendts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetCPP, normalendts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetCPP, teaseflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetCPP, name_),
  };
  UnlockPetCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockPetCPP_descriptor_,
      UnlockPetCPP::default_instance_,
      UnlockPetCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockPetCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockPetCPP));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoUser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Base_descriptor_, &Base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeItem_descriptor_, &ChargeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingsCPP_descriptor_, &BuildingsCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropsItemCPP_descriptor_, &PropsItemCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentStarCPP_descriptor_, &EquipmentStarCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CropLandCPP_descriptor_, &CropLandCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProduceEquipCPP_descriptor_, &ProduceEquipCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FruitCPP_descriptor_, &FruitCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnimalCPP_descriptor_, &AnimalCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderCPP_descriptor_, &OrderCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TruckCPP_descriptor_, &TruckCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShippingCPP_descriptor_, &ShippingCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShippingBoxCPP_descriptor_, &ShippingBoxCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopCPP_descriptor_, &ShopCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskCPP_descriptor_, &TaskCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionCPP_descriptor_, &MissionCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityCPP_descriptor_, &ActivityCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaidDogCPP_descriptor_, &MaidDogCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendlyTreeBasicCPP_descriptor_, &FriendlyTreeBasicCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopSellCoinCPP_descriptor_, &ShopSellCoinCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendWorkerCPP_descriptor_, &FriendWorkerCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockPetCPP_descriptor_, &UnlockPetCPP::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoUser_2eproto() {
  delete Base::default_instance_;
  delete Base_reflection_;
  delete ChargeItem::default_instance_;
  delete ChargeItem_reflection_;
  delete BuildingsCPP::default_instance_;
  delete BuildingsCPP_reflection_;
  delete PropsItemCPP::default_instance_;
  delete PropsItemCPP_reflection_;
  delete EquipmentStarCPP::default_instance_;
  delete EquipmentStarCPP_reflection_;
  delete CropLandCPP::default_instance_;
  delete CropLandCPP_reflection_;
  delete ProduceEquipCPP::default_instance_;
  delete ProduceEquipCPP_reflection_;
  delete FruitCPP::default_instance_;
  delete FruitCPP_reflection_;
  delete AnimalCPP::default_instance_;
  delete AnimalCPP_reflection_;
  delete OrderCPP::default_instance_;
  delete OrderCPP_reflection_;
  delete TruckCPP::default_instance_;
  delete TruckCPP_reflection_;
  delete ShippingCPP::default_instance_;
  delete ShippingCPP_reflection_;
  delete ShippingBoxCPP::default_instance_;
  delete ShippingBoxCPP_reflection_;
  delete ShopCPP::default_instance_;
  delete ShopCPP_reflection_;
  delete TaskCPP::default_instance_;
  delete TaskCPP_reflection_;
  delete MissionCPP::default_instance_;
  delete MissionCPP_reflection_;
  delete ActivityCPP::default_instance_;
  delete ActivityCPP_reflection_;
  delete MaidDogCPP::default_instance_;
  delete MaidDogCPP_reflection_;
  delete FriendlyTreeBasicCPP::default_instance_;
  delete FriendlyTreeBasicCPP_reflection_;
  delete ShopSellCoinCPP::default_instance_;
  delete ShopSellCoinCPP_reflection_;
  delete FriendWorkerCPP::default_instance_;
  delete FriendWorkerCPP_reflection_;
  delete UnlockPetCPP::default_instance_;
  delete UnlockPetCPP_reflection_;
}

void protobuf_AddDesc_ProtoUser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ProtoUser.proto\022\tProtoUser\"\322\001\n\004Base\022\013\n"
    "\003uid\030\001 \002(\r\022\013\n\003exp\030\002 \002(\004\022\r\n\005level\030\003 \002(\r\022\021"
    "\n\tacccharge\030\004 \002(\r\022\020\n\010viplevel\030\005 \002(\r\022\014\n\004c"
    "ash\030\006 \002(\r\022\014\n\004coin\030\007 \002(\r\022\025\n\rfirstRecharge"
    "\030\010 \002(\r\022\022\n\nallianceId\030\t \002(\r\022\017\n\007barrier\030\n "
    "\003(\r\022\026\n\016lastcreateadts\030\013 \002(\r\022\014\n\004flag\030\014 \002("
    "\r\"&\n\nChargeItem\022\014\n\004cash\030\001 \002(\r\022\n\n\002ts\030\002 \002("
    "\r\"n\n\014BuildingsCPP\022\n\n\002ud\030\001 \002(\r\022\017\n\007buildId"
    "\030\002 \002(\r\022\020\n\010position\030\003 \003(\r\022\016\n\006direct\030\004 \002(\r"
    "\022\020\n\010doneTime\030\005 \002(\r\022\r\n\005level\030\006 \002(\r\"<\n\014Pro"
    "psItemCPP\022\n\n\002ud\030\001 \002(\r\022\017\n\007propsId\030\002 \002(\r\022\017"
    "\n\007itemCnt\030\003 \002(\r\">\n\020EquipmentStarCPP\022\n\n\002i"
    "d\030\001 \002(\r\022\014\n\004star\030\002 \002(\r\022\020\n\010usedtime\030\003 \002(\r\""
    "M\n\013CropLandCPP\022\n\n\002ud\030\001 \002(\r\022\r\n\005plant\030\002 \002("
    "\r\022\016\n\006status\030\003 \002(\r\022\023\n\013harvestTime\030\004 \002(\r\"\236"
    "\001\n\017ProduceEquipCPP\022\n\n\002ud\030\001 \002(\r\022\016\n\006status"
    "\030\002 \002(\r\022\020\n\010queuenum\030\003 \002(\r\022\021\n\tqueuedata\030\004 "
    "\003(\r\022\021\n\tshelfdata\030\005 \003(\r\022\022\n\nfinishtime\030\006 \002"
    "(\r\022\023\n\013shelfsource\030\007 \003(\r\022\016\n\006keeper\030\010 \001(\r\""
    "\213\001\n\010FruitCPP\022\n\n\002ud\030\001 \002(\r\022\016\n\006treeid\030\002 \002(\r"
    "\022\016\n\006status\030\003 \002(\r\022\r\n\005stage\030\004 \002(\r\022\024\n\014fruit"
    "LeftNum\030\005 \002(\r\022\023\n\013harvestTime\030\006 \002(\r\022\014\n\004na"
    "me\030\007 \001(\014\022\013\n\003fig\030\010 \001(\014\"p\n\tAnimalCPP\022\n\n\002ud"
    "\030\001 \002(\r\022\023\n\013residenceUd\030\002 \002(\r\022\020\n\010animalId\030"
    "\003 \002(\r\022\016\n\006status\030\004 \002(\r\022\020\n\010fullTime\030\005 \002(\r\022"
    "\016\n\006keeper\030\006 \001(\r\"x\n\010OrderCPP\022\014\n\004slot\030\001 \002("
    "\r\022\021\n\tstorageid\030\002 \002(\r\022\017\n\007levelid\030\003 \002(\r\022\017\n"
    "\007orderid\030\004 \002(\014\022\014\n\004coin\030\005 \002(\r\022\013\n\003exp\030\006 \002("
    "\r\022\016\n\006end_ts\030\007 \002(\r\"D\n\010TruckCPP\022\r\n\005state\030\001"
    " \002(\r\022\016\n\006end_ts\030\002 \002(\r\022\014\n\004coin\030\003 \002(\r\022\013\n\003ex"
    "p\030\004 \002(\r\"\262\001\n\013ShippingCPP\022\r\n\005badge\030\001 \002(\r\022\023"
    "\n\013unlockEndts\030\002 \002(\r\022\020\n\010arriveTs\030\003 \002(\r\022\026\n"
    "\016publicAidTimes\030\004 \002(\r\022\032\n\022commercialAidTi"
    "mes\030\005 \002(\r\022\016\n\006status\030\006 \002(\r\022\022\n\nplayStatus\030"
    "\007 \002(\r\022\025\n\rviewAdPackCnt\030\010 \002(\r\"\230\001\n\016Shippin"
    "gBoxCPP\022\r\n\005boxid\030\001 \002(\r\022\017\n\007propsid\030\002 \002(\r\022"
    "\r\n\005count\030\003 \002(\r\022\021\n\taidStatus\030\004 \002(\r\022\016\n\006sta"
    "tus\030\005 \002(\r\022\014\n\004coin\030\006 \002(\r\022\013\n\003exp\030\007 \002(\r\022\013\n\003"
    "fig\030\010 \001(\014\022\014\n\004name\030\t \001(\014\"\273\001\n\007ShopCPP\022\n\n\002u"
    "d\030\001 \002(\r\022\017\n\007propsid\030\002 \002(\r\022\020\n\010propscnt\030\003 \002"
    "(\r\022\022\n\npropsprice\030\004 \002(\r\022\016\n\006adflag\030\005 \002(\r\022\020"
    "\n\010sellflag\030\006 \002(\r\022\020\n\010buyerfig\030\007 \001(\014\022\021\n\tbu"
    "yername\030\010 \001(\014\022\024\n\014vipshelfflag\030\t \002(\r\022\020\n\010b"
    "uyeruid\030\n \001(\r\"V\n\007TaskCPP\022\n\n\002id\030\001 \002(\r\022\024\n\014"
    "curtaskvalue\030\002 \002(\r\022\023\n\013curtaskstar\030\003 \002(\r\022"
    "\024\n\014rewardstatus\030\004 \002(\r\"\'\n\nMissionCPP\022\n\n\002i"
    "d\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\"8\n\013ActivityCPP\022\n\n"
    "\002id\030\001 \002(\r\022\017\n\007version\030\002 \002(\r\022\014\n\004data\030\003 \003(\r"
    "\"\'\n\nMaidDogCPP\022\n\n\002id\030\001 \002(\r\022\r\n\005value\030\002 \002("
    "\r\"Z\n\024FriendlyTreeBasicCPP\022\n\n\002id\030\001 \002(\r\022\016\n"
    "\006othuid\030\002 \002(\r\022\014\n\004name\030\003 \002(\014\022\014\n\004head\030\004 \002("
    "\014\022\n\n\002ts\030\005 \002(\r\",\n\017ShopSellCoinCPP\022\n\n\002id\030\001"
    " \002(\r\022\r\n\005value\030\002 \002(\r\"i\n\017FriendWorkerCPP\022\021"
    "\n\tworkerUid\030\001 \002(\r\022\023\n\013workerEndTs\030\002 \002(\r\022\025"
    "\n\rworkerSlotPos\030\003 \002(\r\022\027\n\017workerInvitedTs"
    "\030\004 \001(\r\"g\n\014UnlockPetCPP\022\r\n\005petid\030\001 \002(\r\022\022\n"
    "\nteaseEndts\030\002 \002(\r\022\023\n\013normalEndts\030\003 \002(\r\022\021"
    "\n\tteaseFlag\030\004 \001(\r\022\014\n\004name\030\005 \001(\014", 2311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoUser.proto", &protobuf_RegisterTypes);
  Base::default_instance_ = new Base();
  ChargeItem::default_instance_ = new ChargeItem();
  BuildingsCPP::default_instance_ = new BuildingsCPP();
  PropsItemCPP::default_instance_ = new PropsItemCPP();
  EquipmentStarCPP::default_instance_ = new EquipmentStarCPP();
  CropLandCPP::default_instance_ = new CropLandCPP();
  ProduceEquipCPP::default_instance_ = new ProduceEquipCPP();
  FruitCPP::default_instance_ = new FruitCPP();
  AnimalCPP::default_instance_ = new AnimalCPP();
  OrderCPP::default_instance_ = new OrderCPP();
  TruckCPP::default_instance_ = new TruckCPP();
  ShippingCPP::default_instance_ = new ShippingCPP();
  ShippingBoxCPP::default_instance_ = new ShippingBoxCPP();
  ShopCPP::default_instance_ = new ShopCPP();
  TaskCPP::default_instance_ = new TaskCPP();
  MissionCPP::default_instance_ = new MissionCPP();
  ActivityCPP::default_instance_ = new ActivityCPP();
  MaidDogCPP::default_instance_ = new MaidDogCPP();
  FriendlyTreeBasicCPP::default_instance_ = new FriendlyTreeBasicCPP();
  ShopSellCoinCPP::default_instance_ = new ShopSellCoinCPP();
  FriendWorkerCPP::default_instance_ = new FriendWorkerCPP();
  UnlockPetCPP::default_instance_ = new UnlockPetCPP();
  Base::default_instance_->InitAsDefaultInstance();
  ChargeItem::default_instance_->InitAsDefaultInstance();
  BuildingsCPP::default_instance_->InitAsDefaultInstance();
  PropsItemCPP::default_instance_->InitAsDefaultInstance();
  EquipmentStarCPP::default_instance_->InitAsDefaultInstance();
  CropLandCPP::default_instance_->InitAsDefaultInstance();
  ProduceEquipCPP::default_instance_->InitAsDefaultInstance();
  FruitCPP::default_instance_->InitAsDefaultInstance();
  AnimalCPP::default_instance_->InitAsDefaultInstance();
  OrderCPP::default_instance_->InitAsDefaultInstance();
  TruckCPP::default_instance_->InitAsDefaultInstance();
  ShippingCPP::default_instance_->InitAsDefaultInstance();
  ShippingBoxCPP::default_instance_->InitAsDefaultInstance();
  ShopCPP::default_instance_->InitAsDefaultInstance();
  TaskCPP::default_instance_->InitAsDefaultInstance();
  MissionCPP::default_instance_->InitAsDefaultInstance();
  ActivityCPP::default_instance_->InitAsDefaultInstance();
  MaidDogCPP::default_instance_->InitAsDefaultInstance();
  FriendlyTreeBasicCPP::default_instance_->InitAsDefaultInstance();
  ShopSellCoinCPP::default_instance_->InitAsDefaultInstance();
  FriendWorkerCPP::default_instance_->InitAsDefaultInstance();
  UnlockPetCPP::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoUser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoUser_2eproto {
  StaticDescriptorInitializer_ProtoUser_2eproto() {
    protobuf_AddDesc_ProtoUser_2eproto();
  }
} static_descriptor_initializer_ProtoUser_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Base::kUidFieldNumber;
const int Base::kExpFieldNumber;
const int Base::kLevelFieldNumber;
const int Base::kAccchargeFieldNumber;
const int Base::kViplevelFieldNumber;
const int Base::kCashFieldNumber;
const int Base::kCoinFieldNumber;
const int Base::kFirstRechargeFieldNumber;
const int Base::kAllianceIdFieldNumber;
const int Base::kBarrierFieldNumber;
const int Base::kLastcreateadtsFieldNumber;
const int Base::kFlagFieldNumber;
#endif  // !_MSC_VER

Base::Base()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.Base)
}

void Base::InitAsDefaultInstance() {
}

Base::Base(const Base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.Base)
}

void Base::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  acccharge_ = 0u;
  viplevel_ = 0u;
  cash_ = 0u;
  coin_ = 0u;
  firstrecharge_ = 0u;
  allianceid_ = 0u;
  lastcreateadts_ = 0u;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Base::~Base() {
  // @@protoc_insertion_point(destructor:ProtoUser.Base)
  SharedDtor();
}

void Base::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Base_descriptor_;
}

const Base& Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

Base* Base::default_instance_ = NULL;

Base* Base::New() const {
  return new Base;
}

void Base::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Base*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(exp_, firstrecharge_);
  }
  if (_has_bits_[8 / 32] & 3328) {
    ZR_(lastcreateadts_, flag_);
    allianceid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  barrier_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.Base)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required uint64 exp = 2;
      case 2: {
        if (tag == 16) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_acccharge;
        break;
      }

      // required uint32 acccharge = 4;
      case 4: {
        if (tag == 32) {
         parse_acccharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acccharge_)));
          set_has_acccharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_viplevel;
        break;
      }

      // required uint32 viplevel = 5;
      case 5: {
        if (tag == 40) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cash;
        break;
      }

      // required uint32 cash = 6;
      case 6: {
        if (tag == 48) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_coin;
        break;
      }

      // required uint32 coin = 7;
      case 7: {
        if (tag == 56) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_firstRecharge;
        break;
      }

      // required uint32 firstRecharge = 8;
      case 8: {
        if (tag == 64) {
         parse_firstRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstrecharge_)));
          set_has_firstrecharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_allianceId;
        break;
      }

      // required uint32 allianceId = 9;
      case 9: {
        if (tag == 72) {
         parse_allianceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_barrier;
        break;
      }

      // repeated uint32 barrier = 10;
      case 10: {
        if (tag == 80) {
         parse_barrier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_barrier())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_barrier())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_barrier;
        if (input->ExpectTag(88)) goto parse_lastcreateadts;
        break;
      }

      // required uint32 lastcreateadts = 11;
      case 11: {
        if (tag == 88) {
         parse_lastcreateadts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastcreateadts_)));
          set_has_lastcreateadts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_flag;
        break;
      }

      // required uint32 flag = 12;
      case 12: {
        if (tag == 96) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.Base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.Base)
  return false;
#undef DO_
}

void Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.Base)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint64 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->exp(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 acccharge = 4;
  if (has_acccharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->acccharge(), output);
  }

  // required uint32 viplevel = 5;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplevel(), output);
  }

  // required uint32 cash = 6;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cash(), output);
  }

  // required uint32 coin = 7;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->coin(), output);
  }

  // required uint32 firstRecharge = 8;
  if (has_firstrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->firstrecharge(), output);
  }

  // required uint32 allianceId = 9;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->allianceid(), output);
  }

  // repeated uint32 barrier = 10;
  for (int i = 0; i < this->barrier_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->barrier(i), output);
  }

  // required uint32 lastcreateadts = 11;
  if (has_lastcreateadts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lastcreateadts(), output);
  }

  // required uint32 flag = 12;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.Base)
}

::google::protobuf::uint8* Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.Base)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint64 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->exp(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 acccharge = 4;
  if (has_acccharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->acccharge(), target);
  }

  // required uint32 viplevel = 5;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->viplevel(), target);
  }

  // required uint32 cash = 6;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cash(), target);
  }

  // required uint32 coin = 7;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->coin(), target);
  }

  // required uint32 firstRecharge = 8;
  if (has_firstrecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->firstrecharge(), target);
  }

  // required uint32 allianceId = 9;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->allianceid(), target);
  }

  // repeated uint32 barrier = 10;
  for (int i = 0; i < this->barrier_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->barrier(i), target);
  }

  // required uint32 lastcreateadts = 11;
  if (has_lastcreateadts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lastcreateadts(), target);
  }

  // required uint32 flag = 12;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.Base)
  return target;
}

int Base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint64 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 acccharge = 4;
    if (has_acccharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acccharge());
    }

    // required uint32 viplevel = 5;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // required uint32 cash = 6;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required uint32 coin = 7;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 firstRecharge = 8;
    if (has_firstrecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstrecharge());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 allianceId = 9;
    if (has_allianceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

    // required uint32 lastcreateadts = 11;
    if (has_lastcreateadts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastcreateadts());
    }

    // required uint32 flag = 12;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  // repeated uint32 barrier = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->barrier_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->barrier(i));
    }
    total_size += 1 * this->barrier_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Base::MergeFrom(const Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  barrier_.MergeFrom(from.barrier_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_acccharge()) {
      set_acccharge(from.acccharge());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_firstrecharge()) {
      set_firstrecharge(from.firstrecharge());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_lastcreateadts()) {
      set_lastcreateadts(from.lastcreateadts());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Base::CopyFrom(const Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000dff) != 0x00000dff) return false;

  return true;
}

void Base::Swap(Base* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(acccharge_, other->acccharge_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(cash_, other->cash_);
    std::swap(coin_, other->coin_);
    std::swap(firstrecharge_, other->firstrecharge_);
    std::swap(allianceid_, other->allianceid_);
    barrier_.Swap(&other->barrier_);
    std::swap(lastcreateadts_, other->lastcreateadts_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Base_descriptor_;
  metadata.reflection = Base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeItem::kCashFieldNumber;
const int ChargeItem::kTsFieldNumber;
#endif  // !_MSC_VER

ChargeItem::ChargeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.ChargeItem)
}

void ChargeItem::InitAsDefaultInstance() {
}

ChargeItem::ChargeItem(const ChargeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.ChargeItem)
}

void ChargeItem::SharedCtor() {
  _cached_size_ = 0;
  cash_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeItem::~ChargeItem() {
  // @@protoc_insertion_point(destructor:ProtoUser.ChargeItem)
  SharedDtor();
}

void ChargeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeItem_descriptor_;
}

const ChargeItem& ChargeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

ChargeItem* ChargeItem::default_instance_ = NULL;

ChargeItem* ChargeItem::New() const {
  return new ChargeItem;
}

void ChargeItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChargeItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cash_, ts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.ChargeItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // required uint32 ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.ChargeItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.ChargeItem)
  return false;
#undef DO_
}

void ChargeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.ChargeItem)
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.ChargeItem)
}

::google::protobuf::uint8* ChargeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.ChargeItem)
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.ChargeItem)
  return target;
}

int ChargeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeItem::MergeFrom(const ChargeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeItem::CopyFrom(const ChargeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChargeItem::Swap(ChargeItem* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeItem_descriptor_;
  metadata.reflection = ChargeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingsCPP::kUdFieldNumber;
const int BuildingsCPP::kBuildIdFieldNumber;
const int BuildingsCPP::kPositionFieldNumber;
const int BuildingsCPP::kDirectFieldNumber;
const int BuildingsCPP::kDoneTimeFieldNumber;
const int BuildingsCPP::kLevelFieldNumber;
#endif  // !_MSC_VER

BuildingsCPP::BuildingsCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.BuildingsCPP)
}

void BuildingsCPP::InitAsDefaultInstance() {
}

BuildingsCPP::BuildingsCPP(const BuildingsCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.BuildingsCPP)
}

void BuildingsCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  buildid_ = 0u;
  direct_ = 0u;
  donetime_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingsCPP::~BuildingsCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.BuildingsCPP)
  SharedDtor();
}

void BuildingsCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingsCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingsCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingsCPP_descriptor_;
}

const BuildingsCPP& BuildingsCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

BuildingsCPP* BuildingsCPP::default_instance_ = NULL;

BuildingsCPP* BuildingsCPP::New() const {
  return new BuildingsCPP;
}

void BuildingsCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuildingsCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(ud_, buildid_);
    ZR_(direct_, level_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  position_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingsCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.BuildingsCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buildId;
        break;
      }

      // required uint32 buildId = 2;
      case 2: {
        if (tag == 16) {
         parse_buildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildid_)));
          set_has_buildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // repeated uint32 position = 3;
      case 3: {
        if (tag == 24) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_position())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        if (input->ExpectTag(32)) goto parse_direct;
        break;
      }

      // required uint32 direct = 4;
      case 4: {
        if (tag == 32) {
         parse_direct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direct_)));
          set_has_direct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_doneTime;
        break;
      }

      // required uint32 doneTime = 5;
      case 5: {
        if (tag == 40) {
         parse_doneTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donetime_)));
          set_has_donetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.BuildingsCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.BuildingsCPP)
  return false;
#undef DO_
}

void BuildingsCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.BuildingsCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 buildId = 2;
  if (has_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buildid(), output);
  }

  // repeated uint32 position = 3;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->position(i), output);
  }

  // required uint32 direct = 4;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->direct(), output);
  }

  // required uint32 doneTime = 5;
  if (has_donetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->donetime(), output);
  }

  // required uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.BuildingsCPP)
}

::google::protobuf::uint8* BuildingsCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.BuildingsCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 buildId = 2;
  if (has_buildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buildid(), target);
  }

  // repeated uint32 position = 3;
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->position(i), target);
  }

  // required uint32 direct = 4;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->direct(), target);
  }

  // required uint32 doneTime = 5;
  if (has_donetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->donetime(), target);
  }

  // required uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.BuildingsCPP)
  return target;
}

int BuildingsCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 buildId = 2;
    if (has_buildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildid());
    }

    // required uint32 direct = 4;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direct());
    }

    // required uint32 doneTime = 5;
    if (has_donetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donetime());
    }

    // required uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  // repeated uint32 position = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->position_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->position(i));
    }
    total_size += 1 * this->position_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingsCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingsCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingsCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingsCPP::MergeFrom(const BuildingsCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_buildid()) {
      set_buildid(from.buildid());
    }
    if (from.has_direct()) {
      set_direct(from.direct());
    }
    if (from.has_donetime()) {
      set_donetime(from.donetime());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingsCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingsCPP::CopyFrom(const BuildingsCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingsCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  return true;
}

void BuildingsCPP::Swap(BuildingsCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(buildid_, other->buildid_);
    position_.Swap(&other->position_);
    std::swap(direct_, other->direct_);
    std::swap(donetime_, other->donetime_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingsCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingsCPP_descriptor_;
  metadata.reflection = BuildingsCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropsItemCPP::kUdFieldNumber;
const int PropsItemCPP::kPropsIdFieldNumber;
const int PropsItemCPP::kItemCntFieldNumber;
#endif  // !_MSC_VER

PropsItemCPP::PropsItemCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.PropsItemCPP)
}

void PropsItemCPP::InitAsDefaultInstance() {
}

PropsItemCPP::PropsItemCPP(const PropsItemCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.PropsItemCPP)
}

void PropsItemCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  propsid_ = 0u;
  itemcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropsItemCPP::~PropsItemCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.PropsItemCPP)
  SharedDtor();
}

void PropsItemCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropsItemCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropsItemCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropsItemCPP_descriptor_;
}

const PropsItemCPP& PropsItemCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

PropsItemCPP* PropsItemCPP::default_instance_ = NULL;

PropsItemCPP* PropsItemCPP::New() const {
  return new PropsItemCPP;
}

void PropsItemCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PropsItemCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ud_, itemcnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropsItemCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.PropsItemCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsId;
        break;
      }

      // required uint32 propsId = 2;
      case 2: {
        if (tag == 16) {
         parse_propsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemCnt;
        break;
      }

      // required uint32 itemCnt = 3;
      case 3: {
        if (tag == 24) {
         parse_itemCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcnt_)));
          set_has_itemcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.PropsItemCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.PropsItemCPP)
  return false;
#undef DO_
}

void PropsItemCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.PropsItemCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 propsId = 2;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propsid(), output);
  }

  // required uint32 itemCnt = 3;
  if (has_itemcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.PropsItemCPP)
}

::google::protobuf::uint8* PropsItemCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.PropsItemCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 propsId = 2;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propsid(), target);
  }

  // required uint32 itemCnt = 3;
  if (has_itemcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.PropsItemCPP)
  return target;
}

int PropsItemCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 propsId = 2;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 itemCnt = 3;
    if (has_itemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropsItemCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropsItemCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropsItemCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropsItemCPP::MergeFrom(const PropsItemCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_itemcnt()) {
      set_itemcnt(from.itemcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropsItemCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropsItemCPP::CopyFrom(const PropsItemCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropsItemCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PropsItemCPP::Swap(PropsItemCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(propsid_, other->propsid_);
    std::swap(itemcnt_, other->itemcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropsItemCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropsItemCPP_descriptor_;
  metadata.reflection = PropsItemCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentStarCPP::kIdFieldNumber;
const int EquipmentStarCPP::kStarFieldNumber;
const int EquipmentStarCPP::kUsedtimeFieldNumber;
#endif  // !_MSC_VER

EquipmentStarCPP::EquipmentStarCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.EquipmentStarCPP)
}

void EquipmentStarCPP::InitAsDefaultInstance() {
}

EquipmentStarCPP::EquipmentStarCPP(const EquipmentStarCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.EquipmentStarCPP)
}

void EquipmentStarCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  star_ = 0u;
  usedtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentStarCPP::~EquipmentStarCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.EquipmentStarCPP)
  SharedDtor();
}

void EquipmentStarCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentStarCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentStarCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentStarCPP_descriptor_;
}

const EquipmentStarCPP& EquipmentStarCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

EquipmentStarCPP* EquipmentStarCPP::default_instance_ = NULL;

EquipmentStarCPP* EquipmentStarCPP::New() const {
  return new EquipmentStarCPP;
}

void EquipmentStarCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipmentStarCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, usedtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentStarCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.EquipmentStarCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required uint32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_usedtime;
        break;
      }

      // required uint32 usedtime = 3;
      case 3: {
        if (tag == 24) {
         parse_usedtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedtime_)));
          set_has_usedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.EquipmentStarCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.EquipmentStarCPP)
  return false;
#undef DO_
}

void EquipmentStarCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.EquipmentStarCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // required uint32 usedtime = 3;
  if (has_usedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usedtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.EquipmentStarCPP)
}

::google::protobuf::uint8* EquipmentStarCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.EquipmentStarCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // required uint32 usedtime = 3;
  if (has_usedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usedtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.EquipmentStarCPP)
  return target;
}

int EquipmentStarCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 usedtime = 3;
    if (has_usedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentStarCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentStarCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentStarCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentStarCPP::MergeFrom(const EquipmentStarCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_usedtime()) {
      set_usedtime(from.usedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentStarCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentStarCPP::CopyFrom(const EquipmentStarCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentStarCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EquipmentStarCPP::Swap(EquipmentStarCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(star_, other->star_);
    std::swap(usedtime_, other->usedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentStarCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentStarCPP_descriptor_;
  metadata.reflection = EquipmentStarCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CropLandCPP::kUdFieldNumber;
const int CropLandCPP::kPlantFieldNumber;
const int CropLandCPP::kStatusFieldNumber;
const int CropLandCPP::kHarvestTimeFieldNumber;
#endif  // !_MSC_VER

CropLandCPP::CropLandCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.CropLandCPP)
}

void CropLandCPP::InitAsDefaultInstance() {
}

CropLandCPP::CropLandCPP(const CropLandCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.CropLandCPP)
}

void CropLandCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  plant_ = 0u;
  status_ = 0u;
  harvesttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CropLandCPP::~CropLandCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.CropLandCPP)
  SharedDtor();
}

void CropLandCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CropLandCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CropLandCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CropLandCPP_descriptor_;
}

const CropLandCPP& CropLandCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

CropLandCPP* CropLandCPP::default_instance_ = NULL;

CropLandCPP* CropLandCPP::New() const {
  return new CropLandCPP;
}

void CropLandCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CropLandCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ud_, harvesttime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CropLandCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.CropLandCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plant;
        break;
      }

      // required uint32 plant = 2;
      case 2: {
        if (tag == 16) {
         parse_plant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plant_)));
          set_has_plant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required uint32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_harvestTime;
        break;
      }

      // required uint32 harvestTime = 4;
      case 4: {
        if (tag == 32) {
         parse_harvestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harvesttime_)));
          set_has_harvesttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.CropLandCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.CropLandCPP)
  return false;
#undef DO_
}

void CropLandCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.CropLandCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 plant = 2;
  if (has_plant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->plant(), output);
  }

  // required uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // required uint32 harvestTime = 4;
  if (has_harvesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->harvesttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.CropLandCPP)
}

::google::protobuf::uint8* CropLandCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.CropLandCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 plant = 2;
  if (has_plant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->plant(), target);
  }

  // required uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // required uint32 harvestTime = 4;
  if (has_harvesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->harvesttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.CropLandCPP)
  return target;
}

int CropLandCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 plant = 2;
    if (has_plant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plant());
    }

    // required uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 harvestTime = 4;
    if (has_harvesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harvesttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CropLandCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CropLandCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CropLandCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CropLandCPP::MergeFrom(const CropLandCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_plant()) {
      set_plant(from.plant());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_harvesttime()) {
      set_harvesttime(from.harvesttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CropLandCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CropLandCPP::CopyFrom(const CropLandCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropLandCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CropLandCPP::Swap(CropLandCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(plant_, other->plant_);
    std::swap(status_, other->status_);
    std::swap(harvesttime_, other->harvesttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CropLandCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CropLandCPP_descriptor_;
  metadata.reflection = CropLandCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProduceEquipCPP::kUdFieldNumber;
const int ProduceEquipCPP::kStatusFieldNumber;
const int ProduceEquipCPP::kQueuenumFieldNumber;
const int ProduceEquipCPP::kQueuedataFieldNumber;
const int ProduceEquipCPP::kShelfdataFieldNumber;
const int ProduceEquipCPP::kFinishtimeFieldNumber;
const int ProduceEquipCPP::kShelfsourceFieldNumber;
const int ProduceEquipCPP::kKeeperFieldNumber;
#endif  // !_MSC_VER

ProduceEquipCPP::ProduceEquipCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.ProduceEquipCPP)
}

void ProduceEquipCPP::InitAsDefaultInstance() {
}

ProduceEquipCPP::ProduceEquipCPP(const ProduceEquipCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.ProduceEquipCPP)
}

void ProduceEquipCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  status_ = 0u;
  queuenum_ = 0u;
  finishtime_ = 0u;
  keeper_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProduceEquipCPP::~ProduceEquipCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.ProduceEquipCPP)
  SharedDtor();
}

void ProduceEquipCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProduceEquipCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProduceEquipCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProduceEquipCPP_descriptor_;
}

const ProduceEquipCPP& ProduceEquipCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

ProduceEquipCPP* ProduceEquipCPP::default_instance_ = NULL;

ProduceEquipCPP* ProduceEquipCPP::New() const {
  return new ProduceEquipCPP;
}

void ProduceEquipCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProduceEquipCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 167) {
    ZR_(ud_, status_);
    ZR_(queuenum_, finishtime_);
    keeper_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  queuedata_.Clear();
  shelfdata_.Clear();
  shelfsource_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProduceEquipCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.ProduceEquipCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_queuenum;
        break;
      }

      // required uint32 queuenum = 3;
      case 3: {
        if (tag == 24) {
         parse_queuenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queuenum_)));
          set_has_queuenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_queuedata;
        break;
      }

      // repeated uint32 queuedata = 4;
      case 4: {
        if (tag == 32) {
         parse_queuedata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_queuedata())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_queuedata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_queuedata;
        if (input->ExpectTag(40)) goto parse_shelfdata;
        break;
      }

      // repeated uint32 shelfdata = 5;
      case 5: {
        if (tag == 40) {
         parse_shelfdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_shelfdata())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shelfdata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_shelfdata;
        if (input->ExpectTag(48)) goto parse_finishtime;
        break;
      }

      // required uint32 finishtime = 6;
      case 6: {
        if (tag == 48) {
         parse_finishtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_shelfsource;
        break;
      }

      // repeated uint32 shelfsource = 7;
      case 7: {
        if (tag == 56) {
         parse_shelfsource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_shelfsource())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shelfsource())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_shelfsource;
        if (input->ExpectTag(64)) goto parse_keeper;
        break;
      }

      // optional uint32 keeper = 8;
      case 8: {
        if (tag == 64) {
         parse_keeper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keeper_)));
          set_has_keeper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.ProduceEquipCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.ProduceEquipCPP)
  return false;
#undef DO_
}

void ProduceEquipCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.ProduceEquipCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // required uint32 queuenum = 3;
  if (has_queuenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->queuenum(), output);
  }

  // repeated uint32 queuedata = 4;
  for (int i = 0; i < this->queuedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->queuedata(i), output);
  }

  // repeated uint32 shelfdata = 5;
  for (int i = 0; i < this->shelfdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->shelfdata(i), output);
  }

  // required uint32 finishtime = 6;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->finishtime(), output);
  }

  // repeated uint32 shelfsource = 7;
  for (int i = 0; i < this->shelfsource_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->shelfsource(i), output);
  }

  // optional uint32 keeper = 8;
  if (has_keeper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->keeper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.ProduceEquipCPP)
}

::google::protobuf::uint8* ProduceEquipCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.ProduceEquipCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // required uint32 queuenum = 3;
  if (has_queuenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->queuenum(), target);
  }

  // repeated uint32 queuedata = 4;
  for (int i = 0; i < this->queuedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->queuedata(i), target);
  }

  // repeated uint32 shelfdata = 5;
  for (int i = 0; i < this->shelfdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->shelfdata(i), target);
  }

  // required uint32 finishtime = 6;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->finishtime(), target);
  }

  // repeated uint32 shelfsource = 7;
  for (int i = 0; i < this->shelfsource_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->shelfsource(i), target);
  }

  // optional uint32 keeper = 8;
  if (has_keeper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->keeper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.ProduceEquipCPP)
  return target;
}

int ProduceEquipCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 queuenum = 3;
    if (has_queuenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queuenum());
    }

    // required uint32 finishtime = 6;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishtime());
    }

    // optional uint32 keeper = 8;
    if (has_keeper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keeper());
    }

  }
  // repeated uint32 queuedata = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->queuedata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->queuedata(i));
    }
    total_size += 1 * this->queuedata_size() + data_size;
  }

  // repeated uint32 shelfdata = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->shelfdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shelfdata(i));
    }
    total_size += 1 * this->shelfdata_size() + data_size;
  }

  // repeated uint32 shelfsource = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->shelfsource_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shelfsource(i));
    }
    total_size += 1 * this->shelfsource_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProduceEquipCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProduceEquipCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProduceEquipCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProduceEquipCPP::MergeFrom(const ProduceEquipCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  queuedata_.MergeFrom(from.queuedata_);
  shelfdata_.MergeFrom(from.shelfdata_);
  shelfsource_.MergeFrom(from.shelfsource_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_queuenum()) {
      set_queuenum(from.queuenum());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_keeper()) {
      set_keeper(from.keeper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProduceEquipCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProduceEquipCPP::CopyFrom(const ProduceEquipCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProduceEquipCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  return true;
}

void ProduceEquipCPP::Swap(ProduceEquipCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(status_, other->status_);
    std::swap(queuenum_, other->queuenum_);
    queuedata_.Swap(&other->queuedata_);
    shelfdata_.Swap(&other->shelfdata_);
    std::swap(finishtime_, other->finishtime_);
    shelfsource_.Swap(&other->shelfsource_);
    std::swap(keeper_, other->keeper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProduceEquipCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProduceEquipCPP_descriptor_;
  metadata.reflection = ProduceEquipCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FruitCPP::kUdFieldNumber;
const int FruitCPP::kTreeidFieldNumber;
const int FruitCPP::kStatusFieldNumber;
const int FruitCPP::kStageFieldNumber;
const int FruitCPP::kFruitLeftNumFieldNumber;
const int FruitCPP::kHarvestTimeFieldNumber;
const int FruitCPP::kNameFieldNumber;
const int FruitCPP::kFigFieldNumber;
#endif  // !_MSC_VER

FruitCPP::FruitCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.FruitCPP)
}

void FruitCPP::InitAsDefaultInstance() {
}

FruitCPP::FruitCPP(const FruitCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.FruitCPP)
}

void FruitCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ud_ = 0u;
  treeid_ = 0u;
  status_ = 0u;
  stage_ = 0u;
  fruitleftnum_ = 0u;
  harvesttime_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FruitCPP::~FruitCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.FruitCPP)
  SharedDtor();
}

void FruitCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (this != default_instance_) {
  }
}

void FruitCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FruitCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FruitCPP_descriptor_;
}

const FruitCPP& FruitCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

FruitCPP* FruitCPP::default_instance_ = NULL;

FruitCPP* FruitCPP::New() const {
  return new FruitCPP;
}

void FruitCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FruitCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ud_, harvesttime_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FruitCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.FruitCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_treeid;
        break;
      }

      // required uint32 treeid = 2;
      case 2: {
        if (tag == 16) {
         parse_treeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &treeid_)));
          set_has_treeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required uint32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stage;
        break;
      }

      // required uint32 stage = 4;
      case 4: {
        if (tag == 32) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fruitLeftNum;
        break;
      }

      // required uint32 fruitLeftNum = 5;
      case 5: {
        if (tag == 40) {
         parse_fruitLeftNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fruitleftnum_)));
          set_has_fruitleftnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_harvestTime;
        break;
      }

      // required uint32 harvestTime = 6;
      case 6: {
        if (tag == 48) {
         parse_harvestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harvesttime_)));
          set_has_harvesttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional bytes name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fig;
        break;
      }

      // optional bytes fig = 8;
      case 8: {
        if (tag == 66) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.FruitCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.FruitCPP)
  return false;
#undef DO_
}

void FruitCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.FruitCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 treeid = 2;
  if (has_treeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->treeid(), output);
  }

  // required uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // required uint32 stage = 4;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stage(), output);
  }

  // required uint32 fruitLeftNum = 5;
  if (has_fruitleftnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fruitleftnum(), output);
  }

  // required uint32 harvestTime = 6;
  if (has_harvesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->harvesttime(), output);
  }

  // optional bytes name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->name(), output);
  }

  // optional bytes fig = 8;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->fig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.FruitCPP)
}

::google::protobuf::uint8* FruitCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.FruitCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 treeid = 2;
  if (has_treeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->treeid(), target);
  }

  // required uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // required uint32 stage = 4;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stage(), target);
  }

  // required uint32 fruitLeftNum = 5;
  if (has_fruitleftnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fruitleftnum(), target);
  }

  // required uint32 harvestTime = 6;
  if (has_harvesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->harvesttime(), target);
  }

  // optional bytes name = 7;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->name(), target);
  }

  // optional bytes fig = 8;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->fig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.FruitCPP)
  return target;
}

int FruitCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 treeid = 2;
    if (has_treeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->treeid());
    }

    // required uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 stage = 4;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

    // required uint32 fruitLeftNum = 5;
    if (has_fruitleftnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fruitleftnum());
    }

    // required uint32 harvestTime = 6;
    if (has_harvesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harvesttime());
    }

    // optional bytes name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes fig = 8;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FruitCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FruitCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FruitCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FruitCPP::MergeFrom(const FruitCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_treeid()) {
      set_treeid(from.treeid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_fruitleftnum()) {
      set_fruitleftnum(from.fruitleftnum());
    }
    if (from.has_harvesttime()) {
      set_harvesttime(from.harvesttime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FruitCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FruitCPP::CopyFrom(const FruitCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FruitCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FruitCPP::Swap(FruitCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(treeid_, other->treeid_);
    std::swap(status_, other->status_);
    std::swap(stage_, other->stage_);
    std::swap(fruitleftnum_, other->fruitleftnum_);
    std::swap(harvesttime_, other->harvesttime_);
    std::swap(name_, other->name_);
    std::swap(fig_, other->fig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FruitCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FruitCPP_descriptor_;
  metadata.reflection = FruitCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnimalCPP::kUdFieldNumber;
const int AnimalCPP::kResidenceUdFieldNumber;
const int AnimalCPP::kAnimalIdFieldNumber;
const int AnimalCPP::kStatusFieldNumber;
const int AnimalCPP::kFullTimeFieldNumber;
const int AnimalCPP::kKeeperFieldNumber;
#endif  // !_MSC_VER

AnimalCPP::AnimalCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.AnimalCPP)
}

void AnimalCPP::InitAsDefaultInstance() {
}

AnimalCPP::AnimalCPP(const AnimalCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.AnimalCPP)
}

void AnimalCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  residenceud_ = 0u;
  animalid_ = 0u;
  status_ = 0u;
  fulltime_ = 0u;
  keeper_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnimalCPP::~AnimalCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.AnimalCPP)
  SharedDtor();
}

void AnimalCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnimalCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnimalCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnimalCPP_descriptor_;
}

const AnimalCPP& AnimalCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

AnimalCPP* AnimalCPP::default_instance_ = NULL;

AnimalCPP* AnimalCPP::New() const {
  return new AnimalCPP;
}

void AnimalCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AnimalCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ud_, keeper_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnimalCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.AnimalCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_residenceUd;
        break;
      }

      // required uint32 residenceUd = 2;
      case 2: {
        if (tag == 16) {
         parse_residenceUd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &residenceud_)));
          set_has_residenceud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_animalId;
        break;
      }

      // required uint32 animalId = 3;
      case 3: {
        if (tag == 24) {
         parse_animalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &animalid_)));
          set_has_animalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required uint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fullTime;
        break;
      }

      // required uint32 fullTime = 5;
      case 5: {
        if (tag == 40) {
         parse_fullTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fulltime_)));
          set_has_fulltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_keeper;
        break;
      }

      // optional uint32 keeper = 6;
      case 6: {
        if (tag == 48) {
         parse_keeper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keeper_)));
          set_has_keeper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.AnimalCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.AnimalCPP)
  return false;
#undef DO_
}

void AnimalCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.AnimalCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 residenceUd = 2;
  if (has_residenceud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->residenceud(), output);
  }

  // required uint32 animalId = 3;
  if (has_animalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->animalid(), output);
  }

  // required uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // required uint32 fullTime = 5;
  if (has_fulltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fulltime(), output);
  }

  // optional uint32 keeper = 6;
  if (has_keeper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->keeper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.AnimalCPP)
}

::google::protobuf::uint8* AnimalCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.AnimalCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 residenceUd = 2;
  if (has_residenceud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->residenceud(), target);
  }

  // required uint32 animalId = 3;
  if (has_animalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->animalid(), target);
  }

  // required uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // required uint32 fullTime = 5;
  if (has_fulltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fulltime(), target);
  }

  // optional uint32 keeper = 6;
  if (has_keeper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->keeper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.AnimalCPP)
  return target;
}

int AnimalCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 residenceUd = 2;
    if (has_residenceud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->residenceud());
    }

    // required uint32 animalId = 3;
    if (has_animalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->animalid());
    }

    // required uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 fullTime = 5;
    if (has_fulltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fulltime());
    }

    // optional uint32 keeper = 6;
    if (has_keeper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keeper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnimalCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnimalCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnimalCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnimalCPP::MergeFrom(const AnimalCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_residenceud()) {
      set_residenceud(from.residenceud());
    }
    if (from.has_animalid()) {
      set_animalid(from.animalid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_fulltime()) {
      set_fulltime(from.fulltime());
    }
    if (from.has_keeper()) {
      set_keeper(from.keeper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnimalCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimalCPP::CopyFrom(const AnimalCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimalCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AnimalCPP::Swap(AnimalCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(residenceud_, other->residenceud_);
    std::swap(animalid_, other->animalid_);
    std::swap(status_, other->status_);
    std::swap(fulltime_, other->fulltime_);
    std::swap(keeper_, other->keeper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnimalCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnimalCPP_descriptor_;
  metadata.reflection = AnimalCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderCPP::kSlotFieldNumber;
const int OrderCPP::kStorageidFieldNumber;
const int OrderCPP::kLevelidFieldNumber;
const int OrderCPP::kOrderidFieldNumber;
const int OrderCPP::kCoinFieldNumber;
const int OrderCPP::kExpFieldNumber;
const int OrderCPP::kEndTsFieldNumber;
#endif  // !_MSC_VER

OrderCPP::OrderCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.OrderCPP)
}

void OrderCPP::InitAsDefaultInstance() {
}

OrderCPP::OrderCPP(const OrderCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.OrderCPP)
}

void OrderCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  slot_ = 0u;
  storageid_ = 0u;
  levelid_ = 0u;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_ = 0u;
  exp_ = 0u;
  end_ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderCPP::~OrderCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.OrderCPP)
  SharedDtor();
}

void OrderCPP::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orderid_;
  }
  if (this != default_instance_) {
  }
}

void OrderCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderCPP_descriptor_;
}

const OrderCPP& OrderCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

OrderCPP* OrderCPP::default_instance_ = NULL;

OrderCPP* OrderCPP::New() const {
  return new OrderCPP;
}

void OrderCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(slot_, storageid_);
    ZR_(levelid_, end_ts_);
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orderid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.OrderCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_storageid;
        break;
      }

      // required uint32 storageid = 2;
      case 2: {
        if (tag == 16) {
         parse_storageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storageid_)));
          set_has_storageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_levelid;
        break;
      }

      // required uint32 levelid = 3;
      case 3: {
        if (tag == 24) {
         parse_levelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_orderid;
        break;
      }

      // required bytes orderid = 4;
      case 4: {
        if (tag == 34) {
         parse_orderid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_orderid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_coin;
        break;
      }

      // required uint32 coin = 5;
      case 5: {
        if (tag == 40) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // required uint32 exp = 6;
      case 6: {
        if (tag == 48) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_end_ts;
        break;
      }

      // required uint32 end_ts = 7;
      case 7: {
        if (tag == 56) {
         parse_end_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_ts_)));
          set_has_end_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.OrderCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.OrderCPP)
  return false;
#undef DO_
}

void OrderCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.OrderCPP)
  // required uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // required uint32 storageid = 2;
  if (has_storageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->storageid(), output);
  }

  // required uint32 levelid = 3;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->levelid(), output);
  }

  // required bytes orderid = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->orderid(), output);
  }

  // required uint32 coin = 5;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->coin(), output);
  }

  // required uint32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp(), output);
  }

  // required uint32 end_ts = 7;
  if (has_end_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->end_ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.OrderCPP)
}

::google::protobuf::uint8* OrderCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.OrderCPP)
  // required uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // required uint32 storageid = 2;
  if (has_storageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->storageid(), target);
  }

  // required uint32 levelid = 3;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->levelid(), target);
  }

  // required bytes orderid = 4;
  if (has_orderid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->orderid(), target);
  }

  // required uint32 coin = 5;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->coin(), target);
  }

  // required uint32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->exp(), target);
  }

  // required uint32 end_ts = 7;
  if (has_end_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->end_ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.OrderCPP)
  return target;
}

int OrderCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // required uint32 storageid = 2;
    if (has_storageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storageid());
    }

    // required uint32 levelid = 3;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

    // required bytes orderid = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->orderid());
    }

    // required uint32 coin = 5;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 end_ts = 7;
    if (has_end_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderCPP::MergeFrom(const OrderCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_storageid()) {
      set_storageid(from.storageid());
    }
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_end_ts()) {
      set_end_ts(from.end_ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCPP::CopyFrom(const OrderCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void OrderCPP::Swap(OrderCPP* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(storageid_, other->storageid_);
    std::swap(levelid_, other->levelid_);
    std::swap(orderid_, other->orderid_);
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(end_ts_, other->end_ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderCPP_descriptor_;
  metadata.reflection = OrderCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TruckCPP::kStateFieldNumber;
const int TruckCPP::kEndTsFieldNumber;
const int TruckCPP::kCoinFieldNumber;
const int TruckCPP::kExpFieldNumber;
#endif  // !_MSC_VER

TruckCPP::TruckCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.TruckCPP)
}

void TruckCPP::InitAsDefaultInstance() {
}

TruckCPP::TruckCPP(const TruckCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.TruckCPP)
}

void TruckCPP::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  end_ts_ = 0u;
  coin_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TruckCPP::~TruckCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.TruckCPP)
  SharedDtor();
}

void TruckCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TruckCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruckCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruckCPP_descriptor_;
}

const TruckCPP& TruckCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

TruckCPP* TruckCPP::default_instance_ = NULL;

TruckCPP* TruckCPP::New() const {
  return new TruckCPP;
}

void TruckCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TruckCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, exp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TruckCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.TruckCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_ts;
        break;
      }

      // required uint32 end_ts = 2;
      case 2: {
        if (tag == 16) {
         parse_end_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_ts_)));
          set_has_end_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // required uint32 coin = 3;
      case 3: {
        if (tag == 24) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint32 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.TruckCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.TruckCPP)
  return false;
#undef DO_
}

void TruckCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.TruckCPP)
  // required uint32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  // required uint32 end_ts = 2;
  if (has_end_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end_ts(), output);
  }

  // required uint32 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coin(), output);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.TruckCPP)
}

::google::protobuf::uint8* TruckCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.TruckCPP)
  // required uint32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  // required uint32 end_ts = 2;
  if (has_end_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end_ts(), target);
  }

  // required uint32 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coin(), target);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.TruckCPP)
  return target;
}

int TruckCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // required uint32 end_ts = 2;
    if (has_end_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_ts());
    }

    // required uint32 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruckCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TruckCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TruckCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TruckCPP::MergeFrom(const TruckCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_end_ts()) {
      set_end_ts(from.end_ts());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TruckCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruckCPP::CopyFrom(const TruckCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruckCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TruckCPP::Swap(TruckCPP* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(end_ts_, other->end_ts_);
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TruckCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TruckCPP_descriptor_;
  metadata.reflection = TruckCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShippingCPP::kBadgeFieldNumber;
const int ShippingCPP::kUnlockEndtsFieldNumber;
const int ShippingCPP::kArriveTsFieldNumber;
const int ShippingCPP::kPublicAidTimesFieldNumber;
const int ShippingCPP::kCommercialAidTimesFieldNumber;
const int ShippingCPP::kStatusFieldNumber;
const int ShippingCPP::kPlayStatusFieldNumber;
const int ShippingCPP::kViewAdPackCntFieldNumber;
#endif  // !_MSC_VER

ShippingCPP::ShippingCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.ShippingCPP)
}

void ShippingCPP::InitAsDefaultInstance() {
}

ShippingCPP::ShippingCPP(const ShippingCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.ShippingCPP)
}

void ShippingCPP::SharedCtor() {
  _cached_size_ = 0;
  badge_ = 0u;
  unlockendts_ = 0u;
  arrivets_ = 0u;
  publicaidtimes_ = 0u;
  commercialaidtimes_ = 0u;
  status_ = 0u;
  playstatus_ = 0u;
  viewadpackcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShippingCPP::~ShippingCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.ShippingCPP)
  SharedDtor();
}

void ShippingCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShippingCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShippingCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShippingCPP_descriptor_;
}

const ShippingCPP& ShippingCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

ShippingCPP* ShippingCPP::default_instance_ = NULL;

ShippingCPP* ShippingCPP::New() const {
  return new ShippingCPP;
}

void ShippingCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShippingCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(badge_, viewadpackcnt_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShippingCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.ShippingCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 badge = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_)));
          set_has_badge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unlockEndts;
        break;
      }

      // required uint32 unlockEndts = 2;
      case 2: {
        if (tag == 16) {
         parse_unlockEndts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlockendts_)));
          set_has_unlockendts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_arriveTs;
        break;
      }

      // required uint32 arriveTs = 3;
      case 3: {
        if (tag == 24) {
         parse_arriveTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arrivets_)));
          set_has_arrivets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_publicAidTimes;
        break;
      }

      // required uint32 publicAidTimes = 4;
      case 4: {
        if (tag == 32) {
         parse_publicAidTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publicaidtimes_)));
          set_has_publicaidtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_commercialAidTimes;
        break;
      }

      // required uint32 commercialAidTimes = 5;
      case 5: {
        if (tag == 40) {
         parse_commercialAidTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commercialaidtimes_)));
          set_has_commercialaidtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required uint32 status = 6;
      case 6: {
        if (tag == 48) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_playStatus;
        break;
      }

      // required uint32 playStatus = 7;
      case 7: {
        if (tag == 56) {
         parse_playStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playstatus_)));
          set_has_playstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_viewAdPackCnt;
        break;
      }

      // required uint32 viewAdPackCnt = 8;
      case 8: {
        if (tag == 64) {
         parse_viewAdPackCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewadpackcnt_)));
          set_has_viewadpackcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.ShippingCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.ShippingCPP)
  return false;
#undef DO_
}

void ShippingCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.ShippingCPP)
  // required uint32 badge = 1;
  if (has_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->badge(), output);
  }

  // required uint32 unlockEndts = 2;
  if (has_unlockendts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unlockendts(), output);
  }

  // required uint32 arriveTs = 3;
  if (has_arrivets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->arrivets(), output);
  }

  // required uint32 publicAidTimes = 4;
  if (has_publicaidtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->publicaidtimes(), output);
  }

  // required uint32 commercialAidTimes = 5;
  if (has_commercialaidtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->commercialaidtimes(), output);
  }

  // required uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  // required uint32 playStatus = 7;
  if (has_playstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->playstatus(), output);
  }

  // required uint32 viewAdPackCnt = 8;
  if (has_viewadpackcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->viewadpackcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.ShippingCPP)
}

::google::protobuf::uint8* ShippingCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.ShippingCPP)
  // required uint32 badge = 1;
  if (has_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->badge(), target);
  }

  // required uint32 unlockEndts = 2;
  if (has_unlockendts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unlockendts(), target);
  }

  // required uint32 arriveTs = 3;
  if (has_arrivets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->arrivets(), target);
  }

  // required uint32 publicAidTimes = 4;
  if (has_publicaidtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->publicaidtimes(), target);
  }

  // required uint32 commercialAidTimes = 5;
  if (has_commercialaidtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->commercialaidtimes(), target);
  }

  // required uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  // required uint32 playStatus = 7;
  if (has_playstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->playstatus(), target);
  }

  // required uint32 viewAdPackCnt = 8;
  if (has_viewadpackcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->viewadpackcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.ShippingCPP)
  return target;
}

int ShippingCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 badge = 1;
    if (has_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge());
    }

    // required uint32 unlockEndts = 2;
    if (has_unlockendts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlockendts());
    }

    // required uint32 arriveTs = 3;
    if (has_arrivets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arrivets());
    }

    // required uint32 publicAidTimes = 4;
    if (has_publicaidtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publicaidtimes());
    }

    // required uint32 commercialAidTimes = 5;
    if (has_commercialaidtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commercialaidtimes());
    }

    // required uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 playStatus = 7;
    if (has_playstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playstatus());
    }

    // required uint32 viewAdPackCnt = 8;
    if (has_viewadpackcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewadpackcnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShippingCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShippingCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShippingCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShippingCPP::MergeFrom(const ShippingCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_badge()) {
      set_badge(from.badge());
    }
    if (from.has_unlockendts()) {
      set_unlockendts(from.unlockendts());
    }
    if (from.has_arrivets()) {
      set_arrivets(from.arrivets());
    }
    if (from.has_publicaidtimes()) {
      set_publicaidtimes(from.publicaidtimes());
    }
    if (from.has_commercialaidtimes()) {
      set_commercialaidtimes(from.commercialaidtimes());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_playstatus()) {
      set_playstatus(from.playstatus());
    }
    if (from.has_viewadpackcnt()) {
      set_viewadpackcnt(from.viewadpackcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShippingCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShippingCPP::CopyFrom(const ShippingCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShippingCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void ShippingCPP::Swap(ShippingCPP* other) {
  if (other != this) {
    std::swap(badge_, other->badge_);
    std::swap(unlockendts_, other->unlockendts_);
    std::swap(arrivets_, other->arrivets_);
    std::swap(publicaidtimes_, other->publicaidtimes_);
    std::swap(commercialaidtimes_, other->commercialaidtimes_);
    std::swap(status_, other->status_);
    std::swap(playstatus_, other->playstatus_);
    std::swap(viewadpackcnt_, other->viewadpackcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShippingCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShippingCPP_descriptor_;
  metadata.reflection = ShippingCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShippingBoxCPP::kBoxidFieldNumber;
const int ShippingBoxCPP::kPropsidFieldNumber;
const int ShippingBoxCPP::kCountFieldNumber;
const int ShippingBoxCPP::kAidStatusFieldNumber;
const int ShippingBoxCPP::kStatusFieldNumber;
const int ShippingBoxCPP::kCoinFieldNumber;
const int ShippingBoxCPP::kExpFieldNumber;
const int ShippingBoxCPP::kFigFieldNumber;
const int ShippingBoxCPP::kNameFieldNumber;
#endif  // !_MSC_VER

ShippingBoxCPP::ShippingBoxCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.ShippingBoxCPP)
}

void ShippingBoxCPP::InitAsDefaultInstance() {
}

ShippingBoxCPP::ShippingBoxCPP(const ShippingBoxCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.ShippingBoxCPP)
}

void ShippingBoxCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  boxid_ = 0u;
  propsid_ = 0u;
  count_ = 0u;
  aidstatus_ = 0u;
  status_ = 0u;
  coin_ = 0u;
  exp_ = 0u;
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShippingBoxCPP::~ShippingBoxCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.ShippingBoxCPP)
  SharedDtor();
}

void ShippingBoxCPP::SharedDtor() {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ShippingBoxCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShippingBoxCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShippingBoxCPP_descriptor_;
}

const ShippingBoxCPP& ShippingBoxCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

ShippingBoxCPP* ShippingBoxCPP::default_instance_ = NULL;

ShippingBoxCPP* ShippingBoxCPP::New() const {
  return new ShippingBoxCPP;
}

void ShippingBoxCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShippingBoxCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(boxid_, coin_);
    exp_ = 0u;
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
  }
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShippingBoxCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.ShippingBoxCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 boxid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsid;
        break;
      }

      // required uint32 propsid = 2;
      case 2: {
        if (tag == 16) {
         parse_propsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_aidStatus;
        break;
      }

      // required uint32 aidStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_aidStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aidstatus_)));
          set_has_aidstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required uint32 status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_coin;
        break;
      }

      // required uint32 coin = 6;
      case 6: {
        if (tag == 48) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // required uint32 exp = 7;
      case 7: {
        if (tag == 56) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fig;
        break;
      }

      // optional bytes fig = 8;
      case 8: {
        if (tag == 66) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }

      // optional bytes name = 9;
      case 9: {
        if (tag == 74) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.ShippingBoxCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.ShippingBoxCPP)
  return false;
#undef DO_
}

void ShippingBoxCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.ShippingBoxCPP)
  // required uint32 boxid = 1;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->boxid(), output);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propsid(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required uint32 aidStatus = 4;
  if (has_aidstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->aidstatus(), output);
  }

  // required uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  // required uint32 coin = 6;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->coin(), output);
  }

  // required uint32 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->exp(), output);
  }

  // optional bytes fig = 8;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->fig(), output);
  }

  // optional bytes name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.ShippingBoxCPP)
}

::google::protobuf::uint8* ShippingBoxCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.ShippingBoxCPP)
  // required uint32 boxid = 1;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->boxid(), target);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propsid(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required uint32 aidStatus = 4;
  if (has_aidstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->aidstatus(), target);
  }

  // required uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  // required uint32 coin = 6;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->coin(), target);
  }

  // required uint32 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->exp(), target);
  }

  // optional bytes fig = 8;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->fig(), target);
  }

  // optional bytes name = 9;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.ShippingBoxCPP)
  return target;
}

int ShippingBoxCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 boxid = 1;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

    // required uint32 propsid = 2;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 aidStatus = 4;
    if (has_aidstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aidstatus());
    }

    // required uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 coin = 6;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional bytes fig = 8;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShippingBoxCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShippingBoxCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShippingBoxCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShippingBoxCPP::MergeFrom(const ShippingBoxCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_aidstatus()) {
      set_aidstatus(from.aidstatus());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShippingBoxCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShippingBoxCPP::CopyFrom(const ShippingBoxCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShippingBoxCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ShippingBoxCPP::Swap(ShippingBoxCPP* other) {
  if (other != this) {
    std::swap(boxid_, other->boxid_);
    std::swap(propsid_, other->propsid_);
    std::swap(count_, other->count_);
    std::swap(aidstatus_, other->aidstatus_);
    std::swap(status_, other->status_);
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(fig_, other->fig_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShippingBoxCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShippingBoxCPP_descriptor_;
  metadata.reflection = ShippingBoxCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopCPP::kUdFieldNumber;
const int ShopCPP::kPropsidFieldNumber;
const int ShopCPP::kPropscntFieldNumber;
const int ShopCPP::kPropspriceFieldNumber;
const int ShopCPP::kAdflagFieldNumber;
const int ShopCPP::kSellflagFieldNumber;
const int ShopCPP::kBuyerfigFieldNumber;
const int ShopCPP::kBuyernameFieldNumber;
const int ShopCPP::kVipshelfflagFieldNumber;
const int ShopCPP::kBuyeruidFieldNumber;
#endif  // !_MSC_VER

ShopCPP::ShopCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.ShopCPP)
}

void ShopCPP::InitAsDefaultInstance() {
}

ShopCPP::ShopCPP(const ShopCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.ShopCPP)
}

void ShopCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ud_ = 0u;
  propsid_ = 0u;
  propscnt_ = 0u;
  propsprice_ = 0u;
  adflag_ = 0u;
  sellflag_ = 0u;
  buyerfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vipshelfflag_ = 0u;
  buyeruid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopCPP::~ShopCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.ShopCPP)
  SharedDtor();
}

void ShopCPP::SharedDtor() {
  if (buyerfig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyerfig_;
  }
  if (buyername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyername_;
  }
  if (this != default_instance_) {
  }
}

void ShopCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopCPP_descriptor_;
}

const ShopCPP& ShopCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

ShopCPP* ShopCPP::default_instance_ = NULL;

ShopCPP* ShopCPP::New() const {
  return new ShopCPP;
}

void ShopCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ud_, sellflag_);
    if (has_buyerfig()) {
      if (buyerfig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buyerfig_->clear();
      }
    }
    if (has_buyername()) {
      if (buyername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buyername_->clear();
      }
    }
  }
  ZR_(vipshelfflag_, buyeruid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.ShopCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_propsid;
        break;
      }

      // required uint32 propsid = 2;
      case 2: {
        if (tag == 16) {
         parse_propsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_propscnt;
        break;
      }

      // required uint32 propscnt = 3;
      case 3: {
        if (tag == 24) {
         parse_propscnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propscnt_)));
          set_has_propscnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_propsprice;
        break;
      }

      // required uint32 propsprice = 4;
      case 4: {
        if (tag == 32) {
         parse_propsprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsprice_)));
          set_has_propsprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_adflag;
        break;
      }

      // required uint32 adflag = 5;
      case 5: {
        if (tag == 40) {
         parse_adflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adflag_)));
          set_has_adflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sellflag;
        break;
      }

      // required uint32 sellflag = 6;
      case 6: {
        if (tag == 48) {
         parse_sellflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sellflag_)));
          set_has_sellflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_buyerfig;
        break;
      }

      // optional bytes buyerfig = 7;
      case 7: {
        if (tag == 58) {
         parse_buyerfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buyerfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_buyername;
        break;
      }

      // optional bytes buyername = 8;
      case 8: {
        if (tag == 66) {
         parse_buyername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buyername()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_vipshelfflag;
        break;
      }

      // required uint32 vipshelfflag = 9;
      case 9: {
        if (tag == 72) {
         parse_vipshelfflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipshelfflag_)));
          set_has_vipshelfflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_buyeruid;
        break;
      }

      // optional uint32 buyeruid = 10;
      case 10: {
        if (tag == 80) {
         parse_buyeruid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyeruid_)));
          set_has_buyeruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.ShopCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.ShopCPP)
  return false;
#undef DO_
}

void ShopCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.ShopCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propsid(), output);
  }

  // required uint32 propscnt = 3;
  if (has_propscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->propscnt(), output);
  }

  // required uint32 propsprice = 4;
  if (has_propsprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->propsprice(), output);
  }

  // required uint32 adflag = 5;
  if (has_adflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->adflag(), output);
  }

  // required uint32 sellflag = 6;
  if (has_sellflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sellflag(), output);
  }

  // optional bytes buyerfig = 7;
  if (has_buyerfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->buyerfig(), output);
  }

  // optional bytes buyername = 8;
  if (has_buyername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->buyername(), output);
  }

  // required uint32 vipshelfflag = 9;
  if (has_vipshelfflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->vipshelfflag(), output);
  }

  // optional uint32 buyeruid = 10;
  if (has_buyeruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->buyeruid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.ShopCPP)
}

::google::protobuf::uint8* ShopCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.ShopCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 propsid = 2;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propsid(), target);
  }

  // required uint32 propscnt = 3;
  if (has_propscnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->propscnt(), target);
  }

  // required uint32 propsprice = 4;
  if (has_propsprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->propsprice(), target);
  }

  // required uint32 adflag = 5;
  if (has_adflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->adflag(), target);
  }

  // required uint32 sellflag = 6;
  if (has_sellflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sellflag(), target);
  }

  // optional bytes buyerfig = 7;
  if (has_buyerfig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->buyerfig(), target);
  }

  // optional bytes buyername = 8;
  if (has_buyername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->buyername(), target);
  }

  // required uint32 vipshelfflag = 9;
  if (has_vipshelfflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->vipshelfflag(), target);
  }

  // optional uint32 buyeruid = 10;
  if (has_buyeruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->buyeruid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.ShopCPP)
  return target;
}

int ShopCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 propsid = 2;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 propscnt = 3;
    if (has_propscnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propscnt());
    }

    // required uint32 propsprice = 4;
    if (has_propsprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsprice());
    }

    // required uint32 adflag = 5;
    if (has_adflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adflag());
    }

    // required uint32 sellflag = 6;
    if (has_sellflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sellflag());
    }

    // optional bytes buyerfig = 7;
    if (has_buyerfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buyerfig());
    }

    // optional bytes buyername = 8;
    if (has_buyername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buyername());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 vipshelfflag = 9;
    if (has_vipshelfflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipshelfflag());
    }

    // optional uint32 buyeruid = 10;
    if (has_buyeruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyeruid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopCPP::MergeFrom(const ShopCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_propscnt()) {
      set_propscnt(from.propscnt());
    }
    if (from.has_propsprice()) {
      set_propsprice(from.propsprice());
    }
    if (from.has_adflag()) {
      set_adflag(from.adflag());
    }
    if (from.has_sellflag()) {
      set_sellflag(from.sellflag());
    }
    if (from.has_buyerfig()) {
      set_buyerfig(from.buyerfig());
    }
    if (from.has_buyername()) {
      set_buyername(from.buyername());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vipshelfflag()) {
      set_vipshelfflag(from.vipshelfflag());
    }
    if (from.has_buyeruid()) {
      set_buyeruid(from.buyeruid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopCPP::CopyFrom(const ShopCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000013f) != 0x0000013f) return false;

  return true;
}

void ShopCPP::Swap(ShopCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(propsid_, other->propsid_);
    std::swap(propscnt_, other->propscnt_);
    std::swap(propsprice_, other->propsprice_);
    std::swap(adflag_, other->adflag_);
    std::swap(sellflag_, other->sellflag_);
    std::swap(buyerfig_, other->buyerfig_);
    std::swap(buyername_, other->buyername_);
    std::swap(vipshelfflag_, other->vipshelfflag_);
    std::swap(buyeruid_, other->buyeruid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopCPP_descriptor_;
  metadata.reflection = ShopCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskCPP::kIdFieldNumber;
const int TaskCPP::kCurtaskvalueFieldNumber;
const int TaskCPP::kCurtaskstarFieldNumber;
const int TaskCPP::kRewardstatusFieldNumber;
#endif  // !_MSC_VER

TaskCPP::TaskCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.TaskCPP)
}

void TaskCPP::InitAsDefaultInstance() {
}

TaskCPP::TaskCPP(const TaskCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.TaskCPP)
}

void TaskCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  curtaskvalue_ = 0u;
  curtaskstar_ = 0u;
  rewardstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskCPP::~TaskCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.TaskCPP)
  SharedDtor();
}

void TaskCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskCPP_descriptor_;
}

const TaskCPP& TaskCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

TaskCPP* TaskCPP::default_instance_ = NULL;

TaskCPP* TaskCPP::New() const {
  return new TaskCPP;
}

void TaskCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaskCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, rewardstatus_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.TaskCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curtaskvalue;
        break;
      }

      // required uint32 curtaskvalue = 2;
      case 2: {
        if (tag == 16) {
         parse_curtaskvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtaskvalue_)));
          set_has_curtaskvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curtaskstar;
        break;
      }

      // required uint32 curtaskstar = 3;
      case 3: {
        if (tag == 24) {
         parse_curtaskstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtaskstar_)));
          set_has_curtaskstar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rewardstatus;
        break;
      }

      // required uint32 rewardstatus = 4;
      case 4: {
        if (tag == 32) {
         parse_rewardstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardstatus_)));
          set_has_rewardstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.TaskCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.TaskCPP)
  return false;
#undef DO_
}

void TaskCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.TaskCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 curtaskvalue = 2;
  if (has_curtaskvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curtaskvalue(), output);
  }

  // required uint32 curtaskstar = 3;
  if (has_curtaskstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curtaskstar(), output);
  }

  // required uint32 rewardstatus = 4;
  if (has_rewardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rewardstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.TaskCPP)
}

::google::protobuf::uint8* TaskCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.TaskCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 curtaskvalue = 2;
  if (has_curtaskvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curtaskvalue(), target);
  }

  // required uint32 curtaskstar = 3;
  if (has_curtaskstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curtaskstar(), target);
  }

  // required uint32 rewardstatus = 4;
  if (has_rewardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rewardstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.TaskCPP)
  return target;
}

int TaskCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 curtaskvalue = 2;
    if (has_curtaskvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtaskvalue());
    }

    // required uint32 curtaskstar = 3;
    if (has_curtaskstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtaskstar());
    }

    // required uint32 rewardstatus = 4;
    if (has_rewardstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskCPP::MergeFrom(const TaskCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_curtaskvalue()) {
      set_curtaskvalue(from.curtaskvalue());
    }
    if (from.has_curtaskstar()) {
      set_curtaskstar(from.curtaskstar());
    }
    if (from.has_rewardstatus()) {
      set_rewardstatus(from.rewardstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskCPP::CopyFrom(const TaskCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TaskCPP::Swap(TaskCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(curtaskvalue_, other->curtaskvalue_);
    std::swap(curtaskstar_, other->curtaskstar_);
    std::swap(rewardstatus_, other->rewardstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskCPP_descriptor_;
  metadata.reflection = TaskCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionCPP::kIdFieldNumber;
const int MissionCPP::kValueFieldNumber;
#endif  // !_MSC_VER

MissionCPP::MissionCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.MissionCPP)
}

void MissionCPP::InitAsDefaultInstance() {
}

MissionCPP::MissionCPP(const MissionCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.MissionCPP)
}

void MissionCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionCPP::~MissionCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.MissionCPP)
  SharedDtor();
}

void MissionCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionCPP_descriptor_;
}

const MissionCPP& MissionCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

MissionCPP* MissionCPP::default_instance_ = NULL;

MissionCPP* MissionCPP::New() const {
  return new MissionCPP;
}

void MissionCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MissionCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.MissionCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.MissionCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.MissionCPP)
  return false;
#undef DO_
}

void MissionCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.MissionCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.MissionCPP)
}

::google::protobuf::uint8* MissionCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.MissionCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.MissionCPP)
  return target;
}

int MissionCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionCPP::MergeFrom(const MissionCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionCPP::CopyFrom(const MissionCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MissionCPP::Swap(MissionCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionCPP_descriptor_;
  metadata.reflection = MissionCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityCPP::kIdFieldNumber;
const int ActivityCPP::kVersionFieldNumber;
const int ActivityCPP::kDataFieldNumber;
#endif  // !_MSC_VER

ActivityCPP::ActivityCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.ActivityCPP)
}

void ActivityCPP::InitAsDefaultInstance() {
}

ActivityCPP::ActivityCPP(const ActivityCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.ActivityCPP)
}

void ActivityCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityCPP::~ActivityCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.ActivityCPP)
  SharedDtor();
}

void ActivityCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityCPP_descriptor_;
}

const ActivityCPP& ActivityCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

ActivityCPP* ActivityCPP::default_instance_ = NULL;

ActivityCPP* ActivityCPP::New() const {
  return new ActivityCPP;
}

void ActivityCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.ActivityCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // required uint32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data;
        break;
      }

      // repeated uint32 data = 3;
      case 3: {
        if (tag == 24) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_data())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.ActivityCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.ActivityCPP)
  return false;
#undef DO_
}

void ActivityCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.ActivityCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // repeated uint32 data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.ActivityCPP)
}

::google::protobuf::uint8* ActivityCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.ActivityCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // repeated uint32 data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.ActivityCPP)
  return target;
}

int ActivityCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated uint32 data = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityCPP::MergeFrom(const ActivityCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityCPP::CopyFrom(const ActivityCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivityCPP::Swap(ActivityCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(version_, other->version_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityCPP_descriptor_;
  metadata.reflection = ActivityCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaidDogCPP::kIdFieldNumber;
const int MaidDogCPP::kValueFieldNumber;
#endif  // !_MSC_VER

MaidDogCPP::MaidDogCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.MaidDogCPP)
}

void MaidDogCPP::InitAsDefaultInstance() {
}

MaidDogCPP::MaidDogCPP(const MaidDogCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.MaidDogCPP)
}

void MaidDogCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaidDogCPP::~MaidDogCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.MaidDogCPP)
  SharedDtor();
}

void MaidDogCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaidDogCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaidDogCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaidDogCPP_descriptor_;
}

const MaidDogCPP& MaidDogCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

MaidDogCPP* MaidDogCPP::default_instance_ = NULL;

MaidDogCPP* MaidDogCPP::New() const {
  return new MaidDogCPP;
}

void MaidDogCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MaidDogCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaidDogCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.MaidDogCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.MaidDogCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.MaidDogCPP)
  return false;
#undef DO_
}

void MaidDogCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.MaidDogCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.MaidDogCPP)
}

::google::protobuf::uint8* MaidDogCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.MaidDogCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.MaidDogCPP)
  return target;
}

int MaidDogCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaidDogCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaidDogCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaidDogCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaidDogCPP::MergeFrom(const MaidDogCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaidDogCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaidDogCPP::CopyFrom(const MaidDogCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaidDogCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MaidDogCPP::Swap(MaidDogCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaidDogCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaidDogCPP_descriptor_;
  metadata.reflection = MaidDogCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendlyTreeBasicCPP::kIdFieldNumber;
const int FriendlyTreeBasicCPP::kOthuidFieldNumber;
const int FriendlyTreeBasicCPP::kNameFieldNumber;
const int FriendlyTreeBasicCPP::kHeadFieldNumber;
const int FriendlyTreeBasicCPP::kTsFieldNumber;
#endif  // !_MSC_VER

FriendlyTreeBasicCPP::FriendlyTreeBasicCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.FriendlyTreeBasicCPP)
}

void FriendlyTreeBasicCPP::InitAsDefaultInstance() {
}

FriendlyTreeBasicCPP::FriendlyTreeBasicCPP(const FriendlyTreeBasicCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.FriendlyTreeBasicCPP)
}

void FriendlyTreeBasicCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  othuid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendlyTreeBasicCPP::~FriendlyTreeBasicCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.FriendlyTreeBasicCPP)
  SharedDtor();
}

void FriendlyTreeBasicCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete head_;
  }
  if (this != default_instance_) {
  }
}

void FriendlyTreeBasicCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendlyTreeBasicCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendlyTreeBasicCPP_descriptor_;
}

const FriendlyTreeBasicCPP& FriendlyTreeBasicCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

FriendlyTreeBasicCPP* FriendlyTreeBasicCPP::default_instance_ = NULL;

FriendlyTreeBasicCPP* FriendlyTreeBasicCPP::New() const {
  return new FriendlyTreeBasicCPP;
}

void FriendlyTreeBasicCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendlyTreeBasicCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, othuid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        head_->clear();
      }
    }
    ts_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendlyTreeBasicCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.FriendlyTreeBasicCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_othuid;
        break;
      }

      // required uint32 othuid = 2;
      case 2: {
        if (tag == 16) {
         parse_othuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_head;
        break;
      }

      // required bytes head = 4;
      case 4: {
        if (tag == 34) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ts;
        break;
      }

      // required uint32 ts = 5;
      case 5: {
        if (tag == 40) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.FriendlyTreeBasicCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.FriendlyTreeBasicCPP)
  return false;
#undef DO_
}

void FriendlyTreeBasicCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.FriendlyTreeBasicCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->othuid(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required bytes head = 4;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->head(), output);
  }

  // required uint32 ts = 5;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.FriendlyTreeBasicCPP)
}

::google::protobuf::uint8* FriendlyTreeBasicCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.FriendlyTreeBasicCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 othuid = 2;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->othuid(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes head = 4;
  if (has_head()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->head(), target);
  }

  // required uint32 ts = 5;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.FriendlyTreeBasicCPP)
  return target;
}

int FriendlyTreeBasicCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 othuid = 2;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes head = 4;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->head());
    }

    // required uint32 ts = 5;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendlyTreeBasicCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendlyTreeBasicCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendlyTreeBasicCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendlyTreeBasicCPP::MergeFrom(const FriendlyTreeBasicCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendlyTreeBasicCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendlyTreeBasicCPP::CopyFrom(const FriendlyTreeBasicCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendlyTreeBasicCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FriendlyTreeBasicCPP::Swap(FriendlyTreeBasicCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(othuid_, other->othuid_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendlyTreeBasicCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendlyTreeBasicCPP_descriptor_;
  metadata.reflection = FriendlyTreeBasicCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopSellCoinCPP::kIdFieldNumber;
const int ShopSellCoinCPP::kValueFieldNumber;
#endif  // !_MSC_VER

ShopSellCoinCPP::ShopSellCoinCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.ShopSellCoinCPP)
}

void ShopSellCoinCPP::InitAsDefaultInstance() {
}

ShopSellCoinCPP::ShopSellCoinCPP(const ShopSellCoinCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.ShopSellCoinCPP)
}

void ShopSellCoinCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopSellCoinCPP::~ShopSellCoinCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.ShopSellCoinCPP)
  SharedDtor();
}

void ShopSellCoinCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopSellCoinCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopSellCoinCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopSellCoinCPP_descriptor_;
}

const ShopSellCoinCPP& ShopSellCoinCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

ShopSellCoinCPP* ShopSellCoinCPP::default_instance_ = NULL;

ShopSellCoinCPP* ShopSellCoinCPP::New() const {
  return new ShopSellCoinCPP;
}

void ShopSellCoinCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopSellCoinCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopSellCoinCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.ShopSellCoinCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.ShopSellCoinCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.ShopSellCoinCPP)
  return false;
#undef DO_
}

void ShopSellCoinCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.ShopSellCoinCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.ShopSellCoinCPP)
}

::google::protobuf::uint8* ShopSellCoinCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.ShopSellCoinCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.ShopSellCoinCPP)
  return target;
}

int ShopSellCoinCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopSellCoinCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopSellCoinCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopSellCoinCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopSellCoinCPP::MergeFrom(const ShopSellCoinCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopSellCoinCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopSellCoinCPP::CopyFrom(const ShopSellCoinCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopSellCoinCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShopSellCoinCPP::Swap(ShopSellCoinCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopSellCoinCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopSellCoinCPP_descriptor_;
  metadata.reflection = ShopSellCoinCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendWorkerCPP::kWorkerUidFieldNumber;
const int FriendWorkerCPP::kWorkerEndTsFieldNumber;
const int FriendWorkerCPP::kWorkerSlotPosFieldNumber;
const int FriendWorkerCPP::kWorkerInvitedTsFieldNumber;
#endif  // !_MSC_VER

FriendWorkerCPP::FriendWorkerCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.FriendWorkerCPP)
}

void FriendWorkerCPP::InitAsDefaultInstance() {
}

FriendWorkerCPP::FriendWorkerCPP(const FriendWorkerCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.FriendWorkerCPP)
}

void FriendWorkerCPP::SharedCtor() {
  _cached_size_ = 0;
  workeruid_ = 0u;
  workerendts_ = 0u;
  workerslotpos_ = 0u;
  workerinvitedts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendWorkerCPP::~FriendWorkerCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.FriendWorkerCPP)
  SharedDtor();
}

void FriendWorkerCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendWorkerCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendWorkerCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendWorkerCPP_descriptor_;
}

const FriendWorkerCPP& FriendWorkerCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

FriendWorkerCPP* FriendWorkerCPP::default_instance_ = NULL;

FriendWorkerCPP* FriendWorkerCPP::New() const {
  return new FriendWorkerCPP;
}

void FriendWorkerCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendWorkerCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(workeruid_, workerinvitedts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendWorkerCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.FriendWorkerCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 workerUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workeruid_)));
          set_has_workeruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_workerEndTs;
        break;
      }

      // required uint32 workerEndTs = 2;
      case 2: {
        if (tag == 16) {
         parse_workerEndTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workerendts_)));
          set_has_workerendts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_workerSlotPos;
        break;
      }

      // required uint32 workerSlotPos = 3;
      case 3: {
        if (tag == 24) {
         parse_workerSlotPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workerslotpos_)));
          set_has_workerslotpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_workerInvitedTs;
        break;
      }

      // optional uint32 workerInvitedTs = 4;
      case 4: {
        if (tag == 32) {
         parse_workerInvitedTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workerinvitedts_)));
          set_has_workerinvitedts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.FriendWorkerCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.FriendWorkerCPP)
  return false;
#undef DO_
}

void FriendWorkerCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.FriendWorkerCPP)
  // required uint32 workerUid = 1;
  if (has_workeruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->workeruid(), output);
  }

  // required uint32 workerEndTs = 2;
  if (has_workerendts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->workerendts(), output);
  }

  // required uint32 workerSlotPos = 3;
  if (has_workerslotpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->workerslotpos(), output);
  }

  // optional uint32 workerInvitedTs = 4;
  if (has_workerinvitedts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->workerinvitedts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.FriendWorkerCPP)
}

::google::protobuf::uint8* FriendWorkerCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.FriendWorkerCPP)
  // required uint32 workerUid = 1;
  if (has_workeruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->workeruid(), target);
  }

  // required uint32 workerEndTs = 2;
  if (has_workerendts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->workerendts(), target);
  }

  // required uint32 workerSlotPos = 3;
  if (has_workerslotpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->workerslotpos(), target);
  }

  // optional uint32 workerInvitedTs = 4;
  if (has_workerinvitedts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->workerinvitedts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.FriendWorkerCPP)
  return target;
}

int FriendWorkerCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 workerUid = 1;
    if (has_workeruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workeruid());
    }

    // required uint32 workerEndTs = 2;
    if (has_workerendts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workerendts());
    }

    // required uint32 workerSlotPos = 3;
    if (has_workerslotpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workerslotpos());
    }

    // optional uint32 workerInvitedTs = 4;
    if (has_workerinvitedts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workerinvitedts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendWorkerCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendWorkerCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendWorkerCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendWorkerCPP::MergeFrom(const FriendWorkerCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_workeruid()) {
      set_workeruid(from.workeruid());
    }
    if (from.has_workerendts()) {
      set_workerendts(from.workerendts());
    }
    if (from.has_workerslotpos()) {
      set_workerslotpos(from.workerslotpos());
    }
    if (from.has_workerinvitedts()) {
      set_workerinvitedts(from.workerinvitedts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendWorkerCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendWorkerCPP::CopyFrom(const FriendWorkerCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendWorkerCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FriendWorkerCPP::Swap(FriendWorkerCPP* other) {
  if (other != this) {
    std::swap(workeruid_, other->workeruid_);
    std::swap(workerendts_, other->workerendts_);
    std::swap(workerslotpos_, other->workerslotpos_);
    std::swap(workerinvitedts_, other->workerinvitedts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendWorkerCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendWorkerCPP_descriptor_;
  metadata.reflection = FriendWorkerCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockPetCPP::kPetidFieldNumber;
const int UnlockPetCPP::kTeaseEndtsFieldNumber;
const int UnlockPetCPP::kNormalEndtsFieldNumber;
const int UnlockPetCPP::kTeaseFlagFieldNumber;
const int UnlockPetCPP::kNameFieldNumber;
#endif  // !_MSC_VER

UnlockPetCPP::UnlockPetCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoUser.UnlockPetCPP)
}

void UnlockPetCPP::InitAsDefaultInstance() {
}

UnlockPetCPP::UnlockPetCPP(const UnlockPetCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoUser.UnlockPetCPP)
}

void UnlockPetCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  petid_ = 0u;
  teaseendts_ = 0u;
  normalendts_ = 0u;
  teaseflag_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockPetCPP::~UnlockPetCPP() {
  // @@protoc_insertion_point(destructor:ProtoUser.UnlockPetCPP)
  SharedDtor();
}

void UnlockPetCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UnlockPetCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockPetCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockPetCPP_descriptor_;
}

const UnlockPetCPP& UnlockPetCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoUser_2eproto();
  return *default_instance_;
}

UnlockPetCPP* UnlockPetCPP::default_instance_ = NULL;

UnlockPetCPP* UnlockPetCPP::New() const {
  return new UnlockPetCPP;
}

void UnlockPetCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnlockPetCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(petid_, teaseflag_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockPetCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoUser.UnlockPetCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_teaseEndts;
        break;
      }

      // required uint32 teaseEndts = 2;
      case 2: {
        if (tag == 16) {
         parse_teaseEndts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teaseendts_)));
          set_has_teaseendts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_normalEndts;
        break;
      }

      // required uint32 normalEndts = 3;
      case 3: {
        if (tag == 24) {
         parse_normalEndts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normalendts_)));
          set_has_normalendts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teaseFlag;
        break;
      }

      // optional uint32 teaseFlag = 4;
      case 4: {
        if (tag == 32) {
         parse_teaseFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teaseflag_)));
          set_has_teaseflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional bytes name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoUser.UnlockPetCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoUser.UnlockPetCPP)
  return false;
#undef DO_
}

void UnlockPetCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoUser.UnlockPetCPP)
  // required uint32 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->petid(), output);
  }

  // required uint32 teaseEndts = 2;
  if (has_teaseendts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teaseendts(), output);
  }

  // required uint32 normalEndts = 3;
  if (has_normalendts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->normalendts(), output);
  }

  // optional uint32 teaseFlag = 4;
  if (has_teaseflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teaseflag(), output);
  }

  // optional bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoUser.UnlockPetCPP)
}

::google::protobuf::uint8* UnlockPetCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoUser.UnlockPetCPP)
  // required uint32 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->petid(), target);
  }

  // required uint32 teaseEndts = 2;
  if (has_teaseendts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teaseendts(), target);
  }

  // required uint32 normalEndts = 3;
  if (has_normalendts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->normalendts(), target);
  }

  // optional uint32 teaseFlag = 4;
  if (has_teaseflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teaseflag(), target);
  }

  // optional bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoUser.UnlockPetCPP)
  return target;
}

int UnlockPetCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petid());
    }

    // required uint32 teaseEndts = 2;
    if (has_teaseendts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teaseendts());
    }

    // required uint32 normalEndts = 3;
    if (has_normalendts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normalendts());
    }

    // optional uint32 teaseFlag = 4;
    if (has_teaseflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teaseflag());
    }

    // optional bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockPetCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockPetCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockPetCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockPetCPP::MergeFrom(const UnlockPetCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_teaseendts()) {
      set_teaseendts(from.teaseendts());
    }
    if (from.has_normalendts()) {
      set_normalendts(from.normalendts());
    }
    if (from.has_teaseflag()) {
      set_teaseflag(from.teaseflag());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockPetCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockPetCPP::CopyFrom(const UnlockPetCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockPetCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UnlockPetCPP::Swap(UnlockPetCPP* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(teaseendts_, other->teaseendts_);
    std::swap(normalendts_, other->normalendts_);
    std::swap(teaseflag_, other->teaseflag_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockPetCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockPetCPP_descriptor_;
  metadata.reflection = UnlockPetCPP_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoUser

// @@protoc_insertion_point(global_scope)
